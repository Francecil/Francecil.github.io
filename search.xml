<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>面试官问：如何利用 random 计算 π</title>
    <url>/2020/05/07/2020/%E9%9D%A2%E8%AF%95%E5%AE%98%E9%97%AE%EF%BC%9A%E5%A6%82%E4%BD%95%E5%88%A9%E7%94%A8%20random%20%E8%AE%A1%E7%AE%97%20%CF%80/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这是基友面试 RingCenter 时被问到的一个题目</p>
<p>表面上考察的是概率论等基础知识，实际可能还会问到事件循环等底层知识，以及 React Fiber</p>
<a id="more"></a>

<h2 id="蒙特卡洛法求-π"><a href="#蒙特卡洛法求-π" class="headerlink" title="蒙特卡洛法求 π"></a>蒙特卡洛法求 π</h2><p>说蒙特卡洛可能不太理解，换个说法 – 随机抽样</p>
<p>构造一个单位正方形和 1/4 单位圆，往单位正方形中投入点，根据点与原点间的距离判断点是落在圆内还是圆外，分别统计落在两个区域的点的个数 n1,n2 ，<code>n1/(n1+n2)</code> 即 1/4 圆的面积估计值，从而求得 π</p>
<p><img src="https://img-blog.csdn.net/20180121211732625?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvRGFuaWVsOTYwNjAx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="引自 CSDN/Daniel960601"></p>
<p>以下是 js 代码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">inCicle</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> x = <span class="built_in">Math</span>.random();</span><br><span class="line">  <span class="keyword">var</span> y = <span class="built_in">Math</span>.random();</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Math</span>.pow(x, <span class="number">2</span>) + <span class="built_in">Math</span>.pow(y, <span class="number">2</span>) &lt; <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">calcPi</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> N = <span class="number">1e+6</span></span><br><span class="line">  <span class="keyword">let</span> pointsInside = <span class="number">0</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;N;i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(inCicle())&#123;</span><br><span class="line">      pointsInside++;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">4</span> * pointsInside / N</span><br><span class="line">&#125;</span><br><span class="line">calcPi()</span><br></pre></td></tr></table></figure>

<p>直接在控制台运行，会发现有卡顿和掉帧发生，下面我们来谈谈如何解决</p>
<h2 id="如何避免主线程阻塞"><a href="#如何避免主线程阻塞" class="headerlink" title="如何避免主线程阻塞"></a>如何避免主线程阻塞</h2><p>calcPi 是个耗时任务，会阻塞主线程，甚至导致掉帧，有什么解决方法？</p>
<p>提供几个思路</p>
<ol>
<li>Web Worker</li>
<li>requestIdleCallback</li>
<li>requestAnimationFrame + MessageChannel</li>
</ol>
<h3 id="Web-Worker"><a href="#Web-Worker" class="headerlink" title="Web Worker"></a>Web Worker</h3><p>Web Worker 是啥就不再介绍了，不懂的自行 MDN 搜索</p>
<p>我们新建一个 Worker 线程进行耗时任务计算，而后再把结果发送给主线程</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createWorker</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> text = <span class="string">`</span></span><br><span class="line"><span class="string">  function inCicle() &#123;</span></span><br><span class="line"><span class="string">    var x = Math.random();</span></span><br><span class="line"><span class="string">    var y = Math.random();</span></span><br><span class="line"><span class="string">    return Math.pow(x, 2) + Math.pow(y, 2) &lt; 1</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">  function calcPi() &#123;</span></span><br><span class="line"><span class="string">    const N = 1e+6</span></span><br><span class="line"><span class="string">    let pointsInside = 0</span></span><br><span class="line"><span class="string">    for(let i=0;i&lt;N;i++)&#123;</span></span><br><span class="line"><span class="string">      if(inCicle())&#123;</span></span><br><span class="line"><span class="string">        pointsInside++;</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    return 4 * pointsInside / N</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">  this.addEventListener('message', (msg) =&gt; &#123;</span></span><br><span class="line"><span class="string">    let pi = calcPi()</span></span><br><span class="line"><span class="string">    this.postMessage(pi);</span></span><br><span class="line"><span class="string">  &#125;, false);</span></span><br><span class="line"><span class="string">  `</span></span><br><span class="line">  <span class="keyword">let</span> blob = <span class="keyword">new</span> Blob([text]);</span><br><span class="line">  <span class="keyword">let</span> url = <span class="built_in">window</span>.URL.createObjectURL(blob);</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> Worker(url)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> worker = createWorker()</span><br><span class="line">worker.onmessage = <span class="function">(<span class="params">evt</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'PI: '</span>, evt.data)</span><br><span class="line">&#125;;</span><br><span class="line">worker.postMessage(<span class="string">"calc"</span>);</span><br></pre></td></tr></table></figure>

<p>缺点就是计算次数是固定的，同时不能看到实时计算的结果</p>
<h3 id="requestIdleCallback"><a href="#requestIdleCallback" class="headerlink" title="requestIdleCallback"></a>requestIdleCallback</h3><p>利用 <a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/requestIdleCallback" target="_blank" rel="noopener">requestIdleCallback</a> 在帧空余时间执行任务的特点进行耗时任务的计算</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;title&gt;Scheduling background tasks using requestIdleCallback&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    <span class="keyword">var</span> requestId = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">var</span> pointsTotal = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">var</span> pointsInside = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">piStep</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> r = <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">var</span> x = <span class="built_in">Math</span>.random() * r;</span><br><span class="line">      <span class="keyword">var</span> y = <span class="built_in">Math</span>.random() * r;</span><br><span class="line">      <span class="keyword">return</span> (<span class="built_in">Math</span>.pow(x, <span class="number">2</span>) + <span class="built_in">Math</span>.pow(y, <span class="number">2</span>) &lt; <span class="built_in">Math</span>.pow(r, <span class="number">2</span>))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">refinePi</span>(<span class="params">deadline</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">while</span> (deadline.timeRemaining() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (piStep())</span><br><span class="line">          pointsInside++;</span><br><span class="line">        pointsTotal++;</span><br><span class="line">      &#125;</span><br><span class="line">      currentEstimate = (<span class="number">4</span> * pointsInside / pointsTotal);</span><br><span class="line">      textElement = <span class="built_in">document</span>.getElementById(<span class="string">"piEstimate"</span>);</span><br><span class="line">      textElement.innerHTML = <span class="string">"Pi Estimate: "</span> + currentEstimate;</span><br><span class="line">      requestId = <span class="built_in">window</span>.requestIdleCallback(refinePi);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">start</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      textElement = <span class="built_in">document</span>.getElementById(<span class="string">"piEstimate"</span>);</span><br><span class="line">      textElement.innerHTML = <span class="string">"Pi Estimate: "</span> + <span class="string">"loading"</span>;</span><br><span class="line">      requestId = <span class="built_in">window</span>.requestIdleCallback(refinePi);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">stop</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="comment">// alert(1)</span></span><br><span class="line">      <span class="keyword">if</span> (requestId)</span><br><span class="line">        <span class="built_in">window</span>.cancelIdleCallback(requestId);</span><br><span class="line">      requestId = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">  &lt;button onclick="start()"&gt;Click me to start!&lt;/</span>button&gt;</span><br><span class="line">  &lt;button onclick=<span class="string">"stop()"</span>&gt;Click me to stop!<span class="xml"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">  &lt;div id=<span class="string">"piEstimate"</span>&gt;Not started&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br><span class="line"></span><br><span class="line">&lt;<span class="regexp">/html&gt;</span></span><br></pre></td></tr></table></figure>


<p>几个要点</p>
<ol>
<li>requestIdleCallback 中进行的 dom 变更，只能在下一帧的 Update Rendering 阶段进行渲染<blockquote>
<p>stop 时 piEstimate innerHTML 帧渲染前后不一致</p>
</blockquote>
</li>
<li>requestIdleCallback 有兼容性问题，常用 requestAnimationFrame 和 MessageChannel 去 fallback</li>
</ol>
<h3 id="requestAnimationFrame-MessageChannel"><a href="#requestAnimationFrame-MessageChannel" class="headerlink" title="requestAnimationFrame + MessageChannel"></a>requestAnimationFrame + MessageChannel</h3><p>requestAnimationFrame 将在事件循环中 <a href="https://html.spec.whatwg.org/multipage/webappapis.html#update-the-rendering" target="_blank" rel="noopener">UI Render 阶段</a>的实际渲染前执行，可以简单理解为帧渲染初期</p>
<p>MessageChannel 用来收发消息开启一个宏任务，相比 setTimeout 可以更快执行（4ms的原因）</p>
<p>我们在 requestAnimationFrame 设置一个标记时间点 markPoint ，并通过 MessageChannel 发起一个宏任务，设置该宏任务的过期时间为 markPoint + timeout(16ms) ，超过这个时间，任务不再执行</p>
<p>这样可以保证宏任务不会因为执行太久导致卡顿和掉帧</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;title&gt;Scheduling background tasks using requestIdleCallback&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    <span class="keyword">const</span> timeout = <span class="number">16</span> <span class="comment">// 默认一帧为16ms</span></span><br><span class="line">    <span class="keyword">var</span> requestId = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">var</span> pointsTotal = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">var</span> pointsInside = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> currentTask = &#123;</span><br><span class="line">      startTime: <span class="number">0</span>,</span><br><span class="line">      endTime: <span class="number">0</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> channel = <span class="keyword">new</span> MessageChannel();</span><br><span class="line">    <span class="keyword">var</span> sender = channel.port2; <span class="comment">// port2 用来发消息</span></span><br><span class="line">    channel.port1.onmessage = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (performance.now() &gt; currentTask.endTime) &#123;</span><br><span class="line">        <span class="comment">// 可能是插入了其他宏任务导致该任务过期，直接 rAF</span></span><br><span class="line">        requestId = requestAnimationFrame(markPoint)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">      &#125;</span><br><span class="line">      refinePi(currentTask.endTime)</span><br><span class="line">      requestId = requestAnimationFrame(markPoint)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">piStep</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> r = <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">var</span> x = <span class="built_in">Math</span>.random() * r;</span><br><span class="line">      <span class="keyword">var</span> y = <span class="built_in">Math</span>.random() * r;</span><br><span class="line">      <span class="keyword">return</span> (<span class="built_in">Math</span>.pow(x, <span class="number">2</span>) + <span class="built_in">Math</span>.pow(y, <span class="number">2</span>) &lt; <span class="built_in">Math</span>.pow(r, <span class="number">2</span>))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">refinePi</span>(<span class="params">deadline</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">while</span> (performance.now() &lt; deadline) &#123;</span><br><span class="line">        <span class="keyword">if</span> (piStep()) &#123;</span><br><span class="line">          pointsInside++;</span><br><span class="line">        &#125;</span><br><span class="line">        pointsTotal++;</span><br><span class="line">      &#125;</span><br><span class="line">      currentEstimate = (<span class="number">4</span> * pointsInside / pointsTotal);</span><br><span class="line">      textElement = <span class="built_in">document</span>.getElementById(<span class="string">"piEstimate"</span>);</span><br><span class="line">      textElement.innerHTML = <span class="string">"Pi Estimate: "</span> + currentEstimate;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">markPoint</span>(<span class="params">timestamp</span>) </span>&#123;</span><br><span class="line">      currentTask.startTime = timestamp</span><br><span class="line">      currentTask.endTime = timestamp + timeout</span><br><span class="line">      <span class="comment">// 下轮宏任务</span></span><br><span class="line">      sender.postMessage(<span class="string">""</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">start</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      requestId = requestAnimationFrame(markPoint)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">stop</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="comment">// alert(1)</span></span><br><span class="line">      <span class="keyword">if</span> (requestId)</span><br><span class="line">        <span class="built_in">window</span>.cancelAnimationFrame(requestId);</span><br><span class="line">      requestId = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">handle</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">let</span> start = performance.now()</span><br><span class="line">      <span class="keyword">while</span> (performance.now() - start &lt; <span class="number">100</span>) &#123; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">  &lt;button onclick="start()"&gt;Click me to start!&lt;/</span>button&gt;</span><br><span class="line">  &lt;button onclick=<span class="string">"stop()"</span>&gt;Click me to stop!<span class="xml"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">  &lt;button onclick=<span class="string">"handle()"</span>&gt;执行耗时任务，观察 PI 的计算情况&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">  &lt;div id="piEstimate"&gt;Not started&lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="regexp">/body&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;/</span>html&gt;</span><br></pre></td></tr></table></figure>

<p><a href="https://jsfiddle.net/bdsyf50c/" target="_blank" rel="noopener">在线测试</a></p>
<h2 id="拓展阅读"><a href="#拓展阅读" class="headerlink" title="拓展阅读"></a>拓展阅读</h2><ol>
<li><a href="https://www.w3.org/TR/requestidlecallback/" target="_blank" rel="noopener">Cooperative Scheduling of Background Tasks</a></li>
<li><a href="https://github.com/facebook/react/tree/master/packages/scheduler" target="_blank" rel="noopener">react-scheduler</a></li>
</ol>
]]></content>
      <categories>
        <category>大前端</category>
      </categories>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>2020/浅谈 React Fiber</title>
    <url>/2020/05/01/2020/%E6%B5%85%E8%B0%88%20React%20Fiber/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>看了很多关于 React Fiber 的文章，大概就是这样一个意思</p>
<p>React Fiber 避免了同步渲染所有组件导致主线程卡顿，现在会根据优先级去渲染</p>
<p>可能还会放弃之前已经渲染到一半的虚拟 dom</p>
]]></content>
  </entry>
  <entry>
    <title>面试官问：怎么避免函数调用栈溢出</title>
    <url>/2020/04/14/2020/%E9%9D%A2%E8%AF%95%E5%AE%98%E9%97%AE%EF%BC%9A%E6%80%8E%E4%B9%88%E9%81%BF%E5%85%8D%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%E6%A0%88%E6%BA%A2%E5%87%BA/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>基友最近遇到的一道面试题</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * 输出 n-&gt;0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">n</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(n)</span><br><span class="line">  <span class="keyword">if</span>(n &gt; <span class="number">0</span>)&#123;</span><br><span class="line">    foo(n - <span class="number">1</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">foo(<span class="number">100000</span>)</span><br><span class="line"><span class="comment">// 请问输出什么</span></span><br></pre></td></tr></table></figure>

<p>答案很简单，栈溢出呗。解决方法也很简单，递归改迭代咯。</p>
<p>正常来说，这个问题就应该结束了。。那要是面试官再这样问你 –</p>
<a id="more"></a>

<h2 id="那你知道函数执行栈的上限么"><a href="#那你知道函数执行栈的上限么" class="headerlink" title="那你知道函数执行栈的上限么"></a>那你知道函数执行栈的上限么</h2><p>在没看过 v8 配置的情况下可以这样测试</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">c</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span> + c()</span><br><span class="line">  &#125; <span class="keyword">catch</span>(e)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">c()</span><br></pre></td></tr></table></figure>
<p>测试结果：</p>
<ul>
<li>win7x64 chrome74：25173</li>
<li>win7x64 chrome81: 12571</li>
<li>mbp chrome80: 12547</li>
<li>mbp chrome81: 12540</li>
<li>mbp Safari13: 36244</li>
</ul>
<p>可以发现，不同的执行引擎，执行引擎的不同版本，不同的设备配置都会影响栈的深度</p>
<p>在明白这点之后我们再看这个例子</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">c</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">10000</span>).fill(<span class="number">1</span>)</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> res = c() + arr[<span class="number">999</span>]</span><br><span class="line">    <span class="comment">// 无用代码</span></span><br><span class="line">    <span class="keyword">if</span>(res &lt; <span class="number">0</span>)&#123;</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;arr.length;i++)&#123;</span><br><span class="line">        res+=arr[i]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">  &#125; <span class="keyword">catch</span>(e)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">c()</span><br></pre></td></tr></table></figure>
<p>在 win7x64 chrome81 得到的结果为： 9669</p>
<p>可以发现，调用栈的深度取决于调用函数的函数体大小和本地变量的个数</p>
<p>由于栈的容量(size)是固定的，其实更应该关注栈的容量，而不是栈的深度</p>
<p>在 Node.js 中，可以通过以下命令查看栈的容量</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ node --v8-options | grep stack-size -A 1</span><br><span class="line">  --stack-size (default size of stack region v8 is allowed to use (<span class="keyword">in</span> kBytes))</span><br><span class="line">        <span class="built_in">type</span>: int  default: 984</span><br><span class="line">--</span><br><span class="line">  --sim-stack-size (Stack size of the ARM64, MIPS64 and PPC64 simulator <span class="keyword">in</span> kByte</span><br><span class="line">s (default is 2 MB))</span><br><span class="line">        <span class="built_in">type</span>: int  default: 2048</span><br></pre></td></tr></table></figure>
<p>win7x64 和 mbp 的 Node.js 12 输出均一致，默认栈大小为 984KB</p>
<p>我们可以在运行时指定栈的大小来防止栈溢出，还是上面那个例子，在 node.js 上测试：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">n</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(n &gt; <span class="number">0</span>)&#123;</span><br><span class="line">    foo(n - <span class="number">1</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">foo(<span class="number">20000</span>)</span><br></pre></td></tr></table></figure>
<p>直接执行 <code>node a.js</code> 会栈溢出，但是</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">node --stack-size&#x3D;1968 a.js</span><br></pre></td></tr></table></figure>
<p>则不会。</p>
<p>总的来说，在日常开发中，如果有数千的递归，就需要考虑重写优化了，否则有些平台将导致错误</p>
<h2 id="听过尾调用和尾递归么"><a href="#听过尾调用和尾递归么" class="headerlink" title="听过尾调用和尾递归么"></a>听过尾调用和尾递归么</h2><p>尾调用即在函数的最后一步调用另一个函数，而尾递归则是函数的最后一步调用自身</p>
<p>注意，最后一步需要是单个函数调用，以下代码均不是尾调用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> t = b()</span><br><span class="line">  <span class="keyword">return</span> t</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  c()</span><br><span class="line">  <span class="comment">// 等效于</span></span><br><span class="line">  <span class="comment">// return undefined</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">c</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> d() + <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用尾调用和尾递归，可以避免中间无用的上下文（调用帧），仅保留最外层和当前层，避免栈溢出</p>
<h2 id="题目要采用尾递归解决，怎么改"><a href="#题目要采用尾递归解决，怎么改" class="headerlink" title="题目要采用尾递归解决，怎么改"></a>题目要采用尾递归解决，怎么改</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">n</span>)</span>&#123;</span><br><span class="line"><span class="meta">  'use strict'</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(n)</span><br><span class="line">  <span class="keyword">if</span>(n &gt; <span class="number">0</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> foo(n - <span class="number">1</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>ES6 的尾调用优化只在严格模式下开启，主要原因在于正常模式下函数有两个变量可以跟踪函数的调用栈</p>
<ul>
<li>func.arguments：返回调用时函数的参数</li>
<li>func.caller：返回调用当前函数的那个函数<br>这两个变量在尾调用优化上的值与未优化的情况不一致，而严格模式下这两个变量是禁用的，这样可以保证调用栈的正确性</li>
</ul>
<h2 id="浏览器的兼容性怎么样"><a href="#浏览器的兼容性怎么样" class="headerlink" title="浏览器的兼容性怎么样"></a>浏览器的兼容性怎么样</h2><p>如果把上面那段代码放在 chrome 控制台执行，还是会报栈溢出。</p>
<p>我们可以看下<a href="http://kangax.github.io/compat-table/es6/" target="_blank" rel="noopener">尾调用优化的兼容性</a></p>
<p>可以看到主流浏览器基本上只有 Safari 支持，把上述那段代码放 Safari 上测试了下是可以通过的</p>
<p>所以在浏览器环境，还是不是想着利用尾递归来解决问题</p>
<h2 id="Node-js-能使用尾递归么"><a href="#Node-js-能使用尾递归么" class="headerlink" title="Node.js 能使用尾递归么"></a>Node.js 能使用尾递归么</h2><p>在 node 6,7 可以通过 <code>--harmony-tailcalls</code> 开启，而在 8 之后删掉了这个选项。</p>
<p>所以可以理解为 Node.js 不支持尾递归</p>
<h2 id="尾递归看着这么好，为什么这么多执行引擎不支持？"><a href="#尾递归看着这么好，为什么这么多执行引擎不支持？" class="headerlink" title="尾递归看着这么好，为什么这么多执行引擎不支持？"></a>尾递归看着这么好，为什么这么多执行引擎不支持？</h2><p>关于这个问题，V8 的<a href="https://v8.dev/blog/modern-javascript" target="_blank" rel="noopener">这篇文章</a>给出了答案</p>
<p>概括如下</p>
<h3 id="1-隐式优化问题"><a href="#1-隐式优化问题" class="headerlink" title="1. 隐式优化问题"></a>1. 隐式优化问题</h3><p>引擎消除尾调用是隐式的，程序员很难确定哪些函数实际上位于尾部调用位置，这导致了程序员在编码时得不断的调试才能写出正确的尾递归方法。</p>
<h3 id="2-栈帧丢失"><a href="#2-栈帧丢失" class="headerlink" title="2. 栈帧丢失"></a>2. 栈帧丢失</h3><p>尾调用会清除中间执行栈帧，导致 error.stack 中包含的有关执行流程的信息较少，进而影响依赖调用堆栈信息的调试和错误收集过程</p>
<h2 id="STC-了解么？"><a href="#STC-了解么？" class="headerlink" title="STC 了解么？"></a>STC 了解么？</h2><p>STC 是为了解决尾调用优化不受开发者控制的问题，通过新的语法糖显式指定尾调用，比如 <code>return continue foo(n-1)</code></p>
<p>在非尾调用的场景下使用该语法糖则会报错</p>
<p>具体的可以看 <a href="https://github.com/tc39/proposal-ptc-syntax/blob/master/README.md" target="_blank" rel="noopener">tc39 - proposal-ptc-syntax</a></p>
<hr>
<h2 id="拓展阅读"><a href="#拓展阅读" class="headerlink" title="拓展阅读"></a>拓展阅读</h2><ul>
<li><a href="https://zhuanlan.zhihu.com/p/46993552" target="_blank" rel="noopener">深入理解 V8 的 Call Stack</a></li>
<li><a href="https://imweb.io/topic/5a244260a192c3b460fce275" target="_blank" rel="noopener">尾递归的后续探究</a></li>
<li><a href="https://es6.ruanyifeng.com/#docs/function#%E5%B0%BE%E8%B0%83%E7%94%A8%E4%BC%98%E5%8C%96" target="_blank" rel="noopener">尾调用优化</a></li>
</ul>
]]></content>
      <categories>
        <category>大前端</category>
      </categories>
      <tags>
        <tag>ECMAScript</tag>
        <tag>面试题</tag>
      </tags>
  </entry>
  <entry>
    <title>把网站添加到桌面，「爱奇艺网页应用」是如何实现的</title>
    <url>/2020/04/12/2020/%E6%8A%8A%E7%BD%91%E7%AB%99%E6%B7%BB%E5%8A%A0%E5%88%B0%E6%A1%8C%E9%9D%A2%EF%BC%8C%E3%80%8C%E7%88%B1%E5%A5%87%E8%89%BA%E7%BD%91%E9%A1%B5%E5%BA%94%E7%94%A8%E3%80%8D%E6%98%AF%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E7%9A%84/</url>
    <content><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>希望网站提供一个「添加网页应用」功能，点击安装后，自动为用户创建一个网站的桌面快捷方式。</p>
<p>下次用户直接从桌面快捷方式，即可访问我们的网站</p>
<p><img src="https://upload-images.jianshu.io/upload_images/9277731-20ffae80eca4d59d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="iqiyi.png"></p>
<!--moore-->

<h2 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h2><h3 id="1-Chrome-App"><a href="#1-Chrome-App" class="headerlink" title="1. Chrome App"></a>1. Chrome App</h3><p>在线安装（由于网络原因不太可行，而且如今已经没有入口了） or 离线下载</p>
<p>举几个熟悉的 Chrome 应用：微信、Postman 。可以理解为一个独立的新应用了，和网站本身没有任何关系，因此可拓展性也较高。</p>
<p>曾经较为流行，由于各种原因，chrome 将不再支持（目前只支持更新，不再上新），所以该方案放弃</p>
<p>详见 <a href="https://blog.chromium.org/2020/01/moving-forward-from-chrome-apps.html" target="_blank" rel="noopener">https://blog.chromium.org/2020/01/moving-forward-from-chrome-apps.html</a></p>
<h3 id="2-Progressive-Web-App-（PWA）"><a href="#2-Progressive-Web-App-（PWA）" class="headerlink" title="2. Progressive Web App （PWA）"></a>2. Progressive Web App （PWA）</h3><p>即 <a href="https://developer.mozilla.org/zh-CN/docs/Web/Progressive_web_apps/Introduction" target="_blank" rel="noopener">渐进式 Web 应用</a>，这不是一个单独的技术，而是多种技术的组合，包括</p>
<ul>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/Manifest" target="_blank" rel="noopener">Web app manifests</a>: 通过 JSON 提供应用程序相关信息，目的是将应用程序安装到设备桌面</li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API" target="_blank" rel="noopener">Service Worker</a>: 充当浏览器与服务端间的网络代理，提供离线访问能力</li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/API/Push_API" target="_blank" rel="noopener">Push API</a>: 从服务器向客户端推送消息，需要借助 service worker</li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/API/Notifications_API" target="_blank" rel="noopener">Notifications API</a>: 允许网页或应用程序在系统级别发送在页面外部显示的通知</li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/Progressive_web_apps/Add_to_home_screen" target="_blank" rel="noopener">Add to Home Screen</a>: 将应用程序安装到设备桌面的关键，需要浏览器支持 beforeinstallprompt 事件</li>
</ul>
<p>不要被上述技术栈吓到。。如果只是为了实现 「把网站添加到桌面」功能，仅需要 <code>Web app manifests</code>, <code>Add to Home Screen</code> , <code>Service Worker</code> . 5分钟就可以开发好</p>
<h2 id="功能实现"><a href="#功能实现" class="headerlink" title="功能实现"></a>功能实现</h2><p>首先需要说明的是，我们的网站必须运行在 https 环境。所以开发测试的时候可以用 <code>github.io</code> 白嫖</p>
<p>大体流程如下：</p>
<ol>
<li>编写一个简单的 HTML 页面<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>A2HS demo<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">      <span class="selector-class">.add-button</span> &#123;</span></span><br><span class="line">        position: absolute;</span><br><span class="line">        top: 1px;</span><br><span class="line">        left: 1px;</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"index.js"</span> <span class="attr">defer</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"manifest"</span> <span class="attr">href</span>=<span class="string">"manifest.webmanifest"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>测试文本<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"add-button"</span>&gt;</span>添加到桌面<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>编写一份 <code>Web app manifests</code> JSON(后面会详细讲解各个字段) ,命名为 <code>manifest.webmanifest</code> <a href="https://developer.mozilla.org/en-US/docs/Web/Progressive_web_apps/Add_to_home_screen#Manifest" target="_blank" rel="noopener">?</a></li>
</ol>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"background_color"</span>: <span class="string">"purple"</span>,</span><br><span class="line">  <span class="attr">"display"</span>: <span class="string">"fullscreen"</span>,</span><br><span class="line">  <span class="attr">"icons"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"src"</span>: <span class="string">"icon/fox-icon.png"</span>,</span><br><span class="line">      <span class="attr">"sizes"</span>: <span class="string">"192x192"</span>,</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"image/png"</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"xx快捷版"</span>,</span><br><span class="line">  <span class="attr">"short_name"</span>: <span class="string">"快"</span>,</span><br><span class="line">  <span class="attr">"start_url"</span>: <span class="string">"."</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>注册安装事件 </li>
</ol>
<p>index.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> deferredPrompt;</span><br><span class="line"><span class="comment">// 默认不展示按钮，仅支持 「Add to Home Screen」 功能才展现</span></span><br><span class="line"><span class="keyword">const</span> addBtn = <span class="built_in">document</span>.querySelector(<span class="string">'.add-button'</span>);</span><br><span class="line">addBtn.style.display = <span class="string">'none'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 规定必须注册 serviceWorker 才能使用 Add to Home Screen，</span></span><br><span class="line"><span class="comment">// 且需要监听 install 和 fetch 事件，可以不处理</span></span><br><span class="line"><span class="keyword">if</span>(<span class="string">'serviceWorker'</span> <span class="keyword">in</span> navigator) &#123;</span><br><span class="line">  navigator.serviceWorker</span><br><span class="line">           .register(<span class="string">'./sw.js'</span>)</span><br><span class="line">           .then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="built_in">console</span>.log(<span class="string">'Service Worker Registered'</span>); &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 仅浏览器支持且未安装该应用，以下事件才会触发</span></span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'beforeinstallprompt'</span>, (e) =&gt; &#123;</span><br><span class="line">  <span class="comment">// Chrome 67 及之前版本，会自动展现安装的 prompt</span></span><br><span class="line">  <span class="comment">// 为了版本统一及用户体验，我们禁止自动展现 prompt</span></span><br><span class="line">  e.preventDefault();</span><br><span class="line">  <span class="comment">// 存放事件用于后续触发</span></span><br><span class="line">  deferredPrompt = e;</span><br><span class="line">  <span class="comment">// 展现按钮</span></span><br><span class="line">  addBtn.style.display = <span class="string">'block'</span>;</span><br><span class="line"></span><br><span class="line">  addBtn.addEventListener(<span class="string">'click'</span>, (e) =&gt; &#123;</span><br><span class="line">    <span class="comment">// hide our user interface that shows our A2HS button</span></span><br><span class="line">    addBtn.style.display = <span class="string">'none'</span>;</span><br><span class="line">    <span class="comment">// 展现安装的 prompt</span></span><br><span class="line">    deferredPrompt.prompt();</span><br><span class="line">    <span class="comment">// 等待用户对 prompt 进行操作</span></span><br><span class="line">    <span class="comment">// 如果用户从地址栏或其他浏览器组件安装了PWA，则以下代码将不起作用 </span></span><br><span class="line">    deferredPrompt.userChoice.then(<span class="function">(<span class="params">choiceResult</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (choiceResult.outcome === <span class="string">'accepted'</span>) &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">'点击添加'</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">'取消添加'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        deferredPrompt = <span class="literal">null</span>;</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 无论以何种方式安装 PWA 该事件都会触发</span></span><br><span class="line"><span class="comment">// 因此这里可以用来做埋点</span></span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'appinstalled'</span>, (evt) =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'应用安装'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>编写 sw 文件</li>
</ol>
<p>sw.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">self.addEventListener(<span class="string">'install'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'install success'</span>)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">self.addEventListener(<span class="string">'fetch'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(e.request.url);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>最后，准备一个 icon ，见 <code>manifest.webmanifest</code> 中的 icons 配置</li>
</ol>
<p>之后，就可以体验这个功能了 </p>
<h3 id="在线示例"><a href="#在线示例" class="headerlink" title="在线示例"></a>在线示例</h3><p><a href="https://fe-examples.github.io/pwa-examples/a2hs/" target="_blank" rel="noopener">https://fe-examples.github.io/pwa-examples/a2hs/</a></p>
<p>如果浏览器支持 ,页面左上角将展现 「添加到桌面」按钮</p>
<p>欢迎试用，并把操作系统、浏览器型号发在评论区，看看兼容性如何~</p>
<h3 id="Web-app-manifests-相关配置"><a href="#Web-app-manifests-相关配置" class="headerlink" title="Web app manifests 相关配置"></a>Web app manifests 相关配置</h3><p>这里只举常用的，更多详见 <a href="https://w3c.github.io/manifest/#webappmanifest-dictionary" target="_blank" rel="noopener">WebAppManifest</a></p>
<ul>
<li>background_color: 应用启动时资源未加载时展示的背景色。仅用于改善加载时的用户体验，不影响后续网站背景。</li>
<li>theme_color: 主题色，相当于显式的设置 <code>&lt;meta name=&quot;theme-color&quot; content=&quot;颜色值&quot;&gt;</code> ,将会影响浏览器外观颜色的展现。</li>
<li>display: 指定如何显示应用。有以下几种取值，在不支持的情况下按从上往下顺序 fallback<ul>
<li>fullscreen: 占用所有可用显示区域，无任何浏览器 UI 元素。不影响 Fullscreen API</li>
<li>standalone: 类似本机应用程序。排除地址栏，但是可能包含状态栏和系统后退按钮</li>
<li>minimal-ui: 相比 <code>standalone</code> 增加了导航控件（后退，前进，刷新）等 UI 元素</li>
<li>browser: 等同于打开标签页。需要注意的是， browser 是兜底方式且仅部分浏览器支持，如果浏览器还不支持，整份配置将无效<blockquote>
<p>Macos chrome 下测试 2 和 1 显示一致，不支持 4</p>
</blockquote>
</li>
</ul>
</li>
<li>icons: 指定在不同位置时采用的图标，主要是根据 sizes 字段来判断。相比移动端 APP 的 icon ，PWA 多了桌面位置、Chrome 应用入口位置。至少指定一个 icon</li>
<li>name/short_name: 前者为完整的应用名称，后者为当没有足够空间显示全名时才展示。最好两者都提供</li>
<li>start_url: 应用启动时所加载的 URL 。其值为相对于 manifest 的 url 的相对路径<blockquote>
<p>例如 manifest URL 为 <code>https://www.iqiyi.com/manifest.json</code> ; start_url 为 <code>./index.html</code> ，则启动地址为 <code>https://www.iqiyi.com/index.html</code> 。而 start_url 为 <code>.</code> 启动地址就是 <code>https://www.iqiyi.com/</code> <br>还有更多的骚操作，比如把 uuid 或者 launcher 方式带在 <code>start_url</code> 后面（ <code>./?launcher=homescreen&amp;uuid=xxxx</code>），有助于用户分析</p>
</blockquote>
</li>
</ul>
<p>singleton</p>
<p><img src="https://upload-images.jianshu.io/upload_images/9277731-57ee6b2f8bbbbb7a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="singleton"></p>
<p>minimal-ui<br><img src="https://upload-images.jianshu.io/upload_images/9277731-dd9fcf46d8a2642c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="minimal-ui"></p>
<h3 id="根据不同的启动方式应用不同样式"><a href="#根据不同的启动方式应用不同样式" class="headerlink" title="根据不同的启动方式应用不同样式"></a>根据不同的启动方式应用不同样式</h3><p>比如说，PWA 背景色应用红色，普通 Tab 应用白色，该如何实现呢？</p>
<p>可以采用 CSS 的媒体查询</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@media</span> all <span class="keyword">and</span> (<span class="attribute">display-mode:</span> standalone) &#123;</span><br><span class="line">  <span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: red;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>或者脚本检测</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'load'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (navigator.standalone) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Launched: Installed (iOS)'</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (matchMedia(<span class="string">'(display-mode: standalone)'</span>).matches) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Launched: Installed'</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Launched: Browser Tab'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>⚠️ 注意：iOS Safari 不支持 matchMedia ，但是其可以通过 <code>navigator.standalone</code> 返回的 true 表明自己以独立模式运行</p>
<h2 id="浏览器兼容性"><a href="#浏览器兼容性" class="headerlink" title="浏览器兼容性"></a>浏览器兼容性</h2><p>可以看到，我们仅用到了 PWA 体系中的 <code>Web app manifests</code> , <code>Add to Home Screen</code> 和 <code>Service Worker</code>，因此该功能的浏览器兼容性取决于这几个的短板</p>
<h3 id="Service-Worker"><a href="#Service-Worker" class="headerlink" title="Service Worker"></a>Service Worker</h3><p><img src="https://upload-images.jianshu.io/upload_images/9277731-8d545f352e70a70f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="sw.png"></p>
<h3 id="Add-to-Home-Screen"><a href="#Add-to-Home-Screen" class="headerlink" title="Add to Home Screen"></a>Add to Home Screen</h3><p>待测试，本机（Macos chrome 81 支持）</p>
<h3 id="Web-app-manifests"><a href="#Web-app-manifests" class="headerlink" title="Web app manifests"></a>Web app manifests</h3><p>待测试，本机（Macos chrome 81 支持）</p>
<h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p>（兼容性列表欢迎大家一起维护~）<br>…</p>
<h2 id="题外话-自己动手丰衣足食"><a href="#题外话-自己动手丰衣足食" class="headerlink" title="题外话 - 自己动手丰衣足食"></a>题外话 - 自己动手丰衣足食</h2><p>对于普通的 Chrome 用户，如果自己喜欢的网站没有实现上述功能，自己如何把网站添加到桌面呢？</p>
<p>右上角选择「更多工具」-「创建快捷方式」- 「确定」</p>
<blockquote>
<p>如果选择新窗口打开，新开窗口将不带导航栏、工具栏等，类似于 <code>display=standalone</code> ，否则就是普通的打开标签页 <code>display=browser</code></p>
</blockquote>
<p>可以看到桌面就存在一个该网站的图标了~ 点击就可以打开该网站</p>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ol>
<li><a href="https://web.dev/customize-install/" target="_blank" rel="noopener">Provide a custom install experience</a></li>
<li><a href="https://developers.chrome.com/apps/migration" target="_blank" rel="noopener">Transitioning from Chrome Apps</a></li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/Progressive_web_apps" target="_blank" rel="noopener">渐进式 Web 应用（PWA）</a></li>
</ol>
]]></content>
      <categories>
        <category>大前端</category>
      </categories>
      <tags>
        <tag>随笔</tag>
        <tag>PWA</tag>
      </tags>
  </entry>
  <entry>
    <title>实现第三方登录无刷新更新页面</title>
    <url>/2020/04/12/2020/%E5%AE%9E%E7%8E%B0%E7%AC%AC%E4%B8%89%E6%96%B9%E7%99%BB%E5%BD%95%E6%97%A0%E5%88%B7%E6%96%B0%E6%9B%B4%E6%96%B0%E9%A1%B5%E9%9D%A2/</url>
    <content><![CDATA[<h2 id="需求背景"><a href="#需求背景" class="headerlink" title="需求背景"></a>需求背景</h2><p>最近在研究 iqiyi 的登录流程，发现他们的第三方登录体验挺好的。</p>
<p>在目标页面（以下目标页面均指用户当前浏览的页面）点击登录，弹出登录弹框，选择第三方登录，比如 qq，微信，点击则新开页面。</p>
<p>在新页面中登录完毕，页面会自动关闭，且刚刚那个页面不刷新且自动进行状态变更</p>
<a id="more"></a>

<h2 id="首先是页面自动关闭"><a href="#首先是页面自动关闭" class="headerlink" title="首先是页面自动关闭"></a>首先是页面自动关闭</h2><p>这个很简单，通过 <code>window.close()</code> 即可实现</p>
<p>但是问题是，第三方登录页一般不会自己在代码中做这件事，毕竟一般登录后是重定向到某个页面（通过 ticket 写入 cookie ）而不是关闭当前页面</p>
<p>那么如何关闭呢？其实也很简单，让目标页面执行登录页的关闭即可</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">newWin = <span class="built_in">window</span>.open(<span class="string">"//open.weixin.qq.com"</span>)</span><br><span class="line"><span class="comment">// 在某个时机</span></span><br><span class="line">newWin.close()</span><br></pre></td></tr></table></figure>

<p>至于这个时机，就是登录成功之后。</p>
<p>那么目标页面如何知道登录成功了？</p>
<p>你可能会想说可以利用轮询啊，长连接啊，再或者 websocket 咯</p>
<p>这个是可以实现，但是额外浪费了性能，其实在当前页面（登录完重定向的页面）通过 <code>window.opener</code> 操作目标页面</p>
<blockquote>
<p>至于这东西是啥，大家应该都知道，不懂的看 MDN</p>
</blockquote>
<p>所以这就要求，登录完我们最后重定向的页面除了写入 cookie 的作用，还有就是操作 <code>window.opener</code></p>
<p>比如这是 iqiyi 第三方登录后重定向的页面 <code>https://passport.iqiyi.com/oauth/closepage.php?fromurl=&amp;from=29&amp;isNew=0</code></p>
<p>其页面代码就是以下简单的几行</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span><span class="tag">&lt;<span class="name">head</span>&gt;</span><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript"><span class="comment">//成功调用</span></span></span><br><span class="line"><span class="javascript"><span class="built_in">document</span>.domain=<span class="string">"iqiyi.com"</span>;</span></span><br><span class="line"><span class="javascript"><span class="built_in">window</span>.opener.lib.__callbacks__._oAuthSuccess(<span class="string">'http://passport.iqiyi.com/pages/user/success.action'</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span><span class="tag">&lt;<span class="name">body</span>&gt;</span><span class="tag">&lt;/<span class="name">body</span>&gt;</span><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这里需要将 domain 设为一致，才能操作相同 domain 的 window </p>
<blockquote>
<p>是的， <a href="http://www.iqiyi.com" target="_blank" rel="noopener">www.iqiyi.com</a> 的 domain 也被改为了 “iqiyi.com” 了，同样的， iqiyi 的其他子域名比如 <code>https://edu.iqiyi.com/</code> 等都改写了 domain，使得全站都能顺滑的实现无刷新登录</p>
</blockquote>
<p>最后看看代码中的 <code>window.opener.lib.__callbacks__._oAuthSuccess(xxx)</code> ,其实作用也很简单，一是关闭新开页面，二是获取用户信息并更新状态</p>
<p>这样差不多就实现了我们的需求，另外还有一点没提到的是，写入 cookie 的时候，domain iqiyi 写的是二级域名 <code>.iqiyi.com</code> ，这样其他三级域名如 <code>edu.iqiyi.com</code> 才能共用 cookie</p>
<p>PS：在测试过程中发现有 iqiyi 有两个bug(截止 20/04/12)，当然，普通用户使用一般不会出现。。</p>
<ul>
<li>若登录弹框关闭，第三方登录成功后不会自动关闭页面且不进行用户信息请求，这个是由于 _oAuthSuccess 其实是调用的登录窗口 iframe 中的方法</li>
<li>手动调用 _oAuthSuccess 方法，头像变成登录后的默认头像，此时其实并没有登录</li>
</ul>
<h2 id="那以上方案有什么问题么？"><a href="#那以上方案有什么问题么？" class="headerlink" title="那以上方案有什么问题么？"></a>那以上方案有什么问题么？</h2><p>除了全站需要改造 <code>document.domain</code> 外，正常来说是没有问题，但是可能会遇到不能修改 domain 的场景，你要是问我有哪些场景，emmmm…反正我就是为了说我的新方案的，新方案就是 postMessage</p>
<blockquote>
<p>我现在能想到的一个，比如最后一个重定向的最后一个页面不是 <code>.iqiyi.com</code>域名，而是其他页面（可能是为了集团内多个产品复用吧），比如 <code>util.baidu.com</code></p>
</blockquote>
<p><a href="http://www.iqiyi.com" target="_blank" rel="noopener">www.iqiyi.com</a></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">newWin = <span class="built_in">window</span>.open(<span class="string">"//util.baidu.com"</span>)</span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">"message"</span>,(evt)=&gt;&#123;</span><br><span class="line">    <span class="comment">// 根据信息来源进行特殊处理，避免受其他 postMessage 影响</span></span><br><span class="line">    <span class="keyword">if</span>(evt.origin === <span class="string">"https://util.baidu.com"</span>)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(evt.data)</span><br><span class="line">        newWin.close()</span><br><span class="line">        <span class="comment">// or</span></span><br><span class="line">        <span class="comment">// evt.source.close()</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>util.baidu.com</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.opener.postMessage(<span class="string">"test"</span>,<span class="string">"*"</span>) <span class="comment">//所有</span></span><br></pre></td></tr></table></figure>

<p>可以在 <a href="http://www.iqiyi.com" target="_blank" rel="noopener">www.iqiyi.com</a> 中看到输出，且 util.baidu.com 自动关闭</p>
<p>当然该方案也有不好的地方，就是 postMessage 使用不当会导致安全问题，主要有以下2点</p>
<ol>
<li><p>postMessage 第二个参数 targetOrigin 设置为 * 可能导致数据泄露<br>比如使用了某个不安全的第三方登录页面，其对目标网站进行了重定向，比如变成 <code>www.ihack.com</code> ，第三方登录后通过 postMessage 传递隐私信息，由于设置的是 * ，导致 <code>www.ihack.com</code> 可以收到隐私信息。当然你后面发现这个 ihack 网站不正常也没用，因为数据已经泄露了。<br>解决方案就是 targetOrigin 设置为特定的地址比如 <code>edu.iqiyi.como</code> ，这就需要我们将当前页面作为传递到重定向页面 <br>举例，像第三方登录页传递这样的参数 – <code>&amp;redirect_uri=https://passport.iqiyi.com?targetOrigin=edu.iqiyi.com</code> , 第三方登录后重定向到 passport 写入 cookie ，再次重定向到 <code>https://util.baidu.com?targetOrigin=edu.iqiyi.com</code> ，再当前页面读取 targetOrigin 参数并传递 postMessage 。整个就是这样的一个过程 <br>当然在本例中不需要传递隐私信息</p>
</li>
<li><p>接收 message 时请始终使用 origin 和 source 属性验证发件人的身份<br>比如点击打开了用户评论的 url（某个黑客网站），其对目标页面发起 postMessage ，而我们如果在收到 message 时不进行验证就执行危险操作时，可能就会导致安全问题<br>另外，如果回调执行安全性依赖于消息的话（比如执行 <code>eval(msg.data)</code>），即使检查通过，还需要对消息格式再一次检查，避免因信任网站收到跨站脚本攻击而导致本网站也遭到攻击<br>当然在本例中只是简单的关闭新开页面及发送请求，没有什么危险操作，检查下 origin 即可</p>
</li>
</ol>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>domain 适用于大部分情景，有全站改造 <code>document.domain</code> 的成本，且最后重定向页面需要是相同的 domain</p>
<p>postMessage 适用于所有情景，对于安全问题需要额外处理</p>
<p>两种方案各有千秋，看就具体的场景啦~</p>
<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ul>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/postMessage" target="_blank" rel="noopener">postMessage</a></li>
</ul>
]]></content>
      <categories>
        <category>大前端</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>面试官问：能否实现一个缓存计算结果的方法</title>
    <url>/2020/03/31/2020/%E9%9D%A2%E8%AF%95%E5%AE%98%E9%97%AE%EF%BC%9A%E8%83%BD%E5%90%A6%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E7%BC%93%E5%AD%98%E8%AE%A1%E7%AE%97%E7%BB%93%E6%9E%9C%E7%9A%84%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 模拟耗时任务</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">taskA</span> (<span class="params">n, initialValue, incre</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> result = initialValue</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">    result += incre</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">cache</span> (<span class="params">callback</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.time(<span class="string">'task'</span>)</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="built_in">console</span>.timeEnd(<span class="string">'task'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> taskACache = cache(taskA)</span><br><span class="line">taskACache(<span class="number">1e+9</span>, <span class="number">0</span>, <span class="number">1</span>) <span class="comment">// 1.5s</span></span><br><span class="line">taskACache(<span class="number">1e+9</span>, <span class="number">0</span>, <span class="number">1</span>) <span class="comment">// 0s</span></span><br><span class="line">taskACache(<span class="number">1e+9</span>, <span class="number">2</span>, <span class="number">1</span>) <span class="comment">// 1.5s</span></span><br><span class="line">taskACache(<span class="number">1e+9</span>, <span class="number">2</span>, <span class="number">1</span>) <span class="comment">// 0s</span></span><br><span class="line">taskACache(<span class="number">1e+9</span>, <span class="number">0</span>, <span class="number">1</span>) <span class="comment">// 0s</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> taskBCache = cache(taskB)</span><br><span class="line">taskBCache(<span class="string">'abc'</span>, <span class="number">123</span>, &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span> &#125;) <span class="comment">// 5s</span></span><br><span class="line">taskBCache(<span class="string">'abc'</span>, <span class="number">123</span>, &#123; <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">a</span>: <span class="number">1</span> &#125;) <span class="comment">// 0s</span></span><br></pre></td></tr></table></figure>
<p>完善 cache 方法，使得相同参数调用时能够快速响应结果</p>
<p><strong>注意</strong>：</p>
<ul>
<li>相同参数需要进行深度比较， <code>{a:1,b:2}</code> 和 <code>{b:2,a:1}</code> 属于参数不变的情况</li>
<li>属性值仅需考虑基本类型和纯对象(typeof is object)，且不考虑循环引用的问题</li>
</ul>
<a id="more"></a>

<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>先不考虑 Web Worker 和 Node.js 多线程 ，我们先考虑单线程应该如何实现</p>
<p>同种任务参数不同可以被缓存多次，因此每次执行任务时先判断是否存在相同的参数列表</p>
<p>直观的想法是维护一个数组，数组元素为参数列表，每次都需要遍历数组元素逐一比较，这是 <code>O(n)</code> 的时间复杂度</p>
<p>那么有什么其他方法么？</p>
<h2 id="json-map"><a href="#json-map" class="headerlink" title="json + map"></a>json + map</h2><p>对参数列表应用 <code>JSON.stringify</code> ，其结果 json 作为 map 的 key</p>
<p>需要保证</p>
<ul>
<li>不同的参数列表生成的 key 是不同的</li>
<li>相同的参数列表生成的 key 始终一致</li>
</ul>
<p>对于下面 2 组，虽然参数列表是相同的，但是由于<strong>对象中属性的位置不一致</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify([<span class="string">'abc'</span>, <span class="number">123</span>, &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span> &#125;]))</span><br><span class="line"><span class="comment">// ["abc",123,&#123;"a":1,"b":2&#125;]</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify([<span class="string">'abc'</span>, <span class="number">123</span>, &#123; <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">a</span>: <span class="number">1</span> &#125;]))</span><br><span class="line"><span class="comment">// ["abc",123,&#123;"b":2,"a":1&#125;]</span></span><br></pre></td></tr></table></figure>
<p>简单应用 <code>JSON.stringify</code> 会得到不同结果</p>
<p>需要借用第二个参数 replacer 进行对象的处理</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">replacer</span> (<span class="params">key, value</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> isPureObject = <span class="keyword">typeof</span> value === <span class="string">'object'</span> &amp;&amp; value !== <span class="literal">null</span> &amp;&amp; !<span class="built_in">Array</span>.isArray(value)</span><br><span class="line">  <span class="keyword">if</span> (!isPureObject) &#123;</span><br><span class="line">    <span class="keyword">return</span> value</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Object</span></span><br><span class="line">    .entries(value)</span><br><span class="line">    .sort(<span class="function">(<span class="params">[a], [b]</span>) =&gt;</span> +(a &gt; b) || +(a === b) - <span class="number">1</span>)</span><br><span class="line">    .reduce(<span class="function">(<span class="params">_sortedObj, [k, v]</span>) =&gt;</span> (&#123;</span><br><span class="line">      ..._sortedObj,</span><br><span class="line">      [k]: v</span><br><span class="line">    &#125;), &#123;&#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify([<span class="string">'abc'</span>, <span class="number">123</span>, &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span> &#125;], replacer))</span><br><span class="line"><span class="comment">// ["abc",123,&#123;"a":1,"b":2&#125;]</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify([<span class="string">'abc'</span>, <span class="number">123</span>, &#123; <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">a</span>: <span class="number">1</span> &#125;], replacer))</span><br><span class="line"><span class="comment">// ["abc",123,&#123;"a":1,"b":2&#125;]</span></span><br></pre></td></tr></table></figure>

<p>将计算结果放入 map 即可</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">replacer</span> (<span class="params">key, value</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> isObject = <span class="keyword">typeof</span> value === <span class="string">'object'</span> &amp;&amp; value !== <span class="literal">null</span> &amp;&amp; !<span class="built_in">Array</span>.isArray(value)</span><br><span class="line">  <span class="keyword">if</span> (!isObject) &#123;</span><br><span class="line">    <span class="keyword">return</span> value</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Object</span></span><br><span class="line">    .entries(value)</span><br><span class="line">    .sort(<span class="function">(<span class="params">[a], [b]</span>) =&gt;</span> +(a &gt; b) || +(a === b) - <span class="number">1</span>)</span><br><span class="line">    .reduce(<span class="function">(<span class="params">_sortedObj, [k, v]</span>) =&gt;</span> (&#123;</span><br><span class="line">      ..._sortedObj,</span><br><span class="line">      [k]: v</span><br><span class="line">    &#125;), &#123;&#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">cache</span> (<span class="params">callback</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>()</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">...args</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.time(<span class="string">'task'</span>)</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> json = <span class="built_in">JSON</span>.stringify(args, replacer)</span><br><span class="line">      <span class="keyword">let</span> result = map.get(json)</span><br><span class="line">      <span class="keyword">if</span> (result !== <span class="keyword">void</span> <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">      &#125;</span><br><span class="line">      result = callback.apply(<span class="literal">null</span>, args)</span><br><span class="line">      map.set(json, result)</span><br><span class="line">      <span class="keyword">return</span> result</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.timeEnd(<span class="string">'task'</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试用例</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 模拟耗时任务</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">taskA</span> (<span class="params">n, &#123; initialValue, incre &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> result = initialValue</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">    result += incre</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> taskACache = cache(taskA)</span><br><span class="line"><span class="built_in">console</span>.log(taskACache(<span class="number">1e+9</span>, &#123; <span class="attr">initialValue</span>: <span class="number">0</span>, <span class="attr">incre</span>: <span class="number">1</span> &#125;))</span><br><span class="line"><span class="built_in">console</span>.log(taskACache(<span class="number">1e+9</span>, &#123; <span class="attr">incre</span>: <span class="number">1</span>, <span class="attr">initialValue</span>: <span class="number">0</span> &#125;))</span><br><span class="line"><span class="built_in">console</span>.log(taskACache(<span class="number">1e+9</span>, &#123; <span class="attr">initialValue</span>: <span class="number">2</span>, <span class="attr">incre</span>: <span class="number">1</span> &#125;))</span><br><span class="line"><span class="built_in">console</span>.log(taskACache(<span class="number">1e+9</span>, &#123; <span class="attr">initialValue</span>: <span class="number">2</span>, <span class="attr">incre</span>: <span class="number">1</span> &#125;))</span><br><span class="line"><span class="built_in">console</span>.log(taskACache(<span class="number">1e+9</span>, &#123; <span class="attr">initialValue</span>: <span class="number">0</span>, <span class="attr">incre</span>: <span class="number">1</span> &#125;))</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">task: 2050.12890625ms</span></span><br><span class="line"><span class="comment">1000000000</span></span><br><span class="line"><span class="comment">task: 0.097900390625ms</span></span><br><span class="line"><span class="comment">1000000000</span></span><br><span class="line"><span class="comment">task: 2088.137939453125ms</span></span><br><span class="line"><span class="comment">1000000002</span></span><br><span class="line"><span class="comment">task: 0.0810546875ms</span></span><br><span class="line"><span class="comment">1000000002</span></span><br><span class="line"><span class="comment">task: 0.042724609375ms</span></span><br><span class="line"><span class="comment">1000000000</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<p>还能继续优化？</p>
<p>当缓存的数据量足够大时，既占用内存，还拖慢查询速度，我们上 LRUCache</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">capacity</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> LRUCache = <span class="function"><span class="keyword">function</span> (<span class="params">capacity</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.capacity = capacity</span><br><span class="line">  <span class="keyword">this</span>.map = <span class="keyword">new</span> <span class="built_in">Map</span>()</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">key</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">LRUCache.prototype.get = <span class="function"><span class="keyword">function</span> (<span class="params">key</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="keyword">this</span>.map.has(key)) &#123;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> value = <span class="keyword">this</span>.map.get(key)</span><br><span class="line">    <span class="keyword">this</span>.map.delete(key)</span><br><span class="line">    <span class="keyword">this</span>.map.set(key, value)</span><br><span class="line">    <span class="keyword">return</span> value</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> </span>key </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">value</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;void&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">LRUCache.prototype.set = <span class="function"><span class="keyword">function</span> (<span class="params">key, value</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!<span class="keyword">this</span>.map.has(key)) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.map.size &gt;= <span class="keyword">this</span>.capacity) &#123;</span><br><span class="line">      <span class="comment">// 删除首个节点</span></span><br><span class="line">      <span class="keyword">this</span>.map.delete(<span class="keyword">this</span>.map.keys().next().value)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.map.set(key, value)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.map.delete(key)</span><br><span class="line">    <span class="keyword">this</span>.map.set(key, value)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>实现原理请看 <a href="https://github.com/francecil/leetcode/issues/8" target="_blank" rel="noopener">实现一个 LRU-K
</a></p>
<p>修改下 cache 的实现</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">replacer</span> (<span class="params">key, value</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> isObject = <span class="keyword">typeof</span> value === <span class="string">'object'</span> &amp;&amp; value !== <span class="literal">null</span> &amp;&amp; !<span class="built_in">Array</span>.isArray(value)</span><br><span class="line">  <span class="keyword">if</span> (!isObject) &#123;</span><br><span class="line">    <span class="keyword">return</span> value</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Object</span></span><br><span class="line">    .entries(value)</span><br><span class="line">    .sort(<span class="function">(<span class="params">[a], [b]</span>) =&gt;</span> +(a &gt; b) || +(a === b) - <span class="number">1</span>)</span><br><span class="line">    .reduce(<span class="function">(<span class="params">_sortedObj, [k, v]</span>) =&gt;</span> (&#123;</span><br><span class="line">      ..._sortedObj,</span><br><span class="line">      [k]: v</span><br><span class="line">    &#125;), &#123;&#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">cache</span> (<span class="params">callback</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 设置容量</span></span><br><span class="line">  <span class="keyword">let</span> map = <span class="keyword">new</span> LRUCache(<span class="number">2</span>)</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">...args</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.time(<span class="string">'task'</span>)</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> json = <span class="built_in">JSON</span>.stringify(args, replacer)</span><br><span class="line">      <span class="keyword">let</span> result = map.get(json)</span><br><span class="line">      <span class="keyword">if</span> (result !== <span class="keyword">void</span> <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">      &#125;</span><br><span class="line">      result = callback.apply(<span class="literal">null</span>, args)</span><br><span class="line">      map.set(json, result)</span><br><span class="line">      <span class="keyword">return</span> result</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.timeEnd(<span class="string">'task'</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>再次进行测试</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 模拟耗时任务</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">taskA</span> (<span class="params">n, &#123; initialValue, incre &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> result = initialValue</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">    result += incre</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> taskACache = cache(taskA)</span><br><span class="line"><span class="built_in">console</span>.log(taskACache(<span class="number">1e+9</span>, &#123; <span class="attr">initialValue</span>: <span class="number">0</span>, <span class="attr">incre</span>: <span class="number">1</span> &#125;))</span><br><span class="line"><span class="built_in">console</span>.log(taskACache(<span class="number">1e+9</span>, &#123; <span class="attr">incre</span>: <span class="number">1</span>, <span class="attr">initialValue</span>: <span class="number">0</span> &#125;))</span><br><span class="line"><span class="built_in">console</span>.log(taskACache(<span class="number">1e+9</span>, &#123; <span class="attr">initialValue</span>: <span class="number">2</span>, <span class="attr">incre</span>: <span class="number">1</span> &#125;))</span><br><span class="line"><span class="built_in">console</span>.log(taskACache(<span class="number">1e+9</span>, &#123; <span class="attr">initialValue</span>: <span class="number">2</span>, <span class="attr">incre</span>: <span class="number">1</span> &#125;))</span><br><span class="line"><span class="built_in">console</span>.log(taskACache(<span class="number">1e+9</span>, &#123; <span class="attr">initialValue</span>: <span class="number">3</span>, <span class="attr">incre</span>: <span class="number">1</span> &#125;))</span><br><span class="line"><span class="built_in">console</span>.log(taskACache(<span class="number">1e+9</span>, &#123; <span class="attr">initialValue</span>: <span class="number">0</span>, <span class="attr">incre</span>: <span class="number">1</span> &#125;))</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">task: 2190.304931640625ms</span></span><br><span class="line"><span class="comment">1000000000</span></span><br><span class="line"><span class="comment">task: 0.12890625ms</span></span><br><span class="line"><span class="comment">1000000000</span></span><br><span class="line"><span class="comment">task: 2263.181884765625ms</span></span><br><span class="line"><span class="comment">1000000002</span></span><br><span class="line"><span class="comment">task: 0.123779296875ms</span></span><br><span class="line"><span class="comment">1000000002</span></span><br><span class="line"><span class="comment">task: 2218.0888671875ms</span></span><br><span class="line"><span class="comment">1000000003</span></span><br><span class="line"><span class="comment">task: 2395.6279296875ms</span></span><br><span class="line"><span class="comment">1000000000</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<p>注意最后一个例子，计算结果已被 lru 移除</p>
<h2 id="hashMap"><a href="#hashMap" class="headerlink" title="hashMap"></a>hashMap</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">万物均可 hash</span><br><span class="line">        -- 鲁迅</span><br></pre></td></tr></table></figure>

<p>将参数列表进行哈希得到 hashCode ，并作为 hashMap 的 key</p>
<p>hashMap 的 value 是实体为参数列表与计算值的链表，链表较长则上红黑树</p>
<p>接下来就是 hashCode 的计算，需要明确的是：</p>
<ul>
<li>相同的参数列表生成的 hashCode 始终一致</li>
<li>由于无需保证不同的参数列表生成的 hashCode 不一致，因此 hashCode 的计算应尽可能快</li>
</ul>
<p>这里简单使用如下计算规则</p>
<ul>
<li>Object<ul>
<li>数组，其 hashCode 为每一项的 hashCode 的累加</li>
<li>null, 其 hashCode 为 -1</li>
<li>纯对象，其 hashCode 为按属性升序后每一项的值的 hashCode 的累加</li>
</ul>
</li>
<li>undefined, 其 hashCode 为 -1</li>
<li>Number<ul>
<li>NaN, 其 hashCode 为 -1</li>
<li>Infinity, 其 hashCode 为 0xffff</li>
<li>其他，其 hashCode 为自身值</li>
</ul>
</li>
<li>String，其 hashCode 为 charCode 累加</li>
<li>Boolean，true 为 1，false 为 0</li>
</ul>
<p>每次执行任务前先查询是否存在 hashCode ，存在的话在对链表中每一项进行深比较查询</p>
<p>该算法的要点在于找到一个合理的 hash 算法，减少 hash 冲突避免深比较</p>
<p>代码实现略。</p>
<h2 id="上多线程"><a href="#上多线程" class="headerlink" title="上多线程"></a>上多线程</h2><p>为避免阻塞主线程的事件循环，我们将耗时任务放到其他线程中进行</p>
<p>先上一版，再分析漏洞</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">capacity</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> LRUCache = <span class="function"><span class="keyword">function</span> (<span class="params">capacity</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.capacity = capacity</span><br><span class="line">  <span class="keyword">this</span>.map = <span class="keyword">new</span> <span class="built_in">Map</span>()</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">key</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">LRUCache.prototype.get = <span class="function"><span class="keyword">function</span> (<span class="params">key</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="keyword">this</span>.map.has(key)) &#123;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> value = <span class="keyword">this</span>.map.get(key)</span><br><span class="line">    <span class="keyword">this</span>.map.delete(key)</span><br><span class="line">    <span class="keyword">this</span>.map.set(key, value)</span><br><span class="line">    <span class="keyword">return</span> value</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> </span>key </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">value</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;void&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">LRUCache.prototype.set = <span class="function"><span class="keyword">function</span> (<span class="params">key, value</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!<span class="keyword">this</span>.map.has(key)) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.map.size &gt;= <span class="keyword">this</span>.capacity) &#123;</span><br><span class="line">      <span class="comment">// 删除首个节点</span></span><br><span class="line">      <span class="keyword">this</span>.map.delete(<span class="keyword">this</span>.map.keys().next().value)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.map.set(key, value)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.map.delete(key)</span><br><span class="line">    <span class="keyword">this</span>.map.set(key, value)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">replacer</span> (<span class="params">key, value</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> isObject = <span class="keyword">typeof</span> value === <span class="string">'object'</span> &amp;&amp; value !== <span class="literal">null</span> &amp;&amp; !<span class="built_in">Array</span>.isArray(value)</span><br><span class="line">  <span class="keyword">if</span> (!isObject) &#123;</span><br><span class="line">    <span class="keyword">return</span> value</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Object</span></span><br><span class="line">    .entries(value)</span><br><span class="line">    .sort(<span class="function">(<span class="params">[a], [b]</span>) =&gt;</span> +(a &gt; b) || +(a === b) - <span class="number">1</span>)</span><br><span class="line">    .reduce(<span class="function">(<span class="params">_sortedObj, [k, v]</span>) =&gt;</span> (&#123;</span><br><span class="line">      ..._sortedObj,</span><br><span class="line">      [k]: v</span><br><span class="line">    &#125;), &#123;&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 构建 worker</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createWorker</span> (<span class="params">taskContent, taskName</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> text = <span class="string">`</span></span><br><span class="line"><span class="string">  <span class="subst">$&#123;taskContent&#125;</span></span></span><br><span class="line"><span class="string">  this.addEventListener('message', (msg) =&gt; &#123;</span></span><br><span class="line"><span class="string">    const result = this['<span class="subst">$&#123;taskName&#125;</span>'].apply(this,msg.data)</span></span><br><span class="line"><span class="string">    postMessage(result);</span></span><br><span class="line"><span class="string">  &#125;, false);</span></span><br><span class="line"><span class="string">  `</span></span><br><span class="line">  <span class="keyword">let</span> blob = <span class="keyword">new</span> Blob([text]);</span><br><span class="line">  <span class="keyword">let</span> url = <span class="built_in">window</span>.URL.createObjectURL(blob);</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> Worker(url);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">cache</span> (<span class="params">task</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 设置容量</span></span><br><span class="line">  <span class="keyword">let</span> map = <span class="keyword">new</span> LRUCache(<span class="number">2</span>)</span><br><span class="line">  <span class="keyword">let</span> worker = createWorker(task.toString(), task.name)</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">...args</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.time(<span class="string">'task'</span>)</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> json = <span class="built_in">JSON</span>.stringify(args, replacer)</span><br><span class="line">        <span class="keyword">let</span> result = map.get(json)</span><br><span class="line">        <span class="keyword">if</span> (result !== <span class="keyword">void</span> <span class="number">0</span>) &#123;</span><br><span class="line">          resolve(result)</span><br><span class="line">          <span class="built_in">console</span>.timeEnd(<span class="string">'task'</span>)</span><br><span class="line">          <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        worker.onmessage = <span class="function">(<span class="params">evt</span>) =&gt;</span> &#123;</span><br><span class="line">          map.set(json, evt.data)</span><br><span class="line">          resolve(evt.data)</span><br><span class="line">          <span class="built_in">console</span>.timeEnd(<span class="string">'task'</span>)</span><br><span class="line">        &#125;;</span><br><span class="line">        worker.postMessage(args);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        reject(error)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 模拟耗时任务</span></span><br><span class="line"><span class="comment">// 仅考虑函数声明</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">taskA</span> (<span class="params">n, &#123; initialValue, incre &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> result = initialValue</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">    result += incre</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> taskACache = cache(taskA)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">await</span> taskACache(<span class="number">1e+9</span>, &#123; <span class="attr">initialValue</span>: <span class="number">0</span>, <span class="attr">incre</span>: <span class="number">1</span> &#125;))</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">await</span> taskACache(<span class="number">1e+9</span>, &#123; <span class="attr">incre</span>: <span class="number">1</span>, <span class="attr">initialValue</span>: <span class="number">0</span> &#125;))</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">await</span> taskACache(<span class="number">1e+9</span>, &#123; <span class="attr">initialValue</span>: <span class="number">2</span>, <span class="attr">incre</span>: <span class="number">1</span> &#125;))</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">await</span> taskACache(<span class="number">1e+9</span>, &#123; <span class="attr">initialValue</span>: <span class="number">2</span>, <span class="attr">incre</span>: <span class="number">1</span> &#125;))</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">await</span> taskACache(<span class="number">1e+9</span>, &#123; <span class="attr">initialValue</span>: <span class="number">3</span>, <span class="attr">incre</span>: <span class="number">1</span> &#125;))</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">await</span> taskACache(<span class="number">1e+9</span>, &#123; <span class="attr">initialValue</span>: <span class="number">0</span>, <span class="attr">incre</span>: <span class="number">1</span> &#125;))</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">task: 2196.513916015625ms</span></span><br><span class="line"><span class="comment">1000000000</span></span><br><span class="line"><span class="comment">task: 0.123046875ms</span></span><br><span class="line"><span class="comment">1000000000</span></span><br><span class="line"><span class="comment">task: 2287.091796875ms</span></span><br><span class="line"><span class="comment">1000000002</span></span><br><span class="line"><span class="comment">task: 0.10791015625ms</span></span><br><span class="line"><span class="comment">1000000002</span></span><br><span class="line"><span class="comment">task: 2272.23193359375ms</span></span><br><span class="line"><span class="comment">1000000003</span></span><br><span class="line"><span class="comment">task: 2178.444091796875ms</span></span><br><span class="line"><span class="comment">1000000000</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<p>执行结果与单线程一致，且不阻塞主线程</p>
<p>那么，有什么问题吗？</p>
<p>首先，为了拓展性，将 task 内容传递到 worker 中，这里需要要求为函数声明，对于函数表达式或重写 toString 等情况无法正常处理</p>
<p>其次，这里通过 await 保证了 taskACache 按序执行，实际场景中可能存在多个同时执行的 worker ，且还有可能是参数列表一样的，导致 worker 重复计算</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">taskACache(<span class="number">1e+9</span>, &#123; <span class="attr">initialValue</span>: <span class="number">0</span>, <span class="attr">incre</span>: <span class="number">1</span> &#125;)</span><br><span class="line">taskACache(<span class="number">1e+9</span>, &#123; <span class="attr">initialValue</span>: <span class="number">0</span>, <span class="attr">incre</span>: <span class="number">1</span> &#125;)</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">A  -&gt;f(1)不在缓存-&gt;[   计算f(1)    ]-&gt;将f(1)放入缓存</span></span><br><span class="line"><span class="comment">B  -----------&gt;f(1)不在缓存-&gt;[   计算f(1)    ]-&gt;将f(1)放入缓存</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<p>对于问题1无非就是做下兼容，或者直接约定仅支持函数声明，再或者将 <code>self.postMessage</code> 放置在任务方法中，这个无关紧要，重点是问题2，如何处理？</p>
<p>参考 Java FutureTask 的做法，即</p>
<blockquote>
<p>FutureTask 表示一个计算的过程，可能已经计算完成，也可能正在进行。如果有结果可用，那么 FutureTask.get 将立即返回结果，否则会一直堵塞，直到计算结果出来再将其返回</p>
</blockquote>
<p>在 js 中相像的就是 Promise 了</p>
<p>代码如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">capacity</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> LRUCache = <span class="function"><span class="keyword">function</span> (<span class="params">capacity</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.capacity = capacity</span><br><span class="line">  <span class="keyword">this</span>.map = <span class="keyword">new</span> <span class="built_in">Map</span>()</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">key</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">LRUCache.prototype.get = <span class="function"><span class="keyword">function</span> (<span class="params">key</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="keyword">this</span>.map.has(key)) &#123;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> value = <span class="keyword">this</span>.map.get(key)</span><br><span class="line">    <span class="keyword">this</span>.map.delete(key)</span><br><span class="line">    <span class="keyword">this</span>.map.set(key, value)</span><br><span class="line">    <span class="keyword">return</span> value</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> </span>key </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">value</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;void&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">LRUCache.prototype.set = <span class="function"><span class="keyword">function</span> (<span class="params">key, value</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!<span class="keyword">this</span>.map.has(key)) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.map.size &gt;= <span class="keyword">this</span>.capacity) &#123;</span><br><span class="line">      <span class="comment">// 删除首个节点</span></span><br><span class="line">      <span class="keyword">this</span>.map.delete(<span class="keyword">this</span>.map.keys().next().value)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.map.set(key, value)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.map.delete(key)</span><br><span class="line">    <span class="keyword">this</span>.map.set(key, value)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">replacer</span> (<span class="params">key, value</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> isObject = <span class="keyword">typeof</span> value === <span class="string">'object'</span> &amp;&amp; value !== <span class="literal">null</span> &amp;&amp; !<span class="built_in">Array</span>.isArray(value)</span><br><span class="line">  <span class="keyword">if</span> (!isObject) &#123;</span><br><span class="line">    <span class="keyword">return</span> value</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Object</span></span><br><span class="line">    .entries(value)</span><br><span class="line">    .sort(<span class="function">(<span class="params">[a], [b]</span>) =&gt;</span> +(a &gt; b) || +(a === b) - <span class="number">1</span>)</span><br><span class="line">    .reduce(<span class="function">(<span class="params">_sortedObj, [k, v]</span>) =&gt;</span> (&#123;</span><br><span class="line">      ..._sortedObj,</span><br><span class="line">      [k]: v</span><br><span class="line">    &#125;), &#123;&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 构建 worker</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createWorkerUrl</span> (<span class="params">taskContent, taskName</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> text = <span class="string">`</span></span><br><span class="line"><span class="string">  <span class="subst">$&#123;taskContent&#125;</span></span></span><br><span class="line"><span class="string">  this.addEventListener('message', (msg) =&gt; &#123;</span></span><br><span class="line"><span class="string">    const result = this['<span class="subst">$&#123;taskName&#125;</span>'].apply(this,msg.data)</span></span><br><span class="line"><span class="string">    postMessage(result);</span></span><br><span class="line"><span class="string">  &#125;, false);</span></span><br><span class="line"><span class="string">  `</span></span><br><span class="line">  <span class="keyword">let</span> blob = <span class="keyword">new</span> Blob([text]);</span><br><span class="line">  <span class="keyword">let</span> url = <span class="built_in">window</span>.URL.createObjectURL(blob);</span><br><span class="line">  <span class="keyword">return</span> url</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">cache</span> (<span class="params">task</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 设置容量</span></span><br><span class="line">  <span class="keyword">let</span> map = <span class="keyword">new</span> LRUCache(<span class="number">2</span>)</span><br><span class="line">  <span class="keyword">const</span> url = createWorkerUrl(task.toString(), task.name)</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">...args</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> startTime = performance.now()</span><br><span class="line">    <span class="keyword">const</span> json = <span class="built_in">JSON</span>.stringify(args, replacer)</span><br><span class="line">    <span class="keyword">let</span> result = map.get(json)</span><br><span class="line">    <span class="keyword">if</span> (result !== <span class="keyword">void</span> <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'task: '</span>, performance.now() - startTime, <span class="string">'ms'</span>)</span><br><span class="line">      <span class="keyword">return</span> result</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> worker = <span class="keyword">new</span> Worker(url)</span><br><span class="line">    <span class="keyword">let</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        worker.onmessage = <span class="function">(<span class="params">evt</span>) =&gt;</span> &#123;</span><br><span class="line">          resolve(evt.data)</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">'task: '</span>, performance.now() - startTime, <span class="string">'ms'</span>)</span><br><span class="line">        &#125;;</span><br><span class="line">        worker.postMessage(args);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        reject(error)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    map.set(json, promise)</span><br><span class="line">    <span class="keyword">return</span> promise</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 模拟耗时任务</span></span><br><span class="line"><span class="comment">// 仅考虑函数声明</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">taskA</span> (<span class="params">n, &#123; initialValue, incre &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> result = initialValue</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">    result += incre</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> taskACache = cache(taskA)</span><br><span class="line"><span class="built_in">console</span>.log(taskACache(<span class="number">1e+9</span>, &#123; <span class="attr">initialValue</span>: <span class="number">0</span>, <span class="attr">incre</span>: <span class="number">1</span> &#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'&#123; initialValue: 0, incre: 1 &#125; =&gt; '</span>,res)))</span><br><span class="line"><span class="built_in">console</span>.log(taskACache(<span class="number">1e+9</span>, &#123; <span class="attr">incre</span>: <span class="number">1</span>, <span class="attr">initialValue</span>: <span class="number">0</span> &#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'&#123; incre: 1, initialValue: 0 &#125; =&gt; '</span>,res)))</span><br><span class="line"><span class="built_in">console</span>.log(taskACache(<span class="number">1e+9</span>, &#123; <span class="attr">initialValue</span>: <span class="number">2</span>, <span class="attr">incre</span>: <span class="number">1</span> &#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'&#123; initialValue: 2, incre: 1 &#125; =&gt; '</span>,res)))</span><br><span class="line"><span class="built_in">console</span>.log(taskACache(<span class="number">1e+9</span>, &#123; <span class="attr">initialValue</span>: <span class="number">2</span>, <span class="attr">incre</span>: <span class="number">1</span> &#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'&#123; initialValue: 2, incre: 1 &#125; =&gt; '</span>,res)))</span><br><span class="line"><span class="built_in">console</span>.log(taskACache(<span class="number">1e+9</span>, &#123; <span class="attr">initialValue</span>: <span class="number">3</span>, <span class="attr">incre</span>: <span class="number">1</span> &#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'&#123; initialValue: 3, incre: 1 &#125; =&gt; '</span>,res)))</span><br><span class="line"><span class="built_in">console</span>.log(taskACache(<span class="number">1e+9</span>, &#123; <span class="attr">initialValue</span>: <span class="number">0</span>, <span class="attr">incre</span>: <span class="number">1</span> &#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'&#123; initialValue: 0, incre: 1 &#125; =&gt; '</span>,res)))</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Promise &#123;&lt;pending&gt;&#125;</span></span><br><span class="line"><span class="comment">task:  0.11500000255182385 ms</span></span><br><span class="line"><span class="comment">Promise &#123;&lt;pending&gt;&#125;</span></span><br><span class="line"><span class="comment">Promise &#123;&lt;pending&gt;&#125;</span></span><br><span class="line"><span class="comment">task:  0.1399999891873449 ms</span></span><br><span class="line"><span class="comment">Promise &#123;&lt;pending&gt;&#125;</span></span><br><span class="line"><span class="comment">Promise &#123;&lt;pending&gt;&#125;</span></span><br><span class="line"><span class="comment">Promise &#123;&lt;pending&gt;&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">task:  3322.7050000132294 ms</span></span><br><span class="line"><span class="comment">&#123; initialValue: 0, incre: 1 &#125; =&gt;  1000000000</span></span><br><span class="line"><span class="comment">&#123; incre: 1, initialValue: 0 &#125; =&gt;  1000000000</span></span><br><span class="line"><span class="comment">task:  3370.5150000023423 ms</span></span><br><span class="line"><span class="comment">&#123; initialValue: 2, incre: 1 &#125; =&gt;  1000000002</span></span><br><span class="line"><span class="comment">&#123; initialValue: 2, incre: 1 &#125; =&gt;  1000000002</span></span><br><span class="line"><span class="comment">task:  3772.9699999908917 ms</span></span><br><span class="line"><span class="comment">&#123; initialValue: 0, incre: 1 &#125; =&gt;  1000000000</span></span><br><span class="line"><span class="comment">task:  4013.5900000022957 ms</span></span><br><span class="line"><span class="comment">&#123; initialValue: 3, incre: 1 &#125; =&gt;  1000000003</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<p>第二个任务和第四个任务命中了缓存，返回已缓存的 promise</p>
<p>单个 task 耗时看似增加了，这是由于并发执行 Worker 导致的，整体耗时反而减少了</p>
<h3 id="其他注意点"><a href="#其他注意点" class="headerlink" title="其他注意点"></a>其他注意点</h3><p>由于 js 主线程是单线程，因此不用考虑先检查缓存再执行这一非原子性操作</p>
<h2 id="拓展阅读"><a href="#拓展阅读" class="headerlink" title="拓展阅读"></a>拓展阅读</h2><ol>
<li><a href="http://www.ruanyifeng.com/blog/2018/07/web-worker.html" target="_blank" rel="noopener">Web Worker 使用教程</a></li>
<li><a href="https://www.hongweipeng.com/index.php/archives/707/" target="_blank" rel="noopener">动手写一个并发缓存框架 历程</a></li>
</ol>
<hr>
<p>原文地址： <a href="https://github.com/francecil/leetcode/issues/38" target="_blank" rel="noopener">https://github.com/francecil/leetcode/issues/38</a></p>
]]></content>
      <categories>
        <category>大前端</category>
      </categories>
      <tags>
        <tag>ECMAScript</tag>
        <tag>WebWorker</tag>
      </tags>
  </entry>
  <entry>
    <title>前端两年半面经流水账</title>
    <url>/2020/03/19/2020/%E5%89%8D%E7%AB%AF%E4%B8%A4%E5%B9%B4%E5%8D%8A%E9%9D%A2%E7%BB%8F%E6%B5%81%E6%B0%B4%E8%B4%A6/</url>
    <content><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>先简单介绍下本人的情况，2017年毕业于福州大学，然后在厦门一家 CDN 公司任职前端开发工程师，大概2年半的前端开发经验。</p>
<p>接触过后端移动端，目前主方向是前端。参与的项目基本都是 toB ，主要分为流媒体，可视化，前端优化，portal平台等几个方向。</p>
<p>在开源项目方面，实现了一个基于 antd3 的前端长列表相关组件库（现在已不维护，可直接使用 antd4</p>
<p>最近在研究的技术有：webassembly，webgl</p>
<p>废话不多说，下面进入正题 ~</p>
<a id="more"></a>

<h2 id="面试总结与建议"><a href="#面试总结与建议" class="headerlink" title="面试总结与建议"></a>面试总结与建议</h2><p>先说这个，比较重要。</p>
<p>19年底的几个面试没做好准备，对自己过于自信，直接拿大厂刷面经，现在想想是真的蠢。。</p>
<p>建议大家先找朋友帮忙面试，然后可以先投一些不会去的厂刷刷经验。</p>
<p>由于大厂的面试流程比较久，如果有流程较快的备胎公司的话，建议在大厂面试的末尾阶段再投，否则多个 hr 催着给答复很难受。</p>
<p>技术面的话，大部分问题网上都可以找到，不过有些面试官会层层递进，背的还是理解的一试就知道</p>
<p>然后要注意非技术题目也很重要，需要好好准备，包括且不限于：</p>
<ul>
<li>自我介绍（hr版本和技面版本）</li>
<li>离职原因</li>
<li>未来规划</li>
<li>为什么你希望来我们公司工作?</li>
<li>你希望通过这份工作获得什么?</li>
<li>说说优缺点，用几个词描述自己</li>
<li>还有什么其他问题</li>
<li>为什么选择前端</li>
<li>平时的学习方式</li>
<li>和原同事的比较</li>
<li>项目开发流程，管理流程</li>
</ul>
<p>有几个大厂就是因为非技术问题没有准备，回答的时候表述很乱，最终综合下挂了。。</p>
<p>js 手写题和算法题的话可以参考这个<a href="https://github.com/francecil/leetcode/issues?q=is%3Aissue+is%3Aclosed" target="_blank" rel="noopener">项目</a>，这是我做过的题的一些记录</p>
<p>由于疫情原因中间停了一段时间没有面试，加上等待 offer 的时间，从开始面试到最终确认 offer 前后也经历了三个月的时间。庆幸的是，最后拿到了满意的 offer。</p>
<p>下面就以面试的顺序来进行描述，面试时没有录音，题目都是事后进行回忆，写的不全，有些重复的题目可能不再记录。</p>
<h2 id="阿里-供应链平台"><a href="#阿里-供应链平台" class="headerlink" title="阿里-供应链平台"></a>阿里-供应链平台</h2><p>面试阿里的契机是有个大佬通过博客找到了我的邮箱，说帮我内推，正好准备找工作，于是就开始了面试之旅，其实那时候还没准备好。。</p>
<h3 id="一面-19-12-16"><a href="#一面-19-12-16" class="headerlink" title="一面 19/12/16"></a>一面 19/12/16</h3><ul>
<li><p>讲一个最有难度的项目</p>
<ul>
<li>追问：有哪些功能，负责什么模块</li>
<li>追问：做了哪些体验优化</li>
<li>追问：pv 多少</li>
<li>追问：首屏加载时长</li>
</ul>
</li>
<li><p>vue 和 react 的区别</p>
<blockquote>
<p>考察的是原理上的不同，千万不要讲用法。核心区别是数据更新触发页面重渲染的方式不一样。vue 采用的是数据拦截和依赖追踪，数据变化就会触发相应的更新；react 通过api去变更数据并进行局部更新，因为对数据变化无感知，因此可能需要对子组件也进行 render，不然子组件不知道是否应该重新render</p>
</blockquote>
</li>
<li><p>虚拟dom用来解决什么问题，性能和设计两方面回答</p>
<blockquote>
<p>其实面试官想考察的是组件和底层元素的抽离这点，性能的话看业务代码不一定虚拟 dom 就比较优</p>
</blockquote>
</li>
<li><p>react hooks 解决了什么问题</p>
<blockquote>
<p>状态逻辑难以复用；生命周期中的逻辑代码难以维护；this 指向问题</p>
</blockquote>
</li>
</ul>
<ul>
<li><p>讲讲 vue 原理</p>
<blockquote>
<p>模板解析，响应式，渲染</p>
</blockquote>
<ul>
<li>追问：模板解析过程，核心是什么<blockquote>
<p>当时没理解问题要问什么，我猜应该是要问 vdom-&gt;diff-&gt;patch</p>
</blockquote>
</li>
</ul>
</li>
<li><p>从输入 url 到页面渲染的过程</p>
<blockquote>
<p>参看 <a href="https://gahing.top/2019/12/14/2019Q4/HTML%E6%96%87%E6%A1%A3%E7%9A%84%E5%8A%A0%E8%BD%BD%E8%BF%87%E7%A8%8B/">从输入url后浏览器发生了什么</a></p>
</blockquote>
<ul>
<li>追问：哪些地方可以做优化，做个归类</li>
</ul>
</li>
<li><p>csrf</p>
<ul>
<li>追问：不是说 cookie 隔离的么，为什么其他页面发请求会带上<blockquote>
<p>参看 <a href="https://gahing.top/2020/03/08/2020/%E9%9D%A2%E8%AF%95%E5%AE%98%E9%97%AE%EF%BC%9A%E4%BB%80%E4%B9%88%E6%98%AF%20canvas%20%E6%B1%A1%E6%9F%93/">面试官问：什么是 canvas 污染</a></p>
</blockquote>
</li>
</ul>
</li>
<li><p>settimeout ，promise，async/await 区别</p>
<blockquote>
<p>宏任务，微任务，协程</p>
</blockquote>
<ul>
<li>追问：事件循环有哪些任务源<blockquote>
<p>网络，定时器，history，用户交互事件，DOM manipulation</p>
</blockquote>
</li>
<li>追问：以什么优先级取任务源<blockquote>
<p>3/4概率拿交互任务源，避免交互堵塞</p>
</blockquote>
</li>
</ul>
</li>
<li><p>后端项目，用的什么框架</p>
<ul>
<li>express 的中间件原理<blockquote>
<p>本质就是回调队列，next 执行</p>
</blockquote>
</li>
<li>egg</li>
</ul>
</li>
</ul>
<h3 id="二面-19-12-26"><a href="#二面-19-12-26" class="headerlink" title="二面 19/12/26"></a>二面 19/12/26</h3><ul>
<li>项目和业务的相关问题</li>
<li>两道 js 手写题</li>
</ul>
<p>可能是项目经历和技能与岗位要求不匹配，在 28 号收到了拒信，简历进入了人才池..</p>
<h2 id="字节-今日头条"><a href="#字节-今日头条" class="headerlink" title="字节-今日头条"></a>字节-今日头条</h2><p>头条是没做好准备就去面的，结果很差</p>
<h3 id="一面-19-12-23"><a href="#一面-19-12-23" class="headerlink" title="一面 19/12/23"></a>一面 19/12/23</h3><ul>
<li>聊项目</li>
<li>vue/react 的相关问题</li>
<li>【笔试】写个继承</li>
<li>讲讲原型链<blockquote>
<p>参看 <a href="https://gahing.top/2019/12/31/2019Q4/%E9%87%8D%E5%AD%A6%20JS%20%E5%8E%9F%E5%9E%8B%E9%93%BE/">重学 JS 原型链</a></p>
</blockquote>
</li>
<li>讲讲模块化</li>
<li>webpack 中 loader 和 plugin 的区别</li>
<li>class 的 super 做了什么</li>
</ul>
<h2 id="美团-企平"><a href="#美团-企平" class="headerlink" title="美团-企平"></a>美团-企平</h2><h3 id="一面-19-12-26"><a href="#一面-19-12-26" class="headerlink" title="一面 19/12/26"></a>一面 19/12/26</h3><ul>
<li>基本是讲项目<ul>
<li>长列表为何不做节流<blockquote>
<p>参看 <a href="https://gahing.top/2020/01/07/2020/%E4%B8%BA%E4%BB%80%E4%B9%88%E4%B8%8D%E7%94%A8rAF%E8%BF%9B%E8%A1%8C%E6%BB%9A%E5%8A%A8%E8%8A%82%E6%B5%81/">为什么不用rAF进行滚动节流</a></p>
</blockquote>
</li>
</ul>
</li>
<li>同域请求的并发数限制的原因<blockquote>
<p>线程切换损耗，端口占用限制</p>
</blockquote>
</li>
<li>vuex 解决什么问题</li>
<li>cdn 加速原理</li>
<li>组内开发流程，如何提高代码质量</li>
</ul>
<h3 id="二面-19-12-17"><a href="#二面-19-12-17" class="headerlink" title="二面 19/12/17"></a>二面 19/12/17</h3><ul>
<li>js 内存模型</li>
<li>讲讲闭包</li>
<li>讲讲原型链</li>
<li>讲讲变量提升</li>
<li>vue 和 react 的区别</li>
<li>http2 的特点</li>
<li>https 原理</li>
<li>讲讲缓存</li>
<li>讲讲双向绑定</li>
<li>讲讲js的线程</li>
<li>开放题：js 是一门面向对象的语言么？</li>
<li>讲讲项目中用到的设计模式</li>
<li>最近关注的新技术</li>
<li>项目上的问题</li>
<li>【笔试】转驼峰</li>
</ul>
<h2 id="shopee"><a href="#shopee" class="headerlink" title="shopee"></a>shopee</h2><p>一开始以为是小公司，想拿来刷面经，后面才发现这个公司挺不错的。</p>
<p>本次面试应该是最后一次没有准备的面试</p>
<h3 id="一面-2020-12-30"><a href="#一面-2020-12-30" class="headerlink" title="一面 2020/12/30"></a>一面 2020/12/30</h3><ul>
<li>【笔试】模拟 instanceOf</li>
<li>讲讲原型</li>
<li>讲讲中间人攻击</li>
</ul>
<h2 id="ringcenter"><a href="#ringcenter" class="headerlink" title="ringcenter"></a>ringcenter</h2><p>先做了几道笔试题，主要考虑 es6语法和代码风格，我面试的部门听说只有一轮技术面，所以前后聊了快两个小时</p>
<h3 id="一面-2020-1-2"><a href="#一面-2020-1-2" class="headerlink" title="一面 2020/1/2"></a>一面 2020/1/2</h3><ul>
<li>react 相关问题</li>
<li>css 基线</li>
<li>css 盒模型 嵌套块元素最终 marginTop 的值</li>
<li>vue 和 react 的比较</li>
<li>https 仅用非对称加密的可行性</li>
<li>词法环境</li>
<li>事件循环，回调由哪个线程处理</li>
<li>编程习惯相关</li>
<li>代码性能相关</li>
</ul>
<p>css 没怎么准备，回答错了，最后挂掉</p>
<h2 id="阿里-政务中台"><a href="#阿里-政务中台" class="headerlink" title="阿里-政务中台"></a>阿里-政务中台</h2><p>换了一个部门投递，不过部门之间是会交流的。不要以为前一个部门挂掉对下一个部门没有影响。。</p>
<p>不过好像前一个部门对我的评价还行</p>
<h3 id="一面-2020-1-3"><a href="#一面-2020-1-3" class="headerlink" title="一面 2020/1/3"></a>一面 2020/1/3</h3><ul>
<li>某个列表组件有大量 dom 节点，如何优化</li>
<li>虚拟 dom</li>
<li>301 和 302 的使用场景</li>
</ul>
<h3 id="笔试-2020-1-7"><a href="#笔试-2020-1-7" class="headerlink" title="笔试 2020/1/7"></a>笔试 2020/1/7</h3><p>做了三道笔试题：去重，模拟 render，继承</p>
<h3 id="二面-2020-1-8"><a href="#二面-2020-1-8" class="headerlink" title="二面 2020/1/8"></a>二面 2020/1/8</h3><ul>
<li>主要是问项目</li>
<li>状态码</li>
<li>PUT 和 POST 的区别<blockquote>
<p>幂等性</p>
</blockquote>
</li>
</ul>
<p>最后聊天的时候，面试官说已经认可我的技术了，让我好好准备后面的面试，另外让我注意下表示方式和技巧。那时候还以为稳了。。</p>
<h3 id="三面-2020-1-16"><a href="#三面-2020-1-16" class="headerlink" title="三面 2020/1/16"></a>三面 2020/1/16</h3><ul>
<li>技术成长相关</li>
<li>和其他同事的比较</li>
<li>学习和工作</li>
<li>如何学习</li>
<li>形容自己</li>
</ul>
<p>应该是平台的负责人面试，都是非技术性问题，有些题目没有准备结果回答的很差。。</p>
<h3 id="交叉面-2020-1-17"><a href="#交叉面-2020-1-17" class="headerlink" title="交叉面 2020/1/17"></a>交叉面 2020/1/17</h3><p>隔天就收到了四面的通知，如果这面过了应该就稳了。。</p>
<p>结果上来就是 react 相关问题， 由于我 react 了解的不是那么深入，很多回答不上来，我只好对面试官自己熟悉的 vue ，希望往 vue 方面靠。后面面试官就没有继续问了，主要聊项目这块。</p>
<p>面试完之后感觉凉了，由于没有收到拒信，但是内心又存在着一点小希望。</p>
<p>后面就是过年了，boss 上问内推的那个人也没有回复，直到2月初又有新的部门从简历池把我捞起来，我才知道挂了。</p>
<p>这里建议可以加一下面试官的微信（如果对方同意的话），可以了解反馈，交个朋友</p>
<h2 id="美团民宿"><a href="#美团民宿" class="headerlink" title="美团民宿"></a>美团民宿</h2><h3 id="一面-2020-1-7"><a href="#一面-2020-1-7" class="headerlink" title="一面 2020/1/7"></a>一面 2020/1/7</h3><ul>
<li>项目相关</li>
<li>【笔试】找到字符串中出现次数最多的字母</li>
<li>java 怎么实现单例<blockquote>
<p>饿汉，懒汉</p>
</blockquote>
</li>
<li>为什么 js 中没有单例<blockquote>
<p>单线程</p>
</blockquote>
</li>
</ul>
<h3 id="美团民宿-二面-2020-1-7"><a href="#美团民宿-二面-2020-1-7" class="headerlink" title="美团民宿 二面 2020/1/7"></a>美团民宿 二面 2020/1/7</h3><p>技术成长方面</p>
<p>在“为什么离职”这个问题上走远了。。</p>
<h2 id="腾讯文档"><a href="#腾讯文档" class="headerlink" title="腾讯文档"></a>腾讯文档</h2><h3 id="一面-2020-1-9"><a href="#一面-2020-1-9" class="headerlink" title="一面 2020/1/9"></a>一面 2020/1/9</h3><ul>
<li>服务端渲染原理</li>
<li>【笔试题】26进制<blockquote>
<p><a href="https://github.com/francecil/leetcode/issues/29" target="_blank" rel="noopener">实现26进制</a></p>
</blockquote>
</li>
<li>http 协议</li>
<li>chrome 开久了卡顿的原因</li>
</ul>
<p>笔试题没有完美写出来，加之之前没准备面试的另一个部门对我的评价较差，综合下挂掉了。<br>再次提示，其他部门的面试反馈会影响本部门的面试成绩。</p>
<h2 id="年前阶段总结"><a href="#年前阶段总结" class="headerlink" title="年前阶段总结"></a>年前阶段总结</h2><p>年前的面试大概就是这样，很惨，一个 offer 都没有。</p>
<p>所以建议做好准备再开始面试</p>
<p>受疫情影响，在家里呆了一个月。那时候疫情比较恐怖，打算直接找厦门的公司了</p>
<h2 id="亿联"><a href="#亿联" class="headerlink" title="亿联"></a>亿联</h2><h3 id="一面-2020-2-25"><a href="#一面-2020-2-25" class="headerlink" title="一面 2020/2/25"></a>一面 2020/2/25</h3><ul>
<li>数据结构： hash 表（红黑树，扩容，hash算法），LinkedList</li>
<li>vue 和 react 在 dom diff 上的差别</li>
<li>v8 的分代垃圾回收</li>
</ul>
<h3 id="二面-2020-2-26"><a href="#二面-2020-2-26" class="headerlink" title="二面 2020/2/26"></a>二面 2020/2/26</h3><ul>
<li>后端数据太大，长列表白屏较久如何解决<blockquote>
<p> 防抖+loading</p>
</blockquote>
</li>
</ul>
<h2 id="字节跳动-西瓜视频"><a href="#字节跳动-西瓜视频" class="headerlink" title="字节跳动-西瓜视频"></a>字节跳动-西瓜视频</h2><p>发现字节在厦门也有团队，于是拜托了学弟帮我内推，整个过程还是比较顺利的</p>
<h3 id="一、二面-2020-2-26"><a href="#一、二面-2020-2-26" class="headerlink" title="一、二面 2020/2/26"></a>一、二面 2020/2/26</h3><ul>
<li>同源策略，为什么会有跨域限制？</li>
<li>【笔试】fetch 增加超时功能</li>
<li>【笔试】非递归二叉树前序遍历</li>
<li>【笔试】取值 1~100 的元素，进行排序（计数排序&amp;快排）</li>
<li>大数据的图表优化</li>
</ul>
<p>两个面试是一起的，总共大概2个多小时，后面能记住的题目也不多了。</p>
<h3 id="三面-2020-3-3"><a href="#三面-2020-3-3" class="headerlink" title="三面 2020/3/3"></a>三面 2020/3/3</h3><p>先是问了之前面头条为什么会挂，然后把一些问题重问了一遍</p>
<ul>
<li>react 批量更新原理</li>
<li>react fiber</li>
<li>react hooks</li>
<li>vue3 的改进</li>
<li>websocket 协议，轮询，长连接</li>
<li>canvas,svg 对比，canvas 转图片，canvas 污染</li>
<li>流媒体相关</li>
<li>JSBridge</li>
<li>h5 开发相关</li>
</ul>
<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>天道酬勤，与君共勉~</p>
<p>希望本文能给您带来一点点帮助</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>面经</tag>
      </tags>
  </entry>
  <entry>
    <title>WebGL 纹理</title>
    <url>/2020/03/18/WebGL/WebGL%20%E7%BA%B9%E7%90%86/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>对一个几何图形进行贴图，所贴的图就叫<strong>纹理</strong>(texture)，或<strong>纹理图像</strong>(texture image)</p>
<p>贴图的过程叫做<strong>纹理映射</strong></p>
<p>组成纹理图像的像素成为 <strong>纹素</strong>(texels, texture elements) </p>
<p>光栅化时每个片元会涂上纹素</p>
<p>纹理和光照一样，都是作用于世界坐标系的，不受投影和视图矩阵的影响</p>
<a id="more"></a>

<p>下面说说纹理映射的具体过程</p>
<h1 id="纹理映射"><a href="#纹理映射" class="headerlink" title="纹理映射"></a>纹理映射</h1><p>主要分为 4 步：</p>
<ol>
<li>初始化纹理信息</li>
<li>加载纹理图像</li>
<li>配置并使用纹理</li>
<li>着色器处理</li>
</ol>
<h2 id="1-初始化纹理信息"><a href="#1-初始化纹理信息" class="headerlink" title="1. 初始化纹理信息"></a>1. 初始化纹理信息</h2><p>这一步主要是设置纹理坐标，通过 buffer 绑定属性</p>
<p>首先需要确定纹理的坐标系，采用 s-t 坐标系，见下图查看映射关系</p>
<p><img src="https://upload-images.jianshu.io/upload_images/9277731-fda445428710a7b7.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="texture_coord"></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initVertexBuffers</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">const</span> verticesTexCoords = <span class="keyword">new</span> <span class="built_in">Float32Array</span>([</span><br><span class="line">    <span class="comment">// 顶点坐标,    纹理坐标</span></span><br><span class="line">    <span class="number">-0.5</span>,  <span class="number">0.5</span>,   <span class="number">0.0</span>, <span class="number">1.0</span>,</span><br><span class="line">    <span class="number">-0.5</span>, <span class="number">-0.5</span>,   <span class="number">0.0</span>, <span class="number">0.0</span>,</span><br><span class="line">     <span class="number">0.5</span>,  <span class="number">0.5</span>,   <span class="number">1.0</span>, <span class="number">1.0</span>,</span><br><span class="line">     <span class="number">0.5</span>, <span class="number">-0.5</span>,   <span class="number">1.0</span>, <span class="number">0.0</span>,</span><br><span class="line">  ]);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// ... 省略顶点坐标的处理</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> FSIZE = verticesTexCoords.BYTES_PER_ELEMENT;</span><br><span class="line">  <span class="keyword">var</span> a_TexCoord = gl.getAttribLocation(program, <span class="string">"a_texCoord"</span>);</span><br><span class="line">  <span class="keyword">var</span> texcoordBuffer = gl.createBuffer();</span><br><span class="line">  gl.bindBuffer(gl.ARRAY_BUFFER, texcoordBuffer);</span><br><span class="line">  gl.bufferData(gl.ARRAY_BUFFER, verticesTexCoords, gl.STATIC_DRAW);</span><br><span class="line">  <span class="comment">// 每次迭代运行运动 4 FSIZE 内存到下一个数据开始点</span></span><br><span class="line">  <span class="comment">// 初始读取的偏移量为 2 FSIZE</span></span><br><span class="line">  gl.vertexAttribPointer(a_TexCoord, <span class="number">2</span>, gl.FLOAT, <span class="literal">false</span>, FSIZE * <span class="number">4</span>, FSIZE * <span class="number">2</span>);</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2-加载纹理图像"><a href="#2-加载纹理图像" class="headerlink" title="2. 加载纹理图像"></a>2. 加载纹理图像</h2><p>加载的纹理图像不能对 canvas 造成污染。也就是说，对纹理的加载同样需要遵循跨域访问规则</p>
<blockquote>
<p>具体原因请看 <a href="https://juejin.im/post/5e64f811e51d4526e807fefa" target="_blank" rel="noopener">面试官问：什么是 canvas 污染</a></p>
</blockquote>
<p>本文采用的纹理图片地址为 <code>https://webglfundamentals.org/webgl/resources/leaves.jpg</code></p>
<p>为了进行跨域访问，还需要设置 <code>crossOrigin = &quot;Anonymous&quot;</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadImage</span> (<span class="params">url, callback</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> img = <span class="keyword">new</span> Image();</span><br><span class="line">  img.crossOrigin = <span class="string">"Anonymous"</span></span><br><span class="line">  img.src = url;</span><br><span class="line">  img.onload = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    callback(img)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">loadImage(<span class="string">"https://webglfundamentals.org/webgl/resources/leaves.jpg"</span>, (img) =&gt; &#123;</span><br><span class="line">  <span class="comment">// 对 img 进行下一步处理</span></span><br><span class="line">  loadTexture(img)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>





<h2 id="3-配置并使用纹理"><a href="#3-配置并使用纹理" class="headerlink" title="3. 配置并使用纹理"></a>3. 配置并使用纹理</h2><h3 id="处理图像（可选）"><a href="#处理图像（可选）" class="headerlink" title="处理图像（可选）"></a>处理图像（可选）</h3><p>有以下用法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 对图像进行 Y 轴反转，第二个参数未 0 值表示 true ，下同</span></span><br><span class="line">gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, <span class="number">1</span>);</span><br><span class="line"><span class="comment">// 对图像的 RGB 每个分量都乘以 A</span></span><br><span class="line">gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, <span class="number">1</span>);</span><br></pre></td></tr></table></figure>

<h3 id="创建纹理对象"><a href="#创建纹理对象" class="headerlink" title="创建纹理对象"></a>创建纹理对象</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> texture = gl.createTexture();</span><br></pre></td></tr></table></figure>

<h3 id="激活并绑定纹理单元"><a href="#激活并绑定纹理单元" class="headerlink" title="激活并绑定纹理单元"></a>激活并绑定纹理单元</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 默认绑定到 0 号单元，如果只有一张纹理，无需进行 activeTexture</span></span><br><span class="line">gl.activeTexture(gl.TEXTURE0);</span><br><span class="line">gl.bindTexture(gl.TEXTURE_2D, texture);</span><br></pre></td></tr></table></figure>
<p><code>gl.TEXTURE_2D</code> 表示二维纹理，<code>gl.TEXTURE_CUBE_MAP</code> 为立方体纹理，后面会提到</p>
<h3 id="配置纹理对象参数"><a href="#配置纹理对象参数" class="headerlink" title="配置纹理对象参数"></a>配置纹理对象参数</h3><p>利用 texParameter 设置纹理图像映射到图形上的具体方式，包括放大、缩小、水平填充、垂直填充</p>
<p>具体用法详见 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/WebGLRenderingContext/texParameter" target="_blank" rel="noopener">texParameter</a></p>
<p>举例</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用 LINEAR 缩小纹理图像</span></span><br><span class="line">gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);</span><br></pre></td></tr></table></figure>

<p>需要注意的是，如果纹理宽高有一个非 2 的幂，则显示纹理失败，通常进行以下处理</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 检查每个维度是否是 2 的幂</span></span><br><span class="line"><span class="keyword">if</span> (isPowerOf2(image.width) &amp;&amp; isPowerOf2(image.height)) &#123;</span><br><span class="line">  <span class="comment">// 是 2 的幂，一般用贴图</span></span><br><span class="line">  gl.generateMipmap(gl.TEXTURE_2D);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">// 不是 2 的幂，关闭贴图并设置包裹模式（不需要重复）为到边缘</span></span><br><span class="line">  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);</span><br><span class="line">  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);</span><br><span class="line">  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="配置纹理图像"><a href="#配置纹理图像" class="headerlink" title="配置纹理图像"></a>配置纹理图像</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">gl.texImage2D(gl.TEXTURE_2D, <span class="number">0</span>, gl.RGB, gl.RGB, gl.UNSIGNED_BYTE, image);</span><br></pre></td></tr></table></figure>

<p>更多用法详见 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/WebGLRenderingContext/texImage2D" target="_blank" rel="noopener">WebGLRenderingContext.texImage2D()</a></p>
<h3 id="将纹理单元传递给片段着色器"><a href="#将纹理单元传递给片段着色器" class="headerlink" title="将纹理单元传递给片段着色器"></a>将纹理单元传递给片段着色器</h3><p>获取取样器索引，取样器用于从纹理图像中获取纹素（该步骤也可以在初始化时进行）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> u_Sampler = gl.getUniformLocation(program, <span class="string">'u_Sampler'</span>);</span><br></pre></td></tr></table></figure>
<p>为取样器指定纹理单元(gl.TEXTUREn)编号，GL 最多可同时注册 32 张纹理</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 未指定 u_Sampler 的值时默认设置为 0</span></span><br><span class="line"><span class="comment">// 因此单张纹理也可以不进行 u_Sampler 的赋值</span></span><br><span class="line">gl.uniform1i(u_Sampler, <span class="number">0</span>);</span><br></pre></td></tr></table></figure>

<h2 id="4-着色器处理"><a href="#4-着色器处理" class="headerlink" title="4. 着色器处理"></a>4. 着色器处理</h2><p>执行绘制时，着色器的运行过程如下：</p>
<p>首先是顶点着色器向片段着色器传输纹理坐标，该纹理坐标是可变量，在片段着色器中会进行插值</p>
<p>然后在片段着色器中获取纹素，并将其颜色赋予片元</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> VSHADER_SOURCE = <span class="string">`</span></span><br><span class="line"><span class="string">  attribute vec4 a_Position;</span></span><br><span class="line"><span class="string">  attribute vec2 a_TexCoord;</span></span><br><span class="line"><span class="string">  varying vec2 v_TexCoord;</span></span><br><span class="line"><span class="string">  void main() &#123;</span></span><br><span class="line"><span class="string">    gl_Position = a_Position;</span></span><br><span class="line"><span class="string">    v_TexCoord = a_TexCoord;</span></span><br><span class="line"><span class="string">  &#125;`</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Fragment shader program</span></span><br><span class="line"><span class="keyword">var</span> FSHADER_SOURCE = <span class="string">`</span></span><br><span class="line"><span class="string">  precision mediump float;</span></span><br><span class="line"><span class="string">  uniform sampler2D u_Sampler;</span></span><br><span class="line"><span class="string">  // 纹理坐标插值</span></span><br><span class="line"><span class="string">  varying vec2 v_TexCoord;</span></span><br><span class="line"><span class="string">  void main() &#123;</span></span><br><span class="line"><span class="string">    // 获取纹素</span></span><br><span class="line"><span class="string">    gl_FragColor = texture2D(u_Sampler, v_TexCoord);</span></span><br><span class="line"><span class="string">  &#125;`</span></span><br></pre></td></tr></table></figure>
<p>其中采用了 GLSL ES 内置函数 texture2D 来抽取纹素</p>
<h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>绘制一个 400x400 的正方形，并将 240x180 的图像作为纹理渲染在上面，采用包裹模式</p>
<p>完整代码如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">HTML</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">"canvas"</span> <span class="attr">width</span>=<span class="string">"400"</span> <span class="attr">height</span>=<span class="string">"400"</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 工具方法</span></span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">isPowerOf2</span><span class="params">(value)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">return</span> (value &amp; (value - <span class="number">1</span>)) === <span class="number">0</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">createShader</span><span class="params">(gl, type, source)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">var</span> shader = gl.createShader(type); <span class="comment">// 创建着色器对象</span></span></span><br><span class="line"><span class="actionscript">      gl.shaderSource(shader, source); <span class="comment">// 提供数据源</span></span></span><br><span class="line"><span class="actionscript">      gl.compileShader(shader); <span class="comment">// 编译 -&gt; 生成着色器</span></span></span><br><span class="line"><span class="actionscript">      <span class="keyword">var</span> success = gl.getShaderParameter(shader, gl.COMPILE_STATUS);</span></span><br><span class="line">      if (success) &#123;</span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> shader;</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(gl.getShaderInfoLog(shader));</span></span><br><span class="line">      gl.deleteShader(shader);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="actionscript">    <span class="comment">// 创建着色器程序</span></span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">createProgramFromSources</span><span class="params">(gl, vertexShader, fragmentShader)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">var</span> program = gl.createProgram();</span></span><br><span class="line">      gl.attachShader(program, vertexShader);</span><br><span class="line">      gl.attachShader(program, fragmentShader);</span><br><span class="line">      gl.linkProgram(program);</span><br><span class="line"><span class="actionscript">      <span class="keyword">var</span> success = gl.getProgramParameter(program, gl.LINK_STATUS);</span></span><br><span class="line">      if (success) &#123;</span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> program;</span></span><br><span class="line">      &#125;</span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(gl.getProgramInfoLog(program));</span></span><br><span class="line">      gl.deleteProgram(program);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">// 初始化顶点和纹理数据，并绑定 buffer</span></span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">initVertexBuffers</span><span class="params">(gl, program)</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> verticesTexCoords = <span class="keyword">new</span> <span class="built_in">Float32Array</span>([</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 顶点坐标, 纹理坐标</span></span></span><br><span class="line">        -1.0, 1.0, 0.0, 1.0,</span><br><span class="line">        -1.0, -1.0, 0.0, 0.0,</span><br><span class="line">        1.0, 1.0, 1.0, 1.0,</span><br><span class="line">        1.0, -1.0, 1.0, 0.0,</span><br><span class="line">      ]);</span><br><span class="line"><span class="actionscript">      <span class="keyword">var</span> n = <span class="number">4</span>; <span class="comment">// The number of vertices</span></span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">      <span class="comment">// 为 WebGL 指定着色程序</span></span></span><br><span class="line">      gl.useProgram(program);</span><br><span class="line"></span><br><span class="line"><span class="actionscript">      <span class="comment">// Create the buffer object</span></span></span><br><span class="line"><span class="actionscript">      <span class="keyword">var</span> vertexTexCoordBuffer = gl.createBuffer();</span></span><br><span class="line">      if (!vertexTexCoordBuffer) &#123;</span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">'Failed to create the buffer object'</span>);</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> <span class="number">-1</span>;</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      gl.bindBuffer(gl.ARRAY_BUFFER, vertexTexCoordBuffer);</span><br><span class="line">      gl.bufferData(gl.ARRAY_BUFFER, verticesTexCoords, gl.STATIC_DRAW);</span><br><span class="line"></span><br><span class="line"><span class="actionscript">      <span class="keyword">var</span> FSIZE = verticesTexCoords.BYTES_PER_ELEMENT;</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">var</span> a_Position = gl.getAttribLocation(program, <span class="string">'a_Position'</span>);</span></span><br><span class="line">      if (a_Position &lt; 0) &#123;</span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">'Failed to get the storage location of a_Position'</span>);</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> <span class="number">-1</span>;</span></span><br><span class="line">      &#125;</span><br><span class="line"><span class="actionscript">      gl.vertexAttribPointer(a_Position, <span class="number">2</span>, gl.FLOAT, <span class="literal">false</span>, FSIZE * <span class="number">4</span>, <span class="number">0</span>);</span></span><br><span class="line">      gl.enableVertexAttribArray(a_Position);</span><br><span class="line"></span><br><span class="line"><span class="actionscript">      <span class="keyword">var</span> a_TexCoord = gl.getAttribLocation(program, <span class="string">'a_TexCoord'</span>);</span></span><br><span class="line">      if (a_TexCoord &lt; 0) &#123;</span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">'Failed to get the storage location of a_TexCoord'</span>);</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> <span class="number">-1</span>;</span></span><br><span class="line">      &#125;</span><br><span class="line"><span class="actionscript">      gl.vertexAttribPointer(a_TexCoord, <span class="number">2</span>, gl.FLOAT, <span class="literal">false</span>, FSIZE * <span class="number">4</span>, FSIZE * <span class="number">2</span>);</span></span><br><span class="line">      gl.enableVertexAttribArray(a_TexCoord);</span><br><span class="line"><span class="actionscript">      <span class="keyword">return</span> n;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">// 初始化纹理，加载图像</span></span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">initTextures</span><span class="params">(gl, program, url, callback)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">var</span> texture = gl.createTexture();   <span class="comment">// Create a texture object</span></span></span><br><span class="line">      if (!texture) &#123;</span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">'Failed to create the texture object'</span>);</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">      <span class="comment">// Get the storage location of u_Sampler</span></span></span><br><span class="line"><span class="actionscript">      <span class="keyword">var</span> u_Sampler = gl.getUniformLocation(program, <span class="string">'u_Sampler'</span>);</span></span><br><span class="line">      if (!u_Sampler) &#123;</span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">'Failed to get the storage location of u_Sampler'</span>);</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line">      &#125;</span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> image = <span class="keyword">new</span> Image();</span></span><br><span class="line"><span class="actionscript">      image.crossOrigin = <span class="string">"Anonymous"</span></span></span><br><span class="line">      image.src = url;</span><br><span class="line"><span class="javascript">      image.onload = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span></span><br><span class="line">        callback(image, texture, u_Sampler)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">// 配置并使用纹理</span></span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">loadTexture</span><span class="params">(gl, image, texture, u_Sampler, n)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">      gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, <span class="number">1</span>); <span class="comment">// Flip the image's y axis</span></span></span><br><span class="line">      gl.activeTexture(gl.TEXTURE0);</span><br><span class="line">      gl.bindTexture(gl.TEXTURE_2D, texture);</span><br><span class="line"></span><br><span class="line">      if (isPowerOf2(image.width) &amp;&amp; isPowerOf2(image.height)) &#123;</span><br><span class="line"><span class="actionscript">        <span class="comment">// 是 2 的幂，一般用贴图</span></span></span><br><span class="line">        gl.generateMipmap(gl.TEXTURE_2D);</span><br><span class="line"><span class="actionscript">      &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 不是 2 的幂，关闭贴图并设置包裹模式（不需要重复）为到边缘</span></span></span><br><span class="line">        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);</span><br><span class="line">        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);</span><br><span class="line">        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);</span><br><span class="line">      &#125;</span><br><span class="line"><span class="actionscript">      <span class="comment">// Set the texture image</span></span></span><br><span class="line">      gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGB, gl.RGB, gl.UNSIGNED_BYTE, image);</span><br><span class="line"></span><br><span class="line"><span class="actionscript">      <span class="comment">// Set the texture unit 0 to the sampler</span></span></span><br><span class="line">      gl.uniform1i(u_Sampler, 0);</span><br><span class="line"></span><br><span class="line"><span class="actionscript">      gl.clear(gl.COLOR_BUFFER_BIT);   <span class="comment">// Clear &lt;canvas&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">      gl.drawArrays(gl.TRIANGLE_STRIP, <span class="number">0</span>, n); <span class="comment">// Draw the rectangle</span></span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">      <span class="comment">// Get A WebGL context</span></span></span><br><span class="line"><span class="actionscript">      <span class="comment">/** @type &#123;HTMLCanvasElement&#125; */</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">"canvas"</span>);</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">var</span> gl = canvas.getContext(<span class="string">"webgl"</span>);</span></span><br><span class="line">      if (!gl) &#123;</span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span>;</span></span><br><span class="line">      &#125;</span><br><span class="line"><span class="actionscript">      <span class="keyword">const</span> VSHADER_SOURCE = `</span></span><br><span class="line">        attribute vec4 a_Position;</span><br><span class="line">        attribute vec2 a_TexCoord;</span><br><span class="line">        varying vec2 v_TexCoord;</span><br><span class="line"><span class="actionscript">        <span class="keyword">void</span> main() &#123;</span></span><br><span class="line">          gl_Position = a_Position;</span><br><span class="line">          v_TexCoord = a_TexCoord;</span><br><span class="line">        &#125;`</span><br><span class="line"></span><br><span class="line"><span class="actionscript">      <span class="comment">// Fragment shader program</span></span></span><br><span class="line"><span class="actionscript">      <span class="keyword">const</span> FSHADER_SOURCE = `</span></span><br><span class="line">        precision mediump float;</span><br><span class="line">        uniform sampler2D u_Sampler;</span><br><span class="line"><span class="actionscript">        <span class="comment">// 纹理坐标插值</span></span></span><br><span class="line">        varying vec2 v_TexCoord;</span><br><span class="line"><span class="actionscript">        <span class="keyword">void</span> main() &#123;</span></span><br><span class="line"><span class="actionscript">          <span class="comment">// 获取纹素</span></span></span><br><span class="line">          gl_FragColor = texture2D(u_Sampler, v_TexCoord);</span><br><span class="line">        &#125;`</span><br><span class="line"><span class="actionscript">      <span class="keyword">var</span> vertexShader = createShader(gl, gl.VERTEX_SHADER, VSHADER_SOURCE);</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">var</span> fragmentShader = createShader(gl, gl.FRAGMENT_SHADER, FSHADER_SOURCE);</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">var</span> program = createProgramFromSources(gl, vertexShader, fragmentShader)</span></span><br><span class="line">      if (!program) &#123;</span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">'Failed to intialize shaders.'</span>);</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span>;</span></span><br><span class="line">      &#125;</span><br><span class="line"><span class="actionscript">      <span class="keyword">var</span> n = initVertexBuffers(gl, program);</span></span><br><span class="line">      if (n &lt; 0) &#123;</span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">'Failed to set the vertex information'</span>);</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span>;</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      gl.clearColor(0.0, 0.0, 0.0, 1.0);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="actionscript">      initTextures(gl, program, <span class="string">"https://webglfundamentals.org/webgl/resources/leaves.jpg"</span>, (image, texture, u_Sampler) =&gt; &#123;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 对 image 进行下一步处理</span></span></span><br><span class="line">        loadTexture(gl, image, texture, u_Sampler, n)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    main();</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>效果以及原图</p>
<p><img src="https://upload-images.jianshu.io/upload_images/9277731-79378db006dfc180.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="leaves-canvas.jpg"></p>
<p><img src="https://upload-images.jianshu.io/upload_images/9277731-44fac941dee56f32.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="leaves.jpg"></p>
<h1 id="加载多个纹理"><a href="#加载多个纹理" class="headerlink" title="加载多个纹理"></a>加载多个纹理</h1><p>有些场景需要加载多个纹理，并共同作用于同一个片元</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">precision mediump <span class="keyword">float</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// our textures</span></span><br><span class="line">uniform sampler2D u_image0;</span><br><span class="line">uniform sampler2D u_image1;</span><br><span class="line"></span><br><span class="line"><span class="comment">// the texCoords passed in from the vertex shader.</span></span><br><span class="line">varying vec2 v_texCoord;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   vec4 color0 = texture2D(u_image0, v_texCoord);</span><br><span class="line">   vec4 color1 = texture2D(u_image1, v_texCoord);</span><br><span class="line">   gl_FragColor = color0 * color1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>和处理单个纹理类似，我们需要为每个纹理单元进行配置，设置纹理单元对应的纹理</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 设置每个纹理单元对应一个纹理</span></span><br><span class="line">gl.activeTexture(gl.TEXTURE0);</span><br><span class="line">gl.bindTexture(gl.TEXTURE_2D, textures[<span class="number">0</span>]);</span><br><span class="line">gl.activeTexture(gl.TEXTURE1);</span><br><span class="line">gl.bindTexture(gl.TEXTURE_2D, textures[<span class="number">1</span>]);</span><br></pre></td></tr></table></figure>

<p>限于篇幅，详细例子可以参考 <a href="https://webglfundamentals.org/webgl/lessons/zh_cn/webgl-2-textures.html" target="_blank" rel="noopener">WebGL 使用多个纹理</a></p>
<h1 id="分次绘制"><a href="#分次绘制" class="headerlink" title="分次绘制"></a>分次绘制</h1><p>纹理资源通常为网络资源，如果需要等所有纹理都加载完毕才开始绘制，用户需要等待非常久的时间才能看到渲染的模型，有时候分次绘制是一个更好的选择</p>
<p>实现的方式也很简单，我们增加一个全局变量，通过纹理加载状态确定是否绘制纹理</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> FSHADER_SOURCE = <span class="string">`</span></span><br><span class="line"><span class="string">  precision mediump float;</span></span><br><span class="line"><span class="string">  uniform bool textureLoaded;</span></span><br><span class="line"><span class="string">  uniform sampler2D u_Sampler;</span></span><br><span class="line"><span class="string">  // 纹理坐标插值</span></span><br><span class="line"><span class="string">  varying vec2 v_TexCoord;</span></span><br><span class="line"><span class="string">  void main() &#123;</span></span><br><span class="line"><span class="string">    if(textureLoaded)&#123;</span></span><br><span class="line"><span class="string">      // 获取纹素</span></span><br><span class="line"><span class="string">      gl_FragColor = texture2D(u_Sampler, v_TexCoord);</span></span><br><span class="line"><span class="string">    &#125; else &#123;</span></span><br><span class="line"><span class="string">      // 使用默认颜色，这里也可以使用颜色可变量</span></span><br><span class="line"><span class="string">      gl_FragColor = vec4(1, 0, 0.5, 1);</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &#125;`</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">render</span>(<span class="params">gl, program, state, n</span>) </span>&#123;</span><br><span class="line">  gl.uniform1i(gl.getUniformLocation(program, <span class="string">'textureLoaded'</span>), state)</span><br><span class="line">  gl.clear(gl.COLOR_BUFFER_BIT);   <span class="comment">// Clear &lt;canvas&gt;</span></span><br><span class="line">  gl.drawArrays(gl.TRIANGLE_STRIP, <span class="number">0</span>, n); <span class="comment">// Draw the rectangle</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始执行</span></span><br><span class="line">render(gl, program, <span class="literal">false</span>, n)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 图片加载完再次执行</span></span><br><span class="line">render(gl, program, <span class="literal">true</span>, n)</span><br></pre></td></tr></table></figure>

<p>不过这种方法控制台一开始会输出警告</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">RENDER WARNING: there is no texture bound to the unit 0</span><br></pre></td></tr></table></figure>

<p>不知道还有其他方式没，欢迎探讨~</p>
<h1 id="立方体纹理-gl-TEXTURE-CUBE-MAP"><a href="#立方体纹理-gl-TEXTURE-CUBE-MAP" class="headerlink" title="立方体纹理(gl.TEXTURE_CUBE_MAP)"></a>立方体纹理(gl.TEXTURE_CUBE_MAP)</h1><p>立方体纹理并不是说单一纹理图像是立体的（想想也知道不是，图像只能是二维的），而是说将多个面的纹理共同组成一个立方体</p>
<p>片段着色器通过法向量去获取纹素</p>
<p>首先为立方体的每个面配置纹理图像</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">gl.texImage2D(target, level, internalFormat, format, type, img[i]);</span><br><span class="line"><span class="comment">// target 的取值有</span></span><br><span class="line">gl.TEXTURE_CUBE_MAP_POSITIVE_X</span><br><span class="line">gl.TEXTURE_CUBE_MAP_NEGATIVE_X</span><br><span class="line">gl.TEXTURE_CUBE_MAP_POSITIVE_Y</span><br><span class="line">gl.TEXTURE_CUBE_MAP_NEGATIVE_Y</span><br><span class="line">gl.TEXTURE_CUBE_MAP_POSITIVE_Z</span><br><span class="line">gl.TEXTURE_CUBE_MAP_NEGATIVE_Z</span><br></pre></td></tr></table></figure>


<p>片段着色器中，根据每个片元对应的法向量（可变量）确定应该使用的面</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">gl_FragColor = textureCube(u_texture, normalize(v_normal));</span><br></pre></td></tr></table></figure>

<p>内部通过片元像素坐标自己去确定纹理图像的纹素</p>
<p>常用来做 <a href="https://webglfundamentals.org/webgl/lessons/zh_cn/webgl-environment-maps.html" target="_blank" rel="noopener">环境贴图</a></p>
<p>本文不做拓展，更多信息请参考 <a href="https://webglfundamentals.org/webgl/lessons/zh_cn/webgl-cube-maps.html" target="_blank" rel="noopener">WebGL 立方体贴图</a></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>本文探讨了绘制纹理的基本流程，并简单提及多纹理的处理以及立方体纹理的概念，最后给出了一些例子的链接，感兴趣的可以点击查看</p>
]]></content>
      <categories>
        <category>大前端</category>
      </categories>
      <tags>
        <tag>WebGL</tag>
      </tags>
  </entry>
  <entry>
    <title>WebGL 光照</title>
    <url>/2020/03/17/WebGL/WebGL%20%E5%85%89%E7%85%A7/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本文来谈谈 WebGL 的光照</p>
<a id="more"></a>

<h1 id="光源类型"><a href="#光源类型" class="headerlink" title="光源类型"></a>光源类型</h1><p>主要分为以下几种：</p>
<ul>
<li><p>平行光</p>
<p>也叫方向光。<br>无限远处（比如太阳）发出的平行光。<br>用一个方向和一个颜色（包含光照强度，下同）来定义</p>
</li>
<li><p>点光源</p>
<p>一个点向周围所有方向发出的光，比如灯泡。<br>需要指定光源的位置和颜色</p>
</li>
<li><p>环境光</p>
<p>又称间接光，只前两种类型的光源发出后经过墙壁等其他物体反射后的光。<br>可以理解为白天的室内，并没有感知太阳光线直射，但仍看得清物体。<br>环境光由各个角度照射物体，光照强度都是一致的。<br>只需指定颜色。</p>
</li>
<li><p>聚灯光</p>
<p>在点光源的基础上，限定了照射方向和照射范围</p>
</li>
</ul>
<h1 id="反射类型"><a href="#反射类型" class="headerlink" title="反射类型"></a>反射类型</h1><p>入射光的信息（方向、颜色）以及物体表面信息（物体基底色和反射特性）决定了反射光的方向和颜色</p>
<blockquote>
<p>一般我们只计算反射光的颜色即可</p>
</blockquote>
<p>反射的方式主要有以下几种：</p>
<h2 id="漫反射"><a href="#漫反射" class="headerlink" title="漫反射"></a>漫反射</h2><p>光线照射在物体粗糙的表面会无序地向四周反射的现象，是自然界更加普遍存在的反射型态。</p>
<p>所以漫反射在各个方向上是均匀的，任何角度看强度均相等</p>
<p>可以得到以下式子</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;漫反射光颜色&gt; = <span class="xml"><span class="tag">&lt;<span class="name">入射光颜色</span>&gt;</span> x <span class="tag">&lt;<span class="name">表面基底色</span>&gt;</span> x cosθ</span></span><br><span class="line"></span><br><span class="line"><span class="xml">// θ 为入射光与表面形成的入射角，利用向量点积公式，有</span></span><br><span class="line"></span><br><span class="line"><span class="xml">cosθ = <span class="tag">&lt;<span class="name">入射光方向</span>&gt;</span> · <span class="tag">&lt;<span class="name">法线方向</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>法向量就是描述面的朝向的单位向量，而法线方向就是法向量的方向</p>
<p>如图：</p>
<p><img src="https://upload-images.jianshu.io/upload_images/9277731-3459f160e960d56b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="法线方向"></p>
<p>对于立方体来说，每个顶点对应三个法向量，就像之前每个顶点对应三个面的颜色一样。</p>
<p>所以我们可以用四个点（使用索引，否则需要6个点）来确定一个面的法向量（根据右手定则）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Create a cube</span></span><br><span class="line"><span class="comment">//    v6----- v5</span></span><br><span class="line"><span class="comment">//   /|      /|</span></span><br><span class="line"><span class="comment">//  v1------v0|</span></span><br><span class="line"><span class="comment">//  | |     | |</span></span><br><span class="line"><span class="comment">//  | |v7---|-|v4</span></span><br><span class="line"><span class="comment">//  |/      |/</span></span><br><span class="line"><span class="comment">//  v2------v3</span></span><br><span class="line"><span class="comment">// Coordinates</span></span><br><span class="line"><span class="keyword">var</span> vertices = <span class="keyword">new</span> <span class="built_in">Float32Array</span>([</span><br><span class="line">  <span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">-1.0</span>, <span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">-1.0</span>, <span class="number">-1.0</span>, <span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">-1.0</span>, <span class="number">1.0</span>, <span class="comment">// v0-v1-v2-v3 front</span></span><br><span class="line">  <span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">-1.0</span>, <span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">-1.0</span>, <span class="number">-1.0</span>, <span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">-1.0</span>, <span class="comment">// v0-v3-v4-v5 right</span></span><br><span class="line">  <span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">-1.0</span>, <span class="number">-1.0</span>, <span class="number">1.0</span>, <span class="number">-1.0</span>, <span class="number">-1.0</span>, <span class="number">1.0</span>, <span class="number">1.0</span>, <span class="comment">// v0-v5-v6-v1 up</span></span><br><span class="line">  <span class="number">-1.0</span>, <span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">-1.0</span>, <span class="number">1.0</span>, <span class="number">-1.0</span>, <span class="number">-1.0</span>, <span class="number">-1.0</span>, <span class="number">-1.0</span>, <span class="number">-1.0</span>, <span class="number">-1.0</span>, <span class="number">1.0</span>, <span class="comment">// v1-v6-v7-v2 left</span></span><br><span class="line">  <span class="number">-1.0</span>, <span class="number">-1.0</span>, <span class="number">-1.0</span>, <span class="number">1.0</span>, <span class="number">-1.0</span>, <span class="number">-1.0</span>, <span class="number">1.0</span>, <span class="number">-1.0</span>, <span class="number">1.0</span>, <span class="number">-1.0</span>, <span class="number">-1.0</span>, <span class="number">1.0</span>, <span class="comment">// v7-v4-v3-v2 down</span></span><br><span class="line">  <span class="number">1.0</span>, <span class="number">-1.0</span>, <span class="number">-1.0</span>, <span class="number">-1.0</span>, <span class="number">-1.0</span>, <span class="number">-1.0</span>, <span class="number">-1.0</span>, <span class="number">1.0</span>, <span class="number">-1.0</span>, <span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">-1.0</span>  <span class="comment">// v4-v7-v6-v5 back</span></span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Colors</span></span><br><span class="line"><span class="keyword">var</span> colors = <span class="keyword">new</span> <span class="built_in">Float32Array</span>([</span><br><span class="line">  <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>,     <span class="comment">// v0-v1-v2-v3 front</span></span><br><span class="line">  <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>,     <span class="comment">// v0-v3-v4-v5 right</span></span><br><span class="line">  <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>,     <span class="comment">// v0-v5-v6-v1 up</span></span><br><span class="line">  <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>,     <span class="comment">// v1-v6-v7-v2 left</span></span><br><span class="line">  <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>,     <span class="comment">// v7-v4-v3-v2 down</span></span><br><span class="line">  <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>　    <span class="comment">// v4-v7-v6-v5 back</span></span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Normal</span></span><br><span class="line"><span class="keyword">var</span> normals = <span class="keyword">new</span> <span class="built_in">Float32Array</span>([</span><br><span class="line">  <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">1.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">1.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">1.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">1.0</span>,  <span class="comment">// v0-v1-v2-v3 front</span></span><br><span class="line">  <span class="number">1.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">1.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">1.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">1.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>,  <span class="comment">// v0-v3-v4-v5 right</span></span><br><span class="line">  <span class="number">0.0</span>, <span class="number">1.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">1.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">1.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">1.0</span>, <span class="number">0.0</span>,  <span class="comment">// v0-v5-v6-v1 up</span></span><br><span class="line">  <span class="number">-1.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">-1.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">-1.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">-1.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>,  <span class="comment">// v1-v6-v7-v2 left</span></span><br><span class="line">  <span class="number">0.0</span>, <span class="number">-1.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">-1.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">-1.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">-1.0</span>, <span class="number">0.0</span>,  <span class="comment">// v7-v4-v3-v2 down</span></span><br><span class="line">  <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">-1.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">-1.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">-1.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">-1.0</span>   <span class="comment">// v4-v7-v6-v5 back</span></span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Indices of the vertices</span></span><br><span class="line"><span class="keyword">var</span> indices = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>([</span><br><span class="line">  <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">3</span>,    <span class="comment">// front</span></span><br><span class="line">  <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">7</span>,    <span class="comment">// right</span></span><br><span class="line">  <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">8</span>, <span class="number">10</span>, <span class="number">11</span>,    <span class="comment">// up</span></span><br><span class="line">  <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">12</span>, <span class="number">14</span>, <span class="number">15</span>,    <span class="comment">// left</span></span><br><span class="line">  <span class="number">16</span>, <span class="number">17</span>, <span class="number">18</span>, <span class="number">16</span>, <span class="number">18</span>, <span class="number">19</span>,    <span class="comment">// down</span></span><br><span class="line">  <span class="number">20</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">20</span>, <span class="number">22</span>, <span class="number">23</span>     <span class="comment">// back</span></span><br><span class="line">]);</span><br></pre></td></tr></table></figure>

<p>针对入射光方向，平行光的方向总是固定的，而点光源则与每个点的位置有关，我们分开讨论</p>
<ul>
<li>平行光针对顶点处理</li>
<li>点光源针对像素点处理</li>
</ul>
<p><strong>注意：</strong> </p>
<ol>
<li>本小节暂不考虑模型矩阵，在下一节 <a href="#运动物体的光照效果">运动物体的光照效果</a> 会提到。</li>
<li>由于聚光灯用的比较少，本文不涉及，可以看文末的参考资料</li>
</ol>
<h3 id="平行光的处理"><a href="#平行光的处理" class="headerlink" title="平行光的处理"></a>平行光的处理</h3><p>我们在顶点着色器中计算每个顶点的反射光颜色</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 顶点着色器</span></span><br><span class="line"><span class="keyword">var</span> VSHADER_SOURCE = <span class="string">`</span></span><br><span class="line"><span class="string">  attribute vec4 a_Position;</span></span><br><span class="line"><span class="string">  attribute vec4 a_Color;</span></span><br><span class="line"><span class="string">  // 法向量</span></span><br><span class="line"><span class="string">  attribute vec4 a_Normal;</span></span><br><span class="line"><span class="string">  uniform mat4 u_MvpMatrix;</span></span><br><span class="line"><span class="string">  // 光线颜色</span></span><br><span class="line"><span class="string">  uniform vec3 u_LightColor;</span></span><br><span class="line"><span class="string">  // 光线方向（归一化的世界坐标）</span></span><br><span class="line"><span class="string">  uniform vec3 u_LightDirection;</span></span><br><span class="line"><span class="string">  varying vec4 v_Color;</span></span><br><span class="line"><span class="string">  void main() &#123;</span></span><br><span class="line"><span class="string">    gl_Position = u_MvpMatrix * a_Position;</span></span><br><span class="line"><span class="string">    // 对法向量进行归一化</span></span><br><span class="line"><span class="string">    vec3 normal = normalize(a_Normal.xyz);</span></span><br><span class="line"><span class="string">    // 计算光线方向和法向量的点积</span></span><br><span class="line"><span class="string">    float nDotL = max(dot(u_LightDirection, normal), 0.0);</span></span><br><span class="line"><span class="string">    // 计算漫反射光的颜色</span></span><br><span class="line"><span class="string">    vec3 diffuse = u_LightColor * a_Color.rgb * nDotL;</span></span><br><span class="line"><span class="string">    v_Color = vec4(diffuse, a_Color.a);</span></span><br><span class="line"><span class="string">  &#125;`</span></span><br><span class="line"><span class="comment">// 片段着色器</span></span><br><span class="line"><span class="keyword">var</span> FSHADER_SOURCE = <span class="string">`</span></span><br><span class="line"><span class="string">  precision mediump float;</span></span><br><span class="line"><span class="string">  varying vec4 v_Color;</span></span><br><span class="line"><span class="string">  void main() &#123;</span></span><br><span class="line"><span class="string">    gl_FragColor = v_Color;</span></span><br><span class="line"><span class="string">  &#125;`</span></span><br></pre></td></tr></table></figure>

<p>设置 <code>(0.5, 3.0, 4.0)</code> 方向（世界坐标系）的平行白光 <code>(1.0, 1.0, 1.0)</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 设置光线颜色</span></span><br><span class="line">gl.uniform3f(u_LightColor, <span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">1.0</span>);</span><br><span class="line"><span class="comment">// 设置归一化的世界坐标的光线方向</span></span><br><span class="line"><span class="keyword">let</span> direction = normalize([<span class="number">0.5</span>, <span class="number">3.0</span>, <span class="number">4.0</span>])</span><br><span class="line"><span class="built_in">console</span>.log(direction) <span class="comment">// [0.1,0.6,0.8]</span></span><br><span class="line">gl.uniform3fv(u_LightDirection, direction);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置投影矩阵和视图矩阵，不影响光照</span></span><br><span class="line"><span class="keyword">var</span> mvpMatrix = <span class="keyword">new</span> Matrix4();</span><br><span class="line">mvpMatrix.setPerspective(<span class="number">30</span>, canvas.width / canvas.height, <span class="number">1</span>, <span class="number">100</span>);</span><br><span class="line">mvpMatrix.lookAt(<span class="number">3</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>);</span><br></pre></td></tr></table></figure>

<p>效果如下</p>
<p><img src="https://upload-images.jianshu.io/upload_images/9277731-549399fb1e087eb3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="LightedCube"></p>
<h3 id="点光源的处理"><a href="#点光源的处理" class="headerlink" title="点光源的处理"></a>点光源的处理</h3><p>根据物体中入射点位置与点光源位置得到入射光方向</p>
<p>与平行光不同的是，需要对每个点（在片段着色器中处理）计算光照效果，而不是对顶点</p>
<blockquote>
<p>如果采用顶点计算，中间像素进行内插会导致光照有一些线条</p>
</blockquote>
<p><img src="https://upload-images.jianshu.io/upload_images/9277731-503bfeab93860b3a.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="pointLight.jpg"></p>
<p>根据公式</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;漫反射光颜色&gt; = <span class="xml"><span class="tag">&lt;<span class="name">入射光颜色</span>&gt;</span> x <span class="tag">&lt;<span class="name">表面基底色</span>&gt;</span> x (<span class="tag">&lt;<span class="name">入射光方向</span>&gt;</span> · <span class="tag">&lt;<span class="name">法线方向</span>&gt;</span>)</span></span><br></pre></td></tr></table></figure>

<p>我们将顶点，法向量放入片段着色器中处理</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 顶点着色器</span></span><br><span class="line"><span class="keyword">var</span> VSHADER_SOURCE = <span class="string">`</span></span><br><span class="line"><span class="string">  attribute vec4 a_Position;</span></span><br><span class="line"><span class="string">  attribute vec4 a_Color;</span></span><br><span class="line"><span class="string">  attribute vec4 a_Normal;</span></span><br><span class="line"><span class="string">  uniform mat4 u_MvpMatrix;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  varying vec4 v_Color;</span></span><br><span class="line"><span class="string">  varying vec3 v_Normal;</span></span><br><span class="line"><span class="string">  varying vec3 v_Position;</span></span><br><span class="line"><span class="string">  void main() &#123;</span></span><br><span class="line"><span class="string">    gl_Position = u_MvpMatrix * a_Position;</span></span><br><span class="line"><span class="string">    v_Position = a_Position.xyz;</span></span><br><span class="line"><span class="string">    v_Normal = a_Normal.xyz;</span></span><br><span class="line"><span class="string">    v_Color = a_Color;</span></span><br><span class="line"><span class="string">  &#125;`</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 片段着色器</span></span><br><span class="line"><span class="keyword">var</span> FSHADER_SOURCE = <span class="string">`</span></span><br><span class="line"><span class="string">  precision mediump float;</span></span><br><span class="line"><span class="string">  // Light color</span></span><br><span class="line"><span class="string">  uniform vec3 u_LightColor;</span></span><br><span class="line"><span class="string">  uniform vec3 u_LightPosition;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  varying vec3 v_Normal;</span></span><br><span class="line"><span class="string">  varying vec3 v_Position;</span></span><br><span class="line"><span class="string">  varying vec4 v_Color;</span></span><br><span class="line"><span class="string">  void main() &#123;</span></span><br><span class="line"><span class="string">    // 对法线进行归一化，因为内插后长度不一定是 1.0</span></span><br><span class="line"><span class="string">    vec3 normal = normalize(v_Normal);</span></span><br><span class="line"><span class="string">    // 计算光线方向并归一化</span></span><br><span class="line"><span class="string">    vec3 lightDirection = normalize(u_LightPosition - v_Position);</span></span><br><span class="line"><span class="string">    // 计算光线方向与法向量的点积</span></span><br><span class="line"><span class="string">    float nDotL = max(dot(lightDirection, normal), 0.0);</span></span><br><span class="line"><span class="string">    // 计算漫反射颜色</span></span><br><span class="line"><span class="string">    vec3 diffuse = u_LightColor * v_Color.rgb * nDotL;</span></span><br><span class="line"><span class="string">    gl_FragColor = vec4(diffuse, v_Color.a);</span></span><br><span class="line"><span class="string">  &#125;`</span></span><br></pre></td></tr></table></figure>


<p>设置 <code>(2.2, 2.2, 2.0)</code> 位置（世界坐标系）的点光源 <code>(1.0, 1.0, 1.0)</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 设置点光源颜色</span></span><br><span class="line">gl.uniform3f(u_LightColor, <span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">1.0</span>);</span><br><span class="line"><span class="comment">// 设置点光源位置（世界坐标系）</span></span><br><span class="line">gl.uniform3f(u_LightPosition, <span class="number">2.2</span>, <span class="number">2.2</span>, <span class="number">2.0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置投影矩阵和视图矩阵，不影响光照</span></span><br><span class="line"><span class="keyword">var</span> mvpMatrix = <span class="keyword">new</span> Matrix4();</span><br><span class="line">mvpMatrix.setPerspective(<span class="number">30</span>, canvas.width / canvas.height, <span class="number">1</span>, <span class="number">100</span>);</span><br><span class="line">mvpMatrix.lookAt(<span class="number">3</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>);</span><br></pre></td></tr></table></figure>

<p>效果如下</p>
<p><img src="https://upload-images.jianshu.io/upload_images/9277731-67ea797e41fbe700.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="PointLightedCube.png"></p>
<h2 id="环境反射"><a href="#环境反射" class="headerlink" title="环境反射"></a>环境反射</h2><p>环境反射针对的是环境光</p>
<p>环境光与光源方向无关，在场景中是均匀分布的，对所有物体都有效</p>
<p>在程序中，环境光是<strong>直接定义</strong>的，而不是通过其他光源生成的。</p>
<p>所以可以调节环境光的颜色得到我们想要的效果，通常强度较弱</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;环境反射光颜色&gt; &#x3D; &lt;入射光颜色&gt; x &lt;表面基底色&gt;</span><br></pre></td></tr></table></figure>
<p>上面公式中的入射光颜色就是我们定义的环境光颜色</p>
<p>假设环境光为弱白光 <code>(0.2,0.2,0.2)</code> ，物体表面基底色为红色 <code>(1.0,0.0,0.0)</code>，由环境光产生的反射光颜色为暗红色 <code>(0.2,0.0,0.0)</code></p>
<p>这里仅应用环境光，得到如下的效果</p>
<p><img src="https://upload-images.jianshu.io/upload_images/9277731-db1dd03510ec18d6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="ambientCube"></p>
<p>其实就是所有顶点的 rgb 分量乘以环境光 rgb 分量</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">vec3 ambient = u_AmbientLight * a_Color.rgb;</span><br><span class="line">v_Color = vec4(ambient, a_Color.a);</span><br></pre></td></tr></table></figure>

<h2 id="镜面反射"><a href="#镜面反射" class="headerlink" title="镜面反射"></a>镜面反射</h2><p>光线照射到物体表面，部分被吸收，部分进行反射。反射角与入射角一致</p>
<p><img src="https://upload-images.jianshu.io/upload_images/9277731-a3e02351e219ffd1.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="引自 csdn"></p>
<p>只有相机位于反射光的区域，光线才会可见</p>
<p><img src="https://upload-images.jianshu.io/upload_images/9277731-e69f8549ce1223fd.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="引自 csdn"></p>
<p>镜面反射用的比较少，本文就不讨论了。</p>
<h2 id="反射叠加"><a href="#反射叠加" class="headerlink" title="反射叠加"></a>反射叠加</h2><p>在渲染模型时可以对几种反射进行叠加，设置一定比例等等，得到想要的效果，比如</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;表面的反射光颜色&gt; &#x3D; &lt;漫反射光颜色&gt; + &lt;环境反射光颜色&gt;</span><br></pre></td></tr></table></figure>

<p>我们应用 <code>(0.2,0.2,0.2)</code> 的环境光，并设置 <code>(0.5, 3.0, 4.0)</code> 方向（世界坐标系）的平行白光 <code>(1.0, 1.0, 1.0)</code></p>
<blockquote>
<p>白光以左下前方向照向立方体 \</p>
</blockquote>
<p>核心代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">vec3 diffuse = u_DiffuseLight * a_Color.rgb * nDotL;</span><br><span class="line">vec3 ambient = u_AmbientLight * a_Color.rgb;</span><br><span class="line"><span class="comment">// 最终反射光颜色为漫反射和环境反射的叠加</span></span><br><span class="line">v_Color = vec4(diffuse + ambient, a_Color.a);</span><br></pre></td></tr></table></figure>

<p>得到如下效果</p>
<p><img src="https://upload-images.jianshu.io/upload_images/9277731-6d3b97538de36428.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="LightedCube_ambient"></p>
<p>如果是上面点光源的例子也应用环境光的话</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">vec3 diffuse = u_LightColor * v_Color.rgb * nDotL;</span><br><span class="line">vec3 ambient = u_AmbientLight * v_Color.rgb;</span><br><span class="line">gl_FragColor = vec4(diffuse + ambient, v_Color.a);</span><br></pre></td></tr></table></figure>
<p>效果如下</p>
<p><img src="https://upload-images.jianshu.io/upload_images/9277731-a1a535ffee8ce334.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="PointLightedCube_ambient.png"></p>
<p>点光源+环境光的组合比较常用</p>
<h1 id="运动物体的光照效果"><a href="#运动物体的光照效果" class="headerlink" title="运动物体的光照效果"></a>运动物体的光照效果</h1><p>上文为了简单，一直没有提到模型矩阵，即对物体进行平移、旋转、缩放</p>
<p>所以局部空间坐标系和世界坐标系是一致的</p>
<p>物体应用了模型矩阵后，两个坐标系不一致了，那光照又该如何计算？</p>
<p>我们需对法向量进行变换，用法向量乘以模型矩阵的逆转置矩阵即可</p>
<blockquote>
<p>逆转置矩阵表示对矩阵先求逆再转置</p>
</blockquote>
<p>这样得到的就是法向量在世界空间的表示，相关证明可以查看 <a href="https://zhuanlan.zhihu.com/p/72734738" target="_blank" rel="noopener">渲染管线中的法线变换矩阵</a></p>
<p>对于点光源的场景，我们还需要对顶点应用模型矩阵再传入片段着色器</p>
<p>将上一节 <em>点光源+环境光</em> 的例子进行小改造，应用模型矩阵</p>
<p>核心代码如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 顶点着色器</span></span><br><span class="line"><span class="keyword">var</span> VSHADER_SOURCE = <span class="string">`</span></span><br><span class="line"><span class="string">  attribute vec4 a_Position;</span></span><br><span class="line"><span class="string">  attribute vec4 a_Color;</span></span><br><span class="line"><span class="string">  attribute vec4 a_Normal;</span></span><br><span class="line"><span class="string">  uniform mat4 u_MvpMatrix;</span></span><br><span class="line"><span class="string">  // 模型矩阵</span></span><br><span class="line"><span class="string">  uniform mat4 u_ModelMatrix;</span></span><br><span class="line"><span class="string">  // 用来变换法向量的矩阵（模型矩阵的逆转置矩阵）</span></span><br><span class="line"><span class="string">  uniform mat4 u_NormalMatrix;  </span></span><br><span class="line"><span class="string">  varying vec4 v_Color;</span></span><br><span class="line"><span class="string">  varying vec3 v_Normal;</span></span><br><span class="line"><span class="string">  varying vec3 v_Position;</span></span><br><span class="line"><span class="string">  void main() &#123;</span></span><br><span class="line"><span class="string">    gl_Position = u_MvpMatrix * a_Position;</span></span><br><span class="line"><span class="string">     // 计算顶点的世界坐标</span></span><br><span class="line"><span class="string">    v_Position = vec3(u_ModelMatrix * a_Position);</span></span><br><span class="line"><span class="string">    // 得到变换后的法向量</span></span><br><span class="line"><span class="string">    v_Normal = normalize(vec3(u_NormalMatrix * a_Normal));</span></span><br><span class="line"><span class="string">    v_Color = a_Color;</span></span><br><span class="line"><span class="string">  &#125;`</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 片段着色器</span></span><br><span class="line"><span class="keyword">var</span> FSHADER_SOURCE = <span class="string">`</span></span><br><span class="line"><span class="string">  precision mediump float;</span></span><br><span class="line"><span class="string">  // Light color</span></span><br><span class="line"><span class="string">  uniform vec3 u_LightColor;</span></span><br><span class="line"><span class="string">  // Position of the light source</span></span><br><span class="line"><span class="string">  uniform vec3 u_LightPosition;</span></span><br><span class="line"><span class="string">  // Ambient light color</span></span><br><span class="line"><span class="string">  uniform vec3 u_AmbientLight;</span></span><br><span class="line"><span class="string">  varying vec3 v_Normal;</span></span><br><span class="line"><span class="string">  varying vec3 v_Position;</span></span><br><span class="line"><span class="string">  varying vec4 v_Color;</span></span><br><span class="line"><span class="string">  void main() &#123;</span></span><br><span class="line"><span class="string">    // 对法线进行归一化，因为内插后长度不一定是 1.0</span></span><br><span class="line"><span class="string">    vec3 normal = normalize(v_Normal);</span></span><br><span class="line"><span class="string">    // 计算光线方向并归一化</span></span><br><span class="line"><span class="string">    vec3 lightDirection = normalize(u_LightPosition - v_Position);</span></span><br><span class="line"><span class="string">    // 计算光线方向与法向量的点积</span></span><br><span class="line"><span class="string">    float nDotL = max(dot(lightDirection, normal), 0.0);</span></span><br><span class="line"><span class="string">    // 计算漫反射和环境反射的最终颜色</span></span><br><span class="line"><span class="string">    vec3 diffuse = u_LightColor * v_Color.rgb * nDotL;</span></span><br><span class="line"><span class="string">    vec3 ambient = u_AmbientLight * v_Color.rgb;</span></span><br><span class="line"><span class="string">    gl_FragColor = vec4(diffuse + ambient, v_Color.a);</span></span><br><span class="line"><span class="string">  &#125;`</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 省略部分代码</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置点光源颜色</span></span><br><span class="line">gl.uniform3f(u_LightColor, <span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">1.0</span>);</span><br><span class="line"><span class="comment">// 设置点光源位置（世界坐标系）</span></span><br><span class="line">gl.uniform3f(u_LightPosition, <span class="number">2.3</span>, <span class="number">4.0</span>, <span class="number">3.5</span>);</span><br><span class="line"><span class="comment">// 设置环境光</span></span><br><span class="line">gl.uniform3f(u_AmbientLight, <span class="number">0.2</span>, <span class="number">0.2</span>, <span class="number">0.2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 模型矩阵</span></span><br><span class="line"><span class="keyword">var</span> modelMatrix = <span class="keyword">new</span> Matrix4();</span><br><span class="line"><span class="comment">// 模型、视图、投影 合成后的矩阵</span></span><br><span class="line"><span class="keyword">var</span> mvpMatrix = <span class="keyword">new</span> Matrix4();</span><br><span class="line"><span class="comment">// 用来变换法向量的矩阵（模型矩阵的逆转置矩阵）</span></span><br><span class="line"><span class="keyword">var</span> normalMatrix = <span class="keyword">new</span> Matrix4();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置模型矩阵</span></span><br><span class="line">modelMatrix.setRotate(<span class="number">90</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">mvpMatrix.setPerspective(<span class="number">30</span>, canvas.width / canvas.height, <span class="number">1</span>, <span class="number">100</span>);</span><br><span class="line">mvpMatrix.lookAt(<span class="number">6</span>, <span class="number">6</span>, <span class="number">14</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">mvpMatrix.multiply(modelMatrix);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 计算模型矩阵的逆转置矩阵</span></span><br><span class="line">normalMatrix.setInverseOf(modelMatrix);</span><br><span class="line">normalMatrix.transpose();</span><br></pre></td></tr></table></figure>




<p>效果如下：</p>
<p><img src="https://upload-images.jianshu.io/upload_images/9277731-5eaaf2a790c7d40e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="modelLightCube"></p>
<p>矩阵操作相关代码（来源于《WebGL 编程指南》）:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 矩阵转置</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="variable">this</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Matrix4.prototype.transpose = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> e, t;</span><br><span class="line"></span><br><span class="line">  e = <span class="keyword">this</span>.elements;</span><br><span class="line"></span><br><span class="line">  t = e[ <span class="number">1</span>];  e[ <span class="number">1</span>] = e[ <span class="number">4</span>];  e[ <span class="number">4</span>] = t;</span><br><span class="line">  t = e[ <span class="number">2</span>];  e[ <span class="number">2</span>] = e[ <span class="number">8</span>];  e[ <span class="number">8</span>] = t;</span><br><span class="line">  t = e[ <span class="number">3</span>];  e[ <span class="number">3</span>] = e[<span class="number">12</span>];  e[<span class="number">12</span>] = t;</span><br><span class="line">  t = e[ <span class="number">6</span>];  e[ <span class="number">6</span>] = e[ <span class="number">9</span>];  e[ <span class="number">9</span>] = t;</span><br><span class="line">  t = e[ <span class="number">7</span>];  e[ <span class="number">7</span>] = e[<span class="number">13</span>];  e[<span class="number">13</span>] = t;</span><br><span class="line">  t = e[<span class="number">11</span>];  e[<span class="number">11</span>] = e[<span class="number">14</span>];  e[<span class="number">14</span>] = t;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 矩阵求逆</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>other The source matrix</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="variable">this</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Matrix4.prototype.setInverseOf = <span class="function"><span class="keyword">function</span>(<span class="params">other</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> i, s, d, inv, det;</span><br><span class="line"></span><br><span class="line">  s = other.elements;</span><br><span class="line">  d = <span class="keyword">this</span>.elements;</span><br><span class="line">  inv = <span class="keyword">new</span> <span class="built_in">Float32Array</span>(<span class="number">16</span>);</span><br><span class="line"></span><br><span class="line">  inv[<span class="number">0</span>]  =   s[<span class="number">5</span>]*s[<span class="number">10</span>]*s[<span class="number">15</span>] - s[<span class="number">5</span>] *s[<span class="number">11</span>]*s[<span class="number">14</span>] - s[<span class="number">9</span>] *s[<span class="number">6</span>]*s[<span class="number">15</span>]</span><br><span class="line">            + s[<span class="number">9</span>]*s[<span class="number">7</span>] *s[<span class="number">14</span>] + s[<span class="number">13</span>]*s[<span class="number">6</span>] *s[<span class="number">11</span>] - s[<span class="number">13</span>]*s[<span class="number">7</span>]*s[<span class="number">10</span>];</span><br><span class="line">  inv[<span class="number">4</span>]  = - s[<span class="number">4</span>]*s[<span class="number">10</span>]*s[<span class="number">15</span>] + s[<span class="number">4</span>] *s[<span class="number">11</span>]*s[<span class="number">14</span>] + s[<span class="number">8</span>] *s[<span class="number">6</span>]*s[<span class="number">15</span>]</span><br><span class="line">            - s[<span class="number">8</span>]*s[<span class="number">7</span>] *s[<span class="number">14</span>] - s[<span class="number">12</span>]*s[<span class="number">6</span>] *s[<span class="number">11</span>] + s[<span class="number">12</span>]*s[<span class="number">7</span>]*s[<span class="number">10</span>];</span><br><span class="line">  inv[<span class="number">8</span>]  =   s[<span class="number">4</span>]*s[<span class="number">9</span>] *s[<span class="number">15</span>] - s[<span class="number">4</span>] *s[<span class="number">11</span>]*s[<span class="number">13</span>] - s[<span class="number">8</span>] *s[<span class="number">5</span>]*s[<span class="number">15</span>]</span><br><span class="line">            + s[<span class="number">8</span>]*s[<span class="number">7</span>] *s[<span class="number">13</span>] + s[<span class="number">12</span>]*s[<span class="number">5</span>] *s[<span class="number">11</span>] - s[<span class="number">12</span>]*s[<span class="number">7</span>]*s[<span class="number">9</span>];</span><br><span class="line">  inv[<span class="number">12</span>] = - s[<span class="number">4</span>]*s[<span class="number">9</span>] *s[<span class="number">14</span>] + s[<span class="number">4</span>] *s[<span class="number">10</span>]*s[<span class="number">13</span>] + s[<span class="number">8</span>] *s[<span class="number">5</span>]*s[<span class="number">14</span>]</span><br><span class="line">            - s[<span class="number">8</span>]*s[<span class="number">6</span>] *s[<span class="number">13</span>] - s[<span class="number">12</span>]*s[<span class="number">5</span>] *s[<span class="number">10</span>] + s[<span class="number">12</span>]*s[<span class="number">6</span>]*s[<span class="number">9</span>];</span><br><span class="line"></span><br><span class="line">  inv[<span class="number">1</span>]  = - s[<span class="number">1</span>]*s[<span class="number">10</span>]*s[<span class="number">15</span>] + s[<span class="number">1</span>] *s[<span class="number">11</span>]*s[<span class="number">14</span>] + s[<span class="number">9</span>] *s[<span class="number">2</span>]*s[<span class="number">15</span>]</span><br><span class="line">            - s[<span class="number">9</span>]*s[<span class="number">3</span>] *s[<span class="number">14</span>] - s[<span class="number">13</span>]*s[<span class="number">2</span>] *s[<span class="number">11</span>] + s[<span class="number">13</span>]*s[<span class="number">3</span>]*s[<span class="number">10</span>];</span><br><span class="line">  inv[<span class="number">5</span>]  =   s[<span class="number">0</span>]*s[<span class="number">10</span>]*s[<span class="number">15</span>] - s[<span class="number">0</span>] *s[<span class="number">11</span>]*s[<span class="number">14</span>] - s[<span class="number">8</span>] *s[<span class="number">2</span>]*s[<span class="number">15</span>]</span><br><span class="line">            + s[<span class="number">8</span>]*s[<span class="number">3</span>] *s[<span class="number">14</span>] + s[<span class="number">12</span>]*s[<span class="number">2</span>] *s[<span class="number">11</span>] - s[<span class="number">12</span>]*s[<span class="number">3</span>]*s[<span class="number">10</span>];</span><br><span class="line">  inv[<span class="number">9</span>]  = - s[<span class="number">0</span>]*s[<span class="number">9</span>] *s[<span class="number">15</span>] + s[<span class="number">0</span>] *s[<span class="number">11</span>]*s[<span class="number">13</span>] + s[<span class="number">8</span>] *s[<span class="number">1</span>]*s[<span class="number">15</span>]</span><br><span class="line">            - s[<span class="number">8</span>]*s[<span class="number">3</span>] *s[<span class="number">13</span>] - s[<span class="number">12</span>]*s[<span class="number">1</span>] *s[<span class="number">11</span>] + s[<span class="number">12</span>]*s[<span class="number">3</span>]*s[<span class="number">9</span>];</span><br><span class="line">  inv[<span class="number">13</span>] =   s[<span class="number">0</span>]*s[<span class="number">9</span>] *s[<span class="number">14</span>] - s[<span class="number">0</span>] *s[<span class="number">10</span>]*s[<span class="number">13</span>] - s[<span class="number">8</span>] *s[<span class="number">1</span>]*s[<span class="number">14</span>]</span><br><span class="line">            + s[<span class="number">8</span>]*s[<span class="number">2</span>] *s[<span class="number">13</span>] + s[<span class="number">12</span>]*s[<span class="number">1</span>] *s[<span class="number">10</span>] - s[<span class="number">12</span>]*s[<span class="number">2</span>]*s[<span class="number">9</span>];</span><br><span class="line"></span><br><span class="line">  inv[<span class="number">2</span>]  =   s[<span class="number">1</span>]*s[<span class="number">6</span>]*s[<span class="number">15</span>] - s[<span class="number">1</span>] *s[<span class="number">7</span>]*s[<span class="number">14</span>] - s[<span class="number">5</span>] *s[<span class="number">2</span>]*s[<span class="number">15</span>]</span><br><span class="line">            + s[<span class="number">5</span>]*s[<span class="number">3</span>]*s[<span class="number">14</span>] + s[<span class="number">13</span>]*s[<span class="number">2</span>]*s[<span class="number">7</span>]  - s[<span class="number">13</span>]*s[<span class="number">3</span>]*s[<span class="number">6</span>];</span><br><span class="line">  inv[<span class="number">6</span>]  = - s[<span class="number">0</span>]*s[<span class="number">6</span>]*s[<span class="number">15</span>] + s[<span class="number">0</span>] *s[<span class="number">7</span>]*s[<span class="number">14</span>] + s[<span class="number">4</span>] *s[<span class="number">2</span>]*s[<span class="number">15</span>]</span><br><span class="line">            - s[<span class="number">4</span>]*s[<span class="number">3</span>]*s[<span class="number">14</span>] - s[<span class="number">12</span>]*s[<span class="number">2</span>]*s[<span class="number">7</span>]  + s[<span class="number">12</span>]*s[<span class="number">3</span>]*s[<span class="number">6</span>];</span><br><span class="line">  inv[<span class="number">10</span>] =   s[<span class="number">0</span>]*s[<span class="number">5</span>]*s[<span class="number">15</span>] - s[<span class="number">0</span>] *s[<span class="number">7</span>]*s[<span class="number">13</span>] - s[<span class="number">4</span>] *s[<span class="number">1</span>]*s[<span class="number">15</span>]</span><br><span class="line">            + s[<span class="number">4</span>]*s[<span class="number">3</span>]*s[<span class="number">13</span>] + s[<span class="number">12</span>]*s[<span class="number">1</span>]*s[<span class="number">7</span>]  - s[<span class="number">12</span>]*s[<span class="number">3</span>]*s[<span class="number">5</span>];</span><br><span class="line">  inv[<span class="number">14</span>] = - s[<span class="number">0</span>]*s[<span class="number">5</span>]*s[<span class="number">14</span>] + s[<span class="number">0</span>] *s[<span class="number">6</span>]*s[<span class="number">13</span>] + s[<span class="number">4</span>] *s[<span class="number">1</span>]*s[<span class="number">14</span>]</span><br><span class="line">            - s[<span class="number">4</span>]*s[<span class="number">2</span>]*s[<span class="number">13</span>] - s[<span class="number">12</span>]*s[<span class="number">1</span>]*s[<span class="number">6</span>]  + s[<span class="number">12</span>]*s[<span class="number">2</span>]*s[<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line">  inv[<span class="number">3</span>]  = - s[<span class="number">1</span>]*s[<span class="number">6</span>]*s[<span class="number">11</span>] + s[<span class="number">1</span>]*s[<span class="number">7</span>]*s[<span class="number">10</span>] + s[<span class="number">5</span>]*s[<span class="number">2</span>]*s[<span class="number">11</span>]</span><br><span class="line">            - s[<span class="number">5</span>]*s[<span class="number">3</span>]*s[<span class="number">10</span>] - s[<span class="number">9</span>]*s[<span class="number">2</span>]*s[<span class="number">7</span>]  + s[<span class="number">9</span>]*s[<span class="number">3</span>]*s[<span class="number">6</span>];</span><br><span class="line">  inv[<span class="number">7</span>]  =   s[<span class="number">0</span>]*s[<span class="number">6</span>]*s[<span class="number">11</span>] - s[<span class="number">0</span>]*s[<span class="number">7</span>]*s[<span class="number">10</span>] - s[<span class="number">4</span>]*s[<span class="number">2</span>]*s[<span class="number">11</span>]</span><br><span class="line">            + s[<span class="number">4</span>]*s[<span class="number">3</span>]*s[<span class="number">10</span>] + s[<span class="number">8</span>]*s[<span class="number">2</span>]*s[<span class="number">7</span>]  - s[<span class="number">8</span>]*s[<span class="number">3</span>]*s[<span class="number">6</span>];</span><br><span class="line">  inv[<span class="number">11</span>] = - s[<span class="number">0</span>]*s[<span class="number">5</span>]*s[<span class="number">11</span>] + s[<span class="number">0</span>]*s[<span class="number">7</span>]*s[<span class="number">9</span>]  + s[<span class="number">4</span>]*s[<span class="number">1</span>]*s[<span class="number">11</span>]</span><br><span class="line">            - s[<span class="number">4</span>]*s[<span class="number">3</span>]*s[<span class="number">9</span>]  - s[<span class="number">8</span>]*s[<span class="number">1</span>]*s[<span class="number">7</span>]  + s[<span class="number">8</span>]*s[<span class="number">3</span>]*s[<span class="number">5</span>];</span><br><span class="line">  inv[<span class="number">15</span>] =   s[<span class="number">0</span>]*s[<span class="number">5</span>]*s[<span class="number">10</span>] - s[<span class="number">0</span>]*s[<span class="number">6</span>]*s[<span class="number">9</span>]  - s[<span class="number">4</span>]*s[<span class="number">1</span>]*s[<span class="number">10</span>]</span><br><span class="line">            + s[<span class="number">4</span>]*s[<span class="number">2</span>]*s[<span class="number">9</span>]  + s[<span class="number">8</span>]*s[<span class="number">1</span>]*s[<span class="number">6</span>]  - s[<span class="number">8</span>]*s[<span class="number">2</span>]*s[<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line">  det = s[<span class="number">0</span>]*inv[<span class="number">0</span>] + s[<span class="number">1</span>]*inv[<span class="number">4</span>] + s[<span class="number">2</span>]*inv[<span class="number">8</span>] + s[<span class="number">3</span>]*inv[<span class="number">12</span>];</span><br><span class="line">  <span class="keyword">if</span> (det === <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  det = <span class="number">1</span> / det;</span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++) &#123;</span><br><span class="line">    d[i] = inv[i] * det;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>光照效果是在世界坐标系上计算的</p>
<p>通过应用光照效果，可以让场景变得更真实</p>
<p>有了光照，那么还有阴影，后面的文章我们将进行探讨~</p>
<h1 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h1><ol>
<li>《WebGL 编程指南》</li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/WebGL_API/Tutorial/Lighting_in_WebGL" target="_blank" rel="noopener">MDN-Lighting in WebGL</a></li>
<li><a href="https://webglfundamentals.org/webgl/lessons/zh_cn/webgl-3d-lighting-spot.html" target="_blank" rel="noopener">WebGL 三维聚光灯</a></li>
<li><a href="https://zh.wikipedia.org/wiki/Phong%E8%91%97%E8%89%B2%E6%B3%95" target="_blank" rel="noopener">Phong着色法</a></li>
</ol>
]]></content>
      <categories>
        <category>大前端</category>
      </categories>
      <tags>
        <tag>WebGL</tag>
      </tags>
  </entry>
  <entry>
    <title>深入 Immutable 原理</title>
    <url>/2020/03/16/2020/%E6%B7%B1%E5%85%A5%20Immutable%20%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>推荐文章。。<a href="https://juejin.im/post/5ba4a6b75188255ca1537b19" target="_blank" rel="noopener">深入探究immutable.js的实现机制（二）</a></p>
<p>写的很明白了，本文简单做个记录</p>
<a id="more"></a>

<h2 id="基本数据结构"><a href="#基本数据结构" class="headerlink" title="基本数据结构"></a>基本数据结构</h2><h3 id="Trie"><a href="#Trie" class="headerlink" title="Trie"></a><a href="https://en.wikipedia.org/wiki/Trie" target="_blank" rel="noopener">Trie</a></h3><p>前缀树，又称字典树</p>
<p>可以共用节点</p>
<h3 id="Vector-trie"><a href="#Vector-trie" class="headerlink" title="Vector trie"></a>Vector trie</h3><p>Trie 没有修改能力，引入 Vector Head 进行结构共享</p>
<p><img src="https://user-gold-cdn.xitu.io/2018/9/14/165d635ebb85e04d?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt=""></p>
<p>每次修改操作的时候， 我们复制从根到叶子节点的路径而不是直接修改它们，这样从两个根我们就可以访问到对数据不同时刻的两个快照。</p>
<p><img src="https://pic4.zhimg.com/v2-2b4c801a7b40eefcd4ee6767fb984fdf_b.webp" alt=""></p>
<h3 id="Hash-array-mapped-trie"><a href="#Hash-array-mapped-trie" class="headerlink" title="Hash array mapped trie"></a><a href="https://en.wikipedia.org/wiki/Hash_array_mapped_trie" target="_blank" rel="noopener">Hash array mapped trie</a></h3><p>取 2^5 作为树宽。 更新和查询的考量</p>
<p>Vector trie 会出现空值，将占用空间，我们需要采用新的数据机构</p>
<h4 id="1-压缩树宽"><a href="#1-压缩树宽" class="headerlink" title="1. 压缩树宽"></a>1. 压缩树宽</h4><p>4 bit 的 mask 子节点长度为4</p>
<p>例 mask 1001 ,表示 01 11 有值</p>
<p>利用 mask 进行位运算 <a href="https://en.wikipedia.org/wiki/Hamming_weight" target="_blank" rel="noopener">Hamming weight</a></p>
<blockquote>
<p>n 表示第几个前缀 ， 统计 mask 上从最低位 至第 n 位 1 出现的次数，即前缀在压缩数组中的索引</p>
</blockquote>
<p>不采用高位还有一个原因是 mask 的位数不固定</p>
<p>增加属性的话，会调整数组的节点顺序，并重新计算 mask （或操作）</p>
<h4 id="2-压缩树高"><a href="#2-压缩树高" class="headerlink" title="2. 压缩树高"></a>2. 压缩树高</h4><p>单链的话，去除中间节点。</p>
<p>如果新增节点，需要增加中间节点，其实就是还原之前被去除的中间节点</p>
<p>最终保持单链只有一级即可</p>
<h4 id="3-trie-优化"><a href="#3-trie-优化" class="headerlink" title="3. trie 优化"></a>3. trie 优化</h4><p>记录当前 trie 的高度</p>
<p>针对 List push 的优化 – tail 节点</p>
<h2 id="要点"><a href="#要点" class="headerlink" title="要点"></a>要点</h2><h3 id="hash-冲突"><a href="#hash-冲突" class="headerlink" title="hash 冲突"></a>hash 冲突</h3><p>保持在一个线性数组中，由于冲突概率不高，不再引入复杂的数据结构</p>
<h3 id="为何比-Object-assign-好"><a href="#为何比-Object-assign-好" class="headerlink" title="为何比 Object.assign 好"></a>为何比 Object.assign 好</h3><p>后者还会再次做个引用连接，对于大数据对象，引用连接也是有耗时的</p>
<p>如果是基本类型，还会重新赋值，也有耗时</p>
<p>而 immutable 也会对未变动节点做引用链接，但是由于设置了 32 的宽度，可以减少很多引用</p>
<h2 id="展望"><a href="#展望" class="headerlink" title="展望"></a>展望</h2><h3 id="利用-proxy-重写-immutable"><a href="#利用-proxy-重写-immutable" class="headerlink" title="利用 proxy 重写 immutable"></a>利用 proxy 重写 immutable</h3><p>在看过 seamless-immutable 的用法，是否可以用 Proxy 让用法更接近原生？</p>
<p>多个属性赋值的话可以先开启某个标记</p>
<h2 id="拓展阅读"><a href="#拓展阅读" class="headerlink" title="拓展阅读"></a>拓展阅读</h2><ol>
<li><a href="https://github.com/dt-fe/weekly/issues/14" target="_blank" rel="noopener">Immutable 结构共享是如何实现的？</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/27133830" target="_blank" rel="noopener">精读 Immutable 结构共享</a></li>
<li><a href="https://io-meter.com/2016/09/03/Functional-Go-persist-datastructure-intro/" target="_blank" rel="noopener">Functional Go: 持久化数据结构简介</a></li>
<li><a href="https://medium.com/@dtinth/immutable-js-persistent-data-structures-and-structural-sharing-6d163fbd73d2" target="_blank" rel="noopener">Immutable.js, persistent data structures and structural sharing</a></li>
<li><a href="https://www.slideshare.net/mohitthatte/a-deep-dive-into-clojures-data-structures-euroclojure-2015" target="_blank" rel="noopener">PPT: A deep dive into Clojure’s data structures - EuroClojure 2015</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/20295971" target="_blank" rel="noopener">Immutable 详解及 React 中实践</a></li>
<li><a href="https://idea.popcount.org/2012-07-25-introduction-to-hamt/" target="_blank" rel="noopener">Introduction to HAMT</a></li>
<li>【荐】<a href="https://juejin.im/post/5ba4a6b75188255ca1537b19" target="_blank" rel="noopener">深入探究immutable.js的实现机制（二）</a></li>
</ol>
]]></content>
      <categories>
        <category>大前端</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>浅谈 Canvas 性能分析与渲染优化</title>
    <url>/2020/03/16/2020/%E6%B5%85%E8%B0%88%20Canvas%20%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90%E4%B8%8E%E6%B8%B2%E6%9F%93%E4%BC%98%E5%8C%96/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>接上文 <a href="https://juejin.im/post/5e64f811e51d4526e807fefa" target="_blank" rel="noopener">面试官问：什么是 canvas 污染</a></p>
<p>本文仅讨论 Canvas 2D</p>
<a id="more"></a>

<p>网上这类的文章已经很多了，本文仅仅是一个记录与总结。</p>
<p>推荐文末的拓展阅读</p>
<h1 id="性能分析"><a href="#性能分析" class="headerlink" title="性能分析"></a>性能分析</h1><p><a href="https://html.spec.whatwg.org/multipage/canvas.html#the-canvas-element" target="_blank" rel="noopener">Canvas 规范</a></p>
<p>渲染也是在 UI Render 中进行</p>
<p>context 是一个状态栈</p>
<p>状态包括</p>
<ul>
<li>当前应用的变形</li>
<li>strokeStyle, fillStyle, globalAlpha, lineWidth, lineCap, lineJoin, miterLimit, shadowOffsetX, shadowOffsetY, shadowBlur, shadowColor, globalCompositeOperation 的值</li>
<li>当前的裁切路径（clipping path）</li>
</ul>
<h1 id="优化策略"><a href="#优化策略" class="headerlink" title="优化策略"></a>优化策略</h1><h2 id="分层绘制"><a href="#分层绘制" class="headerlink" title="分层绘制"></a>分层绘制</h2><p>单一清除策略，适合同层物体矩形框不重叠的情况</p>
<p>如果同层2个物体重叠，上一策略在清除时会清掉另一物体的部分像素。</p>
<p>此时应该判断两者是否重叠，若重叠两者合并得到一个脏矩形，清空脏矩形，并重绘两个物体</p>
<p>更具体的细节可以查看 <a href="https://www.ibm.com/developerworks/cn/web/wa-canvashtml5layering/index.html" target="_blank" rel="noopener">利用分层优化 HTML5 画布渲染</a></p>
<h2 id="通过计算避免无效绘制"><a href="#通过计算避免无效绘制" class="headerlink" title="通过计算避免无效绘制"></a>通过计算避免无效绘制</h2><p>通过计算判断所绘制元素可见与否，是否需要绘制</p>
<p>计算性能与渲染性能的平衡</p>
<h2 id="离屏绘制"><a href="#离屏绘制" class="headerlink" title="离屏绘制"></a>离屏绘制</h2><p>将常用图像绘制在另一个 canvas 中</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在离屏 canvas 上绘制</span></span><br><span class="line"><span class="keyword">var</span> canvasOffscreen = <span class="built_in">document</span>.createElement(<span class="string">'canvas'</span>);</span><br><span class="line">canvasOffscreen.width = dw;</span><br><span class="line">canvasOffscreen.height = dh;</span><br><span class="line">canvasOffscreen.getContext(<span class="string">'2d'</span>).drawImage(image, sx, sy, sw, sh, dx, dy, dw, dh);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在绘制每一帧的时候，绘制这个图形</span></span><br><span class="line">context.drawImage(canvasOffscreen, x, y);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>摘自 《Canvas 最佳实践（性能篇）》</p>
</blockquote>
<p>还可以借助 worker 进行优化</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">const</span> offscreenCanvas = <span class="built_in">document</span>.getElementById(<span class="string">"c"</span>).transferControlToOffscreen();</span><br><span class="line">worker.postMessage(offscreenCanvas, [offscreenCanvas]);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// worker.js </span></span><br><span class="line"><span class="keyword">let</span> ctx, pos = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">draw</span>(<span class="params">dt</span>) </span>&#123;</span><br><span class="line">  ctx.clearRect(<span class="number">0</span>, <span class="number">0</span>, <span class="number">100</span>, <span class="number">100</span>);</span><br><span class="line">  ctx.fillRect(pos, <span class="number">0</span>, <span class="number">10</span>, <span class="number">10</span>);</span><br><span class="line">  pos += <span class="number">10</span> * dt;</span><br><span class="line">  requestAnimationFrame(draw);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">self.onmessage = <span class="function"><span class="keyword">function</span>(<span class="params">ev</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> transferredCanvas = ev.data;</span><br><span class="line">  ctx = transferredCanvas.getContext(<span class="string">"2d"</span>);</span><br><span class="line">  draw();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>引自 <a href="https://html.spec.whatwg.org/multipage/imagebitmap-and-animations.html#animation-frames" target="_blank" rel="noopener">https://html.spec.whatwg.org/multipage/imagebitmap-and-animations.html#animation-frames</a></p>
</blockquote>
<h2 id="合理使用-API"><a href="#合理使用-API" class="headerlink" title="合理使用 API"></a>合理使用 API</h2><p>减少耗时 api 的使用</p>
<p>减少改变 context 的状态</p>
<p>避免非法赋值</p>
<h2 id="可交互画布"><a href="#可交互画布" class="headerlink" title="可交互画布"></a>可交互画布</h2><h3 id="判断点的位置"><a href="#判断点的位置" class="headerlink" title="判断点的位置"></a>判断点的位置</h3><p><code>ctx.isPointInPath</code></p>
<p>使用 isPointinPath 方法检查某点是否在当前路径 path (Path2D) 内</p>
<p>但很多情况下我们没有保存这个 path ，此时自己采用射线法计算判断</p>
<h3 id="获取点击区域"><a href="#获取点击区域" class="headerlink" title="获取点击区域"></a>获取点击区域</h3><p>addHitRegion</p>
<p>有兼容性问题， Safari 等不支持</p>
<h3 id="避免使用-canvas-实现文本编辑控件"><a href="#避免使用-canvas-实现文本编辑控件" class="headerlink" title="避免使用 canvas 实现文本编辑控件"></a>避免使用 canvas 实现文本编辑控件</h3><p>这个不用说了， canvas 难以实现</p>
<p>参照 <a href="https://html.spec.whatwg.org/multipage/canvas.html#best-practices" target="_blank" rel="noopener">Best practices</a></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ol>
<li>将渲染开销转嫁到计算开销</li>
<li>利用分层渲染复杂场景</li>
<li>固定内容采用离屏渲染</li>
<li>合理使用 API 并管理状态</li>
</ol>
<h1 id="拓展阅读"><a href="#拓展阅读" class="headerlink" title="拓展阅读"></a>拓展阅读</h1><ul>
<li><a href="https://www.ibm.com/developerworks/cn/web/wa-canvashtml5layering/index.html" target="_blank" rel="noopener">利用分层优化 HTML5 画布渲染</a></li>
<li><a href="https://fed.taobao.org/blog/taofed/do71ct/canvas-performance/" target="_blank" rel="noopener">Canvas 最佳实践（性能篇）</a></li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Canvas_API/Tutorial/Optimizing_canvas" target="_blank" rel="noopener">canvas的优化</a></li>
</ul>
]]></content>
      <categories>
        <category>大前端</category>
      </categories>
      <tags>
        <tag>Canvas</tag>
      </tags>
  </entry>
  <entry>
    <title>WebGL 矩阵处理</title>
    <url>/2020/03/11/WebGL/WebGL%20%E7%9F%A9%E9%98%B5%E5%A4%84%E7%90%86/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>通过本文，可以了解 WebGL 中平移、旋转、缩放、视角的矩阵运算，最终实现一个立方体变换的效果</p>
<a id="more"></a>

<h1 id="构建立方体"><a href="#构建立方体" class="headerlink" title="构建立方体"></a>构建立方体</h1><p>先绘制一个基础的立方体</p>
<p>采用右手定理确定笛卡尔坐标系的位置，见下图右边</p>
<p><img src="https://upload-images.jianshu.io/upload_images/9277731-54d1c3d28a49ec09.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>所以我们的立方体顶点坐标为</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">  v0,v1,v2,</span><br><span class="line">  v0,v2,v3,</span><br><span class="line">  v0,v3,v4</span><br><span class="line">  ...</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p>每个面需要6个顶点，一共需要传入 36 个顶点</p>
<p>每个面都要独立渲染一个颜色的话，颜色可变量对应每个顶点，故这里也需要传入 6 * 6 个 vec4 类型的颜色值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">  c0,c1,c2,</span><br><span class="line">  c0,c2,c3,</span><br><span class="line">  c0,c3,c4</span><br><span class="line">  ...</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<blockquote>
<p>这里是不是在想立方体本来才 8 个点，我们这里却传了 36个点。</p>
</blockquote>
<p>可以利用 drawElements 减少<strong>定义</strong>的顶点个数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Create a cube</span></span><br><span class="line"><span class="comment">//    v6----- v5</span></span><br><span class="line"><span class="comment">//   /|      /|</span></span><br><span class="line"><span class="comment">//  v1------v0|</span></span><br><span class="line"><span class="comment">//  | |     | |</span></span><br><span class="line"><span class="comment">//  | |v7---|-|v4</span></span><br><span class="line"><span class="comment">//  |/      |/</span></span><br><span class="line"><span class="comment">//  v2------v3</span></span><br><span class="line"><span class="keyword">var</span> vertices = <span class="keyword">new</span> <span class="built_in">Float32Array</span>([   <span class="comment">// Vertex coordinates</span></span><br><span class="line">   <span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">1.0</span>,  <span class="number">-1.0</span>, <span class="number">1.0</span>, <span class="number">1.0</span>,  <span class="number">-1.0</span>,<span class="number">-1.0</span>, <span class="number">1.0</span>,   <span class="number">1.0</span>,<span class="number">-1.0</span>, <span class="number">1.0</span>,  <span class="comment">// v0-v1-v2-v3 front</span></span><br><span class="line">   <span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">1.0</span>,   <span class="number">1.0</span>,<span class="number">-1.0</span>, <span class="number">1.0</span>,   <span class="number">1.0</span>,<span class="number">-1.0</span>,<span class="number">-1.0</span>,   <span class="number">1.0</span>, <span class="number">1.0</span>,<span class="number">-1.0</span>,  <span class="comment">// v0-v3-v4-v5 right</span></span><br><span class="line">   <span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">1.0</span>,   <span class="number">1.0</span>, <span class="number">1.0</span>,<span class="number">-1.0</span>,  <span class="number">-1.0</span>, <span class="number">1.0</span>,<span class="number">-1.0</span>,  <span class="number">-1.0</span>, <span class="number">1.0</span>, <span class="number">1.0</span>,  <span class="comment">// v0-v5-v6-v1 up</span></span><br><span class="line">  <span class="number">-1.0</span>, <span class="number">1.0</span>, <span class="number">1.0</span>,  <span class="number">-1.0</span>, <span class="number">1.0</span>,<span class="number">-1.0</span>,  <span class="number">-1.0</span>,<span class="number">-1.0</span>,<span class="number">-1.0</span>,  <span class="number">-1.0</span>,<span class="number">-1.0</span>, <span class="number">1.0</span>,  <span class="comment">// v1-v6-v7-v2 left</span></span><br><span class="line">  <span class="number">-1.0</span>,<span class="number">-1.0</span>,<span class="number">-1.0</span>,   <span class="number">1.0</span>,<span class="number">-1.0</span>,<span class="number">-1.0</span>,   <span class="number">1.0</span>,<span class="number">-1.0</span>, <span class="number">1.0</span>,  <span class="number">-1.0</span>,<span class="number">-1.0</span>, <span class="number">1.0</span>,  <span class="comment">// v7-v4-v3-v2 down</span></span><br><span class="line">   <span class="number">1.0</span>,<span class="number">-1.0</span>,<span class="number">-1.0</span>,  <span class="number">-1.0</span>,<span class="number">-1.0</span>,<span class="number">-1.0</span>,  <span class="number">-1.0</span>, <span class="number">1.0</span>,<span class="number">-1.0</span>,   <span class="number">1.0</span>, <span class="number">1.0</span>,<span class="number">-1.0</span>   <span class="comment">// v4-v7-v6-v5 back</span></span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> colors = <span class="keyword">new</span> <span class="built_in">Float32Array</span>([     <span class="comment">// Colors</span></span><br><span class="line">  <span class="number">0.4</span>, <span class="number">0.4</span>, <span class="number">1.0</span>,  <span class="number">0.4</span>, <span class="number">0.4</span>, <span class="number">1.0</span>,  <span class="number">0.4</span>, <span class="number">0.4</span>, <span class="number">1.0</span>,  <span class="number">0.4</span>, <span class="number">0.4</span>, <span class="number">1.0</span>,  <span class="comment">// v0-v1-v2-v3 front(blue)</span></span><br><span class="line">  <span class="number">0.4</span>, <span class="number">1.0</span>, <span class="number">0.4</span>,  <span class="number">0.4</span>, <span class="number">1.0</span>, <span class="number">0.4</span>,  <span class="number">0.4</span>, <span class="number">1.0</span>, <span class="number">0.4</span>,  <span class="number">0.4</span>, <span class="number">1.0</span>, <span class="number">0.4</span>,  <span class="comment">// v0-v3-v4-v5 right(green)</span></span><br><span class="line">  <span class="number">1.0</span>, <span class="number">0.4</span>, <span class="number">0.4</span>,  <span class="number">1.0</span>, <span class="number">0.4</span>, <span class="number">0.4</span>,  <span class="number">1.0</span>, <span class="number">0.4</span>, <span class="number">0.4</span>,  <span class="number">1.0</span>, <span class="number">0.4</span>, <span class="number">0.4</span>,  <span class="comment">// v0-v5-v6-v1 up(red)</span></span><br><span class="line">  <span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">0.4</span>,  <span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">0.4</span>,  <span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">0.4</span>,  <span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">0.4</span>,  <span class="comment">// v1-v6-v7-v2 left</span></span><br><span class="line">  <span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">1.0</span>,  <span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">1.0</span>,  <span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">1.0</span>,  <span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">1.0</span>,  <span class="comment">// v7-v4-v3-v2 down</span></span><br><span class="line">  <span class="number">0.4</span>, <span class="number">1.0</span>, <span class="number">1.0</span>,  <span class="number">0.4</span>, <span class="number">1.0</span>, <span class="number">1.0</span>,  <span class="number">0.4</span>, <span class="number">1.0</span>, <span class="number">1.0</span>,  <span class="number">0.4</span>, <span class="number">1.0</span>, <span class="number">1.0</span>   <span class="comment">// v4-v7-v6-v5 back</span></span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> indices = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>([       <span class="comment">// Indices of the vertices</span></span><br><span class="line">   <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>,   <span class="number">0</span>, <span class="number">2</span>, <span class="number">3</span>,    <span class="comment">// front</span></span><br><span class="line">   <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>,   <span class="number">4</span>, <span class="number">6</span>, <span class="number">7</span>,    <span class="comment">// right</span></span><br><span class="line">   <span class="number">8</span>, <span class="number">9</span>,<span class="number">10</span>,   <span class="number">8</span>,<span class="number">10</span>,<span class="number">11</span>,    <span class="comment">// up</span></span><br><span class="line">  <span class="number">12</span>,<span class="number">13</span>,<span class="number">14</span>,  <span class="number">12</span>,<span class="number">14</span>,<span class="number">15</span>,    <span class="comment">// left</span></span><br><span class="line">  <span class="number">16</span>,<span class="number">17</span>,<span class="number">18</span>,  <span class="number">16</span>,<span class="number">18</span>,<span class="number">19</span>,    <span class="comment">// down</span></span><br><span class="line">  <span class="number">20</span>,<span class="number">21</span>,<span class="number">22</span>,  <span class="number">20</span>,<span class="number">22</span>,<span class="number">23</span>     <span class="comment">// back</span></span><br><span class="line">]);</span><br><span class="line"><span class="comment">// 设置 buffer 与绑定</span></span><br><span class="line"></span><br><span class="line">gl.drawElements(gl.TRIANGLES, indices.length, gl.UNSIGNED_BYTE, <span class="number">0</span>);</span><br></pre></td></tr></table></figure>

<p>若只采用 8 个顶点呢？</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">  <span class="comment">// Create a cube</span></span><br><span class="line">  <span class="comment">//    v6----- v5</span></span><br><span class="line">  <span class="comment">//   /|      /|</span></span><br><span class="line">  <span class="comment">//  v1------v0|</span></span><br><span class="line">  <span class="comment">//  | |     | |</span></span><br><span class="line">  <span class="comment">//  | |v7---|-|v4</span></span><br><span class="line">  <span class="comment">//  |/      |/</span></span><br><span class="line">  <span class="comment">//  v2------v3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> vertices = <span class="keyword">new</span> <span class="built_in">Float32Array</span>([</span><br><span class="line">  <span class="comment">// v0-v1-v2-v3 front</span></span><br><span class="line">  <span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">1.0</span>,  <span class="number">-1.0</span>, <span class="number">1.0</span>, <span class="number">1.0</span>,  <span class="number">-1.0</span>,<span class="number">-1.0</span>, <span class="number">1.0</span>,   <span class="number">1.0</span>,<span class="number">-1.0</span>, <span class="number">1.0</span>,    </span><br><span class="line">  <span class="comment">// v4-v7-v6-v5 back</span></span><br><span class="line">  <span class="number">1.0</span>,<span class="number">-1.0</span>,<span class="number">-1.0</span>,  <span class="number">-1.0</span>,<span class="number">-1.0</span>,<span class="number">-1.0</span>,  <span class="number">-1.0</span>, <span class="number">1.0</span>,<span class="number">-1.0</span>,   <span class="number">1.0</span>, <span class="number">1.0</span>,<span class="number">-1.0</span>     </span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// colors 不变</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义绘制时顶点的索引</span></span><br><span class="line"><span class="keyword">var</span> indices = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>([</span><br><span class="line">  <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>,   <span class="number">0</span>, <span class="number">2</span>, <span class="number">3</span>,    <span class="comment">// front</span></span><br><span class="line">  <span class="number">0</span>, <span class="number">3</span>, <span class="number">4</span>,   <span class="number">0</span>, <span class="number">4</span>, <span class="number">7</span>,    <span class="comment">// right</span></span><br><span class="line">  <span class="number">0</span>, <span class="number">7</span>, <span class="number">6</span>,   <span class="number">0</span>, <span class="number">6</span>, <span class="number">1</span>,    <span class="comment">// up</span></span><br><span class="line">  <span class="number">1</span>, <span class="number">6</span>, <span class="number">5</span>,   <span class="number">1</span>, <span class="number">5</span>, <span class="number">2</span>,    <span class="comment">// left</span></span><br><span class="line">  <span class="number">6</span>, <span class="number">4</span>, <span class="number">3</span>,   <span class="number">6</span>, <span class="number">3</span>, <span class="number">3</span>,    <span class="comment">// down</span></span><br><span class="line">  <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>,   <span class="number">4</span>, <span class="number">6</span>, <span class="number">7</span>     <span class="comment">// back</span></span><br><span class="line">]);</span><br></pre></td></tr></table></figure>

<p>会发现该立方体只有两个颜色 blue 和 green 以及颜色插值</p>
<p>这是由于共用顶点导致的，所以如果同一顶点有参与多次不同多个颜色片元处理的话，不能共用。</p>
<p>着色器代码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> vertexShaderSource = <span class="string">`</span></span><br><span class="line"><span class="string">  attribute vec4 aVertexPosition;</span></span><br><span class="line"><span class="string">  attribute vec4 aVertexColor;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  varying lowp vec4 vColor;</span></span><br><span class="line"><span class="string">  void main(void) &#123;</span></span><br><span class="line"><span class="string">    gl_Position = aVertexPosition;</span></span><br><span class="line"><span class="string">    vColor = aVertexColor;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">`</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> fragmentShaderSource = <span class="string">`</span></span><br><span class="line"><span class="string">  varying lowp vec4 vColor;</span></span><br><span class="line"><span class="string">  void main(void) &#123;</span></span><br><span class="line"><span class="string">    gl_FragColor = vColor;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">`</span></span><br></pre></td></tr></table></figure>

<p>最后渲染出来的话，我们只能看到背面一面</p>
<p>这是由于视角的原因，下文将描述如何进行矩阵变换</p>
<h1 id="矩阵运算"><a href="#矩阵运算" class="headerlink" title="矩阵运算"></a>矩阵运算</h1><p>主要分为模型矩阵(moel)、视图矩阵(view)、投影矩阵(projection)</p>
<p>其中<strong>模型矩阵</strong>表示对观察目标的组合变换，包括旋转、平移、缩放</p>
<p>先定义一些工具函数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创建4阶单位矩阵</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createMat4</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> out = <span class="keyword">new</span> <span class="built_in">Float32Array</span>(<span class="number">16</span>);</span><br><span class="line">  out[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">  out[<span class="number">5</span>] = <span class="number">1</span>;</span><br><span class="line">  out[<span class="number">10</span>] = <span class="number">1</span>;</span><br><span class="line">  out[<span class="number">15</span>] = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">return</span> out;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取矩阵 a 乘 矩阵 b 的结果矩阵</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Mat4&#125;</span> </span>a </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Mat4&#125;</span> </span>b </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">multiply</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> out = <span class="keyword">new</span> <span class="built_in">Float32Array</span>(<span class="number">16</span>);</span><br><span class="line">  <span class="keyword">var</span> a00 = a[<span class="number">0</span>],</span><br><span class="line">      a01 = a[<span class="number">1</span>],</span><br><span class="line">      a02 = a[<span class="number">2</span>],</span><br><span class="line">      a03 = a[<span class="number">3</span>];</span><br><span class="line">  <span class="keyword">var</span> a10 = a[<span class="number">4</span>],</span><br><span class="line">      a11 = a[<span class="number">5</span>],</span><br><span class="line">      a12 = a[<span class="number">6</span>],</span><br><span class="line">      a13 = a[<span class="number">7</span>];</span><br><span class="line">  <span class="keyword">var</span> a20 = a[<span class="number">8</span>],</span><br><span class="line">      a21 = a[<span class="number">9</span>],</span><br><span class="line">      a22 = a[<span class="number">10</span>],</span><br><span class="line">      a23 = a[<span class="number">11</span>];</span><br><span class="line">  <span class="keyword">var</span> a30 = a[<span class="number">12</span>],</span><br><span class="line">      a31 = a[<span class="number">13</span>],</span><br><span class="line">      a32 = a[<span class="number">14</span>],</span><br><span class="line">      a33 = a[<span class="number">15</span>];</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Cache only the current line of the second matrix</span></span><br><span class="line">  <span class="keyword">var</span> b0 = b[<span class="number">0</span>],</span><br><span class="line">      b1 = b[<span class="number">1</span>],</span><br><span class="line">      b2 = b[<span class="number">2</span>],</span><br><span class="line">      b3 = b[<span class="number">3</span>];</span><br><span class="line">  out[<span class="number">0</span>] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;</span><br><span class="line">  out[<span class="number">1</span>] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;</span><br><span class="line">  out[<span class="number">2</span>] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;</span><br><span class="line">  out[<span class="number">3</span>] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;</span><br><span class="line"></span><br><span class="line">  b0 = b[<span class="number">4</span>];b1 = b[<span class="number">5</span>];b2 = b[<span class="number">6</span>];b3 = b[<span class="number">7</span>];</span><br><span class="line">  out[<span class="number">4</span>] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;</span><br><span class="line">  out[<span class="number">5</span>] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;</span><br><span class="line">  out[<span class="number">6</span>] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;</span><br><span class="line">  out[<span class="number">7</span>] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;</span><br><span class="line"></span><br><span class="line">  b0 = b[<span class="number">8</span>];b1 = b[<span class="number">9</span>];b2 = b[<span class="number">10</span>];b3 = b[<span class="number">11</span>];</span><br><span class="line">  out[<span class="number">8</span>] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;</span><br><span class="line">  out[<span class="number">9</span>] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;</span><br><span class="line">  out[<span class="number">10</span>] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;</span><br><span class="line">  out[<span class="number">11</span>] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;</span><br><span class="line"></span><br><span class="line">  b0 = b[<span class="number">12</span>];b1 = b[<span class="number">13</span>];b2 = b[<span class="number">14</span>];b3 = b[<span class="number">15</span>];</span><br><span class="line">  out[<span class="number">12</span>] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;</span><br><span class="line">  out[<span class="number">13</span>] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;</span><br><span class="line">  out[<span class="number">14</span>] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;</span><br><span class="line">  out[<span class="number">15</span>] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;</span><br><span class="line">  <span class="keyword">return</span> out;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="旋转"><a href="#旋转" class="headerlink" title="旋转"></a>旋转</h2><p>绕 z 轴旋转，修改的是 x,y 的坐标，可以理解为每个 xy 平面都在绕 xy 轴原点旋转</p>
<p>b 为逆时针旋转的弧度</p>
<blockquote>
<p>你可能会看到有些教程中的运算矩阵不太一样，那就是 b 取的顺时针旋转弧度。因为 <code>sin-b = -sinb; cos-b = cos b</code></p>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// x' = x cosb - y sinb</span></span><br><span class="line"><span class="comment">// y' = x sinb + y cosb</span></span><br><span class="line"><span class="comment">// z' = z</span></span><br><span class="line">attribute vec4 a_Position;</span><br><span class="line">uniform <span class="keyword">float</span> u_CosB,u_SinB;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  gl_Position.x = a_Position.x * u_CosB - a_Position.y * u_SinB;</span><br><span class="line">  gl_Position.y = a_Position.x * u_SinB + a_Position.y * u_CosB;</span><br><span class="line">  gl_Position.z = a_Position.z;</span><br><span class="line">  gl_Position.w = <span class="number">1.0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>化为矩阵运算为(这里补齐为4阶矩阵是为了方便后面同阶矩阵的运算)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[ x&#39; ]   [ cosb -sinb 0  0 ]   [ x ]    [ x * cosb - y * sinb ]</span><br><span class="line">[ y&#39; ] &#x3D; [ sinb  cosb 0  0 ] x [ y ] &#x3D;  [ x * sinb + y * cosb ]</span><br><span class="line">[ z&#39; ]   [   0    0   1  0 ]   [ z ]    [          z          ]</span><br><span class="line">[ 1  ]   [   0    0   0  1 ]   [ 1 ]    [          1          ]</span><br></pre></td></tr></table></figure>

<p>采用的这个矩阵称为旋转矩阵</p>
<p>类似的，绕 x 轴旋转的话，利用右手定理（翻转坐标系，x轴指向自己），相比绕z轴，其实 z 相当于刚刚的 y ，y 相当于 x ，故旋转矩阵为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[ x&#39; ]   [  1   0    0   0 ]   [ x ]    [         x           ]</span><br><span class="line">[ y&#39; ] &#x3D; [  0 cosb -sinb 0 ] x [ y ] &#x3D;  [ y * cosb - z * sinb ]</span><br><span class="line">[ z&#39; ]   [  0 sinb  cosb 0 ]   [ z ]    [ y * sinb + z * cosb ]</span><br><span class="line">[ 1  ]   [  0   0    0   1 ]   [ 1 ]    [          1          ]</span><br></pre></td></tr></table></figure>

<p>绕 y 轴旋转的话，旋转矩阵为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[ x&#39; ]   [  cosb 0  sinb 0 ]   [ x ]    [ x * cosb + z * sinb ]</span><br><span class="line">[ y&#39; ] &#x3D; [   0   1   0   0 ] x [ y ] &#x3D;  [        y            ]</span><br><span class="line">[ z&#39; ]   [ -sinb 0  cosb 0 ]   [ z ]    [ z * cosb - x * sinb ]</span><br><span class="line">[ 1  ]   [   0   0   0   1 ]   [ 1 ]    [          1          ]</span><br></pre></td></tr></table></figure>


<p>顶点着色器中修改如下即可</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">attribute vec4 a_Position;</span><br><span class="line">uniform mat4 u_xformMatrix;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  gl_Position = u_xformMatrix * a_Position;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>工具函数如下</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 按 x 轴旋转的变换矩阵</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Number&#125;</span> </span>angleInRadians 逆时针旋转的弧度</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">rotateX</span> (<span class="params">angleInRadians</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> c = <span class="built_in">Math</span>.cos(angleInRadians);</span><br><span class="line">  <span class="keyword">let</span> s = <span class="built_in">Math</span>.sin(angleInRadians);</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Float32Array</span>([</span><br><span class="line">    <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>, c, -s, <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>, s, c, <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>,</span><br><span class="line">  ]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 按 y 轴旋转的变换矩阵</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Number&#125;</span> </span>angleInRadians 逆时针旋转的弧度</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">rotateY</span> (<span class="params">angleInRadians</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> c = <span class="built_in">Math</span>.cos(angleInRadians);</span><br><span class="line">  <span class="keyword">let</span> s = <span class="built_in">Math</span>.sin(angleInRadians);</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Float32Array</span>([</span><br><span class="line">    c, <span class="number">0</span>, s, <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">    -s, <span class="number">0</span>, c, <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>,</span><br><span class="line">  ]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 按 z 轴旋转的变换矩阵</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Number&#125;</span> </span>angleInRadians 逆时针旋转的弧度</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">rotateZ</span> (<span class="params">angleInRadians</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> c = <span class="built_in">Math</span>.cos(angleInRadians);</span><br><span class="line">  <span class="keyword">let</span> s = <span class="built_in">Math</span>.sin(angleInRadians);</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Float32Array</span>([</span><br><span class="line">    c, -s, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">    s, c, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>,</span><br><span class="line">  ]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="平移"><a href="#平移" class="headerlink" title="平移"></a>平移</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">attribute vec4 a_Position;</span><br><span class="line">uniform vec4 u_Translation;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  gl_Position = a_Position + u_Translation;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>两个 vec4 分量相加即可，注意第二个分量 u_Translation 的 w 为 0</p>
<p>利用矩阵的话则变为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[ x&#39; ]   [ 1 0 0 Tx ]   [ x ]    [ x + Tx ]</span><br><span class="line">[ y&#39; ] &#x3D; [ 0 1 0 Ty ] x [ y ] &#x3D;  [ y + Ty ]</span><br><span class="line">[ z&#39; ]   [ 0 0 1 Tz ]   [ z ]    [ z + Tz ]</span><br><span class="line">[ 1  ]   [ 0 0 0 1  ]   [ 1 ]    [   1    ]</span><br></pre></td></tr></table></figure>

<p>该矩阵称为平移矩阵</p>
<p>矩阵在 js 中利用类型化数组，并采用列主序表示，比如上面这个平移矩阵在 js 中表示为</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Float32Array</span>([</span><br><span class="line">  <span class="number">1.0</span>,<span class="number">0.0</span>,<span class="number">0.0</span>,<span class="number">0.0</span>,</span><br><span class="line">  <span class="number">0.0</span>,<span class="number">1.0</span>,<span class="number">0.0</span>,<span class="number">0.0</span>,</span><br><span class="line">  <span class="number">0.0</span>,<span class="number">0.0</span>,<span class="number">1.0</span>,<span class="number">0.0</span>,</span><br><span class="line">  Tx, Ty, Tz, <span class="number">1.0</span></span><br><span class="line">])</span><br></pre></td></tr></table></figure>

<p>工具函数如下</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 生成平移矩阵</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Number&#125;</span> </span>tx x 轴方向的偏移量</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Number&#125;</span> </span>ty y 轴方向的偏移量</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Number&#125;</span> </span>tz z 轴方向的偏移量</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">translation</span> (<span class="params">tx, ty, tz</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Float32Array</span>([</span><br><span class="line">    <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>,</span><br><span class="line">    tx, ty, tz, <span class="number">1</span>,</span><br><span class="line">  ]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="缩放"><a href="#缩放" class="headerlink" title="缩放"></a>缩放</h2><p>x,y,z 按三个方向进行缩放，缩放因子分别为 Sx,Sy,Sz </p>
<p>对应的缩放矩阵为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[ x&#39; ]   [ Sx 0  0 0 ]   [ x ]    [ x * Sx ]</span><br><span class="line">[ y&#39; ] &#x3D; [ 0  Sy 0 0 ] x [ y ] &#x3D;  [ y * Sy ]</span><br><span class="line">[ z&#39; ]   [ 0  0 Sz 0 ]   [ z ]    [ z * Sz ]</span><br><span class="line">[ 1  ]   [ 0  0  0 1 ]   [ 1 ]    [   1    ]</span><br></pre></td></tr></table></figure>
<p>工具函数如下</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 生成缩放矩阵</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Number&#125;</span> </span>sx x 轴方向的缩放值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Number&#125;</span> </span>sy y 轴方向的缩放值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Number&#125;</span> </span>sz z 轴方向的缩放值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">scaling</span> (<span class="params">sx, sy, sz</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Float32Array</span>([</span><br><span class="line">    sx, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>, sy, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>, <span class="number">0</span>, sz, <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>,</span><br><span class="line">  ]);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h2><p>在三维空间中，视角也是一个重要的要素，决定我们以哪个方向观察目标</p>
<p><img src="https://upload-images.jianshu.io/upload_images/9277731-8de1b2a4d7385949.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="引自《交互式计算机图形学》"></p>
<p>视角由三部分组成：</p>
<ul>
<li>视点：视线起点，观察者（相机）所在位置，(eyeX,eyeY,eyeZ)</li>
<li>观察目标点：被观察目标点，视点透过观察目标点形成视线，(atX,atY,atZ)</li>
<li>上方向：最终绘制在屏幕中的影像的向上方向。由于观察者可能以视线为轴旋转，故还需要上方向固定视角。向量 (upX,upY,upZ)</li>
</ul>
<p>默认视角为 z 轴负半轴，即指向屏幕内部。其中</p>
<ul>
<li>视点：位于坐标原点 (0,0,0)</li>
<li>观察目标点: 视线为Z轴负方向，因此观察目标点为 <code>(0,0,z) z &lt; 0</code></li>
<li>上方向：Y 轴正方向 (0,1,0)</li>
</ul>
<p>三者的信息构成一个视图矩阵，用于世界空间到视图空间的转换，那视图矩阵如何确定？</p>
<h3 id="一、-构建相机空间坐标系"><a href="#一、-构建相机空间坐标系" class="headerlink" title="一、 构建相机空间坐标系"></a>一、 构建相机空间坐标系</h3><ol>
<li><p>根据 at 和 eye 两点确定视线 forward 基向量</p>
<p> 首先计算视线方向 <code>forwrad =(at-eye)</code> <br> 并归一化 <code>forward=forward/|forwrad|</code></p>
</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">fx = centerX - eyeX;</span><br><span class="line">fy = centerY - eyeY;</span><br><span class="line">fz = centerZ - eyeZ;</span><br><span class="line"></span><br><span class="line">rlf = <span class="number">1</span> / <span class="built_in">Math</span>.sqrt(fx*fx + fy*fy + fz*fz);</span><br><span class="line">fx *= rlf;</span><br><span class="line">fy *= rlf;</span><br><span class="line">fz *= rlf;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li><p>根据 up 向量和 forward 确定相机的 side 基向量\</p>
<p> 方向根据右手定则确定，垂直于两个向量构建的面</p>
<p> 归一化 up 向量： <code>up=up/|up|</code>；叉积：<code>side=cross(forward,up)</code> 或者<br> 叉积：<code>side=cross(forward,up)</code>；归一化 side 向量： <code>side=side/|side|</code>；</p>
</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">sx = fy * upZ - fz * upY;</span><br><span class="line">sy = fz * upX - fx * upZ;</span><br><span class="line">sz = fx * upY - fy * upX;</span><br><span class="line"></span><br><span class="line">rls = <span class="number">1</span> / <span class="built_in">Math</span>.sqrt(sx*sx + sy*sy + sz*sz);</span><br><span class="line">sx *= rls;</span><br><span class="line">sy *= rls;</span><br><span class="line">sz *= rls;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li><p>根据 forward 和 side 计算 up 向量</p>
<p> 叉积：<code>up = cross(side,forward)</code></p>
<p> 此 up 向量垂直于 forward 和 side 构成的平面</p>
</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">ux = sy * fz - sz * fy;</span><br><span class="line">uy = sz * fx - sx * fz;</span><br><span class="line">uz = sx * fy - sy * fx;</span><br></pre></td></tr></table></figure>

<p>这样， eye 位置以及 forward、side、up 三个基向量构建成一个新的坐标系</p>
<p>需要注意的是，这个坐标系是左手坐标系，在实际使用中需要对 forward 进行翻转</p>
<blockquote>
<p>side 对应 x, up 对应 y, -forward 对应 z</p>
</blockquote>
<p>利用 eye 和 side、up、-forward 来构成一个右手坐标系</p>
<p>接下来我们将进行坐标转换，计算世界坐标系中的物体在相机坐标系下的坐标</p>
<h3 id="二、利用旋转和平移矩阵求逆矩阵"><a href="#二、利用旋转和平移矩阵求逆矩阵" class="headerlink" title="二、利用旋转和平移矩阵求逆矩阵"></a>二、利用旋转和平移矩阵求逆矩阵</h3><p>将世界坐标系旋转+平移至相机坐标系重合，旋转 R 和平移 T 构成组合矩阵 <code>M=T*R</code> </p>
<p>该变换矩阵将相机坐标系中坐标变换到世界坐标系</p>
<p>相对应的，视图矩阵(世界坐标系转换到相机坐标系) <code>view = M﹣¹</code></p>
<blockquote>
<p>世界坐标系中的顶点通过 M 映射到相机坐标系，根据相对运动，该顶点在相机坐标系中实际为 view * 原顶点位置</p>
</blockquote>
<p>平移矩阵 T</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[ 0 0 0 eyeX ]</span><br><span class="line">[ 0 0 0 eyeY ]</span><br><span class="line">[ 0 0 0 eyeZ ]</span><br><span class="line">[ 0 0 0   1  ]</span><br></pre></td></tr></table></figure>

<p>已知</p>
<p><code>x(1,0,0),y(0,1,0),z(0,0,1)</code> 为世界坐标系的基<br><code>u(sx,sy,sz),v(ux,uy,uz),n(-fx,-fy,-fz)</code> 为相机坐标系的基</p>
<p>求相机坐标系中顶点变换到世界坐标系的变换矩阵 R</p>
<p>解：</p>
<p>根据<a href="https://baike.baidu.com/item/%E5%9F%BA%E5%8F%98%E6%8D%A2" target="_blank" rel="noopener">定理</a> </p>
<p>若 <code>(u,v,n) = (x,y,z) * C</code><br>则矩阵 C 为从基 <code>(x,y,z)</code> 到基 <code>(u,v,n)</code> 的过渡矩阵</p>
<p>设向量空间中某个向量的坐标在基 <code>(x,y,z)</code> 和基 <code>(u,v,n)</code> 下分别表示为 X、Y，<br>根据坐标变换公式有 <code>X = C * Y</code></p>
<p>故所求 C 正好为相机坐标系顶点到世界坐标系顶点的变换矩阵 R</p>
<blockquote>
<p>t 表示转置矩阵，下同</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">u &#x3D; (sx,sy,sz)t &#x3D; sx * x + sy * y + sz * z</span><br><span class="line">v &#x3D; (ux,uy,uz)t &#x3D; ux * x + uy * y + uz * z</span><br><span class="line">n &#x3D; (-fx,-fy,-fz)t &#x3D; -fx * x - fy * y - fz * z</span><br><span class="line"></span><br><span class="line">(u,v,n) </span><br><span class="line">&#x3D; (x,y,z) * R</span><br><span class="line">&#x3D; (x,y,z) * ( (sx,sy,sz)t ,(ux,uy,uz)t, (-fx,-fy,-fz)t )</span><br></pre></td></tr></table></figure>


<p>故旋转矩阵 R 为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[ sx ux -fx 0 ]</span><br><span class="line">[ sy uy -fy 0 ]</span><br><span class="line">[ sz uz -fz 0 ]</span><br><span class="line">[ 0  0   0  1 ]</span><br></pre></td></tr></table></figure>


<p>最终所求矩阵 view = <code>(T * R)﹣¹</code> = <code>R﹣¹ * T﹣¹</code> = <code>Rt * T﹣¹</code></p>
<blockquote>
<p>旋转矩阵为正交矩阵，其逆矩阵等于它的转置矩阵</p>
</blockquote>
<p>故</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">view &#x3D; </span><br><span class="line">[  sx  sy  sz 0 ]   [ 1 0 0 -eyeX ]</span><br><span class="line">[  ux  uy  uz 0 ] x [ 0 1 0 -eyeY ]</span><br><span class="line">[ -fx -fy -fz 0 ]   [ 0 0 1 -eyeZ ]</span><br><span class="line">[  0   0   0  1 ]   [ 0 0 0    1  ]</span><br></pre></td></tr></table></figure>


<p>“改变观察者的状态” 与 “对整个世界进行变换” 本质是一样的，运用哪个矩阵就看变动哪个主体更方便</p>
<p>将视图矩阵乘以顶点坐标将得到新的视图</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">attribute vec4 a_Position;</span><br><span class="line">uniform mat4 u_ViewMatrix;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  gl_Position = u_ViewMatrix * a_Position;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>工具函数如下</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setLookAt</span> (<span class="params">eyeX, eyeY, eyeZ, centerX, centerY, centerZ, upX, upY, upZ</span>) </span>&#123;</span><br><span class="line">  fx, fy, fz, rlf, sx, sy, sz, rls, ux, uy, uz;</span><br><span class="line"></span><br><span class="line">  fx = centerX - eyeX;</span><br><span class="line">  fy = centerY - eyeY;</span><br><span class="line">  fz = centerZ - eyeZ;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Normalize f.</span></span><br><span class="line">  rlf = <span class="number">1</span> / <span class="built_in">Math</span>.sqrt(fx * fx + fy * fy + fz * fz);</span><br><span class="line">  fx *= rlf;</span><br><span class="line">  fy *= rlf;</span><br><span class="line">  fz *= rlf;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Calculate cross product of f and up.</span></span><br><span class="line">  sx = fy * upZ - fz * upY;</span><br><span class="line">  sy = fz * upX - fx * upZ;</span><br><span class="line">  sz = fx * upY - fy * upX;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Normalize s.</span></span><br><span class="line">  rls = <span class="number">1</span> / <span class="built_in">Math</span>.sqrt(sx * sx + sy * sy + sz * sz);</span><br><span class="line">  sx *= rls;</span><br><span class="line">  sy *= rls;</span><br><span class="line">  sz *= rls;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Calculate cross product of s and f.</span></span><br><span class="line">  ux = sy * fz - sz * fy;</span><br><span class="line">  uy = sz * fx - sx * fz;</span><br><span class="line">  uz = sx * fy - sy * fx;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> Rt = <span class="keyword">new</span> <span class="built_in">Float32Array</span>(<span class="number">16</span>);</span><br><span class="line">  Rt[<span class="number">0</span>] = sx;</span><br><span class="line">  Rt[<span class="number">1</span>] = ux;</span><br><span class="line">  Rt[<span class="number">2</span>] = -fx;</span><br><span class="line">  Rt[<span class="number">3</span>] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  Rt[<span class="number">4</span>] = sy;</span><br><span class="line">  Rt[<span class="number">5</span>] = uy;</span><br><span class="line">  Rt[<span class="number">6</span>] = -fy;</span><br><span class="line">  Rt[<span class="number">7</span>] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  Rt[<span class="number">8</span>] = sz;</span><br><span class="line">  Rt[<span class="number">9</span>] = uz;</span><br><span class="line">  Rt[<span class="number">10</span>] = -fz;</span><br><span class="line">  Rt[<span class="number">11</span>] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  Rt[<span class="number">12</span>] = <span class="number">0</span>;</span><br><span class="line">  Rt[<span class="number">13</span>] = <span class="number">0</span>;</span><br><span class="line">  Rt[<span class="number">14</span>] = <span class="number">0</span>;</span><br><span class="line">  Rt[<span class="number">15</span>] = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">var</span> inverseT = multiply(translation(-eyeX, -eyeY, -eyeZ), createMat4())</span><br><span class="line">  <span class="keyword">return</span> multiply(Rt, inverseT)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="投影"><a href="#投影" class="headerlink" title="投影"></a>投影</h2><p>当从不同视图进行观察时，会发现部分被裁剪，这是由于 WebGL 只显示可视范围的区域</p>
<p>我们可以移动相机位置使得看到更多的空间</p>
<p>有两类可视空间：</p>
<ul>
<li>长方体可视空间，由正射投影产生</li>
<li>金字塔可视空间，由透视投影产生</li>
</ul>
<h3 id="正视投影"><a href="#正视投影" class="headerlink" title="正视投影"></a>正视投影</h3><p><img src="https://upload-images.jianshu.io/upload_images/9277731-9e33cdbd1dc4b60a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Ortho"></p>
<p>相当于对原 canvas 盒子进行长方体裁剪，再做缩放</p>
<p>用到的参数有：left, right, bottom, top, near, far</p>
<p><img src="https://upload-images.jianshu.io/upload_images/9277731-fda5271027fe6be2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="OrthoMatrix"></p>
<p>工具函数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 设置正射投影矩阵 </span></span><br><span class="line"><span class="comment"> * 以下是立方体裁截面的坐标</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Number&#125;</span> </span>left </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Number&#125;</span> </span>right </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Number&#125;</span> </span>bottom </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Number&#125;</span> </span>top </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Number&#125;</span> </span>near </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Number&#125;</span> </span>far </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setOrtho</span> (<span class="params">left, right, bottom, top, near, far</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> rw, rh, rd;</span><br><span class="line"></span><br><span class="line">  rw = <span class="number">1</span> / (right - left);</span><br><span class="line">  rh = <span class="number">1</span> / (top - bottom);</span><br><span class="line">  rd = <span class="number">1</span> / (far - near);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> out = <span class="keyword">new</span> <span class="built_in">Float32Array</span>(<span class="number">16</span>);</span><br><span class="line"></span><br><span class="line">  out[<span class="number">0</span>] = <span class="number">2</span> * rw;</span><br><span class="line">  out[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">  out[<span class="number">2</span>] = <span class="number">0</span>;</span><br><span class="line">  out[<span class="number">3</span>] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  out[<span class="number">4</span>] = <span class="number">0</span>;</span><br><span class="line">  out[<span class="number">5</span>] = <span class="number">2</span> * rh;</span><br><span class="line">  out[<span class="number">6</span>] = <span class="number">0</span>;</span><br><span class="line">  out[<span class="number">7</span>] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  out[<span class="number">8</span>] = <span class="number">0</span>;</span><br><span class="line">  out[<span class="number">9</span>] = <span class="number">0</span>;</span><br><span class="line">  out[<span class="number">10</span>] = <span class="number">-2</span> * rd;</span><br><span class="line">  out[<span class="number">11</span>] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  out[<span class="number">12</span>] = -(right + left) * rw;</span><br><span class="line">  out[<span class="number">13</span>] = -(top + bottom) * rh;</span><br><span class="line">  out[<span class="number">14</span>] = -(far + near) * rd;</span><br><span class="line">  out[<span class="number">15</span>] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> out;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="透视投影-Perspective"><a href="#透视投影-Perspective" class="headerlink" title="透视投影(Perspective)"></a>透视投影(Perspective)</h3><p>效果就是让远处的物体看起来更小，使场景更有深度感，接近真实世界</p>
<p><img src="https://upload-images.jianshu.io/upload_images/9277731-77e59e5324d3f74f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Perspective"></p>
<p>相等于对所有裁剪面进行缩放+平移</p>
<p>用到的参数有： </p>
<ul>
<li>fov 垂直视角</li>
<li>aspect 近裁剪面的宽高比</li>
<li>near,far 近裁剪面与远裁剪面的位置</li>
</ul>
<p>对应的矩阵为</p>
<p><img src="https://upload-images.jianshu.io/upload_images/9277731-b4129ca838cbf69e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="PerspectiveMatrix"></p>
<p>工具函数如下</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 设置透视投影矩阵 </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;*&#125;</span> </span>fovy 垂直视角</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;*&#125;</span> </span>aspect 近裁剪面的宽高比</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;*&#125;</span> </span>near 近裁剪面位置</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;*&#125;</span> </span>far 远裁剪面</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setPerspective</span> (<span class="params">fovy, aspect, near, far</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> rd, s, ct;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (near === far || aspect === <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="string">'null frustum'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (near &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="string">'near &lt;= 0'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (far &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="string">'far &lt;= 0'</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  fovy = <span class="built_in">Math</span>.PI * fovy / <span class="number">180</span> / <span class="number">2</span>;</span><br><span class="line">  s = <span class="built_in">Math</span>.sin(fovy);</span><br><span class="line">  <span class="keyword">if</span> (s === <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="string">'null frustum'</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  rd = <span class="number">1</span> / (far - near);</span><br><span class="line">  ct = <span class="built_in">Math</span>.cos(fovy) / s;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> out = <span class="keyword">new</span> <span class="built_in">Float32Array</span>(<span class="number">16</span>);</span><br><span class="line"></span><br><span class="line">  out[<span class="number">0</span>]  = ct / aspect;</span><br><span class="line">  out[<span class="number">1</span>]  = <span class="number">0</span>;</span><br><span class="line">  out[<span class="number">2</span>]  = <span class="number">0</span>;</span><br><span class="line">  out[<span class="number">3</span>]  = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  out[<span class="number">4</span>]  = <span class="number">0</span>;</span><br><span class="line">  out[<span class="number">5</span>]  = ct;</span><br><span class="line">  out[<span class="number">6</span>]  = <span class="number">0</span>;</span><br><span class="line">  out[<span class="number">7</span>]  = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  out[<span class="number">8</span>]  = <span class="number">0</span>;</span><br><span class="line">  out[<span class="number">9</span>]  = <span class="number">0</span>;</span><br><span class="line">  out[<span class="number">10</span>] = -(far + near) * rd;</span><br><span class="line">  out[<span class="number">11</span>] = <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">  out[<span class="number">12</span>] = <span class="number">0</span>;</span><br><span class="line">  out[<span class="number">13</span>] = <span class="number">0</span>;</span><br><span class="line">  out[<span class="number">14</span>] = <span class="number">-2</span> * near * far * rd;</span><br><span class="line">  out[<span class="number">15</span>] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> out;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>


<h2 id="复合变换"><a href="#复合变换" class="headerlink" title="复合变换"></a>复合变换</h2><p>实现先平移再旋转的变换</p>
<p>矩阵乘法满足结合律，且自右向左计算</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;“平移后旋转”坐标&gt; &#x3D; &lt;旋转矩阵&gt; x (&lt;平移矩阵&gt; x &lt;原始坐标&gt;)</span><br><span class="line">&#x3D; (&lt;旋转矩阵&gt; x &lt;平移矩阵&gt;) x &lt;原始坐标&gt;</span><br><span class="line">&#x3D; (“平移后旋转”矩阵) x &lt;原始坐标&gt;</span><br></pre></td></tr></table></figure>

<p>上面 <code>“平移后旋转”矩阵</code> 就是一个复合变换矩阵，就叫模型矩阵</p>
<p>通常我们还会运用视图矩阵和投影矩阵，即</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">gl_Position = u_ProjectionMatrix  * u_ViewMatrix * u_ModelMatrix * a_Position;</span><br></pre></td></tr></table></figure>


<h2 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h2><p>WebGL 没有提供自带的矩阵运算方法，所以日常开发中应该封装一套自己的矩阵运算库，或者使用开源项目</p>
<p>实现动画时利用 rAF API ,并通过渲染时间差判断动画所进行的程度</p>
<p>WebGL 按照顶点在缓冲区的位置来进行绘制的，不会考虑远近，导致远处的图像会绘制在近处图像上面。此时可以开启隐藏面消除功能。这样片段着色器在绘制完后会进行深度检测并将结果缓存在深度缓冲区</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 开启隐藏面消除功能</span></span><br><span class="line">gl.enable(gl.DEPTH_TEST);</span><br><span class="line"><span class="comment">// 在绘制前清除颜色缓冲区以及深度缓冲区</span></span><br><span class="line">gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);</span><br></pre></td></tr></table></figure>

<p>当两个图元深度接近时，会产生深度冲突，此时可以采用多边形偏移机制解决</p>
<blockquote>
<p>原理请参考其他文献</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 启用多边形偏移</span></span><br><span class="line">gl.enable(gl.POLYGON_OFFSET_FILL);</span><br><span class="line"><span class="comment">// 绘制三角形1</span></span><br><span class="line">gl.drawArrays(gl.TRIANGLES, <span class="number">0</span>, n/<span class="number">2</span>); </span><br><span class="line"><span class="comment">// 设置多边形偏移</span></span><br><span class="line">gl.polygonOffset(<span class="number">1.0</span>, <span class="number">1.0</span>); </span><br><span class="line"><span class="comment">// 绘制三角形2</span></span><br><span class="line">gl.drawArrays(gl.TRIANGLES, n/<span class="number">2</span>, n/<span class="number">2</span>);</span><br></pre></td></tr></table></figure>

<h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><p>采用最开始定义的顶点数据，并进行以下矩阵变换</p>
<p>设置透视投影</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">setPerspective(<span class="number">30</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">100</span>)</span><br></pre></td></tr></table></figure>
<p>设置视角</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">lookAt(<span class="number">3</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>);</span><br></pre></td></tr></table></figure>

<p>最终效果</p>
<p><img src="https://upload-images.jianshu.io/upload_images/9277731-7d3ac250d5321f85.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="cube-demo"></p>
<h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><ol>
<li><a href="https://blog.csdn.net/weixin_37683659/article/details/79830278" target="_blank" rel="noopener">视图矩阵推导过程</a></li>
<li>《WebGL编程指南》</li>
</ol>
]]></content>
      <categories>
        <category>大前端</category>
      </categories>
      <tags>
        <tag>WebGL</tag>
      </tags>
  </entry>
  <entry>
    <title>面试官问：什么是 canvas 污染</title>
    <url>/2020/03/08/2020/%E9%9D%A2%E8%AF%95%E5%AE%98%E9%97%AE%EF%BC%9A%E4%BB%80%E4%B9%88%E6%98%AF%20canvas%20%E6%B1%A1%E6%9F%93/</url>
    <content><![CDATA[<p>这是最近面试 bd 时面试官问的一个问题，当时没有回答上来。</p>
<p>本篇就以问答的形式来讲解这题。当然以下内容纯属虚构，只是为了说明大厂面试是一环扣一环的。或许当你成为面试官时也可以采用这种形式。</p>
<a id="more"></a>

<hr>
<p>“我看你简历上说使用过 canvas ，能说说什么是 canvas 污染么？”<br>“将一张跨域的图片绘制到 canvas 上，这个 canvas 就是被污染的，此时无法读取该 canvas 的数据。”</p>
<p>“那你能说说浏览器为什么要做这个限制？”<br>“为了用户的安全。” 由于之前没有思考过，又不想承认不会，我随口一说。</p>
<p>“能具体讲讲么？” 面试官似乎读出了我言语中的犹豫。<br>“嗯。。。让我想想。” 先稳住，假装不慌，其实内心慌得一p。<br>“这个是同源策略的限制。应该是为了避免第三方网站读取其他网站的图片数据，避免用户隐私泄露。比如已知某个隐私图片的 url，进入第三方网站后，可以请求到该图片，如果不做数据读取限制的话，该数据将被传送到网站后台进而导致信息泄露。”</p>
<p>“很好。那如果是我们自己的网站要用，有什么解决方案？”<br>“嗯，这个要看能否控制图片的响应了。如果可以控制的话，利用 cors 跨域，并在图片请求发起时增加 <code>crossOrigin = &quot;Anonymous&quot;</code> 设置；否则只能自己的网站做个代理，让网站与图片同源。”</p>
<p>“你刚刚有提到同源，那你说说为什么浏览器会有同源策略？”<br>“为了限制其他源文档或脚本与当前源的资源进行交互。主要有两个地方：一个是 iframe 节点访问控制，如果没有同源策略限制的话，iframe 可以随意访问其他非同源 iframe 的 dom 节点，如钓鱼网站嵌套了一个银行网站的 iframe ，从外部就可以读取到内部密码输入框的值。另一个是 http 响应控制，如果没有同源策略限制的话，在第三方网站直接对其他网站发起请求，可以读取到响应，这样就可以获取用户的个人信息，造成隐私泄露。”</p>
<p>“很好，你刚刚说到响应控制，那请求是成功的么？”<br>“利用 img/form 等支持跨域的标签，请求会自动带上 cookie，没有额外处理的话请求是成功的，这也就是所谓的 csrf 攻击。而如果是 ajax ，不会带上 cookie ，需要鉴权的请求也就直接失败。注意同源策略只是对终端进行信息防护，只拦截响应，不拦截请求。”</p>
<p>“为什么浏览器不直接拦截非同源请求？”<br>“浏览器得通过响应才知道要不要拦截，如果直接拦截请求了，想用 cors 做跨域请求就做不了了。”</p>
<p>…中间又穿插了 csrf 等各种前端安全的问题。</p>
<p>“回到 canvas，最后再问一个问题，说说 canvas 性能分析和常见的渲染优化策略？”<br>“不太了解。。”<br>“好吧，我们下一篇文章见。”</p>
<hr>
<p>如有错误，欢迎指正</p>
]]></content>
      <categories>
        <category>大前端</category>
      </categories>
      <tags>
        <tag>Canvas</tag>
      </tags>
  </entry>
  <entry>
    <title>WebGL 初探</title>
    <url>/2020/03/05/WebGL/WebGL%20%E5%88%9D%E6%8E%A2/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本篇将介绍常用的概念及工作流程，达到快速入门的效果</p>
<a id="more"></a>

<h2 id="程序运行流程"><a href="#程序运行流程" class="headerlink" title="程序运行流程"></a>程序运行流程</h2><p>先简单描述一下编写 WebGL 程序的流程</p>
<p>初始化阶段</p>
<ul>
<li>创建所有着色器和程序并寻找参数位置</li>
<li>创建缓冲并上传顶点数据</li>
<li>创建纹理并上传纹理数据</li>
</ul>
<p>渲染阶段</p>
<ul>
<li>清空并设置视图和其他全局状态（开启深度检测，剔除等等）</li>
<li>对于想要绘制的每个物体<ul>
<li>调用 gl.useProgram 使用需要的程序</li>
<li>设置物体的属性变量<ul>
<li>为每个属性调用 gl.bindBuffer, gl.vertexAttribPointer, gl.enableVertexAttribArray</li>
</ul>
</li>
<li>设置物体的全局变量<ul>
<li>为每个全局变量调用 gl.uniformXXX</li>
<li>调用 gl.activeTexture 和 gl.bindTexture 设置纹理到纹理单元</li>
</ul>
</li>
<li>调用 gl.drawArrays 或 gl.drawElements</li>
</ul>
</li>
</ul>
<ol>
<li>编写顶点着色器，该着色器用于获取顶点位置，进而生成点， 线和三角形在内的一些图元</li>
<li>编写片段着色器，该着色器将对图元进行光栅化处理，得到绘制图元中每个像素的颜色值</li>
<li>对两个着色器进行编译得到着色器对象</li>
<li>将两个着色器对象链接到同一着色程序</li>
<li>获取属性值位置</li>
<li>绑定缓冲并存入数据。以上为初始化阶段，之后进行循环渲染阶段。</li>
<li>设置 WebGL 裁剪空间与 Canvas 画布尺寸间的映射</li>
<li>为 WebGL 指定着色程序</li>
<li>从之前准备的缓冲中获取数据，并赋值给着色器中的属性（需要指定属性值位置以及读取数据方式）</li>
<li>指定绘制的图元类型，运行多次顶点着色器，得到图元，并利用片段着色器进行图元绘制</li>
</ol>
<h2 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h2><p>运行次数表示顶点着色器的执行次数，每次生成的顶点存储在 gl_Position 中</p>
<p><img src="https://webglfundamentals.org/webgl/lessons/resources/vertex-shader-anim.gif" alt=""></p>
<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><h3 id="GLSL"><a href="#GLSL" class="headerlink" title="GLSL"></a>GLSL</h3><p>着色器语言，内建的数据类型有：</p>
<ul>
<li><p>vec2, vec3和 vec4分别代表两个值，三个值和四个值，可以理解为列矩阵</p>
</li>
<li><p>mat2, mat3 和 mat4 分别代表 2x2, 3x3 和 4x4 矩阵</p>
</li>
</ul>
<p>还可以使用数组和结构体</p>
<p>分量选择器</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">v.x 和 v.s 以及 v.r ， v[0] 表达的是同一个分量。</span><br><span class="line">v.y 和 v.t 以及 v.g ， v[1] 表达的是同一个分量。</span><br><span class="line">v.z 和 v.p 以及 v.b ， v[2] 表达的是同一个分量。</span><br><span class="line">v.w 和 v.q 以及 v.a ， v[3] 表达的是同一个分量。</span><br></pre></td></tr></table></figure>

<p><code>v.yyyy</code> 等价于 <code>vec4(v.y, v.y, v.y, v.y)</code></p>
<p>多个属性，如何从 buffer 读取数据？</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> vertexShaderSource = <span class="string">`</span></span><br><span class="line"><span class="string">  attribute vec2 a_position;</span></span><br><span class="line"><span class="string">  attribute vec2 a_offset;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  void main() &#123;</span></span><br><span class="line"><span class="string">    gl_Position = vec4(a_position + a_offset, 0, 1);</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">`</span></span><br></pre></td></tr></table></figure>

<p>可以分次设置 buffer</p>
<blockquote>
<p>每次执行 bufferData 上一次的 buffer 将被清空</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> positionAttributeLocation = gl.getAttribLocation(program, <span class="string">"a_position"</span>);</span><br><span class="line"><span class="keyword">var</span> offsetAttributeLocation = gl.getAttribLocation(program, <span class="string">"a_offset"</span>);</span><br><span class="line"></span><br><span class="line">gl.enableVertexAttribArray(positionAttributeLocation);</span><br><span class="line"><span class="keyword">var</span> positionBuffer = gl.createBuffer();</span><br><span class="line">gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);</span><br><span class="line"><span class="keyword">var</span> positions = [</span><br><span class="line">  <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">  <span class="number">0</span>, <span class="number">0.5</span>,</span><br><span class="line">  <span class="number">0.7</span>, <span class="number">0</span>,</span><br><span class="line">];</span><br><span class="line">gl.bufferData(gl.ARRAY_BUFFER, <span class="keyword">new</span> <span class="built_in">Float32Array</span>(positions), gl.STATIC_DRAW);</span><br><span class="line"><span class="keyword">var</span> size = <span class="number">2</span>;          <span class="comment">// 每次迭代运行提取两个单位数据</span></span><br><span class="line"><span class="keyword">var</span> type = gl.FLOAT;   <span class="comment">// 每个单位的数据类型是32位浮点型</span></span><br><span class="line"><span class="keyword">var</span> normalize = <span class="literal">false</span>; <span class="comment">// 不需要归一化数据</span></span><br><span class="line"><span class="keyword">var</span> stride = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> offset = <span class="number">0</span>;</span><br><span class="line">gl.vertexAttribPointer(positionAttributeLocation, size, type, normalize, stride, offset);</span><br><span class="line"></span><br><span class="line">gl.enableVertexAttribArray(offsetAttributeLocation);</span><br><span class="line"><span class="keyword">var</span> offsetBuffer = gl.createBuffer();</span><br><span class="line">gl.bindBuffer(gl.ARRAY_BUFFER, offsetBuffer);</span><br><span class="line"><span class="keyword">var</span> offsets = [</span><br><span class="line">  <span class="number">0.1</span>, <span class="number">0.1</span>,</span><br><span class="line">  <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">  <span class="number">0</span>, <span class="number">0.1</span>,</span><br><span class="line">];</span><br><span class="line">gl.bufferData(gl.ARRAY_BUFFER, <span class="keyword">new</span> <span class="built_in">Float32Array</span>(offsets), gl.STATIC_DRAW);</span><br><span class="line">gl.vertexAttribPointer(offsetAttributeLocation, size, type, normalize, stride, offset);</span><br></pre></td></tr></table></figure>

<p>或者一次设置 buffer 每次指定 buffer 偏移量 offset</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> buffer = gl.createBuffer();</span><br><span class="line">gl.bindBuffer(gl.ARRAY_BUFFER, buffer);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> buffer = [</span><br><span class="line">  <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">  <span class="number">0</span>, <span class="number">0.5</span>,</span><br><span class="line">  <span class="number">0.7</span>, <span class="number">0</span>,</span><br><span class="line">  <span class="number">0.1</span>, <span class="number">0.1</span>,</span><br><span class="line">  <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">  <span class="number">0</span>, <span class="number">0.1</span>,</span><br><span class="line">];</span><br><span class="line">gl.bufferData(gl.ARRAY_BUFFER, <span class="keyword">new</span> <span class="built_in">Float32Array</span>(buffer), gl.STATIC_DRAW);</span><br><span class="line"></span><br><span class="line">gl.enableVertexAttribArray(positionAttributeLocation);</span><br><span class="line"><span class="keyword">var</span> size = <span class="number">2</span>;          <span class="comment">// 每次迭代运行提取两个单位数据</span></span><br><span class="line"><span class="keyword">var</span> type = gl.FLOAT;   <span class="comment">// 每个单位的数据类型是32位浮点型</span></span><br><span class="line"><span class="keyword">var</span> normalize = <span class="literal">false</span>; <span class="comment">// 不需要归一化数据</span></span><br><span class="line"><span class="keyword">var</span> stride = <span class="number">0</span>;        <span class="comment">// 0 = 移动单位数量 * 每个单位占用内存（sizeof(type)）</span></span><br><span class="line"><span class="keyword">var</span> offset = <span class="number">0</span>;        <span class="comment">// 从缓冲起始位置开始读取</span></span><br><span class="line">gl.vertexAttribPointer(positionAttributeLocation, size, type, normalize, stride, offset);</span><br><span class="line">gl.enableVertexAttribArray(offsetAttributeLocation);</span><br><span class="line"><span class="keyword">var</span> size = <span class="number">2</span>;          <span class="comment">// 每次迭代运行提取两个单位数据</span></span><br><span class="line"><span class="keyword">var</span> type = gl.FLOAT;   <span class="comment">// 每个单位的数据类型是32位浮点型</span></span><br><span class="line"><span class="keyword">var</span> normalize = <span class="literal">false</span>; <span class="comment">// 不需要归一化数据</span></span><br><span class="line"><span class="keyword">var</span> stride = <span class="number">0</span>;        <span class="comment">// 0 = 移动单位数量 * 每个单位占用内存（sizeof(type)）</span></span><br><span class="line"><span class="keyword">var</span> offset = <span class="number">3</span>*<span class="number">2</span>*<span class="number">4</span>;        <span class="comment">// 从缓冲第三组开始读取</span></span><br><span class="line">gl.vertexAttribPointer(offsetAttributeLocation, size, type, normalize, stride, offset);</span><br></pre></td></tr></table></figure>

<p>注意，如果是两个 vec4 变量相加，如 <code>[1,1,0,1]+[0,1,0,1]=[1,2,0,2]</code> 等价于 <code>[0.5,1,0,1]</code></p>
<p>如果想要得到 <code>[1,2,0,1]</code>，可以手动设置 vec4 变量的 w 为 1 ：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">vec4 tmp = a_position + a_offset;</span><br><span class="line">tmp.w = <span class="number">1.0</span>;</span><br><span class="line">gl_Position = tmp;</span><br></pre></td></tr></table></figure>

<h3 id="数据"><a href="#数据" class="headerlink" title="数据"></a>数据</h3><p>属性(attribute)和缓冲(buffer)</p>
<blockquote>
<p>着色器运行时属性将从缓冲中按指定规则读取值</p>
</blockquote>
<p>全局变量 uniform</p>
<blockquote>
<p>运行过程中全局有效</p>
</blockquote>
<p>纹理 texture</p>
<blockquote>
<p>借助全局变量，通过 texture2D 方法提取纹理信息并赋值给 gl_FragColor。需要指定纹理所绑定的图元</p>
</blockquote>
<p>可变量 varying</p>
<blockquote>
<p>一种顶点着色器给片断着色器传值的方式。<br>依照渲染的图元是点， 线还是三角形，顶点着色器中设置的可变量会在片断着色器运行中获取不同的插值。<br>使用方法为两个着色器定义一个同名变量。</p>
</blockquote>
<h3 id="着色器"><a href="#着色器" class="headerlink" title="着色器"></a>着色器</h3><h4 id="顶点着色器"><a href="#顶点着色器" class="headerlink" title="顶点着色器"></a>顶点着色器</h4><p>每个顶点调用一次顶点着色器，每次调用都需要设置一个特殊的全局变量gl_Position， 该变量的值就是裁减空间坐标值。</p>
<p>所需数据获取方式：</p>
<ul>
<li>Attributes 属性</li>
<li>Uniforms 全局变量</li>
<li>Textures 纹理</li>
</ul>
<h4 id="片段着色器"><a href="#片段着色器" class="headerlink" title="片段着色器"></a>片段着色器</h4><p><strong>每个像素</strong>都将调用一次片断着色器，每次调用需要从你设置的特殊全局变量gl_FragColor中获取颜色信息。</p>
<p>根据片元类型，可变量会在片断着色器运行中获取不同的插值。</p>
<p>所以如果设置颜色为可变量，运行过程中中间像素的颜色会根据位置比例获取插值</p>
<p>所需数据获取方式：</p>
<ul>
<li>Uniforms 全局变量</li>
<li>Textures 纹理</li>
<li>Varyings 可变量 </li>
</ul>
<h2 id="hello-world-demo"><a href="#hello-world-demo" class="headerlink" title="hello world demo"></a>hello world demo</h2><p>根据上文的<strong>程序运行流程</strong>，实现一个简单的 demo</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">HTML</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    canvas &#123;</span><br><span class="line">      width: 100vw;</span><br><span class="line">      height: 100vh;</span><br><span class="line">      display: block;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">"canvas"</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">createShader</span><span class="params">(gl, type, source)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">var</span> shader = gl.createShader(type); <span class="comment">// 创建着色器对象</span></span></span><br><span class="line"><span class="actionscript">      gl.shaderSource(shader, source); <span class="comment">// 提供数据源</span></span></span><br><span class="line"><span class="actionscript">      gl.compileShader(shader); <span class="comment">// 编译 -&gt; 生成着色器</span></span></span><br><span class="line"><span class="actionscript">      <span class="keyword">var</span> success = gl.getShaderParameter(shader, gl.COMPILE_STATUS);</span></span><br><span class="line">      if (success) &#123;</span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> shader;</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(gl.getShaderInfoLog(shader));</span></span><br><span class="line">      gl.deleteShader(shader);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">createProgram</span><span class="params">(gl, vertexShader, fragmentShader)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">var</span> program = gl.createProgram();</span></span><br><span class="line">      gl.attachShader(program, vertexShader);</span><br><span class="line">      gl.attachShader(program, fragmentShader);</span><br><span class="line">      gl.linkProgram(program);</span><br><span class="line"><span class="actionscript">      <span class="keyword">var</span> success = gl.getProgramParameter(program, gl.LINK_STATUS);</span></span><br><span class="line">      if (success) &#123;</span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> program;</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(gl.getProgramInfoLog(program));</span></span><br><span class="line">      gl.deleteProgram(program);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">      <span class="comment">// Get A WebGL context</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">"canvas"</span>);</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">var</span> gl = canvas.getContext(<span class="string">"webgl"</span>);</span></span><br><span class="line">      if (!gl) &#123;</span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span>;</span></span><br><span class="line">      &#125;</span><br><span class="line"><span class="actionscript">      <span class="comment">// 步骤1~2，编写顶点着色器和片段着色器</span></span></span><br><span class="line"><span class="actionscript">      <span class="keyword">var</span> vertexShaderSource = `</span></span><br><span class="line"><span class="actionscript">      <span class="comment">// attribute 将从 buffer 中获取数据</span></span></span><br><span class="line">      attribute vec4 a_position;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">      <span class="comment">// 所有着色器都有一个 main 方法</span></span></span><br><span class="line"><span class="actionscript">      <span class="keyword">void</span> main() &#123;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// gl_Position 是一个顶点着色器主要设置的变量</span></span></span><br><span class="line">        gl_Position = a_position;</span><br><span class="line">      &#125;</span><br><span class="line">      `</span><br><span class="line"></span><br><span class="line"><span class="actionscript">      <span class="keyword">var</span> fragmentShaderSource = `</span></span><br><span class="line"><span class="actionscript">      <span class="comment">// 片断着色器没有默认精度，所以我们需要设置一个精度</span></span></span><br><span class="line"><span class="actionscript">      <span class="comment">// mediump是一个不错的默认值，代表“medium precision”（中等精度）</span></span></span><br><span class="line">      precision mediump float;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">      <span class="keyword">void</span> main() &#123;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// gl_FragColor是一个片断着色器主要设置的变量</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 本例中我们直接指定颜色属性，也可以通过其他方式赋值</span></span></span><br><span class="line">        gl_FragColor = vec4(1, 0, 0.5, 1);</span><br><span class="line">      &#125;</span><br><span class="line">      `</span><br><span class="line"></span><br><span class="line"><span class="actionscript">      <span class="comment">// 步骤3：对两个着色器进行编译得到着色器对象</span></span></span><br><span class="line"><span class="actionscript">      <span class="keyword">var</span> vertexShader = createShader(gl, gl.VERTEX_SHADER, vertexShaderSource);</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">var</span> fragmentShader = createShader(gl, gl.FRAGMENT_SHADER, fragmentShaderSource);</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">      <span class="comment">// 步骤4：将两个着色器对象链接到同一着色程序</span></span></span><br><span class="line"><span class="actionscript">      <span class="keyword">var</span> program = createProgram(gl, vertexShader, fragmentShader);</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">      <span class="comment">// 步骤5：获取属性值位置</span></span></span><br><span class="line"><span class="actionscript">      <span class="keyword">var</span> positionAttributeLocation = gl.getAttribLocation(program, <span class="string">"a_position"</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">      <span class="comment">// 步骤6：绑定缓冲并存入数据</span></span></span><br><span class="line"><span class="actionscript">      <span class="keyword">var</span> positionBuffer = gl.createBuffer();</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">      <span class="comment">// 绑定点为 ARRAY_BUFFER</span></span></span><br><span class="line">      gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);</span><br><span class="line"></span><br><span class="line"><span class="actionscript">      <span class="keyword">var</span> positions = [</span></span><br><span class="line">        0, 0,</span><br><span class="line">        0, 0.5,</span><br><span class="line">        0.7, 0,</span><br><span class="line">      ];</span><br><span class="line"><span class="javascript">      gl.bufferData(gl.ARRAY_BUFFER, <span class="keyword">new</span> <span class="built_in">Float32Array</span>(positions), gl.STATIC_DRAW);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="actionscript">      <span class="comment">// 进行渲染阶段的代码处理</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="actionscript">      <span class="comment">// 步骤7：设置 WebGL 裁剪空间与 Canvas 画布尺寸间的映射</span></span></span><br><span class="line">      gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);</span><br><span class="line"></span><br><span class="line"><span class="actionscript">      <span class="comment">// 清除画板</span></span></span><br><span class="line">      gl.clearColor(0, 0, 0, 0);</span><br><span class="line">      gl.clear(gl.COLOR_BUFFER_BIT);</span><br><span class="line"></span><br><span class="line"><span class="actionscript">      <span class="comment">// 步骤8：为 WebGL 指定着色程序</span></span></span><br><span class="line">      gl.useProgram(program);</span><br><span class="line"></span><br><span class="line"><span class="actionscript">      <span class="comment">// 启用顶点着色器属性</span></span></span><br><span class="line">      gl.enableVertexAttribArray(positionAttributeLocation);</span><br><span class="line"></span><br><span class="line"><span class="actionscript">      <span class="comment">// 步骤9：从之前准备的缓冲中获取数据，并赋值给着色器中的属性</span></span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">      <span class="comment">// 告诉属性怎么从positionBuffer中读取数据 (ARRAY_BUFFER)</span></span></span><br><span class="line"><span class="actionscript">      <span class="keyword">var</span> size = <span class="number">2</span>;          <span class="comment">// 每次迭代运行提取两个单位数据</span></span></span><br><span class="line"><span class="actionscript">      <span class="keyword">var</span> type = gl.FLOAT;   <span class="comment">// 每个单位的数据类型是32位浮点型</span></span></span><br><span class="line"><span class="actionscript">      <span class="keyword">var</span> normalize = <span class="literal">false</span>; <span class="comment">// 不需要归一化数据</span></span></span><br><span class="line"><span class="actionscript">      <span class="keyword">var</span> stride = <span class="number">0</span>;        <span class="comment">// 0 = 移动单位数量 * 每个单位占用内存（sizeof(type)）</span></span></span><br><span class="line"><span class="actionscript">      <span class="comment">// 每次迭代运行运动多少内存到下一个数据开始点</span></span></span><br><span class="line"><span class="actionscript">      <span class="keyword">var</span> offset = <span class="number">0</span>;        <span class="comment">// 从缓冲起始位置开始读取</span></span></span><br><span class="line">      gl.vertexAttribPointer(</span><br><span class="line">        positionAttributeLocation, size, type, normalize, stride, offset);</span><br><span class="line"></span><br><span class="line"><span class="actionscript">      <span class="comment">// 步骤10：指定绘制的图元类型，运行多次顶点着色器，得到图元，并利用片段着色器进行图元绘制</span></span></span><br><span class="line"><span class="actionscript">      <span class="keyword">var</span> primitiveType = gl.TRIANGLES;</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">var</span> offset = <span class="number">0</span>;</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">var</span> count = <span class="number">3</span>;</span></span><br><span class="line">      gl.drawArrays(primitiveType, offset, count);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    main();</span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>可以看到页面中渲染了一个三角形，并且边缘带有一些锯齿，这是为什么呢？</p>
<p>这些锯齿与顶点数据转为片段的方式有关，之后的文章会提到抗锯齿的方法。</p>
<h2 id="拓展阅读"><a href="#拓展阅读" class="headerlink" title="拓展阅读"></a>拓展阅读</h2><ol>
<li><a href="https://webglfundamentals.org/webgl/lessons/zh_cn/" target="_blank" rel="noopener">WebGL 理论基础</a></li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/WebGL_API/Tutorial" target="_blank" rel="noopener">WebGL 教程</a></li>
</ol>
]]></content>
      <categories>
        <category>大前端</category>
      </categories>
      <tags>
        <tag>WebGL</tag>
      </tags>
  </entry>
  <entry>
    <title>前端项目中常用的位操作技巧</title>
    <url>/2020/02/16/2020/%E5%89%8D%E7%AB%AF%E9%A1%B9%E7%9B%AE%E4%B8%AD%E5%B8%B8%E7%94%A8%E7%9A%84%E4%BD%8D%E6%93%8D%E4%BD%9C%E6%8A%80%E5%B7%A7/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>大部分例子引用自 <a href="https://graphics.stanford.edu/~seander/bithacks.html" target="_blank" rel="noopener">Bit Twiddling Hacks</a></p>
<p>一些位操作优化的技巧在 js 中不一定能得到体现，本文仅展示一些自己在前端项目中用过且较常用的例子</p>
<p>某些例子比如交换，计算奇偶，计算最值的，使用位操作提升不大，但可读性变差了，本文不做记录</p>
<a id="more"></a>

<h2 id="1-检测两个整数是否异号"><a href="#1-检测两个整数是否异号" class="headerlink" title="1. 检测两个整数是否异号"></a>1. 检测两个整数是否异号</h2><p>本处例子中，0 与正数相当</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> isOppositeSign = <span class="function">(<span class="params">x, y</span>) =&gt;</span> (x ^ y) &lt; <span class="number">0</span></span><br><span class="line">isOppositeSign(<span class="number">1</span>, <span class="number">-2</span>)  <span class="comment">// true</span></span><br><span class="line">isOppositeSign(<span class="number">1</span>, <span class="number">2</span>)   <span class="comment">// false</span></span><br><span class="line">isOppositeSign(<span class="number">-0</span>, <span class="number">-1</span>) <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<h2 id="2-判断一个整数是否为-2-的幂"><a href="#2-判断一个整数是否为-2-的幂" class="headerlink" title="2. 判断一个整数是否为 2 的幂"></a>2. 判断一个整数是否为 2 的幂</h2><p>注意 0 不是 2 的幂，加上 <code>!!num</code> 判断</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> isPowerOf2 = <span class="function">(<span class="params">num</span>) =&gt;</span> !!num &amp;&amp; (num &amp; (num - <span class="number">1</span>)) === <span class="number">0</span></span><br><span class="line">isPowerOf2 (<span class="number">0</span>) <span class="comment">// false</span></span><br><span class="line">isPowerOf2 (<span class="number">1</span>) <span class="comment">// true</span></span><br><span class="line">isPowerOf2 (<span class="number">3</span>) <span class="comment">// false</span></span><br></pre></td></tr></table></figure>

<h2 id="3-计算无符号整数的比特位中有多少个-1"><a href="#3-计算无符号整数的比特位中有多少个-1" class="headerlink" title="3. 计算无符号整数的比特位中有多少个 1"></a>3. 计算无符号整数的比特位中有多少个 1</h2><p>常用于统计一组开关中状态为开的个数</p>
<h3 id="原始方法"><a href="#原始方法" class="headerlink" title="原始方法"></a>原始方法</h3><p>对 num 不断右移，每次判断最后一位是否为1，循环次数为 num 的比特位个数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> countBits = <span class="function">(<span class="params">num</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> res = <span class="number">0</span></span><br><span class="line">  <span class="keyword">for</span> (; num; num &gt;&gt;= <span class="number">1</span>) &#123;</span><br><span class="line">    res += num &amp; <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br><span class="line">countBits (<span class="number">4</span>) <span class="comment">// 1</span></span><br></pre></td></tr></table></figure>

<h3 id="Brian-Kernighan’s-way"><a href="#Brian-Kernighan’s-way" class="headerlink" title="Brian Kernighan’s way"></a>Brian Kernighan’s way</h3><p>每次清除一个最低的 1 的比特位，循环次数与 num 的比特位有多少个 1 相关</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> countBits = <span class="function">(<span class="params">num</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> c = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (; num; c++) &#123;</span><br><span class="line">    num &amp;= num - <span class="number">1</span>; <span class="comment">// 清除最低比特位</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> c</span><br><span class="line">&#125;</span><br><span class="line">countBits (<span class="number">5</span>) <span class="comment">// 2</span></span><br></pre></td></tr></table></figure>

<h2 id="4-获取最高位-1-所在位置"><a href="#4-获取最高位-1-所在位置" class="headerlink" title="4. 获取最高位 1 所在位置"></a>4. 获取最高位 1 所在位置</h2><p>得到一个索引值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> getHighest1BitIndex = <span class="function">(<span class="params">num</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> c = <span class="number">-1</span></span><br><span class="line">  <span class="keyword">while</span> (num) &#123;</span><br><span class="line">    num &gt;&gt;= <span class="number">1</span></span><br><span class="line">    c++</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> c</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>同时可以用来计算一个整数以 2 为底的对数，其他拓展应用：</p>
<h3 id="获取某个范围内最大的-2-的幂"><a href="#获取某个范围内最大的-2-的幂" class="headerlink" title="获取某个范围内最大的 2 的幂"></a>获取某个范围内最大的 2 的幂</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> hignBit = <span class="function">(<span class="params">num</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> index = getHighest1BitIndex(num)</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span> &lt;&lt; index</span><br><span class="line">&#125;</span><br><span class="line">hignBit(<span class="number">14</span>) <span class="comment">// 8</span></span><br><span class="line">hignBit(<span class="number">8</span>) <span class="comment">// 8</span></span><br></pre></td></tr></table></figure>

<p>另一种解法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> hignBit = <span class="function">(<span class="params">num</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> res;</span><br><span class="line">  <span class="keyword">while</span> (num) &#123;</span><br><span class="line">    res = num</span><br><span class="line">    num = num &amp; (num - <span class="number">1</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br><span class="line">hignBit(<span class="number">14</span>) <span class="comment">// 8</span></span><br><span class="line">hignBit(<span class="number">8</span>) <span class="comment">// 8</span></span><br></pre></td></tr></table></figure>

<h2 id="5-获取最低位-1-所在位置"><a href="#5-获取最低位-1-所在位置" class="headerlink" title="5. 获取最低位 1 所在位置"></a>5. 获取最低位 1 所在位置</h2><p>利用 <code>n &amp; -n</code> （又称 lowbit 函数）得到最低位 1 形成的数，然后不断右移得到索引值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> lowBit = <span class="function">(<span class="params">num</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> num &amp; -num</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> getLowest1BitIndex = <span class="function">(<span class="params">num</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> n = lowBit(num)</span><br><span class="line">  <span class="comment">// return getHighest1BitIndex(n)</span></span><br><span class="line">  <span class="keyword">let</span> c = <span class="number">-1</span></span><br><span class="line">  <span class="keyword">while</span> (n) &#123;</span><br><span class="line">    n &gt;&gt;= <span class="number">1</span></span><br><span class="line">    c++</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> c</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>树状数组中经常用到 lowbit</p>
<h2 id="6-获取某个位置的比特位"><a href="#6-获取某个位置的比特位" class="headerlink" title="6. 获取某个位置的比特位"></a>6. 获取某个位置的比特位</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> getBit = <span class="function">(<span class="params">num, i=<span class="number">0</span></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// i 从 0 开始</span></span><br><span class="line">  <span class="keyword">return</span> (num &gt;&gt; i) &amp; <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line">getBit(<span class="number">5</span>,<span class="number">1</span>)</span><br></pre></td></tr></table></figure>

<h2 id="7-判断两个位置的比特位是否一致"><a href="#7-判断两个位置的比特位是否一致" class="headerlink" title="7. 判断两个位置的比特位是否一致"></a>7. 判断两个位置的比特位是否一致</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> getBit = <span class="function">(<span class="params">num, i = <span class="number">0</span></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> (num &gt;&gt; i) &amp; <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> judgeSameBit = <span class="function">(<span class="params">num, i, j</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// const lo = getBit(num, i)</span></span><br><span class="line">  <span class="comment">// const hi = getBit(num, j)</span></span><br><span class="line">  <span class="comment">// return !(lo ^ hi)</span></span><br><span class="line">  <span class="keyword">return</span> !(((num &gt;&gt; i) ^ (num &gt;&gt; j)) &amp; <span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line">judgeSameBit(<span class="number">6</span>, <span class="number">0</span>, <span class="number">2</span>) <span class="comment">// false</span></span><br><span class="line">judgeSameBit(<span class="number">6</span>, <span class="number">1</span>, <span class="number">2</span>) <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<h2 id="8-交换比特位"><a href="#8-交换比特位" class="headerlink" title="8. 交换比特位"></a>8. 交换比特位</h2><h3 id="交换单个比特位"><a href="#交换单个比特位" class="headerlink" title="交换单个比特位"></a>交换单个比特位</h3><p>原始序列为 S, 将第 i 个(从右往左数，起始索引为0) 与 第 j 个比特位进行交换</p>
<p>先判断两个位置比特位是否一致，得到一个异或的结果 x</p>
<p>将所有位置置 0，i、j 置为 x : <code>(x &lt;&lt; i) | (x &lt;&lt; j)</code> ，得到结果 res</p>
<p>最后将原始序列与 res 进行异或，即可实现交换比特位的效果</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> swapBit = <span class="function">(<span class="params">num, i, j</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> x = ((num &gt;&gt; i) ^ (num &gt;&gt; j)) &amp; <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">return</span> num ^ ((x &lt;&lt; i) | (x &lt;&lt; j));</span><br><span class="line">&#125;</span><br><span class="line">swapBit(<span class="number">4</span>, <span class="number">0</span>, <span class="number">2</span>) <span class="comment">//1</span></span><br></pre></td></tr></table></figure>


<h3 id="交换指定长度的比特位"><a href="#交换指定长度的比特位" class="headerlink" title="交换指定长度的比特位"></a>交换指定长度的比特位</h3><p>原始序列为 S, 将第 i 位(从右往左数，起始索引为0)开始，长度为 len 的序列与 第 j 位开始，长度为 len 的序列进行交换</p>
<p>举例，S = <code>00010111</code> i=0 j=4 len=3 交换后得到 <code>01110001</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> swapIndividualBits = <span class="function">(<span class="params">num, i, j, len</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> x = ((num &gt;&gt; i) ^ (num &gt;&gt; j)) &amp; ((<span class="number">1</span> &lt;&lt; len) - <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">return</span> num ^ ((x &lt;&lt; i) | (x &lt;&lt; j));</span><br><span class="line">&#125;</span><br><span class="line">swapIndividualBits (<span class="number">23</span>,<span class="number">0</span>,<span class="number">4</span>,<span class="number">3</span>) <span class="comment">//113 23=&gt;0010111(2) 113=&gt;01110001(2)</span></span><br></pre></td></tr></table></figure>

<p>常用于移动一组开关的位置</p>
<h2 id="9-反转比特序列"><a href="#9-反转比特序列" class="headerlink" title="9. 反转比特序列"></a>9. 反转比特序列</h2><p>由于 js 中不能指定一个数字类型的存储大小，这里需要手动指定一共有多少比特位</p>
<h3 id="原始方法-1"><a href="#原始方法-1" class="headerlink" title="原始方法"></a>原始方法</h3><p>头尾两两交换 <code>O(n)</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> swapBit = <span class="function">(<span class="params">num, i, j</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> x = ((num &gt;&gt; i) ^ (num &gt;&gt; j)) &amp; <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">return</span> num ^ ((x &lt;&lt; i) | (x &lt;&lt; j));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> reverseBits = <span class="function">(<span class="params">num, n = <span class="number">8</span></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> len = n &gt;&gt; <span class="number">1</span></span><br><span class="line">  <span class="keyword">let</span> res = num</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">    res = swapBit(res, i, n - i - <span class="number">1</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br><span class="line">reverseBits(<span class="number">111</span>) <span class="comment">// 246  due to 01101111 =&gt; (0)11110110</span></span><br></pre></td></tr></table></figure>

<h3 id="分治法"><a href="#分治法" class="headerlink" title="分治法"></a>分治法</h3><p>仅适用于固定字节，在 js 中不太适用</p>
<h2 id="10-查找数字"><a href="#10-查找数字" class="headerlink" title="10. 查找数字"></a>10. 查找数字</h2><h3 id="仅一个元素出现一次，其余元素出现2次"><a href="#仅一个元素出现一次，其余元素出现2次" class="headerlink" title="仅一个元素出现一次，其余元素出现2次"></a>仅一个元素出现一次，其余元素出现2次</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> singleNumber = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> nums.reduce(<span class="function">(<span class="params">pre,cur</span>)=&gt;</span>pre^cur)  </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="仅一个元素出现一次，其余元素出现-k-次"><a href="#仅一个元素出现一次，其余元素出现-k-次" class="headerlink" title="仅一个元素出现一次，其余元素出现 k 次"></a>仅一个元素出现一次，其余元素出现 k 次</h3><p>思路见 <a href="https://github.com/francecil/leetcode/issues/12" target="_blank" rel="noopener">leetcode-137. 只出现一次的数字 II</a></p>
<p>代码如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> singleNumber = <span class="function"><span class="keyword">function</span> (<span class="params">nums, k=<span class="number">3</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (nums.length === <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> nums[<span class="number">0</span>]</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> base = <span class="number">1</span></span><br><span class="line">  <span class="keyword">let</span> res = <span class="number">0</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">let</span> cnk = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; nums.length; j++) &#123;</span><br><span class="line">      cnk += nums[j] &amp; base ? <span class="number">1</span> : <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (cnk % <span class="number">3</span> !== <span class="number">0</span>) &#123;</span><br><span class="line">      res |= base</span><br><span class="line">    &#125;</span><br><span class="line">    base &lt;&lt;= <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="恰好有两个元素只出现一次，其余所有元素均出现两次"><a href="#恰好有两个元素只出现一次，其余所有元素均出现两次" class="headerlink" title="恰好有两个元素只出现一次，其余所有元素均出现两次"></a>恰好有两个元素只出现一次，其余所有元素均出现两次</h3><p>思路见 <a href="https://github.com/francecil/leetcode/issues/13" target="_blank" rel="noopener">leetcode-260. 只出现一次的数字 III</a></p>
<p>代码如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> singleNumber = <span class="function"><span class="keyword">function</span> (<span class="params">nums</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (nums.length === <span class="number">2</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> nums</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> res = nums.reduce(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a ^ b)</span><br><span class="line">  <span class="comment">// 取最低非0位，两个数在该位上 一个为0 一个为1，  </span></span><br><span class="line">  <span class="comment">// 进行 数组划分 该位为1的一组，该位为0的一组</span></span><br><span class="line">  <span class="keyword">let</span> tmp = res &amp; -res</span><br><span class="line">  <span class="keyword">let</span> res1 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">let</span> res2 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (nums[i] &amp; tmp) &#123;</span><br><span class="line">      res1 ^= nums[i]</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      res2 ^= nums[i]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> [res1, res2]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<hr>
<p>未完待续…</p>
<h2 id="拓展阅读"><a href="#拓展阅读" class="headerlink" title="拓展阅读"></a>拓展阅读</h2><ol>
<li><a href="https://graphics.stanford.edu/~seander/bithacks.html" target="_blank" rel="noopener">Bit Twiddling Hacks</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/37014715" target="_blank" rel="noopener">Bit Hacks：关于一切位操作的魔法（上）</a></li>
</ol>
]]></content>
      <categories>
        <category>大前端</category>
      </categories>
      <tags>
        <tag>位运算</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>基于 opencv.js 实现图像内矩形物品的自动提取</title>
    <url>/2020/01/17/2020/%E5%9F%BA%E4%BA%8E%20opencv.js%20%E5%AE%9E%E7%8E%B0%E5%9B%BE%E5%83%8F%E5%86%85%E7%9F%A9%E5%BD%A2%E7%89%A9%E5%93%81%E7%9A%84%E8%87%AA%E5%8A%A8%E6%8F%90%E5%8F%96/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>大学的时候研究了一段时间的 OpenCV ，当时做了一个这样的小工具 <a href="https://github.com/francecil/RunFace" target="_blank" rel="noopener">RunFace</a>：</p>
<a id="more"></a>

<p>有两张照片，第一张照片带白纸，通过合成会将第二张照片转换到第一张照片的白纸处</p>
<p><img src="https://upload-images.jianshu.io/upload_images/9277731-f4c330edac89029a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="物品替换"></p>
<p>正好最近看到 OpenCV 在前端有对应的实现库，就想着做个纯前端版本，这次我们实现反向效果，将合成图中的矩形图像提取出来</p>
<p><img src="https://upload-images.jianshu.io/upload_images/9277731-a65795c8ec1f9735.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="rectangle-extract"></p>
<p>已开源，详见 <a href="https://github.com/francecil/rectangle-extract-opencvjs" target="_blank" rel="noopener">rectangle-extract-opencvjs</a> </p>
<p><a href="https://francecil.github.io/rectangle-extract-opencvjs/" target="_blank" rel="noopener">在线地址</a></p>
<p>主要的应用场景有：去除身份证照背景得到扫描件</p>
<blockquote>
<p>当然，这些用 ps 很容易实现</p>
</blockquote>
<h2 id="实现要点"><a href="#实现要点" class="headerlink" title="实现要点"></a>实现要点</h2><h3 id="一、生成-opencv-js"><a href="#一、生成-opencv-js" class="headerlink" title="一、生成 opencv.js"></a>一、生成 opencv.js</h3><p>可以选择自己编译，用的是 LLVM 那套工具链</p>
<p>详见 <a href="https://docs.opencv.org/4.2.0/d4/da1/tutorial_js_setup.html" target="_blank" rel="noopener">Build OpenCV.js</a></p>
<p>我是直接用的现成的 js 文件，大概 8M </p>
<p>有个疑问，自己编译的话不知是否可以选择仅编译某些模块，这样生成的包就比较小了</p>
<h3 id="二、算法流程"><a href="#二、算法流程" class="headerlink" title="二、算法流程"></a>二、算法流程</h3><p><img src="https://upload-images.jianshu.io/upload_images/9277731-7f8c188b0b79fbdf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="矩形抽离流程图"></p>
<p>我们以下面原图为例</p>
<p><img src="https://user-gold-cdn.xitu.io/2020/1/21/16fc6b8a3bef2cb0?w=1334&h=1000&f=jpeg&s=156315" alt="原图"></p>
<h4 id="预处理"><a href="#预处理" class="headerlink" title="预处理"></a>预处理</h4><p>分为尺寸调整和滤波</p>
<p>尺寸调整是将图片宽高等比例缩小到 200px 以内，目的是为了提高处理效率，且让滤波效果更好</p>
<p>滤波的作用是保边（边缘锐化）去噪（去除纹理），方便后续目标图像的提取</p>
<p>滤波可以用 双边滤波 或者 meanshift 滤波</p>
<p><img src="https://upload-images.jianshu.io/upload_images/9277731-996a1fdd15be6a67.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="预处理"></p>
<h4 id="提取前景图"><a href="#提取前景图" class="headerlink" title="提取前景图"></a>提取前景图</h4><p>在当前应用场景，目标矩形图像占比较大，我们可以直接取中点进行漫水填充</p>
<p>即通过应用 floodFill 算法得到灰度图</p>
<p><img src="https://upload-images.jianshu.io/upload_images/9277731-b168ca6699ab95a5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="漫水填充"></p>
<p>应用中值滤波去噪</p>
<p><img src="https://upload-images.jianshu.io/upload_images/9277731-38ac88389cd3472e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="中值去噪"></p>
<p>这样我们就得到一个二值图像了</p>
<p>后续考虑更通用的场景，可以引入用户交互：以用户触碰点进行漫水填充</p>
<h4 id="直线检测"><a href="#直线检测" class="headerlink" title="直线检测"></a>直线检测</h4><p>先利用 Canny 算子进行边缘检测</p>
<p><img src="https://upload-images.jianshu.io/upload_images/9277731-367c71d9b042722b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="边缘检测"></p>
<p>然后通过 HoughLines 变换得到直线</p>
<p><img src="https://upload-images.jianshu.io/upload_images/9277731-31257448062a25fa.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="直线检测"></p>
<p>这里不选用 HoughLinesP 检测线段，主要原因是得到的线段都是短线段且方向变化较大，不利于后续的计算；还有一个原因是不能处理图像部分缺失的情况</p>
<p>当然这里的场景也不需要考虑目标图像部分缺失的情况。</p>
<h4 id="顶点坐标计算"><a href="#顶点坐标计算" class="headerlink" title="顶点坐标计算"></a>顶点坐标计算</h4><p>计算所有直线的交点</p>
<p>过滤掉坐标不在范围的</p>
<p><img src="https://upload-images.jianshu.io/upload_images/9277731-8142299b4497fc4f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="交点.png"></p>
<p>本来打算打算通过 kmeans 进行聚类，发现 opencv 自带的不太好用(也可能是我姿势不对)</p>
<p>取巧，先计算中点，然后根据极坐标对所有交点进行排序，欧式距离在一定范围内的属于同一类</p>
<p>我们得到了多个聚类，取元素最多的四个分类，并得到四个均值坐标</p>
<p>最后以左上角（横纵坐标均小于中点）为第一个点，进行顺时针排序</p>
<h4 id="矩阵变换"><a href="#矩阵变换" class="headerlink" title="矩阵变换"></a>矩阵变换</h4><p>将原图的四个坐标变换到目标图片的四个新的点</p>
<p>这里存在一个问题，就是新的目标图片的宽高应该是多少，这里我们直接取原图的宽高</p>
<p>后续有时间的话再研究下自动识别目标图宽高的算法</p>
<p>最后再横纵缩放一半（压缩），得到最后的结果</p>
<p><img src="https://upload-images.jianshu.io/upload_images/9277731-a1ebc28e8965fd62.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="结果"></p>
<h3 id="三、界面布局"><a href="#三、界面布局" class="headerlink" title="三、界面布局"></a>三、界面布局</h3><p>借鉴了该文章的代码 <a href="https://blog.theodo.com/2019/02/computer-vision-web-opencv-js/" target="_blank" rel="noopener">[OpenCV Web] Should You Use OpenCV JS?</a> </p>
<p>用的 bootstrap 进行布局</p>
<h3 id="四、代码实现"><a href="#四、代码实现" class="headerlink" title="四、代码实现"></a>四、代码实现</h3><p>接口的使用方式基本上和其他语言相同</p>
<p>不清楚的话可以查看 <a href="https://docs.opencv.org/4.2.0/" target="_blank" rel="noopener">api 文档</a></p>
<p>或者先玩玩这些<a href="https://docs.opencv.org/4.2.0/d2/df0/tutorial_js_table_of_contents_imgproc.html" target="_blank" rel="noopener">图像处理相关demo</a> </p>
<p>总的来说，文档较为匮乏，很多接口没有说明，只能通过其他语言的 api 进行类推</p>
<p>代码如下，更多的请查看 github 仓库</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> g_nLowDifference = <span class="number">35</span></span><br><span class="line"><span class="keyword">const</span> g_nUpDifference = <span class="number">35</span>; <span class="comment">//负差最大值、正差最大值 </span></span><br><span class="line"><span class="keyword">const</span> UNCAL_THETA = <span class="number">0.5</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Line</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(rho, theta) &#123;</span><br><span class="line">    <span class="keyword">this</span>.rho = rho</span><br><span class="line">    <span class="keyword">this</span>.theta = theta</span><br><span class="line">    <span class="keyword">let</span> a = <span class="built_in">Math</span>.cos(theta);</span><br><span class="line">    <span class="keyword">let</span> b = <span class="built_in">Math</span>.sin(theta);</span><br><span class="line">    <span class="keyword">let</span> x0 = a * rho;</span><br><span class="line">    <span class="keyword">let</span> y0 = b * rho;</span><br><span class="line">    <span class="keyword">this</span>.startPoint = &#123; <span class="attr">x</span>: x0 - <span class="number">400</span> * b, <span class="attr">y</span>: y0 + <span class="number">400</span> * a &#125;;</span><br><span class="line">    <span class="keyword">this</span>.endPoint = &#123; <span class="attr">x</span>: x0 + <span class="number">400</span> * b, <span class="attr">y</span>: y0 - <span class="number">400</span> * a &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Object&#125;</span> <span class="variable">srcMat</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">itemExtract</span> (<span class="params">srcMat, name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> scale = getScale(<span class="built_in">Math</span>.max(srcMat.rows, srcMat.cols))</span><br><span class="line">  <span class="keyword">let</span> preMat = preProcess(srcMat, scale)</span><br><span class="line">  <span class="keyword">let</span> grayMat = getSegmentImage(preMat)</span><br><span class="line">  <span class="keyword">let</span> lines = getLinesWithDetect(grayMat)</span><br><span class="line">  <span class="keyword">let</span> points = getFourVertex(lines, scale, &#123; <span class="attr">height</span>: srcMat.rows, <span class="attr">width</span>: srcMat.cols &#125;)</span><br><span class="line">  <span class="keyword">let</span> result = getResultWithMap(srcMat, points)</span><br><span class="line">  cv.imshow(name, result);</span><br><span class="line">  preMat.delete()</span><br><span class="line">  grayMat.delete()</span><br><span class="line">  srcMat.delete()</span><br><span class="line">  result.delete()</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取缩放比例</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;*&#125;</span> </span>len </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getScale</span> (<span class="params">len</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> scale = <span class="number">1</span></span><br><span class="line">  <span class="keyword">while</span> (len &gt; <span class="number">200</span>) &#123;</span><br><span class="line">    scale /= <span class="number">2</span></span><br><span class="line">    len &gt;&gt;= <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> scale</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 预处理</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;*&#125;</span> </span>src </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">preProcess</span> (<span class="params">src, scale</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> smallMat = resize(src, scale)</span><br><span class="line">  <span class="keyword">let</span> result = filter(smallMat)</span><br><span class="line">  smallMat.delete()</span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 调整至指定宽高</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;*&#125;</span> </span>src </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;*&#125;</span> </span>scale 缩放比例 </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">resize</span> (<span class="params">src, scale = <span class="number">1</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> smallMat = <span class="keyword">new</span> cv.Mat();</span><br><span class="line">  <span class="keyword">let</span> dsize = <span class="keyword">new</span> cv.Size(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">  cv.resize(src, smallMat, dsize, scale, scale, cv.INTER_AREA)</span><br><span class="line">  <span class="keyword">return</span> smallMat</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 滤波：保边去噪</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;*&#125;</span> </span>mat </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span> (<span class="params">src</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> dst = <span class="keyword">new</span> cv.Mat();</span><br><span class="line">  cv.cvtColor(src, src, cv.COLOR_RGBA2RGB, <span class="number">0</span>);</span><br><span class="line">  <span class="comment">// 双边滤波</span></span><br><span class="line">  cv.bilateralFilter(src, dst, <span class="number">9</span>, <span class="number">75</span>, <span class="number">75</span>, cv.BORDER_DEFAULT);</span><br><span class="line">  <span class="keyword">return</span> dst</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过分割图像获取前景灰度图</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;*&#125;</span> </span>src </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getSegmentImage</span> (<span class="params">src</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> mask = <span class="keyword">new</span> cv.Mat(src.rows + <span class="number">2</span>, src.cols + <span class="number">2</span>, cv.CV_8U, [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>])</span><br><span class="line">  <span class="keyword">const</span> seed = <span class="keyword">new</span> cv.Point(src.cols &gt;&gt; <span class="number">1</span>, src.rows &gt;&gt; <span class="number">1</span>)</span><br><span class="line">  <span class="keyword">let</span> flags = <span class="number">4</span> + (<span class="number">255</span> &lt;&lt; <span class="number">8</span>) + cv.FLOODFILL_FIXED_RANGE</span><br><span class="line">  <span class="keyword">let</span> ccomp = <span class="keyword">new</span> cv.Rect()</span><br><span class="line">  <span class="keyword">let</span> newVal = <span class="keyword">new</span> cv.Scalar(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>)</span><br><span class="line">  <span class="comment">// 选取中点，采用floodFill漫水填充</span></span><br><span class="line">  cv.threshold(mask, mask, <span class="number">1</span>, <span class="number">128</span>, cv.THRESH_BINARY);</span><br><span class="line">  cv.floodFill(src, mask, seed, newVal, ccomp, <span class="keyword">new</span> cv.Scalar(g_nLowDifference, g_nLowDifference, g_nLowDifference), <span class="keyword">new</span> cv.Scalar(g_nUpDifference, g_nUpDifference, g_nUpDifference), flags);</span><br><span class="line">  <span class="comment">// 再次执行一次滤波去除噪点</span></span><br><span class="line">  cv.medianBlur(mask, mask, <span class="number">9</span>);</span><br><span class="line">  <span class="keyword">return</span> mask</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getLinesFromData32F</span> (<span class="params">data32F</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> lines = []</span><br><span class="line">  <span class="keyword">let</span> len = data32F.length / <span class="number">2</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len; ++i) &#123;</span><br><span class="line">    <span class="keyword">let</span> rho = data32F[i * <span class="number">2</span>];</span><br><span class="line">    <span class="keyword">let</span> theta = data32F[i * <span class="number">2</span> + <span class="number">1</span>];</span><br><span class="line">    lines.push(<span class="keyword">new</span> Line(rho, theta))</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> lines</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 直线检测</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;*&#125;</span> </span>mat </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getLinesWithDetect</span> (<span class="params">src</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> dst = cv.Mat.zeros(src.rows, src.cols, cv.CV_8UC3);</span><br><span class="line">  <span class="keyword">let</span> lines = <span class="keyword">new</span> cv.Mat();</span><br><span class="line">  <span class="comment">// Canny 算子进行边缘检测</span></span><br><span class="line">  cv.Canny(src, src, <span class="number">50</span>, <span class="number">200</span>, <span class="number">3</span>);</span><br><span class="line">  cv.HoughLines(src, lines, <span class="number">1</span>, <span class="built_in">Math</span>.PI / <span class="number">180</span>,</span><br><span class="line">    <span class="number">30</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="built_in">Math</span>.PI);</span><br><span class="line">  <span class="comment">// draw lines</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; lines.rows; ++i) &#123;</span><br><span class="line">    <span class="keyword">let</span> rho = lines.data32F[i * <span class="number">2</span>];</span><br><span class="line">    <span class="keyword">let</span> theta = lines.data32F[i * <span class="number">2</span> + <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">let</span> a = <span class="built_in">Math</span>.cos(theta);</span><br><span class="line">    <span class="keyword">let</span> b = <span class="built_in">Math</span>.sin(theta);</span><br><span class="line">    <span class="keyword">let</span> x0 = a * rho;</span><br><span class="line">    <span class="keyword">let</span> y0 = b * rho;</span><br><span class="line">    <span class="keyword">let</span> startPoint = &#123; <span class="attr">x</span>: x0 - <span class="number">400</span> * b, <span class="attr">y</span>: y0 + <span class="number">400</span> * a &#125;;</span><br><span class="line">    <span class="keyword">let</span> endPoint = &#123; <span class="attr">x</span>: x0 + <span class="number">400</span> * b, <span class="attr">y</span>: y0 - <span class="number">400</span> * a &#125;;</span><br><span class="line">    cv.line(dst, startPoint, endPoint, [<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> lineArray = getLinesFromData32F(lines.data32F)</span><br><span class="line">  <span class="comment">// drawLineMat(src.rows, src.cols, lineArray)</span></span><br><span class="line">  <span class="keyword">return</span> lineArray</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 计算两直线间的交点</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;*&#125;</span> </span>l1 </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;*&#125;</span> </span>l2 </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getIntersection</span> (<span class="params">l1, l2</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//角度差太小 不算，</span></span><br><span class="line">  <span class="keyword">let</span> minTheta = <span class="built_in">Math</span>.min(l1.theta, l2.theta)</span><br><span class="line">  <span class="keyword">let</span> maxTheta = <span class="built_in">Math</span>.max(l1.theta, l2.theta)</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">Math</span>.abs(l1.theta - l2.theta) &lt; UNCAL_THETA || <span class="built_in">Math</span>.abs(minTheta + <span class="built_in">Math</span>.PI - maxTheta) &lt; UNCAL_THETA) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//计算两条直线的交点</span></span><br><span class="line">  <span class="keyword">let</span> intersection;</span><br><span class="line">  <span class="comment">//y = a * x + b;</span></span><br><span class="line">  <span class="keyword">let</span> a1 = <span class="built_in">Math</span>.abs(l1.startPoint.x - l1.endPoint.x) &lt; <span class="built_in">Number</span>.EPSILON ? <span class="number">0</span> : (l1.startPoint.y - l1.endPoint.y) / (l1.startPoint.x - l1.endPoint.x);</span><br><span class="line">  <span class="keyword">let</span> b1 = l1.startPoint.y - a1 * (l1.startPoint.x);</span><br><span class="line">  <span class="keyword">let</span> a2 = <span class="built_in">Math</span>.abs((l2.startPoint.x - l2.endPoint.x)) &lt; <span class="built_in">Number</span>.EPSILON ? <span class="number">0</span> : (l2.startPoint.y - l2.endPoint.y) / (l2.startPoint.x - l2.endPoint.x);</span><br><span class="line">  <span class="keyword">let</span> b2 = l2.startPoint.y - a2 * (l2.startPoint.x);</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">Math</span>.abs(a2 - a1) &gt; <span class="built_in">Number</span>.EPSILON) &#123;</span><br><span class="line">    <span class="keyword">let</span> x = (b1 - b2) / (a2 - a1)</span><br><span class="line">    <span class="keyword">let</span> y = a1 * x + b1</span><br><span class="line">    intersection = &#123; x, y &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> intersection</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 计算所有交点</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;*&#125;</span> </span>lines </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getAllIntersections</span> (<span class="params">lines</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> points = []</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; lines.length; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = i + <span class="number">1</span>; j &lt; lines.length; j++) &#123;</span><br><span class="line">      <span class="keyword">let</span> point = getIntersection(lines[i], lines[j])</span><br><span class="line">      <span class="keyword">if</span> (point) &#123;</span><br><span class="line">        points.push(point)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> points</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 聚类取均值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;*&#125;</span> </span>points </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;*&#125;</span> </span>param1 </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getClusterPoints</span> (<span class="params">points, &#123; width, height &#125;</span>) </span>&#123;</span><br><span class="line">  points.sort(<span class="function">(<span class="params">p1, p2</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (p1.x !== p2.x) &#123;</span><br><span class="line">      <span class="keyword">return</span> p1.x - p2.x</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> p1.y - p2.y</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">const</span> distance = <span class="built_in">Math</span>.max(<span class="number">40</span>, (width + height) / <span class="number">20</span>)</span><br><span class="line">  <span class="keyword">const</span> isNear = <span class="function">(<span class="params">p1, p2</span>) =&gt;</span> <span class="built_in">Math</span>.abs(p1.x - p2.x) + <span class="built_in">Math</span>.abs(p1.y - p2.y) &lt; distance</span><br><span class="line">  <span class="keyword">let</span> clusters = [[points[<span class="number">0</span>]]]</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; points.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (isNear(points[i], points[i - <span class="number">1</span>])) &#123;</span><br><span class="line">      clusters[clusters.length - <span class="number">1</span>].push(points[i])</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      clusters.push([points[i]])</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 除去量最少的，仅保留四个聚类</span></span><br><span class="line">  clusters = clusters.sort(<span class="function">(<span class="params">c1, c2</span>) =&gt;</span> c2.length - c1.length).slice(<span class="number">0</span>, <span class="number">4</span>)</span><br><span class="line">  <span class="keyword">const</span> result = clusters.map(<span class="function"><span class="params">cluster</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> x = ~~<span class="function">(<span class="params">cluster.reduce((sum, cur</span>) =&gt;</span> sum + cur.x, <span class="number">0</span>) / cluster.length)</span><br><span class="line">    <span class="keyword">const</span> y = ~~<span class="function">(<span class="params">cluster.reduce((sum, cur</span>) =&gt;</span> sum + cur.y, <span class="number">0</span>) / cluster.length)</span><br><span class="line">    <span class="keyword">return</span> &#123; x, y &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 顺时针排序，以中心点左上角为第一个点</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;*&#125;</span> </span>points </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getSortedVertex</span> (<span class="params">points</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> center = &#123;</span><br><span class="line">    x: points.reduce(<span class="function">(<span class="params">sum, p</span>) =&gt;</span> sum + p.x, <span class="number">0</span>) / <span class="number">4</span>,</span><br><span class="line">    y: points.reduce(<span class="function">(<span class="params">sum, p</span>) =&gt;</span> sum + p.y, <span class="number">0</span>) / <span class="number">4</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> sortedPoints = []</span><br><span class="line">  sortedPoints.push(points.find(<span class="function"><span class="params">p</span> =&gt;</span> p.x &lt; center.x &amp;&amp; p.y &lt; center.y))</span><br><span class="line">  sortedPoints.push(points.find(<span class="function"><span class="params">p</span> =&gt;</span> p.x &gt; center.x &amp;&amp; p.y &lt; center.y))</span><br><span class="line">  sortedPoints.push(points.find(<span class="function"><span class="params">p</span> =&gt;</span> p.x &gt; center.x &amp;&amp; p.y &gt; center.y))</span><br><span class="line">  sortedPoints.push(points.find(<span class="function"><span class="params">p</span> =&gt;</span> p.x &lt; center.x &amp;&amp; p.y &gt; center.y))</span><br><span class="line">  <span class="keyword">return</span> sortedPoints</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据聚类获得四个顶点的坐标</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFourVertex</span> (<span class="params">lines, scale, &#123; width, height &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 缩放 + 过滤</span></span><br><span class="line">  <span class="keyword">let</span> allPoints = getAllIntersections(lines).map(<span class="function"><span class="params">point</span> =&gt;</span> (&#123;</span><br><span class="line">    x: ~~(point.x / scale), <span class="attr">y</span>: ~~(point.y / scale)</span><br><span class="line">  &#125;)).filter(<span class="function">(<span class="params">&#123; x, y &#125;</span>) =&gt;</span> !(x &lt; <span class="number">0</span> || x &gt; width || y &lt; <span class="number">0</span> || y &gt; height))</span><br><span class="line">  <span class="keyword">const</span> points = getClusterPoints(allPoints, &#123; width, height &#125;)</span><br><span class="line">  <span class="keyword">const</span> sortedPoints = getSortedVertex(points)</span><br><span class="line">  <span class="keyword">return</span> sortedPoints</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 抠图，映射</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;*&#125;</span> </span>src </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;*&#125;</span> </span>points </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getResultWithMap</span> (<span class="params">src, points</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> array = []</span><br><span class="line">  points.forEach(<span class="function"><span class="params">point</span> =&gt;</span> &#123;</span><br><span class="line">    array.push(point.x)</span><br><span class="line">    array.push(point.y)</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="built_in">console</span>.log(points, array)</span><br><span class="line">  <span class="keyword">let</span> dst = <span class="keyword">new</span> cv.Mat();</span><br><span class="line">  <span class="keyword">let</span> dsize = <span class="keyword">new</span> cv.Size(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">  <span class="keyword">let</span> dstWidth = src.cols</span><br><span class="line">  <span class="keyword">let</span> dstHeight = src.rows</span><br><span class="line">  <span class="keyword">let</span> srcTri = cv.matFromArray(<span class="number">4</span>, <span class="number">1</span>, cv.CV_32FC2, array);</span><br><span class="line">  <span class="keyword">let</span> dstTri = cv.matFromArray(<span class="number">4</span>, <span class="number">1</span>, cv.CV_32FC2, [<span class="number">0</span>, <span class="number">0</span>, dstWidth, <span class="number">0</span>, dstWidth, dstHeight, <span class="number">0</span>, dstHeight]);</span><br><span class="line">  <span class="keyword">let</span> M = cv.getPerspectiveTransform(srcTri, dstTri);</span><br><span class="line">  cv.warpPerspective(src, dst, M, dsize);</span><br><span class="line">  <span class="keyword">let</span> resizeDst = resize(dst, <span class="number">0.5</span>)</span><br><span class="line">  M.delete(); srcTri.delete(); dstTri.delete(); dst.delete()</span><br><span class="line">  <span class="keyword">return</span> resizeDst</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">drawLineMat</span> (<span class="params">rows, cols, lines</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> dst = cv.Mat.zeros(rows, cols, cv.CV_8UC3);</span><br><span class="line">  <span class="keyword">let</span> color = <span class="keyword">new</span> cv.Scalar(<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> line <span class="keyword">of</span> lines) &#123;</span><br><span class="line">    cv.line(dst, line.startPoint, line.endPoint, color);</span><br><span class="line">  &#125;</span><br><span class="line">  cv.imshow(<span class="string">"canvasOutput"</span>, dst);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>注意：</strong> 使用完的 Mat 对象记得手动清空，否则会耗尽 WebAssembly 的内存</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过一个简单的例子，接触了 opencv.js 的使用</p>
<p>opencv 提供了很多接口，使得在前端进行图像处理变得很方便，未来或许有更多的应用场景</p>
<h2 id="未来展望"><a href="#未来展望" class="headerlink" title="未来展望"></a>未来展望</h2><p>性能上：尝试使用 AssemblyScript 编写相关的算法模块，生成 wasm 并替换掉这个 8M 的 opencv.js 文件</p>
<p>功能上：增加触控交互，更智能的识别目标矩形；目标图片宽高校正；</p>
<p>编码上：借鉴中间件的思想进行重构</p>
<p>后续优化完再写一篇文章</p>
<p>也欢迎试用，以及提 pr</p>
<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ol>
<li><a href="https://docs.opencv.org/4.2.0/d5/d10/tutorial_js_root.html" target="_blank" rel="noopener">官方 demo</a></li>
<li><a href="https://www.cnblogs.com/frombeijingwithlove/p/4226489.html" target="_blank" rel="noopener">利用OpenCV检测图像中的长方形画布或纸张并提取图像内容</a></li>
<li><a href="https://answers.opencv.org/question/206557/how-can-you-use-k-means-clustering-to-posterize-an-image-using-opencv-javascript/" target="_blank" rel="noopener">How can you use K-Means clustering to posterize an image using opencv javascript?</a></li>
</ol>
]]></content>
      <categories>
        <category>大前端</category>
      </categories>
      <tags>
        <tag>OpenCV</tag>
      </tags>
  </entry>
  <entry>
    <title>WebAssembly 初探</title>
    <url>/2020/01/10/WebAssembly/WebAssembly%20%E5%88%9D%E6%8E%A2/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文是对 WebAssembly 技术体系的概括</p>
<a id="more"></a>

<p>相应的技术不会深入讲解，将在以后的文章讲到</p>
<h2 id="二进制表示与文本表示"><a href="#二进制表示与文本表示" class="headerlink" title="二进制表示与文本表示"></a>二进制表示与文本表示</h2><p>其实就是编码解析时给了个约定，某个字节代表了某个含义，这样通过有限的字节就可以进行复杂的表示</p>
<p>wat 的内容为文本</p>
<p>wasm 的内容为二进制</p>
<p><a href="https://github.com/WebAssembly/wabt" target="_blank" rel="noopener">https://github.com/WebAssembly/wabt</a> 提供了文件在线转换的工具</p>
<p>对于 Uint8Array ，自己也写了一个脚本，用于转换为文本</p>
<h2 id="与-asm-js-的关系"><a href="#与-asm-js-的关系" class="headerlink" title="与 asm.js 的关系"></a>与 asm.js 的关系</h2><p>asm.js 是火狐搞的，写法上还是 js 的写法，只不过通过某些技术让引擎能够确定变量类型，少了某些环节</p>
<h2 id="内存模型"><a href="#内存模型" class="headerlink" title="内存模型"></a>内存模型</h2><p>默认只有整型和浮点类型，其他类型需要通过开辟内存使用</p>
<h2 id="其他语言转-wasm"><a href="#其他语言转-wasm" class="headerlink" title="其他语言转 wasm"></a>其他语言转 wasm</h2><p>llvm 工具转换</p>
<p>理论上来说，所有强类型语言都可以支撑转成 wasm</p>
<p>对于前端er来说，用ts是成本较低的一种，相应的技术为： assemblyScript</p>
<h2 id="拓展阅读"><a href="#拓展阅读" class="headerlink" title="拓展阅读"></a>拓展阅读</h2><p><a href="https://www.cnblogs.com/jixiaohua/category/1404779.html" target="_blank" rel="noopener">https://www.cnblogs.com/jixiaohua/category/1404779.html</a></p>
<p>MDN</p>
]]></content>
      <categories>
        <category>大前端</category>
      </categories>
      <tags>
        <tag>WebAssembly</tag>
      </tags>
  </entry>
  <entry>
    <title>如何解决长列表的滚动白屏问题</title>
    <url>/2020/01/09/2020/%E5%A6%82%E4%BD%95%E8%A7%A3%E5%86%B3%E9%95%BF%E5%88%97%E8%A1%A8%E7%9A%84%E6%BB%9A%E5%8A%A8%E7%99%BD%E5%B1%8F%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>之前提到过实现长列表的方式：监听 scroll 事件，在回调中计算渲染起止项并插入 dom 树，即只渲染可视区域</p>
<p>实现中发现，有些情况下可能会出现短暂的白屏现象</p>
<p>本文就来谈谈白屏成因和解决方案</p>
<a id="more"></a>

<h2 id="白屏成因"><a href="#白屏成因" class="headerlink" title="白屏成因"></a>白屏成因</h2><p>造成滚屏有3种方式</p>
<ul>
<li>输入事件，如鼠标滚轮，键盘方向键</li>
<li>拖动滚动条</li>
<li>代码控制 scrollTop</li>
</ul>
<p>每种方式，浏览器的内部处理都是不一样的</p>
<h3 id="输入事件滚动"><a href="#输入事件滚动" class="headerlink" title="输入事件滚动"></a>输入事件滚动</h3><p>先说交互事件，以鼠标滚轮(mousewheel)为例</p>
<p>大部分浏览器采用的是异步滚动模型。在该模型中，视觉滚动位置在合成器线程中更新，并在 scroll 回调执行前可见</p>
<p><img src="https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2016/02/apz.png" alt="Smoother scrolling in Firefox 46 with APZ"></p>
<p>内部执行顺序如下：</p>
<ol>
<li>相关线程捕获到滚轮操作</li>
<li>通知合成器线程去滚动文档，包括更新滚动条位置</li>
<li>【事件循环1】执行滚轮事件回调</li>
<li>【事件循环1】执行 UI Render，触发 scroll 事件</li>
<li>【事件循环2】执行 scroll 事件回调</li>
</ol>
<p>在执行滚轮事件回调的时候，可能文档位置已经更新完毕</p>
<p>因此，当 scroll 事件回调执行太久，就会出现文档已经滚动了，但是新的可视区域列表还未计算出来并更新到页面上，白屏就此产生</p>
<p>我们可以禁用浏览器的异步滚动优化，即将滚动文档操作放到【事件循环1】的 UI Render 阶段去做</p>
<blockquote>
<p>通过 passive=false 来实现<br>也就是说滚动文档需要与主线程交互</p>
</blockquote>
<p>如果将原 scroll 事件的处理放到滚轮事件中处理的话， scrollTop 拿到的是之前的值（passive=false，浏览器并不知道是否要滚动，会不会被 prventDefault ）。所以事件回调保持不变</p>
<p>这样下来，下一次的滚动文档必须等待本次 scroll 事件回调执行完毕，<strong>减缓</strong>了白屏现象，相应的，页面也显得没那么流畅</p>
<p>于是内部执行顺便变成如下：</p>
<ol>
<li>相关线程捕获到滚轮操作</li>
<li>【事件循环1】执行滚轮事件回调</li>
<li>【事件循环1】执行 UI Render，触发 scroll 事件，通知合成器线程去滚动文档，包括更新滚动条位置</li>
<li>【事件循环2】执行 scroll 事件回调</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">"scroll"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">window</span>.scrollY)</span><br><span class="line">  <span class="keyword">let</span> start = performance.now()</span><br><span class="line">  <span class="comment">// 模拟耗时任务</span></span><br><span class="line">  <span class="keyword">while</span>( performance.now() - start &lt;<span class="number">100</span>)&#123;&#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">"mousewheel"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">&#125;,&#123; <span class="attr">passive</span>: <span class="literal">false</span> &#125;)</span><br></pre></td></tr></table></figure>

<p>不过火狐中设置 <code>passive: false</code> 没有效果，浏览器的异步滚动优化无法禁用</p>
<p>详情看 <a href="https://developer.mozilla.org/zh-CN/docs/Mozilla/Performance/Scroll-linked_effects" target="_blank" rel="noopener">Scroll-linked_effects</a></p>
<h3 id="拖动滚动条"><a href="#拖动滚动条" class="headerlink" title="拖动滚动条"></a>拖动滚动条</h3><p>与滚轮事件有些许不同，chrome 的拖动滚动条没有异步滚动优化</p>
<p>其执行顺序如下：</p>
<ol>
<li>相关线程捕获到滚动条被拖动</li>
<li>【事件循环1】执行 scroll 事件回调</li>
<li>【事件循环1】执行 UI Render，通知合成器线程去滚动文档，包括更新滚动条位置</li>
</ol>
<p>效果就是卡一下，滚一下，滚过去的时候已经新的列表已经绘制完毕了，那么是不会有白屏问题的</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">"scroll"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">window</span>.scrollY)</span><br><span class="line">  <span class="keyword">let</span> start = performance.now()</span><br><span class="line">  <span class="comment">// 模拟耗时任务</span></span><br><span class="line">  <span class="keyword">while</span>( performance.now() - start &lt;<span class="number">100</span>)&#123;&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>但是 Firefox 做了滚动优化，且不能禁用</p>
<p>导致 scroll 回调会在滚屏后执行，和上面输入事件效果一致，于是就出现了白屏</p>
<h3 id="代码控制"><a href="#代码控制" class="headerlink" title="代码控制"></a>代码控制</h3><p>通过 <code>dom.scrollTop=xxx</code> 进行自动滚动</p>
<p>一般是用来回滚列表显示某一项的</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">"scroll"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">window</span>.scrollY)</span><br><span class="line">  <span class="keyword">let</span> start = performance.now()</span><br><span class="line">  <span class="comment">// 模拟耗时任务</span></span><br><span class="line">  <span class="keyword">while</span>( performance.now() - start &lt;<span class="number">1000</span>)&#123;&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.scrollingElement.scrollTop=<span class="number">100</span></span><br></pre></td></tr></table></figure>

<p>发现 chrome 和 Firefox 此时的执行效果都一样，都是先执行 scroll 回调再滚动文档，没有什么异步滚动优化了。</p>
<p>这种情况下都不会出现白屏</p>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>可以看到，chrome 的话只有输入事件可能导致白屏，且可以通过禁用滚动优化来减缓</p>
<p>而 Firefox 在输入事件和拖动滚动条的情况都会出现白屏，且基本不能解决</p>
<p>因此，我们只能提高 scroll 回调事件的执行效率，来减缓白屏的时长</p>
<p>目前有两个方向</p>
<ol>
<li>算法优化</li>
<li>占位填充，通过防抖等滚动结束再计算</li>
</ol>
<h3 id="算法优化"><a href="#算法优化" class="headerlink" title="算法优化"></a>算法优化</h3><p>具体可以参考我写的 <a href="https://juejin.im/post/5dea86f7f265da33a8758820" target="_blank" rel="noopener">前端长列表原理及优化</a> 一文</p>
<p>有两种策略：一种是可变滚动条总高度采用树状数组优化；一种是固定滚动条高度，通过定位项等几何关系算出</p>
<h3 id="预填充-防抖"><a href="#预填充-防抖" class="headerlink" title="预填充+防抖"></a>预填充+防抖</h3><p>在 scroll 回调中先做填充，并对计算具体列表操作做防抖</p>
<p>效果上可能不太好，比较适合列表项带网络请求的情况，可以减少无效的网络请求</p>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>因为很多都是浏览器自身的优化，不在规范范围内，本文较多结论是通过拓展阅读和实验结果得出，不保证正确。</p>
<p>欢迎指正~</p>
<h2 id="2020-02-12-补充"><a href="#2020-02-12-补充" class="headerlink" title="2020/02/12 补充"></a>2020/02/12 补充</h2><p>scroll 回调的执行不是在下一轮事件循环中执行的，而是在上一轮的 UI Render 中执行的</p>
<h2 id="拓展阅读"><a href="#拓展阅读" class="headerlink" title="拓展阅读"></a>拓展阅读</h2><ol>
<li><a href="https://hacks.mozilla.org/2016/02/smoother-scrolling-in-firefox-46-with-apz/" target="_blank" rel="noopener">https://hacks.mozilla.org/2016/02/smoother-scrolling-in-firefox-46-with-apz/</a></li>
<li><a href="https://developers.google.com/web/updates/2018/09/inside-browser-part4" target="_blank" rel="noopener">https://developers.google.com/web/updates/2018/09/inside-browser-part4</a></li>
</ol>
]]></content>
      <categories>
        <category>大前端</category>
      </categories>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>为什么不用rAF进行滚动节流</title>
    <url>/2020/01/07/2020/%E4%B8%BA%E4%BB%80%E4%B9%88%E4%B8%8D%E7%94%A8rAF%E8%BF%9B%E8%A1%8C%E6%BB%9A%E5%8A%A8%E8%8A%82%E6%B5%81/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>之前写了一篇长列表实现的分享 – <a href="https://juejin.im/post/5dea86f7f265da33a8758820" target="_blank" rel="noopener">「前端长列表」开源库解析及最佳实践</a></p>
<p>然后面试被问到的最多的问题就是：有没有做节流</p>
<p>当时的回答是没有，但是又说不出一个系统的回答</p>
<p>本文就来说说为什么长列表不需要做节流，以及什么情况下滚动需要做节流</p>
<a id="more"></a>

<h2 id="背景知识之事件循环"><a href="#背景知识之事件循环" class="headerlink" title="背景知识之事件循环"></a>背景知识之事件循环</h2><p>详见<a href="https://html.spec.whatwg.org/multipage/webappapis.html#event-loops" target="_blank" rel="noopener">HTML规范</a></p>
<p>这里只挑与本文相关的讲</p>
<p>在事件循环中定义了很多任务源，比如鼠标键盘等输入操作的用户交互任务源</p>
<p>一次点击操作，其实包含多个输入操作（mousedown,mouseup,click），都添加到相同的任务源队列中，进而产生多轮的事件循环，其表现就是执行相关元素的事件回调（宏任务）</p>
<p>宏任务执行后，后面就是微任务队列和更新渲染阶段</p>
<p>每轮事件循环可能是非常快的，每秒执行事件循环的次数可能大于60次</p>
<p>受硬件刷新率影响，我们只要保证 fps 达到最大硬件刷新率(比如60)即可，因此不需要每轮事件循环都更新渲染</p>
<h2 id="输入事件与滚动事件的执行时机"><a href="#输入事件与滚动事件的执行时机" class="headerlink" title="输入事件与滚动事件的执行时机"></a>输入事件与滚动事件的执行时机</h2><p>对于输入事件，其执行时机为每轮事件循环的任务执行阶段，这个事件是不受刷新率影响的，每秒的执行次数可能多于60次</p>
<p>为什么谈这个呢，因为这个与滚动事件(scroll)回调的执行时机不一致</p>
<p>按照 HTML 规范，滚动事件回调在 UI Render 阶段的某个步骤中进行，而不是单独的一个任务源</p>
<p>也就是说，滚动事件回调受渲染时机影响，仅执行更新渲染时才执行该回调。</p>
<p>换句话说，该事件自带节流。</p>
<p>举个例子验证下输入事件和更新渲染的执行时机</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">"mousemove"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> start = performance.now()</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"mousemove:"</span>,start)</span><br><span class="line">  requestAnimationFrame(<span class="function"><span class="keyword">function</span>(<span class="params">t</span>)</span>&#123;<span class="built_in">console</span>.log(<span class="string">"ui render:"</span>,start,t)&#125;)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 结果就是可能输出几轮 mousemove 然后执行一次 ui render -- 清空 rAF 回调队列(输出多次 ui render)</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">mousemove: 4091.025000088848</span></span><br><span class="line"><span class="comment">ui render: 4091.025000088848 4077.594</span></span><br><span class="line"><span class="comment">mousemove: 4098.845000029542</span></span><br><span class="line"><span class="comment">ui render: 4098.845000029542 4094.278</span></span><br><span class="line"><span class="comment">mousemove: 4110.160000040196</span></span><br><span class="line"><span class="comment">mousemove: 4115.5349999899045</span></span><br><span class="line"><span class="comment">ui render: 4110.160000040196 4110.962</span></span><br><span class="line"><span class="comment">ui render: 4115.5349999899045 4110.962</span></span><br><span class="line"><span class="comment">mousemove: 4123.810000019148</span></span><br><span class="line"><span class="comment">mousemove: 4130.160000058822</span></span><br><span class="line"><span class="comment">ui render: 4123.810000019148 4127.719</span></span><br><span class="line"><span class="comment">ui render: 4130.160000058822 4127.719</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<p>说明更新渲染有一定的间隔，至少是 1/60 的间隔，而输入任务没有此限制</p>
<p>所以，以下代码是没有效果的，因为该回调已经自带节流了</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">"scroll"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">  requestAnimationFrame(<span class="function"><span class="keyword">function</span>(<span class="params">t</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//执行scroll具体逻辑</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="什么时候滚动需要做节流"><a href="#什么时候滚动需要做节流" class="headerlink" title="什么时候滚动需要做节流"></a>什么时候滚动需要做节流</h2><p>利用节流可以减少回调的执行次数，使得固定时间周期内只执行一次</p>
<p>刚才提到，滚动事件自带节流，节流的时间周期是与渲染时机相关</p>
<p>判断是否需要额外的节流的关键是：当前的节流规则，是否大部分回调的执行都能让用户受益</p>
<p>如果是动画效果，实时绘制的界面等，则不需要额外的节流了。</p>
<p>以长列表为例，每次执行滚动回调，会计算新的渲染列表项及滚动偏移位置。如果应用更大时间周期的节流，会出现某一帧出现滚动但界面没有更新的情况，让用户感觉产生卡顿。</p>
<p>而其他比较复杂的业务逻辑，不能在短时间内得到反馈的，则需要额外进行节流</p>
<p>以滚动懒加载图片为例</p>
<p>由于每秒的滚动回调的执行次数可能达到60次，而每次执行都需要去获取当前处于视区的占位图并发起图片请求</p>
<p>而这大部分回调的执行，用户是不能受益的，所以我们可以提高节流的时间周期，比如 500ms 这样</p>
<h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>滚动事件已自带节流，只有一些特定的业务逻辑才需要额外进行更高时间周期的节流</p>
<h2 id="拓展阅读"><a href="#拓展阅读" class="headerlink" title="拓展阅读"></a>拓展阅读</h2><ol>
<li><a href="https://stackoverflow.com/questions/41740082/scroll-events-requestanimationframe-vs-requestidlecallback-vs-passive-event-lis" target="_blank" rel="noopener">scroll events: requestAnimationFrame VS requestIdleCallback VS passive event listeners</a></li>
</ol>
]]></content>
      <categories>
        <category>大前端</category>
      </categories>
      <tags>
        <tag>长列表</tag>
      </tags>
  </entry>
  <entry>
    <title>HTTP状态码</title>
    <url>/2020/01/02/Web%E6%8A%80%E6%9C%AF/HTTP%E7%8A%B6%E6%80%81%E7%A0%81/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>仅记录一些可能误用的状态码</p>
<a id="more"></a>

<h2 id="3xx"><a href="#3xx" class="headerlink" title="3xx"></a>3xx</h2><h3 id="301"><a href="#301" class="headerlink" title="301"></a>301</h3><p>永久重定向（下次再访问原链接，浏览器会直接访问重定向后的链接）</p>
<p>一般用到的场景就是</p>
<ul>
<li>原域名不维护了</li>
<li>http 转 https</li>
</ul>
<h3 id="302-303-307"><a href="#302-303-307" class="headerlink" title="302 303 307"></a>302 303 307</h3><p>临时重定向，大部分重定向都采用的临时的</p>
<p>http1.0 中只有 302</p>
<p>在 http1.1 中细分为 303 307 </p>
<p>浏览器会根据状态码做不同的操作</p>
<p>原请求是 get/head 请求的话没有区别</p>
<p>非 get/head 请求的话就会有区别</p>
<p>规范要求 302 重定向时请求方法和请求主体不变，但是不是所有浏览器都遵守，所以这是不可预测的</p>
<p>303 明确说明非 get/head 请求会转为 get 请求</p>
<blockquote>
<p>通常作为 PUT 或 POST 操作的返回结果</p>
</blockquote>
<p>307 明确说明请求方法和请求主体不变</p>
<p>有些文章说 get 请求不会自动带上请求参数，其实是 location 响应码控制的，服务端是可以控制的，控制不了的只有 request body</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status</a></p>
<p><a href="https://www.56way.com/p/98.html" target="_blank" rel="noopener">https://www.56way.com/p/98.html</a></p>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/307" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/307</a></p>
]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>HTTP</tag>
      </tags>
  </entry>
  <entry>
    <title>浅谈Angular的脏检查机制</title>
    <url>/2019/12/31/2019Q4/%E6%B5%85%E8%B0%88Angular%E7%9A%84%E8%84%8F%E6%A3%80%E6%9F%A5%E6%9C%BA%E5%88%B6/</url>
    <content><![CDATA[<p>没有学过 Angular，只是和朋友闲聊的时候谈到这个，本篇作为一个记录，谈谈我理解的脏检查</p>
<a id="more"></a>

<p>angular 不会去监听数据变动，而是当事件触发（模板绑定/主动触发）时，更新数据，最后会执行一个重渲染的操作</p>
<p>所以这一套机制很简单，触发了会改变应用程序状态的函数，会触发模板重渲染，一般有这几种活动：</p>
<ol>
<li>事件：click,change</li>
<li>xhr:远程数据获取</li>
<li>定时器</li>
</ol>
<p>当然 由于没学过，不知道理解对不对</p>
<hr>
<p>200318 更新：</p>
<p>上述几种行为，都是一个宏任务，angular 对这些 api 进行了封装。</p>
<p>在这个宏任务结束之后，会执行数据的批量更新，并重新编译模板生成虚拟 dom 树，后面的 diff 就和 react 类似了</p>
<p>后面的步骤，可能是像 vue/react 那样在微任务中进行，也可能就是在宏任务末尾进行。具体方案没有研究</p>
]]></content>
      <categories>
        <category>大前端</category>
      </categories>
      <tags>
        <tag>Angular</tag>
      </tags>
  </entry>
  <entry>
    <title>重学 JS 原型链</title>
    <url>/2019/12/31/2019Q4/%E9%87%8D%E5%AD%A6%20JS%20%E5%8E%9F%E5%9E%8B%E9%93%BE/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>不考虑箭头函数等特异函数，本文所说的函数都是指的构造函数</p>
<p>之前对原型，原型链，构造函数等都是零零散散的知识碎片，这次写个文章记录一下</p>
<a id="more"></a>

<h2 id="原型对象-prototype"><a href="#原型对象-prototype" class="headerlink" title="原型对象 prototype"></a>原型对象 prototype</h2><p>创建一个函数 F 时，会自动为该函数 F 创建一个 prototype 属性，指向一个原型对象 F.prototype</p>
<p>默认情况下，函数 F 的原型对象 F.prototype 会自动获得一个 constructor （构造函数）属性，并指向 F </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">F.prototype.constructor === F <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p>而原型对象也是对象，可以对其添加属性和方法</p>
<h2 id="proto"><a href="#proto" class="headerlink" title="__proto__"></a>__proto__</h2><p>每个对象都有一个 <code>__proto__</code> 属性，<strong>指向生成该对象的构造函数的原型对象</strong></p>
<p>如 F.prototype 原型对象是 Object 的一个实例， <code>__proto__</code> 指向 <code>Object.prototype</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">F.prototype.__proto__ === <span class="built_in">Object</span>.prototype <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p>Object.prototype 这个原型对象也是对象，那么其 <code>__proto__</code> 指向哪？其实指向的是 null</p>
<p>Object.prototype 为万物起源</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Object</span>.prototype.__proto__ === <span class="literal">null</span> <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p>当实例化 F 得到对象 f 时,f 的 <code>__proto__</code> 属性指向 F 的原型对象 F.prototype</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> f = <span class="keyword">new</span> F()</span><br><span class="line">f.__proto__ === F.prototype <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p>这个指向再创建后就确定了，后续修改 F 的原型对象指向也没有影响</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">F</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line"><span class="keyword">const</span> f1 = <span class="keyword">new</span> F</span><br><span class="line">F.prototype = &#123;&#125;</span><br><span class="line"><span class="keyword">const</span> f2 = <span class="keyword">new</span> F</span><br><span class="line"><span class="comment">// 指向不一致</span></span><br><span class="line">f1.__proto__ !== f2.__proto__ <span class="comment">// true</span></span><br><span class="line"><span class="comment">// 新的原型对象 &#123;&#125; 没有构造函数，可以为其赋值</span></span><br><span class="line">F.prototype.constructor !== F <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
<h2 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h2><p>上述的关系，通过原型串接起来，可以得到下面这个图</p>
<p><img src="https://upload-images.jianshu.io/upload_images/9277731-efe713a1eb340c2d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p>
<p>如果问什么是原型，就这么回答：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">每个构造函数有个原型对象</span><br><span class="line">每个实例对象有个 __proto__ 属性，指向该实例的构造函数的原型对象</span><br></pre></td></tr></table></figure>

<p>对对象属性或方法的访问，采用的是原型链搜索，先搜索对象实例 f 自身，没找到的话，搜索原型对象，再没找到，搜素该原型对象的原型对象，直到不存在原型对象</p>
<p>比如访问 <code>f.name</code> 将按以下顺序搜索值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">f.name</span><br><span class="line">f.__proto__.name / F.prototype.name</span><br><span class="line">f.__proto__.__proto__.name / <span class="built_in">Object</span>.prototype.name</span><br></pre></td></tr></table></figure>

<p>判断实例 f 中是否含有 name 属性，可以通过以下方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">f.hasOwnProperty(<span class="string">"name"</span>)</span><br></pre></td></tr></table></figure>
<p>判断原型中是否含有 name 属性，可以通过以下方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">!f.hasOwnProperty(<span class="string">"name"</span>) &amp;&amp; <span class="string">"name"</span> <span class="keyword">in</span> f</span><br></pre></td></tr></table></figure>

<h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><h3 id="class"><a href="#class" class="headerlink" title="class"></a>class</h3><p>在 es6 中，我们是这样做的</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Engineer</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(name)&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name</span><br><span class="line">    <span class="keyword">this</span>.skills = [<span class="string">'linux'</span>,<span class="string">'network'</span>,<span class="string">'os'</span>]</span><br><span class="line">  &#125;</span><br><span class="line">  coding()&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span> 正在编码`</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FeEngineer</span> <span class="keyword">extends</span> <span class="title">Engineer</span></span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(name)&#123;</span><br><span class="line">    <span class="keyword">super</span>(name)</span><br><span class="line">    <span class="keyword">this</span>.skills.push(<span class="string">'web'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  croping()&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span> 正在切图`</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>每个 Engineer 都有一套基础技能 skills 和一个编码方法 coding</p>
<p>FeEngineer 继承了 Engineer 的基础技能和编码方法，并添加了自己的技能</p>
<p>实例化一个 FeEngineer 看下效果</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fe = <span class="keyword">new</span> FeEngineer(<span class="string">"gahing"</span>)</span><br><span class="line"><span class="built_in">console</span>.log(fe)</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">  name: "gahing",</span></span><br><span class="line"><span class="comment">  skills: ["linux", "network", "os", "web"],</span></span><br><span class="line"><span class="comment">  __proto__: Engineer &#123;</span></span><br><span class="line"><span class="comment">    constructor: class FeEngineer,</span></span><br><span class="line"><span class="comment">    croping: ƒ croping(),</span></span><br><span class="line"><span class="comment">    __proto__: Object &#123;</span></span><br><span class="line"><span class="comment">      coding: ƒ coding()</span></span><br><span class="line"><span class="comment">      constructor: class Engineer</span></span><br><span class="line"><span class="comment">      __proto__: Object</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">  &#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">Engineer.prototype.constructor === Engineer <span class="comment">// true</span></span><br><span class="line">fe.__proto__ === FeEngineer.prototype <span class="comment">// true</span></span><br></pre></td></tr></table></figure>



<p>然后说说实例化 FeEngineer 执行的过程</p>
<p>子类中的构造函数必须调用 super ，原因在于 js 是这样处理的：</p>
<ul>
<li>实例化一个普通的构造函数时，会创建一个空对象作为 this ，然后继续运行</li>
<li>而实例化一个派生（子类）的构造函数时，需要利用父构造函数来完成上面这件事 – 执行 <code>super(...)</code>。于是，父构造函数创建了一个空对象作为 this，然后继续运行父构造函数的代码。而后利用该 this 对象继续执行子类的构造函数中的代码</li>
</ul>
<p>注意创建 this 的位置，所以下面代码是会报错的。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Super</span></span>&#123;&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sub</span> <span class="keyword">extends</span> <span class="title">Super</span></span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>()&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = <span class="string">"1"</span></span><br><span class="line">    <span class="keyword">super</span>()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">new</span> Sub() <span class="comment">// Uncaught ReferenceError: Must call super constructor in derived class before accessing 'this' or returning from derived constructor</span></span><br></pre></td></tr></table></figure>
<p>提示 this 的访问必须在执行 super 之后，所以和等等要谈到的<em>借用构造函数法</em>还是有点不一样的，这里先简单的上个组合继承的代码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Super</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.age = <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Sub</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = <span class="string">"test"</span></span><br><span class="line">  Super.call(<span class="keyword">this</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">new</span> Sub() <span class="comment">// &#123;age:1,name:"test"&#125;</span></span><br></pre></td></tr></table></figure>



<p>下面我们看看用 es5 怎么实现上面的效果</p>
<h3 id="原型链继承法"><a href="#原型链继承法" class="headerlink" title="原型链继承法"></a>原型链继承法</h3><p>创建构造函数时，原型对象会自动创建，也可以将其指向其他对象，实现原型链继承</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Engineer</span> (<span class="params">name</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name</span><br><span class="line">  <span class="keyword">this</span>.skills = [<span class="string">'linux'</span>,<span class="string">'network'</span>,<span class="string">'os'</span>]</span><br><span class="line">&#125;</span><br><span class="line">Engineer.prototype.coding = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span> 正在编码`</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">FeEngineer</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> engineer = <span class="keyword">new</span> Engineer(<span class="string">"gahing"</span>)</span><br><span class="line">FeEngineer.prototype = engineer</span><br><span class="line">FeEngineer.prototype.croping = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span> 正在切图`</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样实例化 FeEngineer 后，该对象就能访问父类对象的所有属性和方法了</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fe = <span class="keyword">new</span> FeEngineer(<span class="string">'gahing'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(fe)</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">FeEngineer &#123;</span></span><br><span class="line"><span class="comment">  __proto__: Engineer</span></span><br><span class="line"><span class="comment">    croping: ƒ ()</span></span><br><span class="line"><span class="comment">    name: "gahing"</span></span><br><span class="line"><span class="comment">    skills: (3) ["linux", "network", "os"]</span></span><br><span class="line"><span class="comment">    __proto__: Object</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<p>但是看到没有， <code>__proto__</code> 把 fe 实例和原型对象 engineer 连接起来了，</p>
<p>修改 fe 的属性和方法可能会改动到 engineer</p>
<p>如上面的例子，本来 engineer 是没有 croping 方法的，后面却因为要给 fe 添加原型方法，导致 engineer 也有这个方法</p>
<h3 id="借用构造函数法"><a href="#借用构造函数法" class="headerlink" title="借用构造函数法"></a>借用构造函数法</h3><p>由于不用原型继承，需要把父类的原型方法转到实例方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Engineer</span> (<span class="params">name</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name</span><br><span class="line">  <span class="keyword">this</span>.skills = [<span class="string">'linux'</span>,<span class="string">'network'</span>,<span class="string">'os'</span>]</span><br><span class="line">  <span class="keyword">this</span>.coding = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span> 正在编码`</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">FeEngineer</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">  Engineer.call(<span class="keyword">this</span>,name)</span><br><span class="line">  <span class="keyword">this</span>.skills.push(<span class="string">'web'</span>)</span><br><span class="line">&#125;</span><br><span class="line">FeEngineer.prototype.croping = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span> 正在切图`</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样实例化 FeEngineer 后，该对象就拥有了父类对象的所有属性和方法了</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fe = <span class="keyword">new</span> FeEngineer(<span class="string">'gahing'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(fe)</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">FeEngineer &#123;</span></span><br><span class="line"><span class="comment">  coding: ƒ ()</span></span><br><span class="line"><span class="comment">  name: "gahing"</span></span><br><span class="line"><span class="comment">  skills: (4) ["linux", "network", "os", "web"]</span></span><br><span class="line"><span class="comment">  __proto__:</span></span><br><span class="line"><span class="comment">    croping: ƒ ()</span></span><br><span class="line"><span class="comment">    constructor: ƒ FeEngineer(name)</span></span><br><span class="line"><span class="comment">    __proto__: Object</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<p>但是这样会产生一个问题， FeEngineer 实例的 coding 方法和 Engineer 实例的 coding 方法不一样，并且每个 FeEngineer 实例的 coding 方法也不一样</p>
<p>因为该方法是每次实例化的时候生成的，所以也非常占内存</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> engineer = <span class="keyword">new</span> Engineer()</span><br><span class="line"><span class="keyword">var</span> fe = <span class="keyword">new</span> FeEngineer()</span><br><span class="line">fe.coding === engineer.coding <span class="comment">//false</span></span><br></pre></td></tr></table></figure>



<h3 id="组合继承法"><a href="#组合继承法" class="headerlink" title="组合继承法"></a>组合继承法</h3><p>借助<em>原型链继承法<em>实现原型方法的继承，借助</em>借用构造函数法</em> 实现父类实例属性和方法的继承</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Engineer</span> (<span class="params">name</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name</span><br><span class="line">  <span class="keyword">this</span>.skills = [<span class="string">'linux'</span>,<span class="string">'network'</span>,<span class="string">'os'</span>]</span><br><span class="line">&#125;</span><br><span class="line">Engineer.prototype.coding = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span> 正在编码`</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">FeEngineer</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">  Engineer.call(<span class="keyword">this</span>,name)</span><br><span class="line">  <span class="keyword">this</span>.skills.push(<span class="string">'web'</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> engineer = <span class="keyword">new</span> Engineer(<span class="string">"gahing"</span>)</span><br><span class="line">FeEngineer.prototype = engineer</span><br><span class="line">FeEngineer.prototype.croping = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span> 正在切图`</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样实例化 FeEngineer 后，该对象就拥有了父类对象的所有属性和方法了</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fe = <span class="keyword">new</span> FeEngineer(<span class="string">'gahing'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(fe)</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">FeEngineer &#123;</span></span><br><span class="line"><span class="comment">  name: "gahing"</span></span><br><span class="line"><span class="comment">  skills: (4) ["linux", "network", "os", "web"]</span></span><br><span class="line"><span class="comment">  __proto__: Engineer</span></span><br><span class="line"><span class="comment">    croping: ƒ ()</span></span><br><span class="line"><span class="comment">    name: "gahing"</span></span><br><span class="line"><span class="comment">    skills: (3) ["linux", "network", "os"]</span></span><br><span class="line"><span class="comment">    __proto__: Object</span></span><br><span class="line"><span class="comment">      coding: ƒ ()</span></span><br><span class="line"><span class="comment">      constructor: ƒ Engineer(name)</span></span><br><span class="line"><span class="comment">      __proto__: Object</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<p>父类实例属性和方法被 fe 继承了，且父类的的方法还是挂在父类的原型对象上</p>
<p>但是由于父类实例 engineer 被挂载到 fe 的原型对象上，修改 fe 的属性和方法可能会改动到 engineer</p>
<p>同时，父类构造函数被调用了两次，fe 的原型对象 engineer 多了一些不必要的实例属性和方法</p>
<h3 id="寄生组合式继承"><a href="#寄生组合式继承" class="headerlink" title="寄生组合式继承"></a>寄生组合式继承</h3><p>其实只要父类构造函数 Engineer 中的东西不被挂载到子类实例对象 fe 的原型对象上，就可以实现我们要的效果</p>
<p>再上一次 es6 执行后的效果</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">  name: "gahing",</span></span><br><span class="line"><span class="comment">  skills: ["linux", "network", "os", "web"],</span></span><br><span class="line"><span class="comment">  __proto__: Engineer &#123;</span></span><br><span class="line"><span class="comment">    constructor: class FeEngineer,</span></span><br><span class="line"><span class="comment">    croping: ƒ croping(),</span></span><br><span class="line"><span class="comment">    __proto__: Object &#123;</span></span><br><span class="line"><span class="comment">      coding: ƒ coding()</span></span><br><span class="line"><span class="comment">      constructor: class Engineer</span></span><br><span class="line"><span class="comment">      __proto__: Object</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">  &#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<p>思路就是将子类实例对象 fe 的原型对象指向一个空对象，该空对象的构造函数的原型对象指向父类构造函数 Engineer 的原型对象</p>
<p>然后调整下组合继承的代码，变成如下</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建 Engineer 的一个副本，区别在于没有任何实例属性</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Temp</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">Temp.prototype = Engineer.prototype</span><br><span class="line"><span class="keyword">const</span> temp = <span class="keyword">new</span> Temp() </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Engineer</span> (<span class="params">name</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name</span><br><span class="line">  <span class="keyword">this</span>.skills = [<span class="string">'linux'</span>,<span class="string">'network'</span>,<span class="string">'os'</span>]</span><br><span class="line">&#125;</span><br><span class="line">Engineer.prototype.coding = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span> 正在编码`</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">FeEngineer</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">  Engineer.call(<span class="keyword">this</span>,name)</span><br><span class="line">  <span class="keyword">this</span>.skills.push(<span class="string">'web'</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 指向 temp</span></span><br><span class="line">FeEngineer.prototype = temp</span><br><span class="line">FeEngineer.prototype.croping = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span> 正在切图`</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>实例化 FeEngineer 看下效果</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fe = <span class="keyword">new</span> FeEngineer(<span class="string">'gahing'</span>)</span><br><span class="line">fe.__proto__.constructor === FeEngineer <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(fe)</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">FeEngineer &#123;</span></span><br><span class="line"><span class="comment">  name: "gahing"</span></span><br><span class="line"><span class="comment">  skills: (4) ["linux", "network", "os", "web"]</span></span><br><span class="line"><span class="comment">  __proto__: Engineer &#123;</span></span><br><span class="line"><span class="comment">    croping: ƒ ()</span></span><br><span class="line"><span class="comment">    __proto__: &#123;</span></span><br><span class="line"><span class="comment">      coding: ƒ ()</span></span><br><span class="line"><span class="comment">      constructor: ƒ Engineer(name)</span></span><br><span class="line"><span class="comment">      __proto__: Object</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">  &#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<p>由于实例化 Temp 时不会产生多余的属性和方法，因此这种做法基本能达到效果</p>
<p>剩下的就是一些构造器方法的调整</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// fe 的原型对象的构造器方法应该指向 FeEngineer ，并且是不可修改的</span></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(temp,<span class="string">'constructor'</span>,&#123;</span><br><span class="line">  enumerable: <span class="literal">false</span>,</span><br><span class="line">  value: FeEngineer</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>综合一下，得到如下的寄生组合式继承的代码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Temp</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">Temp.prototype = Engineer.prototype</span><br><span class="line"><span class="keyword">const</span> temp = <span class="keyword">new</span> Temp() </span><br><span class="line"><span class="built_in">Object</span>.defineProperty(temp,<span class="string">'constructor'</span>,&#123;</span><br><span class="line">  enumerable: <span class="literal">false</span>,</span><br><span class="line">  value: FeEngineer</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Engineer</span> (<span class="params">name</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name</span><br><span class="line">  <span class="keyword">this</span>.skills = [<span class="string">'linux'</span>,<span class="string">'network'</span>,<span class="string">'os'</span>]</span><br><span class="line">&#125;</span><br><span class="line">Engineer.prototype.coding = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span> 正在编码`</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">FeEngineer</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">  Engineer.call(<span class="keyword">this</span>,name)</span><br><span class="line">  <span class="keyword">this</span>.skills.push(<span class="string">'web'</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 指向 temp</span></span><br><span class="line">FeEngineer.prototype = temp</span><br><span class="line">FeEngineer.prototype.croping = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span> 正在切图`</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>再看下效果</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fe = <span class="keyword">new</span> FeEngineer(<span class="string">'gahing'</span>)</span><br><span class="line">fe.__proto__.constructor === FeEngineer <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(fe)</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">FeEngineer </span></span><br><span class="line"><span class="comment">  name: "gahing"</span></span><br><span class="line"><span class="comment">  skills: (4) ["linux", "network", "os", "web"]</span></span><br><span class="line"><span class="comment">  __proto__: Engineer</span></span><br><span class="line"><span class="comment">    croping: ƒ ()</span></span><br><span class="line"><span class="comment">    constructor: ƒ FeEngineer(name)</span></span><br><span class="line"><span class="comment">    __proto__:</span></span><br><span class="line"><span class="comment">      coding: ƒ ()</span></span><br><span class="line"><span class="comment">      constructor: ƒ Engineer(name)</span></span><br><span class="line"><span class="comment">      __proto__: Object</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<p>最后，我们希望把 Temp 相关的代码做个封装,实现 SubClass 和 SuperClass 之间的寄生组合式继承</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createTemp</span>(<span class="params">SuperClass</span>)</span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">Temp</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">  Temp.prototype = SuperClass.prototype</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> Temp() </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createTemp2</span>(<span class="params">SuperClass</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> obj = &#123;&#125;</span><br><span class="line">  obj.__proto__ = SuperClass.prototype</span><br><span class="line">  <span class="keyword">return</span> obj</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">inheritPrototype</span> (<span class="params">SubClass, SuperClass</span>)</span>&#123;</span><br><span class="line">  <span class="comment">// 也可以直接用 Object.create(SuperClass.prototype)</span></span><br><span class="line">  <span class="comment">// 即 SuperClass.prototype 指向创建 temp 的构造函数的原型对象</span></span><br><span class="line">  <span class="comment">// temp.__proto__ === SuperClass.prototype</span></span><br><span class="line">  <span class="comment">// 这里也可以采用 createTemp2</span></span><br><span class="line">  <span class="keyword">const</span> temp = createTemp(SuperClass)</span><br><span class="line">  <span class="built_in">Object</span>.defineProperty(temp,<span class="string">'constructor'</span>,&#123;</span><br><span class="line">    enumerable: <span class="literal">false</span>,</span><br><span class="line">    value: SubClass</span><br><span class="line">  &#125;)</span><br><span class="line">  SubClass.prototype = temp</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>所以上面的代码又可以写成</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Engineer</span> (<span class="params">name</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name</span><br><span class="line">  <span class="keyword">this</span>.skills = [<span class="string">'linux'</span>,<span class="string">'network'</span>,<span class="string">'os'</span>]</span><br><span class="line">&#125;</span><br><span class="line">Engineer.prototype.coding = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span> 正在编码`</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">FeEngineer</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">  Engineer.call(<span class="keyword">this</span>,name)</span><br><span class="line">  <span class="keyword">this</span>.skills.push(<span class="string">'web'</span>)</span><br><span class="line">&#125;</span><br><span class="line">inheritPrototype(FeEngineer,Engineer)</span><br><span class="line">FeEngineer.prototype.croping = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span> 正在切图`</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol>
<li><a href="https://segmentfault.com/a/1190000015565616" target="_blank" rel="noopener">ES6 Class 继承与 super</a></li>
<li><a href="https://chuchencheng.com/2019/05/27/%E5%9B%9E%E5%BF%86%E6%9D%80%EF%BC%9AJavaScript%E7%9A%84%E7%BB%A7%E6%89%BF/" target="_blank" rel="noopener">回忆杀：JavaScript的继承</a></li>
</ol>
]]></content>
      <categories>
        <category>大前端</category>
      </categories>
      <tags>
        <tag>ECMAScript</tag>
      </tags>
  </entry>
  <entry>
    <title>浏览器缓存</title>
    <url>/2019/12/29/Web%E6%8A%80%E6%9C%AF/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%BC%93%E5%AD%98/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Web 缓存分为浏览器缓存和服务端缓存，本文主要描述的是浏览器缓存中的 HTTP 缓存</p>
<a id="more"></a>

<h1 id="查看缓存文件"><a href="#查看缓存文件" class="headerlink" title="查看缓存文件"></a>查看缓存文件</h1><p>chrome 可以通过 <code>chrome://view-http-cache</code> 查看浏览器的缓存文件</p>
<blockquote>
<p>chrome 66 后就用不了了</p>
</blockquote>
<p>pc 上的实际存储位置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">\User\&#123;user&#125;\AppData\Local\google\Chrome\User Data\Default\Cache\index 的文件内容</span><br></pre></td></tr></table></figure>

<p>火狐可以通过 <code>about:cache</code> 查看缓存文件列表</p>
<p>进入缓存文件详情页，可以看到缓存文件内容由三部分组成</p>
<ul>
<li>资源请求地址</li>
<li>响应头</li>
<li>原文件的二进制内容</li>
</ul>
<p>而实际的缓存文件也是包含这些部分的，我们可以通过 ChromeCacheView 工具查看内部内容</p>
<p>通过下面几个问题来学习 pc 上浏览器缓存如何设计的</p>
<ul>
<li><p>是不是应该有一个列表文件记录所有缓存文件的基本信息？</p>
</li>
<li><p>不能直接拿到缓存源文件，每次命中缓存都需要解码文件？</p>
</li>
<li><p>从如果删了缓存文件，是删了什么东西？列表文件内容会相应的修改不？</p>
</li>
<li><p>不会出现列表文件内容还在但是对应缓存原文件被删除的情况？</p>
</li>
</ul>
<p>TODO</p>
<h1 id="强缓存"><a href="#强缓存" class="headerlink" title="强缓存"></a>强缓存</h1><h2 id="Cache-Control-响应头"><a href="#Cache-Control-响应头" class="headerlink" title="Cache-Control 响应头"></a>Cache-Control 响应头</h2><p>优先级比 <code>Expires</code> 高，且用的是相对时间，不需要担心客户端与服务端时间不一致带来的缓存失效问题</p>
<h3 id="max-age"><a href="#max-age" class="headerlink" title="max-age"></a>max-age</h3><p>指定缓存的有效期</p>
<h3 id="s-maxage"><a href="#s-maxage" class="headerlink" title="s-maxage"></a>s-maxage</h3><p>指定代理缓存（如cdn缓存）的有效期，优先级比 max-age 高</p>
<h3 id="no-cache"><a href="#no-cache" class="headerlink" title="no-cache"></a>no-cache</h3><p>不使用本地缓存和代理缓存</p>
<h3 id="no-store"><a href="#no-store" class="headerlink" title="no-store"></a>no-store</h3><p>禁用缓存</p>
<h3 id="public"><a href="#public" class="headerlink" title="public"></a>public</h3><p>可以被所有用户缓存，包括终端用户以及 CDN 等中间代理服务器</p>
<p>默认值</p>
<h3 id="private"><a href="#private" class="headerlink" title="private"></a>private</h3><p>仅能被终端用户缓存</p>
<h2 id="Expires-响应头"><a href="#Expires-响应头" class="headerlink" title="Expires 响应头"></a>Expires 响应头</h2><p>表示资源过期时间，以服务端时间为准</p>
<h1 id="协商缓存"><a href="#协商缓存" class="headerlink" title="协商缓存"></a>协商缓存</h1><h2 id="Last-modified-响应头"><a href="#Last-modified-响应头" class="headerlink" title="Last-modified 响应头"></a>Last-modified 响应头</h2><p>表示服务端文件的最后修改时间</p>
<p>当缓存过期时，再次发起请求，会带个 <code>If-Modified-Since</code> 请求头，其值为之前返回的 <code>Last-modified</code> 响应头的值</p>
<p>服务端会去查询在该时间点后文件是否被修改，若被修改，返回新的资源, 200 响应以及 <code>Last-modified</code> 的新值；否则返回 304 响应，根据 Cache-Control 或 Expires 重新设置过期时间</p>
<h2 id="ETag-响应头"><a href="#ETag-响应头" class="headerlink" title="ETag 响应头"></a>ETag 响应头</h2><p>由于 <code>Last-modified</code> 只精确到秒，且如果内容没变但是最后修改时间变了，还是会当新资源请求</p>
<p>于是 http1.1 加了一个 <code>ETag</code> 响应头</p>
<p>其值为根据文件内容生成的 hash</p>
<p>当缓存过期时，再次发起请求，会带上 <code>If-None-Match</code> 请求头，其值为之前返回的 <code>ETag</code> 响应头的值</p>
<p>服务器会去该值和服务器文件的 hash 进行比对，若不同，返回新的资源和 200 响应以及 <code>ETag</code> 的新值；否则返回 304 响应，根据 Cache-Control 或 Expires 重新设置过期时间</p>
<p><strong>优先级比 <code>Last-modified</code> 高</strong></p>
<p>当两个同时存在时，先判断 ETag ，如果 hash 值没有变化，再去判断 <code>Last-modified</code> ，最终决定是否返回 304</p>
<h1 id="总流程"><a href="#总流程" class="headerlink" title="总流程"></a>总流程</h1><p>借用 [浅谈 Web 缓存] 中的图</p>
<p><img src="http://www.alloyteam.com/wp-content/uploads/2016/03/%E5%9B%BE%E7%89%8761.png" alt="alloyteam"></p>
<h1 id="用户行为"><a href="#用户行为" class="headerlink" title="用户行为"></a>用户行为</h1><table>
<thead>
<tr>
<th>用户操作</th>
<th>强缓存</th>
<th>协商缓存</th>
</tr>
</thead>
<tbody><tr>
<td>前进后退</td>
<td>有效</td>
<td>有效</td>
</tr>
<tr>
<td>地址栏回车</td>
<td>?</td>
<td>有效</td>
</tr>
<tr>
<td>按刷新按钮</td>
<td>无效</td>
<td>有效</td>
</tr>
<tr>
<td>F5</td>
<td>无效</td>
<td>有效</td>
</tr>
<tr>
<td>ctrl + F5</td>
<td>无效</td>
<td>无效</td>
</tr>
<tr>
<td>Disable cache</td>
<td>无效</td>
<td>无效</td>
</tr>
</tbody></table>
<p>前四种针对的是文档请求，后两者针对的是所有资源的请求</p>
<p>强缓存失效的原因在于浏览器会在请求中带上<code>cache-control: max-age=0</code></p>
<p>协商缓存失效的原因在于本该带上 <code>If-Modified-Since</code> 或 <code>If-None-Match</code> 请求头，但是浏览器没有带上，并带上以下两个请求头避免强缓存，因此会重新加载资源</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Cache-Control: no-cache</span><br><span class="line">Pragma: no-cache</span><br></pre></td></tr></table></figure>

<p>前进后退是浏览器直接拿缓存页面，即使强缓存已经过期，所以即使断网了，后退还是能访问原来页面文档，参考自：<a href="https://www.w3.org/Protocols/rfc2616/rfc2616-sec13.html#sec13.13" target="_blank" rel="noopener">https://www.w3.org/Protocols/rfc2616/rfc2616-sec13.html#sec13.13</a></p>
<blockquote>
<p>会发现此时网络请求头显示 Provisional headers are shown</p>
</blockquote>
<p>地址栏回车之所以不固定，在于当前文档链接与要回车的链接是否相同。如果相同，浏览器会认为这是打算 f5 刷新，强缓存无效，否则强缓存有效</p>
<p>最后两种的区别在于，前者会走内存缓存（相同请求命中内存缓存，不会再发一条请求），后者什么缓存都不走；</p>
<blockquote>
<p>放入内存缓存的是页面扫描加载的，脚步异步请求的不放内存中（没做完整的测试，不确定）</p>
</blockquote>
<h1 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h1><h2 id="请求头出现-Provisional-headers-are-shown-的原因"><a href="#请求头出现-Provisional-headers-are-shown-的原因" class="headerlink" title="请求头出现 Provisional headers are shown 的原因"></a>请求头出现 Provisional headers are shown 的原因</h2><ol>
<li>插件拦截</li>
<li>命中本地缓存</li>
<li>服务器超时</li>
<li><strong>跨域拦截</strong>，最经常出现的情况，非同源的资源请求都会显示这个</li>
</ol>
<h2 id="响应头未设置-cache-control-和-expires-还会命中强缓存么？"><a href="#响应头未设置-cache-control-和-expires-还会命中强缓存么？" class="headerlink" title="响应头未设置 cache-control 和 expires 还会命中强缓存么？"></a>响应头未设置 cache-control 和 expires 还会命中强缓存么？</h2><p>对于前进后退的场景来说，有没有这些响应头，都会命中强缓存</p>
<p>其他场景则不会命中</p>
<h2 id="如何设置才能不缓存资源"><a href="#如何设置才能不缓存资源" class="headerlink" title="如何设置才能不缓存资源"></a>如何设置才能不缓存资源</h2><h2 id="通过-Expires-判断缓存过期，而本地时间比服务器时间快的话，会出现什么问题？"><a href="#通过-Expires-判断缓存过期，而本地时间比服务器时间快的话，会出现什么问题？" class="headerlink" title="通过 Expires 判断缓存过期，而本地时间比服务器时间快的话，会出现什么问题？"></a>通过 Expires 判断缓存过期，而本地时间比服务器时间快的话，会出现什么问题？</h2><p>如果通过 Expires 判断缓存过期，而本地时间又比服务端快资源有效期以上，就会出现始终不能命中强缓存的情况</p>
<h1 id="浏览器缓存中的其他缓存"><a href="#浏览器缓存中的其他缓存" class="headerlink" title="浏览器缓存中的其他缓存"></a>浏览器缓存中的其他缓存</h1><p>读取某个 url 的资源，按照下面的过程 </p>
<p>（需要做个试验）</p>
<p>内存缓存</p>
<blockquote>
<p>preload 预加载的资源会存储在此处<br>当前页面已经加载过的资源会放在内存中，方便读取<br>但注意一点，如果资源设置了 no-store ，前面即使加载过这个资源，还是会继续加载（待确定）</p>
</blockquote>
<p>Service Worker 缓存</p>
<blockquote>
<p>有一套自己的缓存API，更加可控，不受浏览器影响</p>
</blockquote>
<p>HTTP 缓存</p>
<blockquote>
<p>上文提到的那个，根据请求响应等头部信息确定是否走缓存</p>
</blockquote>
<p>HTTP2 Push 缓存</p>
<blockquote>
<p>有一定的时效，chromium 中是五分钟<br>在命中缓存后，可能会在 HTTP 缓存中增加拷贝以及内存缓存增加引用</p>
</blockquote>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="http://www.alloyteam.com/2016/03/discussion-on-web-caching/" target="_blank" rel="noopener">浅谈 Web 缓存</a></li>
<li><a href="https://www.cnblogs.com/wonyun/p/5524617.html" target="_blank" rel="noopener">http协商缓存VS强缓存</a></li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Cache-Control" target="_blank" rel="noopener">Cache-Control</a></li>
<li><a href="https://juejin.im/post/5aa5ddd4f265da23906ba592" target="_blank" rel="noopener">【译】关于四种缓存的故事</a></li>
</ol>
]]></content>
      <categories>
        <category>大前端</category>
      </categories>
      <tags>
        <tag>缓存</tag>
      </tags>
  </entry>
  <entry>
    <title>从输入url后浏览器发生了什么</title>
    <url>/2019/12/14/2019Q4/HTML%E6%96%87%E6%A1%A3%E7%9A%84%E5%8A%A0%E8%BD%BD%E8%BF%87%E7%A8%8B/</url>
    <content><![CDATA[<h2 id="面试答题模板"><a href="#面试答题模板" class="headerlink" title="面试答题模板"></a>面试答题模板</h2><p>这里以 chrome 为例，在进程线程方面的描述不一定是准确的（毕竟没有看过源码）</p>
<p>首先分为浏览器进程和渲染进程</p>
<p>浏览器ui控件，网络以及存储等交给浏览器进程去做</p>
<p>代码执行，页面渲染都是通过渲染进程去做</p>
<a id="more"></a>

<p>浏览器进程的ui线程处理用户输入，可能会调用网络线程去提前做 dns 解析。</p>
<p>按回车后，先通过存储线程去查有没有缓存，或者是不是 301 重定向，之后网络线程发起 url 请求</p>
<p>这个过程涉及 dns 解析，tcp建联，http请求发起，https 的话先进行 tls建联</p>
<p>响应返回的时候，先解析响应头，如果是重定向则重新发起请求，继续前面的过程</p>
<p>然后处理响应数据，通过 content-type 判断资源类型，不同资源有不同处理，这里以 html 为例</p>
<p>此时启动一个新的渲染进程，浏览器进程将响应内容发往渲染进程，直到渲染进程返回渲染确认的消息，导航过程结束，此时会调用ui线程去更新导航栏状态<br>（不一定启动新的渲染进程，有个什么浏览上下文概念，可能复用）</p>
<p>渲染进程内部会创建浏览上下文对象和 Document 对象，并开始事件循环，首先发起一个 html 解析的任务</p>
<p>这个过程会进行流解析，令牌化，生成dom节点，构建dom树</p>
<p>发现资源的话通过浏览器进程的网络线程去获取资源，资源会排优先级（具体忘了）</p>
<p>同时还会进行样式树的构建</p>
<p>遇到同步脚本时，暂停html解析任务，将同步脚本作为任务排入事件循环（同步代码执行完毕还会去清空微任务队列）<br>（注意，此时可能会进行预扫描查询后面的资源，并进行提前加载。这里有一套复杂的处理机制，不具体分析了。）</p>
<p>同步代码中可能还会触发回流和重绘</p>
<p>事件循环继续，再次执行 html 解析任务（这边规范没有详细定义，可能有的渲染引擎是其他任务如网络任务源先执行）</p>
<p>html 解析任务结束，触发domcontentload回调，进行 ui render</p>
<p>此时 dom 树和样式树会合成布局树</p>
<p>遍历布局树创建层树（比如通过 css3 某些属性创建单独层），每层单独渲染，然后交由合成器线程进行合并，最后显示在页面上</p>
]]></content>
      <categories>
        <category>大前端</category>
      </categories>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>通读 HTML Standard</title>
    <url>/2019/12/11/2019Q4/%E9%80%9A%E8%AF%BB%20HTML%20Standard/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><pre><code>只有掌握了 N-1 层的原理，才能精通第 N 层的抽象
                                   -- 佚名</code></pre><a id="more"></a>
<p>视工作类型而定，有时候想掌握 N-1 层的原理，可能还需要了解 N-2,N-3 …</p>
<p>于前端程序员而言，第 N 层的抽象即 HTML/CSS/JS 语法，N+1 层是各种前端框架，N-1 层是语法的内部实现和浏览器的工作原理，N-2 层可能就是渲染引擎，JS 引擎，JS Runtime的实现。</p>
<p>你见过没有掌握 HTML/CSS/JS 却精通 React 框架的人么？</p>
<p>本文只谈 HTML ，要想真正的精通 HTML ，我们需要知道 HTML 的内部实现，通读 HTML 规范是最有效的方法之一</p>
<p>通过本文，我们想要达到的目的有：</p>
<ol>
<li>了解 Web 平台的技术体系以及如何查找相关规范</li>
<li>了解 HTML 规范的整体结构，日后碰到疑难杂症可以快速排查原因</li>
</ol>
<p>PS: 本文描述中的 “标准” 和 “规范” 指的是同一东西</p>
<p>PS2: 为什么要看 HTML 规范？通常 API 文档只告诉了我们要这么做，却没告诉我们为什么不能这样做，通过看规范，我们能对 API 理解更加深刻</p>
<h2 id="查找规范"><a href="#查找规范" class="headerlink" title="查找规范"></a>查找规范</h2><p>首先明确一点， <a href="https://developer.mozilla.org/" target="_blank" rel="noopener">MDN</a> 不是规范文档，确切的说法是指南和开发教程，是对规范的二次解读。<br>相比规范，MDN 在行文格式和专业术语的运用上更容易让前端开发者接受。大部分情况下，MDN 已能够解决问题。当发现 MDN 上的解释不够清晰时，这时候就可以去看规范了。一般这种情况，都是比较深入底层的问题，毕竟，规范是用来给浏览器开发者看的。</p>
<p>Web 平台的浏览器相关技术众多，由不同的组织来确定规范。<br>早在之前，关于 HTML 和 DOM 标准， <a href="https://www.w3.org/" target="_blank" rel="noopener">W3C</a> 和 <a href="https://html.spec.whatwg.org/multipage/" target="_blank" rel="noopener">WHATWG</a> 都有各种的规范，这严重阻碍了 HTML 的发展。</p>
<blockquote>
<p>W3C 希望发布一个 finished 版本的 HTML5，而 WHATWG 想要不断维护该规范而不是将已知问题冻结在某个版本</p>
</blockquote>
<p>不过如今两个组织已<a href="https://www.w3.org/blog/news/archives/7753" target="_blank" rel="noopener">达成一致</a>，HTML 和 DOM 标准由 WHATWG 维护。</p>
<p>关于一项技术，如何确定对应的规范并找到规范文档，这里推荐一个网站：<a href="https://platform.html5.org/" target="_blank" rel="noopener">The Web platform: Browser technologies</a> 。<br>其列举了 Web 平台的浏览器相关技术的标准文档和协议规范地址，包括以下几大模块：</p>
<ol>
<li>HTML,DOM,ECMAScript等核心模块</li>
<li>CSS</li>
<li>Canvas,SVG 等图形模块</li>
<li>多媒体</li>
<li>平台交互，事件及消息传递</li>
<li>文件和存储</li>
<li>实时通信模块</li>
<li>Web Components</li>
<li>HTML 额外收录模块，如 Drag and drop</li>
<li>性能优化与分析</li>
<li>安全和隐私</li>
<li>其他核心平台额外收录模块，如 Mutation observers</li>
<li>HTTP,Cookies 等基础模块</li>
<li>各种其他的…</li>
</ol>
<p><img src="https://upload-images.jianshu.io/upload_images/9277731-e96debd8fc6b0bda.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="The Web Platform Browser technologies.png"></p>
<p>页面上用图标指出了各个技术规范的制定组织，以及在 caniuse 和 MDN 中的地址，同时给出了该项技术的使用建议–理解使用/谨慎使用</p>
<p>细心的同学可以发现，<code>WebSocket API</code> 等技术和 HTML 都是定义在同一规范文档 <a href="https://html.spec.whatwg.org/multipage/" target="_blank" rel="noopener">https://html.spec.whatwg.org/multipage/</a> 中，这个后文会说原因</p>
<h2 id="当我们谈到-HTML-规范的时候，我们在说什么？"><a href="#当我们谈到-HTML-规范的时候，我们在说什么？" class="headerlink" title="当我们谈到 HTML 规范的时候，我们在说什么？"></a>当我们谈到 HTML 规范的时候，我们在说什么？</h2><p>我们知道 html 是一种超文本标记语言，所以 HTML 规范指的是 html（包括文档，元素和语法） 的编码规范？</p>
<p>不是， HTML 规范 != HTML 编码规范 。HTML 规范是对包括 html 语言在内的多种技术的规范定义，是浏览器开发者必须遵循的标准，并提供上层接口供页面开发者使用。</p>
<h2 id="HTML-规范是什么"><a href="#HTML-规范是什么" class="headerlink" title="HTML 规范是什么"></a>HTML 规范是什么</h2><blockquote>
<p>The HTML Standard is a kitchen sink full of technologies for the web. It includes the core markup language for the web, HTML, as well as numerous APIs like Web Sockets, Web Workers, localStorage, etc.</p>
</blockquote>
<p>HTML 规范是多种 Web 技术的集合。它包括用于 Web 的核心标记语言 HTML 以及 Web Sockets, Web Workers, localStorage 等众多API。相对于其他规范，它在 Web 平台的技术规范中的位置总结如下：</p>
<p><img src="https://upload-images.jianshu.io/upload_images/9277731-9ae0f5bbf0919398.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<h3 id="什么是-HTML5-？"><a href="#什么是-HTML5-？" class="headerlink" title="什么是 HTML5 ？"></a>什么是 HTML5 ？</h3><p>狭义上来说， HTML5 定义 HTML 标准的最新的版本，因此本文也可以说是 HTML5 标准</p>
<p>广义上来说， HTML5 泛指现代 Web 技术，包括本文所定义的标准外，还有其他如 <code>Notifications API</code>, <code>WebRTC</code> 等等</p>
<p>相关的还有 h5 这个名词，在国内偏向于指代移动端的 web 页面的解决方案</p>
<h2 id="整体结构"><a href="#整体结构" class="headerlink" title="整体结构"></a>整体结构</h2><p>本节介绍 HTML 规范的整体结构。</p>
<p>对于每一小节，会先介绍主体内容，然后列出相关技术点方便以后查找，可能还会给出注意事项</p>
<p>先上目录：</p>
<ol>
<li>概述</li>
<li>通用基础结构</li>
<li>HTML 文档的语义、结构及API</li>
<li>HTML 元素</li>
<li>Microdata</li>
<li>用户交互</li>
<li>页面加载</li>
<li>Web 应用 API</li>
<li>通信</li>
<li>Web workers</li>
<li>Web 存储</li>
<li>HTML 语法</li>
<li>XML 语法</li>
<li>渲染</li>
<li>废弃的特性</li>
<li>IANA 注意事项</li>
</ol>
<p>需要重点看的有：7,8</p>
<h3 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h3><p>介绍本规范的结构，提供阅读说明及排版。</p>
<p>简单介绍了跨站通信和html的编写以及常见的语法错误</p>
<p>提供了用于发现 HTML 错误的工具 – <a href="https://whatwg.org/validator/" target="_blank" rel="noopener">HTML Conformance Checkers</a> </p>
<h3 id="2-通用基础结构"><a href="#2-通用基础结构" class="headerlink" title="2. 通用基础结构"></a>2. 通用基础结构</h3><p>提供了术语说明和依赖的定义</p>
<blockquote>
<p>规则中依赖的其他规范的定义都会在本节做个概要描述</p>
</blockquote>
<p><code>case-sensitive</code> 表示区分大小写的字符串比较</p>
<p>定义了策略控制功能，如 autoplay, document-domain</p>
<p>定义了常见的 microsyntaxes ，一些语法类型的问题可以看这里</p>
<blockquote>
<p>HTML 中有很多地方接受特定的数据类型，如日期和数字，本节描述了对应类型内容应符合的标准，以及如何解析</p>
</blockquote>
<p>定义了 URL ，描述了解析过程，以及 base URLs 变动后的效果</p>
<blockquote>
<p>仅表层介绍，具体的需要调整至 URL 规范中查看</p>
</blockquote>
<p>定义了资源获取，包括同/跨域类型定义，资源类型确定，meta 元素字符编码提取过程，CORS 设置属性，referrer 属性，nonce 属性</p>
<p>定义了通用 DOM 接口，包括 IDL 属性获取和设置，HTMLCollection 等集合接口，DOMStringList 接口，Document 的垃圾回收</p>
<p>定义了结构化数据，包括可序列化对象和可传输对象等</p>
<blockquote>
<p>这一小节属于比较底层了</p>
</blockquote>
<h3 id="3-HTML-文档的语义、结构及API"><a href="#3-HTML-文档的语义、结构及API" class="headerlink" title="3. HTML 文档的语义、结构及API"></a>3. HTML 文档的语义、结构及API</h3><p>介绍了 HTML 文档的生命周期，一个 HTML 文档表现为一个 Document 对象，其上有各种属性如元数据管理，DOM 树访问器，动态标记插入，用户交互及 onreadystatechange </p>
<p>关于 Document, HTML 标准在 DOM 标准之上进行了拓展</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">enum DocumentReadyState &#123; <span class="string">"loading"</span>, <span class="string">"interactive"</span>, <span class="string">"complete"</span> &#125;;</span><br><span class="line">typedef (HTMLScriptElement or SVGScriptElement) HTMLOrSVGScriptElement;</span><br><span class="line"></span><br><span class="line">[OverrideBuiltins]</span><br><span class="line">partial interface Document &#123;</span><br><span class="line">  <span class="comment">// resource metadata management 资源元数据管理</span></span><br><span class="line">  [PutForwards=href, Unforgeable] readonly attribute Location? location;</span><br><span class="line">  attribute USVString domain;</span><br><span class="line">  readonly attribute USVString referrer;</span><br><span class="line">  attribute USVString cookie;</span><br><span class="line">  readonly attribute DOMString lastModified;</span><br><span class="line">  readonly attribute DocumentReadyState readyState;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// DOM tree accessors DOM 树访问器</span></span><br><span class="line">  getter object (DOMString name);</span><br><span class="line">  [CEReactions] attribute DOMString title;</span><br><span class="line">  [CEReactions] attribute DOMString dir;</span><br><span class="line">  [CEReactions] attribute HTMLElement? body;</span><br><span class="line">  readonly attribute HTMLHeadElement? head;</span><br><span class="line">  [SameObject] readonly attribute HTMLCollection images;</span><br><span class="line">  [SameObject] readonly attribute HTMLCollection embeds;</span><br><span class="line">  [SameObject] readonly attribute HTMLCollection plugins;</span><br><span class="line">  [SameObject] readonly attribute HTMLCollection links;</span><br><span class="line">  [SameObject] readonly attribute HTMLCollection forms;</span><br><span class="line">  [SameObject] readonly attribute HTMLCollection scripts;</span><br><span class="line">  NodeList getElementsByName(DOMString elementName);</span><br><span class="line">  readonly attribute HTMLOrSVGScriptElement? currentScript; <span class="comment">// classic scripts in a document tree only</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// dynamic markup insertion 动态标记插入</span></span><br><span class="line">  [CEReactions] Document open(optional DOMString unused1, optional DOMString unused2); <span class="comment">// both arguments are ignored</span></span><br><span class="line">  WindowProxy? open(USVString url, DOMString name, DOMString features);</span><br><span class="line">  [CEReactions] <span class="keyword">void</span> close();</span><br><span class="line">  [CEReactions] <span class="keyword">void</span> write(DOMString... text);</span><br><span class="line">  [CEReactions] <span class="keyword">void</span> writeln(DOMString... text);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// user interaction 用户交互</span></span><br><span class="line">  readonly attribute WindowProxy? defaultView;</span><br><span class="line">  boolean hasFocus();</span><br><span class="line">  [CEReactions] attribute DOMString designMode;</span><br><span class="line">  [CEReactions] boolean execCommand(DOMString commandId, optional boolean showUI = <span class="literal">false</span>, optional DOMString value = <span class="string">""</span>);</span><br><span class="line">  boolean queryCommandEnabled(DOMString commandId);</span><br><span class="line">  boolean queryCommandIndeterm(DOMString commandId);</span><br><span class="line">  boolean queryCommandState(DOMString commandId);</span><br><span class="line">  boolean queryCommandSupported(DOMString commandId);</span><br><span class="line">  DOMString queryCommandValue(DOMString commandId);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// special event handler IDL attributes that only apply to Document objects</span></span><br><span class="line">  <span class="comment">// 只适用于 Document 对象的特殊事件处理器 IDL 属性</span></span><br><span class="line">  [LenientThis] attribute EventHandler onreadystatechange;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// also has obsolete members</span></span><br><span class="line">&#125;;</span><br><span class="line">Document includes GlobalEventHandlers;</span><br><span class="line">Document includes DocumentAndElementEventHandlers;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>通过了解这个，我们能更清楚的知道文档的组成，对 document 属性有疑问的都可以看本节</p>
</blockquote>
<p>介绍了 HTML 元素，规则仅表示含义，不涉及呈现，<strong>因此各个浏览器呈现出来的特定元素效果可能不一样。</strong></p>
<p>HTML 元素的基本接口</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">[Exposed=Window]</span><br><span class="line">interface HTMLElement : Element &#123;</span><br><span class="line">  [HTMLConstructor] <span class="keyword">constructor</span>();</span><br><span class="line"></span><br><span class="line">  // metadata attributes 元数据属性</span><br><span class="line">  [CEReactions] attribute DOMString title;</span><br><span class="line">  [CEReactions] attribute DOMString lang;</span><br><span class="line">  [CEReactions] attribute boolean translate;</span><br><span class="line">  [CEReactions] attribute DOMString dir;</span><br><span class="line"></span><br><span class="line">  // user interaction 用户交互</span><br><span class="line">  [CEReactions] attribute boolean hidden;</span><br><span class="line">  void click();</span><br><span class="line">  [CEReactions] attribute DOMString accessKey;</span><br><span class="line">  readonly attribute DOMString accessKeyLabel;</span><br><span class="line">  [CEReactions] attribute boolean draggable;</span><br><span class="line">  [CEReactions] attribute boolean spellcheck;</span><br><span class="line">  [CEReactions] attribute DOMString autocapitalize;</span><br><span class="line"></span><br><span class="line">  [CEReactions] attribute [TreatNullAs=EmptyString] DOMString innerText;</span><br><span class="line"></span><br><span class="line">  ElementInternals attachInternals();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">HTMLElement includes GlobalEventHandlers;</span><br><span class="line">HTMLElement includes DocumentAndElementEventHandlers;</span><br><span class="line">HTMLElement includes ElementContentEditable;</span><br><span class="line">HTMLElement includes HTMLOrSVGElement;</span><br><span class="line"></span><br><span class="line">[Exposed=Window]</span><br><span class="line">interface HTMLUnknownElement : HTMLElement &#123;</span><br><span class="line">  <span class="comment">// Note: intentionally no [HTMLConstructor]</span></span><br><span class="line">  <span class="comment">// 注意：有意没有 [HTMLConstructor]</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>介绍了 HTML 命名空间中名称为 name 的元素的元素接口的确认规则</p>
<blockquote>
<p>举例： xmp 元素原型是什么？ 答案是 HTMLPreElement （继承自 HTMLElement ）</p>
</blockquote>
<p>介绍了元素构造器用于实现自定义元素</p>
<p>定义了内容模型，即每个 HTML 元素的内容（其 DOM 中的子节点）必须符合内容模型的要求</p>
<blockquote>
<p>举例 <code>&lt;p&gt;&lt;object&gt;&lt;param&gt;&lt;ins&gt;&lt;map&gt;&lt;a href=&quot;/&quot;&gt;Apples&lt;/a&gt;&lt;/map&gt;&lt;/ins&gt;&lt;/object&gt;&lt;/p&gt;</code> <br>为了检查 a 元素中是否允许 “Apples”，要检查内容模型。 a 元素的内容模型是透明的，map 元素也是， ins 元素也是，object 元素中 ins 元素所在的部分也是。 object 元素位于 p 元素中，后者的内容模型是 短语内容。 因此 “Apples” 是允许的，因为文本是短语内容。</p>
</blockquote>
<p>介绍了通用属性，所有 HTML 元素都可以使用，如 <code>contenteditable,style,title,dir,lang</code></p>
<p>介绍了 <code>innerText</code> 的执行步骤</p>
<h3 id="4-HTML-元素"><a href="#4-HTML-元素" class="headerlink" title="4. HTML 元素"></a>4. HTML 元素</h3><p>每个元素都有一个预定义的含义，本章便解释了这些含义。 也给出了作者使用这些元素的规则，以及用户代理处理这些元素的要求。 这里包含了大量的 HTML 独有的特性，例如视频播放和副标题，表单控件和表单提交， 以及名为 HTML canvas 的 2D 图形 API。</p>
<blockquote>
<p>有具体元素使用上的疑问可以在本章中查找</p>
</blockquote>
<h3 id="5-Microdata"><a href="#5-Microdata" class="headerlink" title="5. Microdata"></a>5. Microdata</h3><p>本标准介绍了为文档增加机器可读注解的机制，这样工具可以从文档中抽取键值对的树。<br>这部分文档描述了该机制和用于将 HTML 文档转换为其他格式的一些算法。 这部分还为联系信息、日历事件和许可协议定义了一些示例的微数据词汇。</p>
<blockquote>
<p>itemscope 上的使用有疑问，先看 MDN 再看本章</p>
</blockquote>
<h3 id="6-用户交互"><a href="#6-用户交互" class="headerlink" title="6. 用户交互"></a>6. 用户交互</h3><p>HTML Document 可以提供一些用户与内容交互以及用户修改内容的机制，在本章中给出了这些机制的描述。 </p>
<p>提供了 hidden 属性的描述</p>
<blockquote>
<p>display: block 可以覆盖 hidden 的效果</p>
</blockquote>
<p>描述了惰性子树的概念</p>
<blockquote>
<p>举个常见的例子，在A元素中 mouseDown 然后移动到 B 元素上并 mouseUp ,mouseMove 和 click 事件是在A元素上触发，B 是惰性的</p>
</blockquote>
<p>描述了焦点的工作机制</p>
<blockquote>
<p>这里的处理挺复杂的</p>
</blockquote>
<p>描述了用于激活元素的指定快捷键 – accesskey </p>
<p>描述了可编辑元素的相关接口和 API：contenteditable, designMode, execCommand, inputmode</p>
<p>描述了元素拖拽的相关接口和处理过程，其中部分章节是非规范的，所以浏览器间的实现会有差异</p>
<h3 id="7-页面加载"><a href="#7-页面加载" class="headerlink" title="7. 页面加载"></a><strong>7. 页面加载</strong></h3><p>这部分定义了很多影响处理多页面环境的特性。要深入理解<strong>浏览器的运行过程</strong>，本章节需要细读。</p>
<p>描述了浏览上下文的定义和分类，包括嵌套浏览上下文（iframe）和辅助浏览上下文（window.opener）</p>
<p>描述了 Window, WindowProxy, 和 Location 对象的安全基础设施</p>
<blockquote>
<p>这里介绍了 window.open 等方法的执行机制</p>
</blockquote>
<p>介绍了 Origin 的定义和同源判断算法，以及 <code>document.domain</code> 赋值描述</p>
<p>介绍了沙盒机制（sandboxing）</p>
<p>介绍了会话历史和导航接口： history 和 location</p>
<p>描述了浏览上下文导航和页面加载处理模型</p>
<p>描述了离线应用缓存。</p>
<h3 id="8-Web-应用-API"><a href="#8-Web-应用-API" class="headerlink" title="8. Web 应用 API"></a><strong>8. Web 应用 API</strong></h3><p>这部分介绍了 HTML 应用脚本的基本特性。也是需要重点细读的章节</p>
<p>介绍了脚本,包括 <code>javascript: URL</code> ，启用禁用脚本，脚本处理模型，<strong>Event Loops</strong> 和浏览器事件</p>
<blockquote>
<p>Event Loops 一节还讲述了和<a href="https://html.spec.whatwg.org/#update-the-rendering" target="_blank" rel="noopener">渲染引擎的交互</a></p>
</blockquote>
<p>介绍了 WindowOrWorkerGlobalScope mixin，描述了全局对象上公开的 API</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">typedef (DOMString or <span class="built_in">Function</span>) TimerHandler;</span><br><span class="line"></span><br><span class="line">interface mixin WindowOrWorkerGlobalScope &#123;</span><br><span class="line">  [Replaceable] readonly attribute USVString origin;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// base64 工具方法</span></span><br><span class="line">  DOMString btoa(DOMString data);</span><br><span class="line">  ByteString atob(DOMString data);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// timers</span></span><br><span class="line">  long setTimeout(TimerHandler handler, optional long timeout = <span class="number">0</span>, any... arguments);</span><br><span class="line">  <span class="keyword">void</span> clearTimeout(optional long handle = <span class="number">0</span>);</span><br><span class="line">  long setInterval(TimerHandler handler, optional long timeout = <span class="number">0</span>, any... arguments);</span><br><span class="line">  <span class="keyword">void</span> clearInterval(optional long handle = <span class="number">0</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// microtask queuing</span></span><br><span class="line">  <span class="keyword">void</span> queueMicrotask(VoidFunction callback);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ImageBitmap</span></span><br><span class="line">  <span class="built_in">Promise</span>&lt;ImageBitmap&gt; createImageBitmap(ImageBitmapSource image, optional ImageBitmapOptions options);</span><br><span class="line">  <span class="built_in">Promise</span>&lt;ImageBitmap&gt; createImageBitmap(ImageBitmapSource image, long sx, long sy, long sw, long sh, optional ImageBitmapOptions options);</span><br><span class="line">&#125;;</span><br><span class="line">Window includes WindowOrWorkerGlobalScope;</span><br><span class="line">WorkerGlobalScope includes WindowOrWorkerGlobalScope;</span><br></pre></td></tr></table></figure>

<p>其中介绍了 Base64 工具方法 , Timers 执行过程，microtask 和 ImageBitmap 处理</p>
<p>介绍了动态标记插入</p>
<blockquote>
<p>万恶的 document.write</p>
</blockquote>
<p>介绍了用户提示窗口方法： alert,confirm,prompt 的内部处理和 print 打印机提示方法</p>
<blockquote>
<p>可以了解这些方法执行时再事件循环中的处理是怎样的</p>
</blockquote>
<p>介绍了系统状态和功能 Navigator ,描述了基本功能接口和自定义方案处理程序</p>
<blockquote>
<p> 因此浏览器可以通过自定义方案处理程序拓展功能，如 geo , gamepads</p>
</blockquote>
<p>最后介绍了动画帧，定义了 requestAnimationFrame 和  cancelAnimationFrame</p>
<h3 id="9-通信-API"><a href="#9-通信-API" class="headerlink" title="9. 通信 API"></a>9. 通信 API</h3><p>这部分描述了 HTML 编写的应用可用来与同一客户端中的，不同域名的其他应用通信的一些机制。 也介绍了一个服务器推送事件流机制，称为 Server Sent Events 或 EventSource, 以及一个为脚本提供的双向全双工套接字协议，称为 Web Sockets。</p>
<p>首先介绍了继承自 Event 的 MessageEvent 接口，本章介绍的事件消息都是基于 MessageEvent 接口</p>
<p>介绍了服务器发送的事件，引入了 EventSource 接口定义和实现</p>
<p>介绍了 Web sockets  的组成和内部处理</p>
<p>引入了 postMessage 跨文档通信，用来解决非同源文档间通信问题，且不会造成跨站脚本攻击</p>
<p>介绍了 MessageChannel 通道用来实现不同浏览上下文之间代码通信</p>
<p>最后介绍了向其他浏览上下文广播的方案 BroadcastChannel</p>
<h3 id="10-Web-workers"><a href="#10-Web-workers" class="headerlink" title="10. Web workers"></a>10. Web workers</h3><p>这部分定义了 JavaScript 后台线程的 API。</p>
<p>描述了一些使用场景，如数字密集型计算，共享 worker </p>
<p>描述了作用域和事件循环</p>
<p>描述了可用的 API</p>
<h3 id="11-Web-storage"><a href="#11-Web-storage" class="headerlink" title="11. Web storage"></a>11. Web storage</h3><p>这部分定义了一个基于键值对的客户端存储机制。</p>
<p>定义了我们常用的 API: localStorage 和 sessionStorage 以及 storage 事件</p>
<blockquote>
<p>两者的区别是 sessionStorage 在浏览器关闭后内容会消失</p>
</blockquote>
<p>描述了 storage 的可用磁盘空间，不过标准没有给出具体值，只是建议每个域 5M 的限制（未压缩前）</p>
<p>描述了 storage 的隐私和安全问题</p>
<h3 id="12-HTML-语法"><a href="#12-HTML-语法" class="headerlink" title="12. HTML 语法"></a>12. HTML 语法</h3><p>本章描述有 HTML MIME type 标注的资源的语法规则</p>
<p>介绍了文档的组成部分，包括 DOCTYPE 和 Elements 类型。描述了标签和属性的解析规则</p>
<p>描述了 HTML 文档解析的处理模型，包括错误处理，输入字节流，解析状态，Tokenization 和树结构等</p>
<img width="300" src="https://whatwg-cn.github.io/html/images/parsing-model-overview.svg"/>

<p>从图中也可看出 html 解析和脚本执行的关系</p>
<blockquote>
<p>脚本执行会阻塞 DOM 的解析，试想下，不阻塞的话，脚本中修改了 DOM 那还得调整原来构建的 DOM 树</p>
</blockquote>
<p>描述了 HTML 片段的序列化和解析</p>
<h3 id="13-XML-语法"><a href="#13-XML-语法" class="headerlink" title="13. XML 语法"></a>13. XML 语法</h3><p>本章描述 XML 资源的语法规则，主要是描述 XML 文档的解析，以及 XML 片段的序列化和解析</p>
<h3 id="14-渲染"><a href="#14-渲染" class="headerlink" title="14. 渲染"></a>14. 渲染</h3><p>这部分定义了 Web 浏览器默认的渲染规则。</p>
<p>注意，本章仅是建议，没有要求浏览器必须这样实现</p>
<blockquote>
<p>因此，各种渲染引擎的效果不一样是按规范来</p>
</blockquote>
<p>本章更多的是讲元素的预期渲染效果，渲染引擎机制请看 Event Loops 一节</p>
<h3 id="15-废弃的特性"><a href="#15-废弃的特性" class="headerlink" title="15. 废弃的特性"></a>15. 废弃的特性</h3><p>包括三部分</p>
<ol>
<li>过时但仍可用的特征，如在 img 上指定 border 属性</li>
<li>不可用的特征，如使用 applet 元素（应该用 embed 代替）</li>
<li>一些元素，API 应该实现的接口</li>
</ol>
<p>这部分内容比较针对浏览器开发者</p>
<h3 id="16-IANA-considerations"><a href="#16-IANA-considerations" class="headerlink" title="16. IANA considerations"></a>16. IANA considerations</h3><p>本章主要描述使用资源类型和协议时的一些注意事项</p>
<h2 id="问题记录"><a href="#问题记录" class="headerlink" title="问题记录"></a>问题记录</h2><h3 id="Q1-页面跳转和导航的代码执行问题"><a href="#Q1-页面跳转和导航的代码执行问题" class="headerlink" title="Q1. 页面跳转和导航的代码执行问题"></a>Q1. 页面跳转和导航的代码执行问题</h3><p>下面代码分别输出什么，为什么？请从浏览上下文和事件循环等角度分析。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">onClick1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">window</span>.open(<span class="string">'https://www.baidu.com'</span>)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"onClick1"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">onClick21</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  location.href = <span class="string">"https://www.baidu.com"</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"onClick21"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">onClick22</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  location.href = <span class="string">"https://www.baidu.com"</span></span><br><span class="line">  <span class="comment">// 3s</span></span><br><span class="line">  <span class="keyword">let</span> start = +<span class="keyword">new</span> <span class="built_in">Date</span></span><br><span class="line">  <span class="keyword">while</span>(+<span class="keyword">new</span> <span class="built_in">Date</span> - start&lt; <span class="number">3</span>*<span class="number">1000</span>)&#123;&#125;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"onClick22"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">onClick23</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="comment">// 未能加载成功的网站</span></span><br><span class="line">  location.href = <span class="string">"https://sssss"</span></span><br><span class="line">  <span class="comment">// 3s</span></span><br><span class="line">  <span class="keyword">let</span> start = +<span class="keyword">new</span> <span class="built_in">Date</span></span><br><span class="line">  <span class="keyword">while</span>(+<span class="keyword">new</span> <span class="built_in">Date</span> - start&lt; <span class="number">3</span>*<span class="number">1000</span>)&#123;&#125;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"onClick23"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">onClick3</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  history.back()</span><br><span class="line">  <span class="comment">// 3s</span></span><br><span class="line">  <span class="keyword">let</span> start = +<span class="keyword">new</span> <span class="built_in">Date</span></span><br><span class="line">  <span class="keyword">while</span>(+<span class="keyword">new</span> <span class="built_in">Date</span> - start&lt; <span class="number">3</span>*<span class="number">1000</span>)&#123;&#125;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"onClick3"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<details>
  <summary>Answer</summary>

<p>onClick21 onClick23 onClick3 会输出</p>
<p>仅以 chrome 的实现为例，每个标签页都是独立的用户代理（user agent）</p>
<p>首先，页面 A 存在着（至少）一个浏览上下文，并对应着一个 Event Loop </p>
<blockquote>
<p>考虑嵌套浏览上下文和辅助浏览上下文，所以这边用的是<strong>至少</strong></p>
</blockquote>
<p>页面 A 中执行了某段同步代码（一个Task），在其中调用了 <a href="https://html.spec.whatwg.org/#apis-for-creating-and-navigating-browsing-contexts-by-name" target="_blank" rel="noopener">window.open</a> 方法，该方法是立即执行的</p>
<blockquote>
<p>内部做了很多处理，可以点链接看看</p>
</blockquote>
<p>执行完毕 ，此时会创建一个新的浏览上下文以及对应的 Event Loop </p>
<blockquote>
<p>如果 页面 A 采用 opener 参数打开的页面 B，则页面 B 还有一个辅助浏览上下文，指向页面 A 的浏览上下文，共用同一个 Event loop？？</p>
</blockquote>
<p>如果要加载的文档是 html ，页面 B 的用户代理会排一个 Task 创建 Document 对象，标记为 HTML 文档，其后读取和解析文档。</p>
<p>location 跳转</p>
<p>location 是同步执行的，后台线程等解析完文档就会跳转，不会等后面的同步代码。通常我们后面的同步代码很快执行，所以会误以为 location 是异步执行的</p>
<p>详见 <a href="https://stackoverflow.com/questions/37521172/is-javascript-location-href-call-is-asynchronous" target="_blank" rel="noopener">stackoverflow</a> 和 <a href="https://www.zhihu.com/question/42268360/answer/207444712" target="_blank" rel="noopener">设置location.href，为什么不会立即跳转? - 知乎</a></p>
<blockquote>
<p>PS: 还没详细看规范，不知道是不是这样处理</p>
</blockquote>
<p>history 跳转是一个 Task，因此它会在本次同步代码执行完毕后才执行</p>
<blockquote>
<p>这个看运行时环境实现，可能其他任务还会先与该 Task 前执行</p>
</blockquote>
<p>总结： <code>window.open</code> 和 <code>location.href</code> 不属于 Web API 的范畴，也就不走 event loop 那一套</p>
</details>

<p>未完待续…</p>
]]></content>
      <categories>
        <category>大前端</category>
      </categories>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>前端长列表原理及优化</title>
    <url>/2019/12/10/2019Q4/%E5%89%8D%E7%AB%AF%E9%95%BF%E5%88%97%E8%A1%A8%E5%8E%9F%E7%90%86%E5%8F%8A%E4%BC%98%E5%8C%96/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>长列表一般也叫虚拟列表，是一种大数据量下只渲染可见节点避免页面卡顿的优化方案</p>
<blockquote>
<p>长列表也有时间分片的做法，比较少用，感兴趣的可以看 <a href="https://juejin.im/post/5d76f469f265da039a28aff7" target="_blank" rel="noopener">高性能渲染十万条数据(时间分片)</a></p>
</blockquote>
<p>前端比较有名的有两个项目：</p>
<ul>
<li>react-window</li>
<li>vue-virtual-scroller</li>
</ul>
<p>以及 Ant Design 4 的 <a href="https://github.com/react-component/virtual-list" target="_blank" rel="noopener">virtual-list</a> </p>
<p>本文将对这些开源库进行剖析，分析实现原理，并进行各个指标的评估，最终实现一个高可用的长列表组件</p>
<a id="more"></a>

<p>主要评估以下几点：</p>
<ol>
<li>渲染：回流， 渲染策略等</li>
<li>计算：起止项和偏移位置的计算，总高度的计算</li>
<li>功能：自适应高度，其他</li>
<li>健壮：是否存在鼠标与滚动条不同步的 bug（计算时总高度增加了，则滚动条会相对鼠标向上）</li>
</ol>
<p>然后说下看源码的策略，主要看这几点：</p>
<ol>
<li>dom 结构</li>
<li>查找起始位置</li>
<li>计算偏移距离</li>
<li>计算总高度</li>
</ol>
<h2 id="长列表入门"><a href="#长列表入门" class="headerlink" title="长列表入门"></a>长列表入门</h2><p>如果还不清楚长列表是什么，可以先看下这篇文章<a href="https://juejin.im/post/5db684ddf265da4d495c40e5" target="_blank" rel="noopener">「前端进阶」高性能渲染十万条数据(虚拟列表)</a></p>
<p>一张图快速入门</p>
<p><img src="https://user-gold-cdn.xitu.io/2019/10/29/16e1519a393dee2c?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt=""></p>
<p>下面我们来看看其他开源库都怎么做的</p>
<h2 id="vue-virtual-scroller"><a href="#vue-virtual-scroller" class="headerlink" title="vue-virtual-scroller"></a>vue-virtual-scroller</h2><p><a href="https://github.com/Akryum/vue-virtual-scroller" target="_blank" rel="noopener">项目地址</a></p>
<p>功能： 支持自适应高度，横向滚动，图片自适应高度</p>
<h3 id="渲染"><a href="#渲染" class="headerlink" title="渲染"></a>渲染</h3><p>dom 结构如下</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- position: relative;overflow-y: auto; --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"vue-recycle-scroller"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"vue-recycle-scroller__item-wrapper"</span> <span class="attr">:style</span>=<span class="string">"&#123; 'minHeight': totalSize + 'px' &#125;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span></span></span><br><span class="line"><span class="tag">        <span class="attr">v-for</span>=<span class="string">"view of pool"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:key</span>=<span class="string">"view.nr.id"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:style</span>=<span class="string">"&#123; transform: `translateY($&#123;view.position&#125;px)` &#125;"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">class</span>=<span class="string">"vue-recycle-scroller__item-view"</span></span></span><br><span class="line"><span class="tag">      &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">slot</span></span></span><br><span class="line"><span class="tag">          <span class="attr">:item</span>=<span class="string">"view.item"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">:index</span>=<span class="string">"view.nr.index"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">:active</span>=<span class="string">"view.nr.used"</span></span></span><br><span class="line"><span class="tag">        /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>一个相对定位的列表，由 <code>min-height</code> 撑开 wrapper 以产生滚动条</p>
<p>每个列表项进行平移(translateY),这个偏移值为该项在列表中的高度累加值</p>
<p>还有一些 <code>-9999px</code> 的不可见元素，这些其实是缓存池列表项，这个在 <strong>节点回收复用</strong> 一节会讲到</p>
<p>列表项数据结构：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">listItem = &#123;</span><br><span class="line">  <span class="comment">// 数据项内容</span></span><br><span class="line">  item:<span class="built_in">Object</span>,</span><br><span class="line">  <span class="comment">// 非响应式数据</span></span><br><span class="line">  nr:&#123;</span><br><span class="line">    id,<span class="comment">// 唯一标识</span></span><br><span class="line">    index,<span class="comment">// 数据项中的索引</span></span><br><span class="line">    used: <span class="built_in">Boolean</span>,<span class="comment">// 是否已用来显示在可视区域</span></span><br><span class="line">    key,<span class="comment">// 数据项中的key</span></span><br><span class="line">    type,<span class="comment">// 在对应类型的缓冲池中存取</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// translateY 值</span></span><br><span class="line">  position: <span class="built_in">Number</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>不会产生回流（非自适应高度的情况）</p>
<p>浏览器<strong>渲染速度快</strong>：进行滚动时产生变化的列表项会尽可能的使用缓存池元素并修改 translateY ，其他没有变动的列表项在dom结构中的位置不变</p>
<h3 id="计算"><a href="#计算" class="headerlink" title="计算"></a>计算</h3><p>有三种场景</p>
<h4 id="①-使用默认高度"><a href="#①-使用默认高度" class="headerlink" title="① 使用默认高度"></a>① 使用默认高度</h4><p>最简单的情况，需要设置 itemSize</p>
<p>起始项索引可以通过 <code>~~(scrollTop / itemSize)</code> 得到</p>
<p>列表总高度 = <code>itemSize * itemCount</code></p>
<h4 id="②-定义高度字段"><a href="#②-定义高度字段" class="headerlink" title="② 定义高度字段"></a>② 定义高度字段</h4><p>itemSize 设为 null，通过数据项中的 height 字段定义每个列表项的高度</p>
<p>由于所有列表项高度是确定的，一开始会计算每一项的高度和偏移值 </p>
<blockquote>
<p>O(n) 时间复杂度</p>
</blockquote>
<p>同时确定了列表总高度，固定为 <code>最后一项的偏移值+高度</code></p>
<p>当进行滚动时，由于每一项的偏移位置是确定的，则查找起始项索引可以采用二分法</p>
<blockquote>
<p>O(logn) 时间复杂度</p>
</blockquote>
<h4 id="③-自适应高度"><a href="#③-自适应高度" class="headerlink" title="③ 自适应高度"></a>③ 自适应高度</h4><p>需要配置数据项最小高度，并根据这个值初始化每个数据项的高度和偏移值 – sizes</p>
<blockquote>
<p>O(n) 时间复杂度</p>
</blockquote>
<p>列表总高度为 <code>最后一项的偏移值+高度</code></p>
<p>sizes 计算</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, l = items.length; i &lt; l; i++) &#123;</span><br><span class="line">  current = items[i][field] || minItemSize</span><br><span class="line">  accumulator += current</span><br><span class="line">  sizes[i] = &#123; accumulator, <span class="attr">size</span>: current &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>进行滚动，通过二分 sizes 得到起始项索引，结束项索引为起始项索引加上 <code>可视高度/最小列高</code></p>
<blockquote>
<p>O(logn) 时间复杂度</p>
</blockquote>
<p>之后进行节点渲染，渲染完毕时获取实际高度，并重新计算 sizes 以及列表总高度</p>
<blockquote>
<p>O(n) 时间复杂度</p>
</blockquote>
<p>总体来说，性能较差，有优化的空间</p>
<h3 id="【卖点】节点回收与复用"><a href="#【卖点】节点回收与复用" class="headerlink" title="【卖点】节点回收与复用"></a>【卖点】节点回收与复用</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">连续滚动(continuous): 前后两次查找的数据范围有重叠，比如第一次为 1~10 第二次为 5~14 或者相反</span><br><span class="line">已使用的列表项(views): 记录已使用项的 Map ，key 为列表项的 key</span><br><span class="line">pool: 页面中所有渲染的列表项，包括未使用的</span><br><span class="line">类型-缓存池 Map (unusedViews): 记录类型和缓存池的 Map</span><br><span class="line">缓存池(unusedPool): 某种类型的缓存池，其中的列表项在页面中偏移位置为 -9999px</span><br></pre></td></tr></table></figure>
<p>举个连续滚动的例子：</p>
<ol>
<li>一开始查到 1<del>10 放入 views 中，进行滚动，查到 5</del>14</li>
<li>将 1~4 放入对应类型的 unusedPool 中，设置未使用，并从 views 中删除</li>
<li>将原来的 5~10项 设置为 已使用</li>
<li>查到 11 时，看 unusedPool 中有没有和 11 同类型的，有的话 pop 出来复用，替换下内容和偏移位置，没有的话新建一个 view，会放入 pool 中</li>
</ol>
<p>对应的，非连续滚动定义为 <strong>快速滚动</strong>，初始化一个空的 map – unusedIndex, 作用是记录同类型的 unusedPool 需要从哪个索引开始取值。</p>
<p>如果 unusedPool 存在元素，拿来复用；如果同类型 pool 被用光了，addView</p>
<blockquote>
<p>感觉此处 <code>v++</code> 的处理有点问题，没有深究</p>
</blockquote>
<p>和安卓的列表滚动类似，按类型进行回收，新找到的列表项会复用缓存中同类型的，可以减少 layout 时间</p>
<p>类似的还有 weex 的 <a href="https://weex.apache.org/zh/docs/components/recycle-list.html" target="_blank" rel="noopener">recycle-list</a></p>
<h3 id="健壮"><a href="#健壮" class="headerlink" title="健壮"></a>健壮</h3><p>由于进度条高度会变化，因此存在鼠标与滚动条不同步的 bug</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>功能丰富，自适应高度方面的处理性能不行（尝试考虑pr），项目结构较差不易维护</p>
<p>不建议使用</p>
<h2 id="react-window"><a href="#react-window" class="headerlink" title="react-window"></a>react-window</h2><p>提供四种组件： </p>
<ul>
<li>FixedSizeList</li>
<li>FixedSizeGrid</li>
<li>VariableSizeList</li>
<li>VariableSizeGrid</li>
</ul>
<p>不支持自适应高度</p>
<p>grid 不分析了， FixedSizeList 就是最简单的固定高度的情景，做法都一样，我们直接分析 VariableSizeList</p>
<blockquote>
<p>先吐个槽， react-window 为了复用，代码封装了一层又一层，render 还是用的 createElement … 看源码的时候实在难受，而且还是用 flow 写的，编辑器各种报错</p>
</blockquote>
<p>不知道什么原因，依赖安装的时候一直失败，本地没有启动起来，这次是直接看的源码</p>
<h3 id="渲染-1"><a href="#渲染-1" class="headerlink" title="渲染"></a>渲染</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"&#123;&#123;position: 'relative', height: `$&#123;height&#125;px`, overflow: 'auto'&#125;&#125;"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"&#123;&#123;height: `$&#123;totalSize&#125;px`, width: '100%'&#125;&#125;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"position: absolute; left: 0px; top: 38px; height: 30px; width: 100%;"</span>&gt;</span></span><br><span class="line">      Row 1</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"position: absolute; left: 0px; top: 68px; height: 65px; width: 100%;"</span>&gt;</span></span><br><span class="line">      Row 2</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    ....</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"position: absolute; left: 0px; top: 133px; height: 70px; width: 100%;"</span>&gt;</span></span><br><span class="line">      Row 3</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>依然是用一个 totalSize 高度的容器去产生进度条，每个列表项通过绝对定位进行偏移</p>
<p>这里其实用 <code>transform: translateY</code> 效果一样的，当然渲染上的性能差异我就不知道了</p>
<h3 id="计算-1"><a href="#计算-1" class="headerlink" title="计算"></a>计算</h3><p>和这篇文章的实现一致 – <a href="https://zhuanlan.zhihu.com/p/34585166" target="_blank" rel="noopener">再谈前端虚拟列表的实现</a></p>
<blockquote>
<p>貌似对指数搜索有误解？</p>
</blockquote>
<p>设 lastMeasureItem 为已测量的最远元素，</p>
<p>lastMeasureItem.offset 为该元素的偏移值</p>
<p>lastMeasureItem.index 为该元素的索引</p>
<p>列表总高度 = lastMeasureItem.offset + 未测量元素 * 默认高度</p>
<p>初次滚动，从第0项开始测量并缓存已滚动过的元素的偏移和索引，更新 lastMeasureItem</p>
<blockquote>
<p>O(n) 时间复杂度</p>
</blockquote>
<p>当滚动偏移值小于 <code>lastMeasureItem.offset</code> 时，表示起始项在 0~lastMeasureItem.index 范围之间，由于该范围所有列表项偏移值都计算过了，此时采用二分即可快速得到起始项索引</p>
<blockquote>
<p>O(logn)</p>
</blockquote>
<p>当滚动偏移值小于 <code>lastMeasureItem.offset</code> 时，则以 <code>lastMeasureItem.index</code> 开始测量并缓存已滚动过的元素的偏移和索引，更新 lastMeasureItem</p>
<blockquote>
<p>O(n) 时间复杂度</p>
</blockquote>
<p>Watch 观察 lastMeasureItem.index ，若改变，则列表总高度跟着变</p>
<p><a href="https://jsfiddle.net/furybean/teg2ur1b/1/" target="_blank" rel="noopener">在线 Demo</a></p>
<p>本方案有两个缺点：</p>
<ul>
<li>拓展差，做不了自适应高度</li>
<li>前面的滚动较耗时间，把没用到的也计算进去了</li>
</ul>
<h3 id="健壮-1"><a href="#健壮-1" class="headerlink" title="健壮"></a>健壮</h3><p>由于进度条高度会变化，因此存在鼠标与滚动条不同步的 bug</p>
<h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><p>不支持自适应高度，性能不行，不是 react 长列表的首选方案</p>
<p>如果有用到 Grid 的话可以用</p>
<h2 id="virtual-list"><a href="#virtual-list" class="headerlink" title="virtual-list"></a>virtual-list</h2><p><a href="https://github.com/react-component/virtual-list" target="_blank" rel="noopener">项目地址</a></p>
<blockquote>
<p>目前分析综合评分最高的一个</p>
</blockquote>
<p>支持自适应高度，支持动画效果，支持滚动位置复原</p>
<h3 id="渲染-2"><a href="#渲染-2" class="headerlink" title="渲染"></a>渲染</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 用户可见的容器高度可能只有 300px --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span></span></span><br><span class="line"><span class="tag">  <span class="attr">class</span>=<span class="string">"container"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">style</span>=<span class="string">"width: 200px; height: 300px;"</span></span></span><br><span class="line"><span class="tag">  @<span class="attr">scroll.passive</span>=<span class="string">"handleScroll"</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 总的列表 div ，用于撑起列表的高度 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span></span></span><br><span class="line"><span class="tag">    <span class="attr">class</span>=<span class="string">"total-list"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:style</span>=<span class="string">"&#123;</span></span></span><br><span class="line"><span class="tag"><span class="string">      height: `$&#123;itemHeight * data.length&#125;px`,</span></span></span><br><span class="line"><span class="tag"><span class="string">    &#125;"</span></span></span><br><span class="line"><span class="tag">  &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span></span></span><br><span class="line"><span class="tag">      <span class="attr">class</span>=<span class="string">"visible-list"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:style</span>=<span class="string">"&#123;</span></span></span><br><span class="line"><span class="tag"><span class="string">      transform: `translateY($&#123;topHeight&#125;px)`,</span></span></span><br><span class="line"><span class="tag"><span class="string">    &#125;"</span></span></span><br><span class="line"><span class="tag">    &gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span></span></span><br><span class="line"><span class="tag">        <span class="attr">v-for</span>=<span class="string">"item in visibleList"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:key</span>=<span class="string">"item.id"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">class</span>=<span class="string">"visible-list-item"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:style</span>=<span class="string">"&#123;</span></span></span><br><span class="line"><span class="tag"><span class="string">        height: `$&#123;itemHeight&#125;px`,</span></span></span><br><span class="line"><span class="tag"><span class="string">      &#125;"</span></span></span><br><span class="line"><span class="tag">      &gt;</span>&#123;&#123; item.value &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 此处只需渲染可见列表即可，无需渲染全部数据 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>和上面的方案不一样，这里是创建了一个 total-list 的容器，直接对这个容器进行 translateY 偏移</p>
<h3 id="计算-2"><a href="#计算-2" class="headerlink" title="计算"></a>计算</h3><p>总高度始终固定，等于 <code>列表项个数(itemCount) * 列表项最小高度(itemHeight)</code></p>
<p>处理逻辑如下：</p>
<ol>
<li>滚动，确定定位项和起止项</li>
<li>渲染起止列表项</li>
<li>列表项渲染完毕，计算并调整起始项偏移位置</li>
<li>进行重渲染</li>
</ol>
<blockquote>
<p>注意：此处的渲染表示对 dom 进行操作，仍处于宏任务，还未到浏览器实际渲染(UI Render)阶段</p>
</blockquote>
<p><strong>核心思想是任意高度的列表项都占据相同的滚动条范围</strong></p>
<h4 id="①-确定定位项和起止项"><a href="#①-确定定位项和起止项" class="headerlink" title="① 确定定位项和起止项"></a>① 确定定位项和起止项</h4><p>定位项与滚动条位置对应，可以理解为滚动条水平方向指向的那个列表项。</p>
<p>当滚动条为0时，指向第0项，此时定位项为第0项</p>
<p>当滚动条处于最大值时，指向最后一项，此时定位项为最后一项</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> itemCount = <span class="keyword">this</span>.data.length</span><br><span class="line"><span class="keyword">const</span> scrollTopMax = scrollHeight - clientHeight</span><br><span class="line"><span class="comment">/** 进度条滚动百分比 */</span></span><br><span class="line"><span class="keyword">const</span> scrollPtg = scrollTop / scrollTopMax</span><br><span class="line"><span class="comment">/** 确定定位项 */</span></span><br><span class="line"><span class="keyword">const</span> itemIndex = <span class="built_in">Math</span>.floor(scrollPtg * itemCount);</span><br><span class="line"><span class="comment">/** 可见列表项个数 = 可见容器高度 / 每个列表项高度 ，记得向上取整 */</span></span><br><span class="line"><span class="keyword">const</span> visibleCount = <span class="built_in">Math</span>.ceil(<span class="keyword">this</span>.$el.clientHeight / <span class="keyword">this</span>.itemHeight)</span><br><span class="line"><span class="comment">/** 确定起始项和结束项 */</span></span><br><span class="line"><span class="keyword">const</span> startIndex = <span class="built_in">Math</span>.max(<span class="number">0</span>, itemIndex - <span class="built_in">Math</span>.ceil(scrollPtg * visibleCount))</span><br><span class="line"><span class="keyword">const</span> endIndex = <span class="built_in">Math</span>.min(itemCount - <span class="number">1</span>, itemIndex + <span class="built_in">Math</span>.ceil((<span class="number">1</span> - scrollPtg) * visibleCount))</span><br></pre></td></tr></table></figure>


<h4 id="②-渲染列表项"><a href="#②-渲染列表项" class="headerlink" title="② 渲染列表项"></a>② 渲染列表项</h4><p>渲染 startIndex ~ endIndex 的列表项</p>
<h4 id="③-调整-offset"><a href="#③-调整-offset" class="headerlink" title="③ 调整 offset"></a>③ 调整 offset</h4><p>在列表项渲染完毕后，触发 update 回调 </p>
<p>获取并统计 startIndex ~ itemIndex 列表项的实际总高度 s2iHeight</p>
<p>计算起始项偏移高度 startItemTop ,如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> startItemTop = 定位项绝对高度(itemAbsoluteTop) - 起始项至定位项的高度(s2iHeight)</span><br><span class="line"><span class="keyword">const</span> itemAbsoluteTop = scrollTop + 定位项相对视口高度(itemRelativeTop)</span><br><span class="line"><span class="keyword">const</span> itemRelativeTop = 滚动过的视口高度(scrollPtg * clientHeight) - 定位项偏移高度(itemOffsetPtg * itemHeight)</span><br></pre></td></tr></table></figure>

<p>如图所示：</p>
<p><img src="https://upload-images.jianshu.io/upload_images/9277731-629e103e1290b5c8.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<h3 id="健壮-2"><a href="#健壮-2" class="headerlink" title="健壮"></a>健壮</h3><p><strong>由于总高度固定，不存在鼠标和滚动条不同步的问题</strong></p>
<h3 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h3><p>性能优异，通过几个数学公式即可确定起止位置（还有优化的空间）</p>
<p>若需要自适应高度，则需要进行2次render，否则第一次render即可计算偏移位置</p>
<p>目前<strong>唯一</strong>一种不产生鼠标和滚动条不同步问题的方案</p>
<p>拓展性强，毕竟后面是 Ant Design 4 的核心组件之一</p>
<p>react 长列表首选方案</p>
<p>vue 可以尝试造个轮子</p>
<h2 id="其他处理方案"><a href="#其他处理方案" class="headerlink" title="其他处理方案"></a>其他处理方案</h2><p>本节为其他一些长列表的处理方案，主要表现在起始项查找和更新列表高度方面的不同</p>
<p>这里提到的几种方案，都会出现 <em>鼠标和滚动条不同步</em> 的问题</p>
<h3 id="①-顺序查找，差量更新总高度"><a href="#①-顺序查找，差量更新总高度" class="headerlink" title="① 顺序查找，差量更新总高度"></a>① 顺序查找，差量更新总高度</h3><blockquote>
<p>性能较差的一种方案</p>
</blockquote>
<p>定义数组 itemHeightRecord 记录列表项实际高度，可以是自适应计算出来的高度，也可以是定义高度方法计算得到的高度</p>
<p>一开始，列表总高度 = 列表项个数 * 默认高度</p>
<p>查找起始项，由于没有记录偏移值，只能采用顺序叠加的方式判断， itemHeightRecord 中有值的取值，没值的取默认高度</p>
<blockquote>
<p>时间复杂度 O(n) </p>
</blockquote>
<p>渲染列表项，并将取得的高度与默认值之间的差更新到 <em>列表总高度</em> 上，并对 itemHeightRecord 进行赋值</p>
<p><em>缺点：查找起始项的效率太低</em></p>
<h3 id="②-二分查找，顺序更新偏移值"><a href="#②-二分查找，顺序更新偏移值" class="headerlink" title="② 二分查找，顺序更新偏移值"></a>② 二分查找，顺序更新偏移值</h3><p>思路来源于 <a href="https://juejin.im/post/5db684ddf265da4d495c40e5" target="_blank" rel="noopener">「前端进阶」高性能渲染十万条数据(虚拟列表)</a> ，并对更新偏移值进行优化</p>
<p>需要配置数据项最小高度，并根据这个值初始化每个数据项的高度和偏移值 – sizes</p>
<p>列表总高度 = <code>sizes[length-1].offset + sizes[length-1].height</code></p>
<p>查找起始项，根据 sizes 进行二分</p>
<blockquote>
<p>时间复杂度 O(logn)</p>
</blockquote>
<p>渲染列表项(假设有m项)，并将取得的高度替换 sizes 中的 height，并将 height 与默认值之间的差更新到其后每一项的 offset </p>
<blockquote>
<p>时间复杂度 O(n)</p>
</blockquote>
<p>与 vue-virtual-scroller 自适应高度的处理方式类似，只不过我们仅需要从起始项开始处理</p>
<p><a href="https://codesandbox.io/s/virtuallist-3-i3h9v" target="_blank" rel="noopener">在线 Demo</a></p>
<blockquote>
<p>引用自 「前端进阶」高性能渲染十万条数据(虚拟列表) ，更新偏移值那边的时间复杂度为 O(n*m)</p>
</blockquote>
<p><em>缺点：更新 sizes 较为耗时</em></p>
<h3 id="③-树状数组优化更新偏移值"><a href="#③-树状数组优化更新偏移值" class="headerlink" title="③ 树状数组优化更新偏移值"></a>③ 树状数组优化更新偏移值</h3><p>自己想出来的一种解决方案，能够达到查询和更新都是 <code>O(logn)</code> 时间复杂度</p>
<p>在未看 <a href="https://github.com/react-component/virtual-list" target="_blank" rel="noopener">virtual-list</a> 的方案前，我一度以为这是最好的方案</p>
<blockquote>
<p>效率上两者差不多，不过本方案会有 <em>鼠标和滚动条不同步</em> 的问题</p>
</blockquote>
<p>我们先建立数据模型，列表项的高度列表为长度为 len 的正数数组 nums ，有两种操作：</p>
<ol>
<li>更新数组中某项的值</li>
<li>找到一个最小的 n，前 n 项总和大于等于目标值 target ， 1&lt;= n &lt;= len</li>
</ol>
<p>很明显这是一个树状数组模板题，两个操作都是 O(logn) 的时间复杂度，模板可以参考我写的 <a href="https://github.com/francecil/LearningWeb/blob/master/source/_posts/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/%E5%9F%BA%E7%A1%80%E6%A8%A1%E6%9D%BF.js" target="_blank" rel="noopener">BinaryIndexedTree</a></p>
<blockquote>
<p>关于树状数组原理可以参考文章 – <a href="http://hawstein.com/2012/11/15/binary-indexed-trees/" target="_blank" rel="noopener">树状数组(Binary Indexed Trees)</a></p>
</blockquote>
<p>提供了几个方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">findGe</span>(<span class="params">target</span>) </span>&#123;&#125; <span class="comment">//找到最小的一个n，其前n项和大于等于 target</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">update</span> (<span class="params">i, val</span>) </span>&#123;&#125; <span class="comment">// 第 i 项增加差值val, 1&lt;=i&lt;=len</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">prefixSum</span> (<span class="params">n = this.tree.length - <span class="number">1</span></span>) </span>&#123;&#125; <span class="comment">//计算前 n 项的和 , 1&lt;=n&lt;=len</span></span><br></pre></td></tr></table></figure>

<p>查找起始项可以采用 findGe, 查找起始项偏移位置以及列表总高度可以用 prefixSum, 更新偏移值采用 update</p>
<p>测试效果：10W 条数据滚动时处理的计算时间在 1ms 左右</p>
<p>感兴趣的可以看我的开源库 <a href="https://github.com/francecil/virtual-list-demo" target="_blank" rel="noopener">virtual-list-demo</a></p>
<h3 id="回流优化"><a href="#回流优化" class="headerlink" title="回流优化"></a>回流优化</h3><p>可视区域的列表高度，一般不变，没必要每次都通过 <code>$el.clientHeight</code> 获取（会造成回流），在 resize 时再改变</p>
<p>如果是自适应高度，那本操作可有可无</p>
<h2 id="综合实现"><a href="#综合实现" class="headerlink" title="综合实现"></a>综合实现</h2><p>本来打算单独写一节的，最后决定采用 virtual-list 的设计方式</p>
<p>列表项采用 <code>Render Props</code> 的形式，用 cloneElement 生成实际列表项。</p>
<p>无论是自适应高度还是固定高度，都是通过参数配置，对外仅提供一个组件</p>
<h2 id="展望"><a href="#展望" class="headerlink" title="展望"></a>展望</h2><h3 id="浏览器兼容性测试"><a href="#浏览器兼容性测试" class="headerlink" title="浏览器兼容性测试"></a>浏览器兼容性测试</h3><p>个人方案仅测试了 chrome ，还没测试过其他浏览器，看开源库的时候有看到其做了一些兼容处理</p>
<p>比如火狐滚动白屏问题，Safari scrollTop 可能为负的问题，移动端卡顿的问题</p>
<p>篇幅有限，这些不在本文的研究范围，建议就是生产环境尽量用开源库</p>
<h3 id="图片自适应高度"><a href="#图片自适应高度" class="headerlink" title="图片自适应高度"></a>图片自适应高度</h3><p>若列表项高度是依赖于图片高度的，由于图片加载较慢，在初次渲染结束时（update生命周期中）并获取不到真实列表高度，需要等待图片加载完毕后计算</p>
<p>具体做法就是采用 ResizeObserver API ，不过这个兼容性有点问题，</p>
<p>vue-virtual-scroller 中其实有用到了，感兴趣的可以参考一下</p>
<h3 id="响应键盘事件"><a href="#响应键盘事件" class="headerlink" title="响应键盘事件"></a>响应键盘事件</h3><p>通过方向键切换列表项，需要拦截键盘默认事件，并赋值 scrollTop</p>
<p>这个更多的是基于长列表的 Select,Tree 中会用到，到时候用到再说</p>
<hr>
<p><a href="https://github.com/francecil/LearningWeb/blob/master/source/_posts/2019Q4/%E5%89%8D%E7%AB%AF%E9%95%BF%E5%88%97%E8%A1%A8%E5%8E%9F%E7%90%86%E5%8F%8A%E4%BC%98%E5%8C%96.md" target="_blank" rel="noopener">原文地址</a>，感兴趣的给个 star ~</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol>
<li><a href="https://github.com/ChuChencheng/virtual-list-demo" target="_blank" rel="noopener">virtual-list-demo</a></li>
<li><a href="https://juejin.im/post/5db684ddf265da4d495c40e5" target="_blank" rel="noopener">「前端进阶」高性能渲染十万条数据(虚拟列表)</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/34585166" target="_blank" rel="noopener">再谈前端虚拟列表的实现</a></li>
</ol>
]]></content>
      <categories>
        <category>大前端</category>
      </categories>
      <tags>
        <tag>前端优化</tag>
        <tag>长列表</tag>
      </tags>
  </entry>
  <entry>
    <title>Promise then 原理分析</title>
    <url>/2019/12/10/2019Q4/Promise%20then%20%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>先谈规范，再分析 polyfill 源码，最后实例解析。</p>
<a id="more"></a>

<h2 id="规范"><a href="#规范" class="headerlink" title="规范"></a>规范</h2><p>规范直接参考这边：<a href="http://www.ituring.com.cn/article/66566" target="_blank" rel="noopener">【翻译】Promises/A+规范</a></p>
<p><strong>返回值这部分重要且易错，这里单独提出来分析下</strong></p>
<p>首先，then 方法必须返回一个 promise 对象</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">promise2 = promise1.then(onFulfilled, onRejected);</span><br></pre></td></tr></table></figure>
<ul>
<li>如果 onFulfilled 或者 onRejected 返回一个值 x ，则运行下面的 <a href="#promise-solution-process"><strong>Promise 解决过程：<code>[[Resolve]](promise2, x)</code></strong></a></li>
<li>如果 onFulfilled 或者 onRejected 抛出一个异常 e ，则 promise2 必须拒绝执行，并返回拒因 e</li>
<li>如果 onFulfilled 不是函数且 promise1 成功执行， promise2 必须成功执行并返回相同的值<blockquote>
<p>e.g.: <code>promise1 = Promise.resolve(1);onFulfilled = 2;</code> <br>则 <code>promise2 = Promise {&lt;resolved&gt;: 1}</code></p>
</blockquote>
</li>
<li>如果 onRejected 不是函数且 promise1 拒绝执行， promise2 必须拒绝执行并返回相同的据因<blockquote>
<p>e.g.: <code>promise1 = Promise.reject(1);onRejected = 2;</code> <br>则 <code>promise2 = Promise {&lt;rejected&gt;: 1}</code></p>
</blockquote>
</li>
<li>不论 promise1 被 reject 还是被 resolve 时 promise2 都会被 resolve，只有出现异常时才会被 rejected。<blockquote>
<p>e.g.: <code>promise1 = Promise.reject(1);onFulfilled =()=&gt;1; onRejected=()=&gt;2;</code><br>则 <code>promise2 = Promise {&lt;resolved&gt;: 2}</code>;</p>
<p>e.g.: <code>promise1 = Promise.resolve(1);onFulfilled =()=&gt;{throw new Error(&#39;test&#39;)}; onRejected=(e)=&gt;console.log(e);</code><br>则 <code>promise2 = Promise {&lt;rejected&gt;: Error: test</code></p>
</blockquote>
</li>
</ul>
<h3 id="Promise-解决过程-Resolve-promise-x"><a href="#Promise-解决过程-Resolve-promise-x" class="headerlink" title="Promise 解决过程 [[Resolve]](promise, x)"></a><span id="promise-solution-process"><strong>Promise 解决过程 <code>[[Resolve]](promise, x)</code></strong></span></h3><p>promise 为 then 回调的返回值，运行 <code>[[Resolve]](promise, x)</code> 需遵循以下步骤：</p>
<ul>
<li>x 与 promise 相等<blockquote>
<p>如果 promise 和 x 指向同一对象，以 TypeError 为据因拒绝执行 promise <br>e.g.: <code>test = {};test = Promise.resolve().then(()=&gt;test)</code> <br><code>//Promise {&lt;rejected&gt;: TypeError: Chaining cycle detected for promise #&lt;Promise&gt;}</code></p>
</blockquote>
</li>
<li>x 为 Promise<blockquote>
<p>promise 接受x的状态 <br>e.g.: <code>promise2 = Promise.resolve().then(()=&gt;Promise.reject(1))</code> <br><code>//Promise {&lt;rejected&gt;: 1}</code></p>
</blockquote>
</li>
<li><strong>x 为对象或函数</strong><ul>
<li>把 x.then 赋值给 then。用引用保持，防止其他地方又更改了then的值</li>
<li>如果取 x.then 的值时抛出错误 e ，则以 e 为据因拒绝 promise</li>
<li>如果 then 是函数，将 x 作为函数的作用域 this 调用之。传递两个回调函数作为参数，第一个参数叫做 resolvePromise ，第二个参数叫做 rejectPromise:<ul>
<li>如果 resolvePromise 以值 y 为参数被调用，则运行 [[Resolve]](promise, y)<blockquote>
<p><code>Promise.resolve().then(()=&gt;({a:1,then:function (res,rej){res(this.a)}}))</code></p>
<p><code>//Promise {&lt;resolved&gt;: 1}</code></p>
</blockquote>
</li>
<li>如果 rejectPromise 以据因 r 为参数被调用，则以据因 r 拒绝 promise<blockquote>
<p><code>Promise.resolve().then(()=&gt;({a:1,then:function (res,rej){rej(this.a)}}))</code></p>
<p><code>//Promise {&lt;rejected&gt;: 1}</code></p>
</blockquote>
</li>
<li>如果 resolvePromise 和 rejectPromise 均被调用，或者被同一参数调用了多次，则优先采用首次调用并忽略剩下的调用</li>
<li>如果调用 then 方法抛出了异常 e：<ul>
<li>如果 resolvePromise 或 rejectPromise 已经被调用，则忽略之</li>
<li>否则以 e 为据因拒绝 promise</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>x 不为对象或函数<blockquote>
<p>以 x 为参数执行 promise </p>
</blockquote>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">如果一个 promise 被一个循环的 thenable 链中的对象解决，而 [[Resolve]](promise, thenable) 的递归性质又使得其被再次调用，根据上述的算法将会陷入无限递归之中。算法虽不强制要求，但也鼓励施者检测这样的递归是否存在，若检测到存在则以一个可识别的 <span class="built_in">TypeError</span> 为据因来拒绝 promise</span><br></pre></td></tr></table></figure>

<p>这个目前还不知道怎么写才能产生循环的 thenable 链 - -</p>
<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><h3 id="then-操作解析"><a href="#then-操作解析" class="headerlink" title="then 操作解析"></a>then 操作解析</h3><p>全局维护一个 microTask Queue ，每个 promise 自身维护一个 queue</p>
<p>当 promise 执行 then 方法时：</p>
<ol>
<li>令 then 方法中的回调为 resolver，令 promise 的内部值为 outcome</li>
<li>创建一个 PENDING 状态的 Promise 对象 promise2</li>
<li>如果 promise 处于 PENDING 状态，将 “执行 resolver ，改变 promise2 状态” 作为队列项放入该 promise 对象自身维护的 queue</li>
<li>否则将 “执行 resolver ，改变 promise2 状态” 作为 microTask 放入 microTask Queue</li>
<li>返回 promise2</li>
</ol>
<p>当同步代码执行完毕，开始执行 microTask Queue 中的任务</p>
<p>执行 microTask ：</p>
<ol>
<li>以 promise 的内部值 outcome 作为参数执行 resolver 并得到返回值 returnValue</li>
<li>若出现异常，将异常赋值给 returnValue </li>
<li>若未出现异常，对 returnValue 做些处理，这里不细讲</li>
<li>修改 promise2 的状态为 FULFILLED/REJECTED ，并修改 promise2 的内部值 outcome 为 returnValue</li>
<li>该 promise2 维护的 queue 中的队列项放入 microTask Queue </li>
</ol>
<p>不断的执行 microTask 直到 microTask Queue 为空，一轮 event loop 结束</p>
<h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><p>对 <a href="https://github.com/calvinmetcalf/lie" target="_blank" rel="noopener">lie.js</a> (一个 Promise polyfill 库) 的代码做个精简，仅考虑普通的 then 回调和 resolve 方法</p>
<p>然后 microTask 任务执行接口我们直接用的 setTimeout ，不搞 Mutation 那些幺蛾子，代码如下</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// immediate.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> scheduleDrain = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  setTimeout(nextTick, <span class="number">0</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> draining;</span><br><span class="line"><span class="keyword">var</span> queue = [];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在同步代码 task 执行之后，模拟清空 microTask queue</span></span><br><span class="line"><span class="comment">// 由于执行过程中可能有新的 microTask 所以用了双层循环</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">nextTick</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  draining = <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">var</span> i, oldQueue;</span><br><span class="line">  <span class="keyword">var</span> len = queue.length;</span><br><span class="line">  <span class="keyword">while</span> (len) &#123;</span><br><span class="line">    oldQueue = queue;</span><br><span class="line">    queue = [];</span><br><span class="line">    i = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span> (++i &lt; len) &#123;</span><br><span class="line">      oldQueue[i]();</span><br><span class="line">    &#125;</span><br><span class="line">    len = queue.length;</span><br><span class="line">  &#125;</span><br><span class="line">  draining = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">immediate</span>(<span class="params">task</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (queue.push(task) === <span class="number">1</span> &amp;&amp; !draining) &#123;</span><br><span class="line">    scheduleDrain();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Promise 代码如下</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// promise.js</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// then 方法执行时作为参数 resolver 实例化 Promise</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">INTERNAL</span> (<span class="params"></span>) </span>&#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> REJECTED = <span class="string">'REJECTED'</span>;</span><br><span class="line"><span class="keyword">const</span> FULFILLED = <span class="string">'FULFILLED'</span>;</span><br><span class="line"><span class="keyword">const</span> PENDING = <span class="string">'PENDING'</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Promise</span> (<span class="params">resolver</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> resolver !== <span class="string">'function'</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">'resolver must be a function'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">this</span>.state = PENDING;</span><br><span class="line">  <span class="keyword">this</span>.queue = [];</span><br><span class="line">  <span class="keyword">this</span>.outcome = <span class="keyword">void</span> <span class="number">0</span>;</span><br><span class="line">  <span class="comment">// 外部通过 new 实例化时执行</span></span><br><span class="line">  <span class="keyword">if</span> (resolver !== INTERNAL) &#123;</span><br><span class="line">    safelyResolveThenable(<span class="keyword">this</span>, resolver);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.prototype.then = <span class="function"><span class="keyword">function</span> (<span class="params">onFulfilled, onRejected</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 特殊参数的处理</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> onFulfilled !== <span class="string">'function'</span> &amp;&amp; <span class="keyword">this</span>.state === FULFILLED ||</span><br><span class="line">    <span class="keyword">typeof</span> onRejected !== <span class="string">'function'</span> &amp;&amp; <span class="keyword">this</span>.state === REJECTED) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 创建一个 PENDING 状态的 promise</span></span><br><span class="line">  <span class="keyword">var</span> promise = <span class="keyword">new</span> <span class="keyword">this</span>.constructor(INTERNAL);</span><br><span class="line">  <span class="comment">// 根据原 promise 状态进行不同处理</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.state !== PENDING) &#123;</span><br><span class="line">    <span class="keyword">var</span> resolver = <span class="keyword">this</span>.state === FULFILLED ? onFulfilled : onRejected;</span><br><span class="line">    makeMicroTask(promise, resolver, <span class="keyword">this</span>.outcome);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.queue.push(<span class="keyword">new</span> QueueItem(promise, onFulfilled, onRejected));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> promise;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.resolve = <span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (value <span class="keyword">instanceof</span> <span class="keyword">this</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> handleResolve(<span class="keyword">new</span> <span class="keyword">this</span>(INTERNAL), value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// promsie 内部队列项</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">QueueItem</span> (<span class="params">promise, onFulfilled, onRejected</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.promise = promise;</span><br><span class="line">  <span class="comment">// 仅考虑 function类型的 onFulfilled</span></span><br><span class="line">  <span class="keyword">this</span>.onFulfilled = onFulfilled;</span><br><span class="line">  <span class="keyword">this</span>.callFulfilled = <span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">    makeMicroTask(<span class="keyword">this</span>.promise, <span class="keyword">this</span>.onFulfilled, value);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">// 暂不处理 onRejected</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将 handleResolve 操作放入 microtask</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">makeMicroTask</span> (<span class="params">promise, func, value</span>) </span>&#123;</span><br><span class="line">  immediate(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    handleResolve(promise, func(value));</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 改变 promise 状态，并通知 queue 中的 promise 执行 makeMicroTask</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleResolve</span> (<span class="params">self, value</span>) </span>&#123;</span><br><span class="line">  self.state = FULFILLED;</span><br><span class="line">  self.outcome = value;</span><br><span class="line">  <span class="keyword">var</span> i = <span class="number">-1</span>;</span><br><span class="line">  <span class="keyword">var</span> len = self.queue.length;</span><br><span class="line">  <span class="keyword">while</span> (++i &lt; len) &#123;</span><br><span class="line">    self.queue[i].callFulfilled(value);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> self;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对 resolver 方法的两个参数（resolve,reject）进行包装</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">safelyResolveThenable</span> (<span class="params">self, thenable</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> called = <span class="literal">false</span>;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">onError</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (called) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    called = <span class="literal">true</span>;</span><br><span class="line">    <span class="comment">// 暂不处理 reject</span></span><br><span class="line">    <span class="comment">// handlers.reject(self, value);</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">onSuccess</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (called) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    called = <span class="literal">true</span>;</span><br><span class="line">    handleResolve(self, value);</span><br><span class="line">  &#125;</span><br><span class="line">  thenable(onSuccess, onError);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="实例分析"><a href="#实例分析" class="headerlink" title="实例分析"></a>实例分析</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">    resolve(<span class="number">3</span>);</span><br><span class="line">    <span class="built_in">Promise</span>.resolve().then(<span class="function"><span class="params">()</span>=&gt;</span> <span class="built_in">console</span>.log(<span class="number">4</span>))</span><br><span class="line">&#125;).then(<span class="function"><span class="params">num</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(num)</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">2</span>)</span><br></pre></td></tr></table></figure>

<details>
<summary>答案</summary>

<p>1243 </p>
</details>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.resolve().then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">  <span class="built_in">Promise</span>.resolve().then(<span class="function"><span class="params">()</span>=&gt;</span> <span class="built_in">console</span>.log(<span class="number">4</span>))</span><br><span class="line">&#125;).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">3</span>)</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">2</span>)</span><br></pre></td></tr></table></figure>

<details>
<summary>答案</summary>

<p>2143 </p>
</details>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">r</span>) =&gt;</span> &#123;</span><br><span class="line">  r()</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">&#125;).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">11</span>)</span><br><span class="line">&#125;).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">12</span>)</span><br><span class="line">&#125;).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">13</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">var</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">r</span>) =&gt;</span> &#123;</span><br><span class="line">  r()</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">2</span>);</span><br><span class="line">  <span class="keyword">let</span> promise = <span class="built_in">Promise</span>.resolve().then(<span class="function"><span class="params">()</span>=&gt;</span> <span class="built_in">console</span>.log(<span class="number">21</span>)).then(<span class="function"><span class="params">()</span>=&gt;</span> <span class="built_in">console</span>.log(<span class="number">22</span>)).then(<span class="function"><span class="params">()</span>=&gt;</span> <span class="built_in">console</span>.log(<span class="number">23</span>))</span><br><span class="line">  promise.then(<span class="function"><span class="params">()</span>=&gt;</span><span class="built_in">console</span>.log(<span class="number">29</span>))</span><br><span class="line">  <span class="built_in">Promise</span>.resolve().then(<span class="function"><span class="params">()</span>=&gt;</span> <span class="built_in">console</span>.log(<span class="number">24</span>)).then(<span class="function"><span class="params">()</span>=&gt;</span> <span class="built_in">console</span>.log(<span class="number">25</span>)).then(<span class="function"><span class="params">()</span>=&gt;</span> <span class="built_in">console</span>.log(<span class="number">26</span>))</span><br><span class="line">&#125;)</span><br><span class="line">promise.then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">27</span>)</span><br><span class="line">&#125;)</span><br><span class="line">promise.then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">28</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<details>
<summary>答案</summary>

<p>【1,2,11,21,24,27,28,12,22,25,13,23,26,29】</p>
</details>

<h2 id="如何测试"><a href="#如何测试" class="headerlink" title="如何测试"></a>如何测试</h2><p>当我们的 polyfill 写完后，需要测试下是否符合规范，我们自己写测试用例肯定是不可能的，这里有一个测试库<br><a href="https://github.com/promises-aplus/promises-tests" target="_blank" rel="noopener">promises-tests</a></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> tests = <span class="built_in">require</span>(<span class="string">"promises-aplus-tests"</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="built_in">Promise</span> = <span class="built_in">require</span>(<span class="string">"./index"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> deferred = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> resolve, reject;</span><br><span class="line">    <span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">_resolve, _reject</span>) </span>&#123;</span><br><span class="line">        resolve = _resolve;</span><br><span class="line">        reject = _reject;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        promise: promise,</span><br><span class="line">        resolve: resolve,</span><br><span class="line">        reject: reject</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> adapter = &#123;</span><br><span class="line">    deferred</span><br><span class="line">&#125;;</span><br><span class="line">tests.mocha(adapter);</span><br></pre></td></tr></table></figure>

<p>这样就可以做测试了</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol>
<li><a href="https://juejin.im/post/5aa3f7b9f265da23766ae5ae" target="_blank" rel="noopener">从一道Promise执行顺序的题目看Promise实现</a></li>
<li><a href="https://segmentfault.com/a/1190000020037919" target="_blank" rel="noopener">手写一个符合A+规范的Promise</a></li>
</ol>
]]></content>
      <categories>
        <category>大前端</category>
      </categories>
      <tags>
        <tag>ECMAScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Code Server搭建指南</title>
    <url>/2019/12/10/2019Q4/Code%20Server%E6%90%AD%E5%BB%BA%E6%8C%87%E5%8D%97/</url>
    <content><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>有个个人项目，比如博客、开源项目，在学校宿舍电脑上写一半，回到家想继续写，怎么做到？</p>
<a id="more"></a>

<p>上古时代我们可能会采用文档拷贝传送的方式。弊端太多：</p>
<ol>
<li>部分改动需要传整个项目，太麻烦</li>
<li>家里还得配置一样的开发环境</li>
<li>手机等移动端无法开发</li>
</ol>
<p>后来有了 git ，我们只需要把项目传到公网仓库，通过 git 操作来同步项目，不过这也仅仅是解决了上面的问题1，其他问题仍存在：</p>
<ol>
<li>环境配置</li>
<li>移动端无法开发</li>
</ol>
<p>甚至还引入新的问题：</p>
<ol>
<li>代码写一半，就提交远程仓库，此时该提交是有问题的，后面回退容易出问题</li>
</ol>
<p>把问题捋一捋，为了解决多地开发环境一致，我们需要把项目的开发放到服务器上，这样同时解决了项目同步的问题，因为不需要进行同步。</p>
<p>为了实现多端开发，我们肯定是直接通过浏览器操作最方便，而不是每次都得先下载工具远程连接到服务器。</p>
<p>因此，我们需要一个 web 版的 IDE ，最好把权限控制这块也做好了，防止安全问题。</p>
<p>那么本文的主角 Code Server 就登场了</p>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><a href="https://github.com/cdr/code-server" target="_blank" rel="noopener">code-server</a> 是运行在远程服务器上的 VS Code, 通过浏览器进行访问.</p>
<p>拥有以下特点</p>
<ul>
<li>一致的环境：可以在各种平台上进行编码并且实时同步。</li>
<li>Server-powered：利用服务器性能加速测试和编译；个人设备省电</li>
</ul>
<p><img src="https://github.com/cdr/code-server/raw/master/doc/assets/ide.gif" alt="code-server"></p>
<h2 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h2><p>我们通过 docker 进行项目的启动</p>
<ul>
<li>① 安装 docker 并启动<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ yum install docker-io –y</span><br><span class="line">$ systemctl start docker</span><br></pre></td></tr></table></figure></li>
<li>② 启动 code server</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker run -d -e PASSWORD=xxxx -p 8080:8080 codercom/code-server:v2</span><br></pre></td></tr></table></figure>

<p>以上的命令，将拉取当前较为稳定的 code-server v2 版本镜像，并基于此构建并启动一个容器</p>
<p><code>-d</code>： 使用守护态运行容器，这样终端中断就不会终止项目 <br><code>-e PASSWORD=xxxx</code>： 表示设置环境变量 PASSWORD 为 xxxx ，构建的时候会将该参数传进入。如果不传的话，系统会随机生成一个密码 <br><code>-p 8080:8080</code>： 默认配置。使用服务器的8080端口映射该容器的8080端口，也可以使用本机的80端口进行映射\</p>
<ul>
<li>③ 使用浏览器访问</li>
</ul>
<p>访问 <code>http://&lt;server_ip&gt;:8080</code> 进入我们的登录界面，输入密码 xxxx 后即可进入编辑器界面</p>
<p>界面和 vscode 一致，可以进行愉快的编码了 ~</p>
<h2 id="数据存储"><a href="#数据存储" class="headerlink" title="数据存储"></a>数据存储</h2><p>你可能会有这样的疑问：</p>
<ol>
<li>我们创建的文件都存在哪里</li>
<li>容器删除后数据会不会不见了</li>
</ol>
<blockquote>
<p>如果对 docker 比较了解的话可以跳过本章</p>
</blockquote>
<p>从 code-server 的 <a href="https://github.com/cdr/code-server/blob/master/Dockerfile#L56" target="_blank" rel="noopener">Dockerfile</a> 中可以看到，</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">VOLUME [ &quot;&#x2F;home&#x2F;coder&#x2F;project&quot; ]</span><br></pre></td></tr></table></figure>
<p>也就是说，<code>/home/coder/project</code> 目录在运行时会自动挂载为匿名数据卷，往该目录中写入的信息不会进容器存储层。</p>
<p>这里介绍下数据卷：</p>
<p>数据卷简单的说就是在主机上分配了一个目录，容器对被挂载路径文件的访问其实就是对该目录文件的访问。其拥有以下特性：</p>
<ul>
<li><code>数据卷</code> 用于容器间的共享。（这里一般指的是命名数据卷，因为匿名卷名字是随机分配的，而其他容器并不清楚</li>
<li>对 <code>数据卷</code> 的修改立马生效。（修改数据卷中的内容，容器访问到的也是修改后的</li>
<li>对 <code>数据卷</code> 的更新，不会影响镜像。（镜像和数据卷之间没有关联</li>
<li>手动删除 <code>数据卷</code> 后，如果该容器还在运行，那么容器所挂载的目录会变成一个空目录，且无法对其进行操作(删除目录，创建文件)</li>
<li><code>数据卷</code> 默认一直存在，即使容器被删除。</li>
</ul>
<p>相关命令：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看所有数据卷</span></span><br><span class="line">docker volume ls</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看容器的信息</span></span><br><span class="line">docker inspect &lt;container-name&gt;</span><br><span class="line"><span class="comment"># 找到 Mounts 信息，如</span></span><br><span class="line"><span class="comment">#        "Mounts": [</span></span><br><span class="line"><span class="comment">#            &#123;</span></span><br><span class="line"><span class="comment">#                "Type": "volume",</span></span><br><span class="line"><span class="comment">#                "Name": "4dc8ad7ccc34b91b0beedf722072537cc545530f9b86de207305913614a82c0c",</span></span><br><span class="line"> <span class="comment">#               "Source": "/var/lib/docker/volumes/4dc8ad7ccc34b91b0beedf722072537cc545530f9b86de207305913614a82c0c/_data",</span></span><br><span class="line"><span class="comment">#                "Destination": "/home/coder/project",</span></span><br><span class="line"><span class="comment">#                "Driver": "local",</span></span><br><span class="line"><span class="comment">#                "Mode": "",</span></span><br><span class="line"><span class="comment">#                "RW": true,</span></span><br><span class="line"><span class="comment">#                "Propagation": ""</span></span><br><span class="line"><span class="comment">#            &#125;</span></span><br><span class="line"><span class="comment">#        ],</span></span><br><span class="line"><span class="comment"># 可以看出来其将容器的 /home/coder/project 目录挂载了匿名数据卷，并分配了 4dc8ad7ccc34b91b0beedf722072537cc545530f9b86de207305913614a82c0c 这个 name，该数据券其实是位于主机的 /var/lib/docker/volumes/&lt;volume_name&gt;/_data/ 目录下</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看指定数据卷（可以是命名的，也可以是匿名的）的信息， </span></span><br><span class="line"><span class="comment"># 比如 my-vol 就是一个命名数据卷，后者就是某个匿名数据卷的 name</span></span><br><span class="line"><span class="comment"># docker volume inspect my-vol</span></span><br><span class="line">docker volume inspect 4dc8ad7ccc34b91b0beedf722072537cc545530f9b86de207305913614a82c0c</span><br><span class="line"><span class="comment"># 大致输出如下：</span></span><br><span class="line"><span class="comment">#[</span></span><br><span class="line"><span class="comment">#    &#123;</span></span><br><span class="line"><span class="comment">#        "Driver": "local",</span></span><br><span class="line"><span class="comment">#        "Labels": null,</span></span><br><span class="line"><span class="comment">#        "Mountpoint": "/var/lib/docker/volumes/4dc8ad7ccc34b91b0beedf722072537cc545530f9b86de207305913614a82c0c/_data",</span></span><br><span class="line"><span class="comment">#        "Name": "4dc8ad7ccc34b91b0beedf722072537cc545530f9b86de207305913614a82c0c",</span></span><br><span class="line"><span class="comment">#        "Options": &#123;&#125;,</span></span><br><span class="line"><span class="comment">#        "Scope": "local"</span></span><br><span class="line"><span class="comment">#    &#125;</span></span><br><span class="line"><span class="comment">#]</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>数据卷是可以指定存储位置（即 Driver 配置项），默认 local 为当前主机，也可以指定其他机器作为driver，感兴趣的可以看 <a href="https://www.cnblogs.com/sparkdev/p/8504050.html" target="_blank" rel="noopener">Docker 数据卷之进阶篇</a></p>
</blockquote>
<p>所以我们可以回答前面两个问题了：</p>
<p>我们项目中创建的文件（<code>/home/coder/project/</code> 目录下创建的），是存在于主机目录的，可以通过<code>docker inspect &lt;container-name&gt;</code> 查看，一般是在  <code>/var/lib/docker/volumes/&lt;volume_name&gt;/_data/</code> 目录下</p>
<p>容器删除后数据不会丢失，都还在匿名数据卷目录下。</p>
<p>只是有个问题，其他容器不知道这个匿名数据卷的存在</p>
<p>所以你会发现，你再启动一个新的容器，它又创建了一个匿名数据卷，并且不会有上个匿名数据卷中的数据</p>
<p>解决方法有两种：</p>
<ol>
<li>使用命名数据卷</li>
<li>挂载主机目录</li>
</ol>
<p>先介绍做法，再讨论利弊</p>
<h3 id="使用命名数据卷"><a href="#使用命名数据卷" class="headerlink" title="使用命名数据卷"></a>使用命名数据卷</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker run -d -e PASSWORD=xxxx -v coder_project:/home/coder/project  -p 8080:8080 codercom/code-server:v2</span><br></pre></td></tr></table></figure>
<p><code>-v coder_project:/home/coder/project</code> ：挂载 coder_project 数据卷到容器的 <code>/home/coder/project</code> 目录，如果数据卷不存在，会进行创建。同时覆盖这个挂载设置： <code>VOLUME [ &quot;/home/coder/project&quot; ]</code></p>
<p>我们在浏览器中访问该项目，并在 project 目录下新增几个文件，然后关闭容器。此时开启一个新的容器，打开浏览器进行访问，可以发现 project 目录下加载了刚刚创建的文件。</p>
<p>说明现在多个容器都是去拿同个数据卷上的数据</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 展示 coder_project 数据卷的详细信息</span></span><br><span class="line"><span class="comment"># 可以看到数据存放在 /var/lib/docker/volumes/coder_project/_data</span></span><br><span class="line">docker volume inspect coder_project</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以看到我们刚刚创建的文件</span></span><br><span class="line"><span class="built_in">cd</span> /var/lib/docker/volumes/coder_project/_data &amp;&amp; ll</span><br></pre></td></tr></table></figure>

<p>也可以使用 –mount 指令，上面的 -v 指令相当于</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">--mount source&#x3D;coder_project,destination&#x3D;&#x2F;home&#x2F;coder&#x2F;project</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意：Docker 17.06 版本之后才支持 –mount 指令</p>
</blockquote>
<p>关于两个指令的区别还可以看 <a href="https://docs.docker.com/storage/volumes/" target="_blank" rel="noopener">Use volumes</a></p>
<p>当 coder_project 数据卷不存在时，会报错而不是自动创建</p>
<h3 id="挂载主机目录"><a href="#挂载主机目录" class="headerlink" title="挂载主机目录"></a>挂载主机目录</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker run -d -e PASSWORD=xxxx -v /usr/<span class="built_in">local</span>/coder/project:/home/coder/project  -p 8080:8080 codercom/code-server:v2</span><br></pre></td></tr></table></figure>

<p><code>-v /usr/local/coder/project:/home/coder/project</code> ：挂载 主机的 <code>/usr/local/coder/project</code> 目录到容器的 <code>/home/coder/project</code> 目录，如果主机目录不存在，会进行创建。同时覆盖这个挂载设置： <code>VOLUME [ &quot;/home/coder/project&quot; ]</code></p>
<p>我们创建几个文件试试</p>
<blockquote>
<p>如果发现 Permission denied ，可能是 selinux 的问题或者用户目录权限的问题，可以自行搜索解决方案</p>
</blockquote>
<p>可以发现主机目录 <code>/usr/local/coder/project</code> 也会有刚刚创建的文件，我们往主机目录创建的文件，容器中也可以看到。</p>
<p>也可以使用 –mount 指令，上面的 -v 指令相当于</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">--mount type&#x3D;bind,source&#x3D;&#x2F;usr&#x2F;local&#x2F;coder&#x2F;project,target&#x3D;&#x2F;home&#x2F;coder&#x2F;project</span><br></pre></td></tr></table></figure>
<p>type=bind 表示挂载主机目录，默认为 volume</p>
<p>当 主机目录 不存在时，会报错而不是自动创建</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>数据卷拥有挂载主机目录的特点和优点，并且支持挂载在其他主机上，对我们后续集群应用提供了可行性。</p>
<p>个人更偏向于采用数据卷的方式。</p>
<p><strong>因此，我们的容器启动命令如下：</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker run -d -e PASSWORD=xxxx -v coder_project:/home/coder/project  -p 8080:8080 codercom/code-server:v2</span><br></pre></td></tr></table></figure>


<h2 id="git-配置"><a href="#git-配置" class="headerlink" title="git 配置"></a>git 配置</h2><p>code server 内置了 git 插件了</p>
<p>我们 new Terminal，clone 一个自己的项目看看</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/francecil/LearningWeb.git</span><br></pre></td></tr></table></figure>
<p>修改提交，此时会提示说你没有配置 git 账号</p>
<p>按说明的指示，输入以下命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git config --global user.email &quot;you@example.com&quot;</span><br><span class="line">git config --global user.name &quot;Your Name&quot;</span><br></pre></td></tr></table></figure>

<p>然后进行 push （使用命令行 git push ），此时会提示输入账号密码。</p>
<p>输入完后即可推送成功。</p>
<p>所以 git 其实也没有什么需要配置的</p>
<h2 id="插件安装和配置同步"><a href="#插件安装和配置同步" class="headerlink" title="插件安装和配置同步"></a>插件安装和配置同步</h2><p>直接在线下载，很多插件都不能用，并且 code server 的插件市场 和 vs code 的不一样，见 <a href="https://github.com/cdr/code-server#extensions" target="_blank" rel="noopener">https://github.com/cdr/code-server#extensions</a></p>
<p>所以推荐的方式是 <code>Install from VSIX...</code></p>
<p>如何快速离线安装拓展，可以参考我之前写的文章 <a href="../2019Q3/vscode配置同步及拓展批量离线安装.md">vscode配置同步及拓展批量离线安装</a></p>
<p>注意，拓展应该下载到数据卷中，这样容器就可以进行共享了</p>
<p>有了前文的经验，我们明白此时应该采用命名数据卷的方法。</p>
<p>那么目标容器目录是哪个呢，从官方的介绍中得知</p>
<p>code server 的配置和拓展处在 <code>/home/coder/.local/share/code-server</code> 目录</p>
<p>修改下我们的容器运行命令如下</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker run -d -e PASSWORD=xxxx -v coder_project:/home/coder/project -v coder_config:/home/coder/.<span class="built_in">local</span>/share/code-server -p 8080:8080 codercom/code-server:v2</span><br></pre></td></tr></table></figure>

<p>成功运行？ 不，正常你应该会得到这个报错(可以通过 docker logs &lt;容器名&gt;查看)</p>
<blockquote>
<p>permission denied, mkdir ‘/home/coder/.local/share/code-server/extensions’</p>
</blockquote>
<p><a href="https://github.com/cdr/code-server/issues/992" target="_blank" rel="noopener">issue</a> 上有这个的讨论，好像是因为权限问题</p>
<p>有个解决方案，chmod 设置该所挂载的主机目录权限</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">chmod 777 -R &#x2F;var&#x2F;lib&#x2F;docker&#x2F;volumes&#x2F;coder_config&#x2F;_data</span><br></pre></td></tr></table></figure>

<p>然后重新执行上面的容器运行命令，执行以下命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd &#x2F;var&#x2F;lib&#x2F;docker&#x2F;volumes&#x2F;coder_config&#x2F;_data &amp;&amp; ll</span><br><span class="line"></span><br><span class="line">-rw-r--r-- 1 coder coder   75 Nov  1 19:31 coder.json</span><br><span class="line">drwxr-xr-x 2 coder coder 4096 Nov  1 19:30 extensions</span><br><span class="line">-rw-r--r-- 1 coder coder    0 Nov  1 19:31 heartbeat</span><br><span class="line">-rw-r--r-- 1 coder coder    2 Nov  1 19:31 languagepacks.json</span><br><span class="line">drwxr-xr-x 3 coder coder 4096 Nov  1 19:30 logs</span><br><span class="line">-rw-r--r-- 1 coder coder   36 Nov  1 19:30 machineid</span><br><span class="line">drwxr-xr-x 4 coder coder 4096 Nov  1 19:31 User</span><br></pre></td></tr></table></figure>
<p>可以看到自动创建了很多文件。</p>
<p>回到正题，我们安装的插件应该就是放在 extensions 目录下</p>
<p>我们新建个目录用来存放离线下载的插件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[xxx _data]# mkdir tmp</span><br></pre></td></tr></table></figure>

<p>然后 <code>Install from VSIX...</code> 的时候就从该目录加载即可，安装成功后会存在于 extensions 下</p>
<p>后面新建的容器直接读的 extensions 目录，无需再次安装</p>
<h2 id="docker-compose-的使用"><a href="#docker-compose-的使用" class="headerlink" title="docker-compose 的使用"></a>docker-compose 的使用</h2><p>是不是觉得 docker run 的命令太长了，还有容器挂了怎么办。</p>
<p>我们可以采用 docker-compose 技术</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#安装docker-compose</span></span><br><span class="line">curl -L https://github.com/docker/compose/releases/download/1.24.1/docker-compose-`uname -s`-`uname -m` &gt; /usr/<span class="built_in">local</span>/bin/docker-compose</span><br><span class="line">chmod +x /usr/<span class="built_in">local</span>/bin/docker-compose</span><br><span class="line"><span class="comment">#查看安装情况</span></span><br><span class="line">docker-compose --version</span><br></pre></td></tr></table></figure>

<p>然后找个目录（如 <code>/usr/local/code-server</code>）创建 docker-compose.yml , 内容如下</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">"2"</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">code-server:</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">code-server</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">codercom/code-server:v2</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"8080:8080"</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"coder_project:/home/coder/project"</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"coder_config:/home/coder/.local/share/code-server"</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">PASSWORD:</span> <span class="string">"xxxx"</span></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line">  <span class="attr">coder_project:</span></span><br><span class="line">    <span class="attr">external:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">coder_config:</span></span><br><span class="line">    <span class="attr">external:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<p>注意这里配置了 <code>restart: always</code> 当容器挂掉,或 docker 启动的时候， code-server 会进行启动（重启）</p>
<p>命名数据卷需要在外层使用 volumes 指定。这里增加 <code>external: true</code> 配置表示使用外部已经定义的数据卷，不存在则会报错，提示我们需要先用 <code>docker volume create --name=coder_project</code> 创建</p>
<p>那不配置的话呢，会创建数据卷，名为 code-server_coder_project 和 code-server_coder_config ，即 <code>&lt;service-name&gt;_&lt;volume-name&gt;</code></p>
<p>和我们之前已创建的数据卷不一致，另外还有可能出现之前的 Permission denied 问题。因此这里直接用的原数据卷</p>
<p>然后在 docker-compose.yml 同级目录下执行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure>
<p>即可启动服务</p>
<h2 id="域名配置和转发"><a href="#域名配置和转发" class="headerlink" title="域名配置和转发"></a>域名配置和转发</h2><p>目前，我们的项目是通过 ip 访问的，太过麻烦（我是经常记不住</p>
<p>买域名和配置dns解析这里就略过了。</p>
<p>现在的问题是，访问域名怎么转发到 8080 端口的项目上去？</p>
<p>显然，我们需要通过nginx进行转发，且nginx是跑在80端口上的。</p>
<ul>
<li>安装 nginx<blockquote>
<p>yum install nginx</p>
</blockquote>
</li>
<li>修改配置<blockquote>
<p>vi /etc/nginx/nginx.conf <br>增加如下配置,当采用域名 <code>code.test.com</code> 访问的时候，会转发到本地 8080 端口的项目 <br>因为用到了 websocket ，所以还加了一些头部设置</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name  code.test.com;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">      proxy_pass http://127.0.0.1:8080;</span><br><span class="line">      proxy_set_header Host <span class="variable">$host</span>;</span><br><span class="line">      proxy_set_header Upgrade <span class="variable">$http_upgrade</span>;</span><br><span class="line">      proxy_set_header Connection upgrade;</span><br><span class="line">      proxy_set_header Accept-Encodeing gzip;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>启动 nginx<blockquote>
<p>systemctl start nginx</p>
</blockquote>
</li>
</ul>
<p>此时，我们访问 <a href="http://code.test.com/" target="_blank" rel="noopener">http://code.test.com/</a> 即可进入我们的 code server 项目 ~</p>
<h2 id="ssl-配置"><a href="#ssl-配置" class="headerlink" title="ssl 配置"></a>ssl 配置</h2><p>为了让我们的项目更安全，比如防劫持，我们需要配置上 ssl</p>
<p>首先进行ssl证书申请</p>
<h3 id="免费申请-ssl-证书"><a href="#免费申请-ssl-证书" class="headerlink" title="免费申请 ssl 证书"></a>免费申请 ssl 证书</h3><p><a href="https://common-buy.aliyun.com/?commodityCode=cas#/buy" target="_blank" rel="noopener">申请界面</a></p>
<p>切换到最后的 免费型 DV SSL，然后0元购买，接着按提示点点点，然后等待审核就可以了</p>
<p>一般10分钟就审核完毕</p>
<p>可以在 SSL 证书页面查看到状态显示为 <code>已签发</code></p>
<blockquote>
<p>可以通过顶部搜索栏搜 ssl 快速找到该页面</p>
</blockquote>
<p>然后下载证书，将证书上传到服务器即可。</p>
<h3 id="nginx-配置"><a href="#nginx-配置" class="headerlink" title="nginx 配置"></a>nginx 配置</h3><p>阿里云的文档写的很详细，这里以 nginx 为例</p>
<ol>
<li>解压下载的文件，得到 .crt 和 .key 文件，比如 a.crt 和 a.key</li>
<li>进入服务器的 nginx 配置目录 /etc/nginx<blockquote>
<p>如果是自己编译生成的 nginx 就用 <code>whereis nginx</code> 命令看下安装目录在哪，如 /usr/local/nginx/</p>
</blockquote>
</li>
<li>创建 cert 目录，将解压后的两个文件放入该目录<blockquote>
<p>我这个新买的服务器没有 rz 工具，得进行安装： <code>yum install -y lrzsz</code> <br>或者使用 xshell 的文件传输 sftp</p>
</blockquote>
</li>
<li>编辑 nginx.conf 文件，找到 443 相关的注释<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#    server &#123;</span></span><br><span class="line"><span class="comment">#        listen       443 ssl http2 default_server;</span></span><br><span class="line"><span class="comment">#        listen       [::]:443 ssl http2 default_server;</span></span><br><span class="line"><span class="comment">#        server_name  _;</span></span><br><span class="line"><span class="comment">#        root         /usr/share/nginx/html;</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#        ssl_certificate "/etc/pki/nginx/server.crt";</span></span><br><span class="line"><span class="comment">#        ssl_certificate_key "/etc/pki/nginx/private/server.key";</span></span><br><span class="line"><span class="comment">#        ssl_session_cache shared:SSL:1m;</span></span><br><span class="line"><span class="comment">#        ssl_session_timeout  10m;</span></span><br><span class="line"><span class="comment">#        ssl_ciphers HIGH:!aNULL:!MD5;</span></span><br><span class="line"><span class="comment">#        ssl_prefer_server_ciphers on;</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#        # Load configuration files for the default server block.</span></span><br><span class="line"><span class="comment">#        include /etc/nginx/default.d/*.conf;</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#        location / &#123;</span></span><br><span class="line"><span class="comment">#        &#125;</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#        error_page 404 /404.html;</span></span><br><span class="line"><span class="comment">#            location = /40x.html &#123;</span></span><br><span class="line"><span class="comment">#        &#125;</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#        error_page 500 502 503 504 /50x.html;</span></span><br><span class="line"><span class="comment">#            location = /50x.html &#123;</span></span><br><span class="line"><span class="comment">#        &#125;</span></span><br><span class="line"><span class="comment">#    &#125;</span></span><br></pre></td></tr></table></figure></li>
<li>配置替换为<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">  listen 443;</span><br><span class="line">  server_name localhost;</span><br><span class="line">  ssl on;</span><br><span class="line">  root html;</span><br><span class="line">  index index.html index.htm;</span><br><span class="line">  ssl_certificate   cert/a.pem;</span><br><span class="line">  ssl_certificate_key  cert/a.key;</span><br><span class="line">  ssl_session_timeout 5m;</span><br><span class="line">  ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;</span><br><span class="line">  ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</span><br><span class="line">  ssl_prefer_server_ciphers on;</span><br><span class="line">  location / &#123;</span><br><span class="line">    root html;</span><br><span class="line">    index index.html index.htm;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>重启 nginx 配置 <code>systemctl reload nginx</code></li>
</ol>
<p>上面是通用步骤，由于我们的 code server 项目放在8080端口，因此我的最终配置如下：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">  listen 443;</span><br><span class="line">  <span class="comment"># 这里写上你的域名</span></span><br><span class="line">  server_name code.test.com;</span><br><span class="line">  ssl on;</span><br><span class="line">  ssl_certificate   cert/a.pem;</span><br><span class="line">  ssl_certificate_key  cert/a.key;</span><br><span class="line">  ssl_session_timeout 5m;</span><br><span class="line">  ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;</span><br><span class="line">  ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</span><br><span class="line">  ssl_prefer_server_ciphers on;</span><br><span class="line">  location / &#123;</span><br><span class="line">      proxy_pass http://127.0.0.1:8080;</span><br><span class="line">      proxy_set_header Host <span class="variable">$host</span>;</span><br><span class="line">      proxy_set_header Upgrade <span class="variable">$http_upgrade</span>;</span><br><span class="line">      proxy_set_header Connection upgrade;</span><br><span class="line">      proxy_set_header Accept-Encodeing gzip;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>此时我们通过 <a href="https://code.test.com/" target="_blank" rel="noopener">https://code.test.com/</a> 就可以访问了</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>为什么 0.._ 等于 undefined</title>
    <url>/2019/10/10/2019Q4/%E4%B8%BA%E4%BB%80%E4%B9%88%200.._%20%E7%AD%89%E4%BA%8E%20undefined/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>今天看文章 <a href="https://github.com/lessfish/underscore-analysis/issues/1" target="_blank" rel="noopener">为什么用「void 0」代替「undefined」</a> 的时候，</p>
<p>作者提到，用 <code>void 0</code> 替代 <code>undefined</code> 的原因其中有一点是前者更短，更省空间。</p>
<blockquote>
<p>当然最主要的原因还是 undefined 在局部作用域中可以被重写</p>
</blockquote>
<p>下面有人回复 <code>0.._</code> 长度更短，结果也是 <code>undefined</code>。 后面解释说是相当于 <code>0[&#39;_&#39;]</code>，不过没有更深入的讨论了。</p>
<p>当时心中产生了几个问题：</p>
<ol>
<li><code>0.._</code> 是如何隐式转换成 <code>undefined</code> 的</li>
<li>为何（几乎）没有人采用 <code>0.._</code> 的写法代替 <code>void 0</code></li>
</ol>
<a id="more"></a>

<h2 id="0-的隐式转换"><a href="#0-的隐式转换" class="headerlink" title="0.._ 的隐式转换"></a><code>0.._</code> 的隐式转换</h2><h3 id="词法分析"><a href="#词法分析" class="headerlink" title="词法分析"></a>词法分析</h3><p>对于10进制数字来说，后面接 <code>.</code> 操作符，js 引擎并不知道该 <code>.</code> 是小数点还是访问属性的 <code>.</code>，因此有如下规定：</p>
<p>前面的数字为10进制，已带小数点的，则该 <code>.</code> 是访问属性，否则即为小数点；<br>若不是10进制，则 <code>.</code> 是访问属性</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="number">0.0</span>._ <span class="comment">// 输出 undefined  相当于 (0.0)._ </span></span><br><span class="line"><span class="number">0.</span>._ <span class="comment">// 相当于 (0.)._</span></span><br><span class="line"><span class="number">00.</span>_ <span class="comment">// 前面为 8进制</span></span><br><span class="line"><span class="literal">true</span>._ <span class="comment">// 输出 undefined</span></span><br><span class="line"><span class="number">0.</span>_ <span class="comment">// 语法错误 .后面应该接数字</span></span><br><span class="line"></span><br><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"><span class="number">00.</span>_ <span class="comment">// Uncaught SyntaxError: Octal literals are not allowed in strict mode. 严格模式下不会解析成八进制</span></span><br></pre></td></tr></table></figure>

<p><strong>注</strong>：以上是测试得出的结论，规范中没找到。</p>
<p>不过按编译原理的知识，引擎会先根据 <a href="http://yanhaijing.com/es5/#65" target="_blank" rel="noopener">词法解析-数值字面量</a> 找到 <code>0.</code> 这个数值字面量词法，接着才进行语法分析</p>
<p>同时 <a href="http://yanhaijing.com/es5/#628" target="_blank" rel="noopener">附加语法-数值字面量</a> 中提到非 strict 模式下 NumericLiteral 才允许 OctalIntegerLiteral 八进制的词法</p>
<h3 id="语法分析"><a href="#语法分析" class="headerlink" title="语法分析"></a>语法分析</h3><p>接下来就是 <strong>为何数值字面量能够进行属性访问</strong> 的问题了。这是一个左值表达式。</p>
<p><a href="http://yanhaijing.com/es5/#162" target="_blank" rel="noopener">左值表达式</a> 语法,这里列举部分</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">LeftHandSideExpression :</span><br><span class="line">NewExpression</span><br><span class="line">CallExpression</span><br><span class="line"></span><br><span class="line">CallExpression :</span><br><span class="line">MemberExpression Arguments</span><br><span class="line">CallExpression Arguments</span><br><span class="line">CallExpression [ Expression ]</span><br><span class="line">CallExpression . IdentifierName</span><br><span class="line"></span><br><span class="line">MemberExpression :</span><br><span class="line">PrimaryExpression</span><br><span class="line">FunctionExpression</span><br><span class="line">MemberExpression [ Expression ]</span><br><span class="line">MemberExpression . IdentifierName</span><br><span class="line">new MemberExpression Arguments</span><br></pre></td></tr></table></figure>

<p><a href="http://yanhaijing.com/es5/#162" target="_blank" rel="noopener">左值表达式-属性访问</a> 有两者方式</p>
<ul>
<li>MemberExpression . IdentifierName</li>
<li>MemberExpression [ Expression ]</li>
</ul>
<p>前者等同于 <code>MemberExpression [ &lt;identifier-name-string&gt; ]</code></p>
<blockquote>
<p><code>&lt;identifier-name-string&gt;</code> 是一个字符串字面量，它与 Unicode 编码后的 IdentifierName 包含相同的字符序列。</p>
</blockquote>
<p>对于 <code>MemberExpression [ Expression ]</code> 表达式，其执行顺序如下： </p>
<ol>
<li>令 baseReference 为解释执行 MemberExpression 的结果 .</li>
<li>令 baseValue 为 <a href="http://yanhaijing.com/es5/#81" target="_blank" rel="noopener">GetValue</a>(baseReference).</li>
<li>令 propertyNameReference 为解释执行 Expression 的结果 .</li>
<li>令 propertyNameValue 为 GetValue(propertyNameReference).</li>
<li>调用 <a href="http://yanhaijing.com/es5/#114" target="_blank" rel="noopener">CheckObjectCoercible(baseValue)</a>. </li>
<li>令 propertyNameString 为 ToString(propertyNameValue).</li>
<li>如果正在执行中的语法产生式包含在严格模式代码当中，令 strict 为 true, 否则令 strict 为 false.</li>
<li>返回一个 <a href="http://yanhaijing.com/es5/#80" target="_blank" rel="noopener">引用类型</a> 的值。该引用类型，其基 (base) 值为 baseValue, 其引用名称（referenced name）为 propertyNameString, 严格模式标记为 strict.</li>
</ol>
<p>以 <code>0.._</code> 为例，其等同于 <code>0[&#39;_&#39;]</code>，即 <code>MemberExpression = 0,Expression = &#39;_&#39;</code>，按以下步骤进行</p>
<ol>
<li>baseReference = 0</li>
<li>baseValue = GetValue(baseReference) = 0</li>
<li>propertyNameReference = ‘_’</li>
<li>propertyNameValue = GetValue(propertyNameReference) = ‘_’</li>
<li>baseValue = ToObject(0) = new Number(0) // 生成一个临时包装对象<blockquote>
<p>即 <code>Number { __proto__: Number, [[PrimitiveValue]]: 0}</code></p>
</blockquote>
</li>
<li>propertyNameString = ToString(propertyNameValue) = ‘_’</li>
<li>strict 设置</li>
<li>生成引用，其基值为 <code>Number { __proto__: Number, [[PrimitiveValue]]: 0}</code>，引用名称为 <code>_</code>。在该基值（及原型链）中进行<code>_</code>属性的寻找。最后没有找到，返回 <code>undefined</code></li>
</ol>
<p>其实关键的就是执行 <code>CheckObjectCoercible(0)</code> 的时候调用 <code>ToObject</code> 返回了一个临时包装对象</p>
<blockquote>
<p>这点规范说的有点模糊，只说了 <strong>CheckObjectCoercible 在其参数无法用 ToObject 转换成对象的情况下抛出一个异常</strong>，但是没有说 baseValue 会进行 ToObject 转换。<br>在 <a href="https://www.zhihu.com/question/37117614/answer/70737896" target="_blank" rel="noopener">JS的基本数据类型的临时包装类型对象的触发条件和生命周期是多久? - 貘吃馍香的回答 - 知乎</a> 中有人进行了回答。</p>
</blockquote>
<h2 id="为何不用-0-代替-void-0"><a href="#为何不用-0-代替-void-0" class="headerlink" title="为何不用 0.._ 代替 void 0"></a>为何不用 <code>0.._</code> 代替 <code>void 0</code></h2><p>我们从 可读性、性能、正确性 三个方面分析</p>
<h3 id="可读性"><a href="#可读性" class="headerlink" title="可读性"></a>可读性</h3><p>与 <code>void 0</code> 相比，<code>0.._</code> 仅减少了一个字符，但是该写法大大减低了<strong>可读性</strong>。</p>
<p>对于压缩工具来说，不在乎可读性，那么我们从<strong>性能</strong>角度分析。</p>
<h3 id="性能"><a href="#性能" class="headerlink" title="性能"></a>性能</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> COUNT = <span class="number">100000000</span></span><br><span class="line"><span class="keyword">var</span> tmp</span><br><span class="line"><span class="built_in">console</span>.time(<span class="string">"test1"</span>)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;COUNT;i++)&#123;</span><br><span class="line">  <span class="keyword">if</span>(tmp === <span class="keyword">void</span> <span class="number">0</span>)&#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.timeEnd(<span class="string">"test1"</span>)</span><br><span class="line"><span class="comment">// test1: 61.760986328125ms</span></span><br><span class="line"><span class="built_in">console</span>.time(<span class="string">"test2"</span>)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;COUNT;i++)&#123;</span><br><span class="line">  <span class="keyword">if</span>(tmp === <span class="number">0.</span>._)&#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.timeEnd(<span class="string">"test2"</span>)</span><br><span class="line"><span class="comment">// test2: 74.657958984375ms</span></span><br></pre></td></tr></table></figure>

<p><code>void 0</code> 更快一点，但这个影响不大，单次指令之间的执行差异在微秒之内。</p>
<p>最后就看两者的值是不是正确的，即结果永远为 undefined</p>
<h3 id="正确性"><a href="#正确性" class="headerlink" title="正确性"></a>正确性</h3><p>对于 <code>void 0</code> ，void 是关键字，不会被外部改变，因此返回值永远返回 undefined ，见 <a href="http://yanhaijing.com/es5/#172" target="_blank" rel="noopener">void 运算符</a></p>
<p>对于 <code>0.._</code>，我们上面分析到，在<code>基值</code>中进行<code>引用名称</code>的查找时，会往原型链中查找，因此改变 Number、Object 等的原型属性，<code>0.._</code> 值就不一样了</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">0.</span>._) <span class="comment">// undefined</span></span><br><span class="line"><span class="built_in">Object</span>.prototype._ = <span class="number">0</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">0.</span>._) <span class="comment">// 0</span></span><br><span class="line"><span class="built_in">Number</span>.prototype._ = <span class="number">1</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">0.</span>._) <span class="comment">// 1</span></span><br></pre></td></tr></table></figure>

<p>可以看到， <code>0.._</code> 结果不是固定的，因此不能用于替换 <code>void 0</code></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol>
<li><a href="http://yanhaijing.com/es5/" target="_blank" rel="noopener">es5 规范_中文版</a></li>
<li><a href="https://www.ecma-international.org/ecma-262/5.1/" target="_blank" rel="noopener">es5 规范</a></li>
</ol>
<p>ps: 中文版翻译有些地方不够准确，可以先看中文版了解大概，再到原版中详细查看</p>
]]></content>
      <categories>
        <category>大前端</category>
      </categories>
      <tags>
        <tag>ECMAScript</tag>
      </tags>
  </entry>
  <entry>
    <title>V8源码解析之Array.prototype.sort</title>
    <url>/2019/07/04/2019Q3/V8%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%E4%B9%8BArray.prototype.sort/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>先问个问题，以下代码输出什么？</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">13</span>,<span class="number">14</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">17</span>,<span class="number">18</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>,<span class="number">31</span>,<span class="number">41</span>].sort(<span class="function"><span class="params">()</span>=&gt;</span><span class="number">0</span>)</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<p>聪明的你可以会认为，这不是返回元素顺序不变的数组么？</p>
<p>emmm 正常来说，的确如此，然后有个小伙伴(chrome v59 环境)遇到一个这样的问题</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">13</span>,<span class="number">14</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">17</span>,<span class="number">18</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>,<span class="number">31</span>,<span class="number">41</span>].sort(<span class="function"><span class="params">()</span>=&gt;</span><span class="number">0</span>)</span><br><span class="line"><span class="comment">// [18,1,13,14,5,6,17,2,9,10,11,12,31,41]</span></span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">13</span>,<span class="number">14</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">17</span>,<span class="number">18</span>,<span class="number">9</span>,<span class="number">10</span>].sort(<span class="function"><span class="params">()</span>=&gt;</span><span class="number">0</span>)</span><br><span class="line"><span class="comment">// [1,2,13,14,5,6,17,18,9,10]</span></span><br></pre></td></tr></table></figure>
<p>然后我在自己电脑上( chrome v76 )测试是这样的结果</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">13</span>,<span class="number">14</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">17</span>,<span class="number">18</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>,<span class="number">31</span>,<span class="number">41</span>].sort(<span class="function"><span class="params">()</span>=&gt;</span><span class="number">0</span>)</span><br><span class="line"><span class="comment">// [1,2,13,14,5,6,17,18,9,10,11,12,31,41]</span></span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">13</span>,<span class="number">14</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">17</span>,<span class="number">18</span>,<span class="number">9</span>,<span class="number">10</span>].sort(<span class="function"><span class="params">()</span>=&gt;</span><span class="number">0</span>)</span><br><span class="line"><span class="comment">// [1,2,13,14,5,6,17,18,9,10]</span></span><br></pre></td></tr></table></figure>

<p>我们知道，给一个 sort 的比较函数中返回0，表示当前比较的两个元素相等</p>
<p>照理说，<code>sort(()=&gt;0)</code> 后数组的元素顺序是不变的，和我的测试效果一致，</p>
<p>那为什么在 低版本的 chrome 上，不同长度的数组运用 <code>sort(()=&gt;0)</code> 后效果不一样呢？</p>
<p>本文就来做个解析。通过本文，你可以了解到：</p>
<ul>
<li>Array.prototype.sort 的实现细节与遗留问题</li>
<li>如何看 JS 源码</li>
</ul>
<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">arr.sort([compareFunction])</span><br></pre></td></tr></table></figure>
<p>这里我们引用 MDN 的一段话：</p>
<blockquote>
<p>如果 compareFunction(a, b) 小于 0 ，那么 a 会被排列到 b 之前；</p>
<p>如果 compareFunction(a, b) 大于 0 ， b 会被排列到 a 之前。</p>
<p>如果 compareFunction(a, b) 等于 0 ， a 和 b 的相对位置不变。备注： <a href="http://yanhaijing.com/es5/#353" target="_blank" rel="noopener">ECMAScript 标准</a>并不保证这一行为，而且也不是所有浏览器都会遵守（例如 Mozilla 在 2003 年之前的版本）</p>
</blockquote>
<p>也就是说，有些浏览器不遵循 <code>compareFunction(a, b) 等于 0时， a 和 b 的相对位置不变</code> 的规则</p>
<p>这里我们看出来了，chrome v59 就是不遵循该规则的。 但是数组长度较小时好像又遵循了？</p>
<p>这里我们猜测不同长度的数组会运用不同的排序算法</p>
<p>在分析源码之前，我们先简单提下，什么是 插入排序 和 快速排序</p>
<h2 id="排序算法"><a href="#排序算法" class="headerlink" title="排序算法"></a>排序算法</h2><p>我们假设比较函数为</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">comparefn = <span class="function">(<span class="params">a,b</span>)=&gt;</span> a-b</span><br></pre></td></tr></table></figure>

<h3 id="1-插入排序"><a href="#1-插入排序" class="headerlink" title="1. 插入排序"></a>1. 插入排序</h3><blockquote>
<p>遍历数组，将每个待排序元素插入到前面已排序的适当位置</p>
</blockquote>
<p>插入排序分为直接插入排序、二分查找插入排序、希尔排序</p>
<p>由于 v8 也只是用了直接插入排序，这里我们只实现它,其他几种不进行讨论，想要了解的可以参考–<a href="https://www.cnblogs.com/heyuquan/p/insert-sort.html" target="_blank" rel="noopener">优化的直接插入排序</a></p>
<p><img src="https://upload-images.jianshu.io/upload_images/9277731-e6e3d03ebc90be7b.gif?imageMogr2/auto-orient/strip" alt="引用自 wikipedia"></p>
<p>实现代码如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">InsertionSort</span>(<span class="params">array</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; array.legnth; i++) &#123;</span><br><span class="line">    <span class="keyword">let</span> element = array[i];</span><br><span class="line">    <span class="comment">// 将待排序元素element插入对应位置</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = i - <span class="number">1</span>; j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line">      <span class="keyword">let</span> tmp = array[j];</span><br><span class="line">      <span class="comment">// comparefn &gt; 0 表示element要排在tmp之前</span></span><br><span class="line">      <span class="keyword">if</span> (comparefn(tmp, element) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        a[j + <span class="number">1</span>] = tmp;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    a[j + <span class="number">1</span>] = element;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="2-快速排序"><a href="#2-快速排序" class="headerlink" title="2. 快速排序"></a>2. 快速排序</h3><blockquote>
<p>设定一个基准，利用该基准值大小将数组分为左右两部分</p>
<p>此时左右两部分可以独立排序，分别对左右两部分进行上面的操作</p>
<p>递归处理，直至数组排序完成</p>
</blockquote>
<p>考虑到空间消耗，现在的快速排序一般都是指<code>原地算法</code>的快速排序</p>
<p>关于原地算法，参看 <a href="https://en.wikipedia.org/wiki/In-place_algorithm" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/In-place_algorithm</a></p>
<p>下面有两者实现，基准值取左边的或者右边，效果差不多</p>
<p><img src="https://upload-images.jianshu.io/upload_images/9277731-fde423214816b518.gif?imageMogr2/auto-orient/strip" alt="引用自 wikipedia"></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">qsort</span>(<span class="params">array</span>)</span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">swap</span>(<span class="params">arr,i1,i2</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> tmp = arr[i1]</span><br><span class="line">    arr[i1] = arr[i2]</span><br><span class="line">    arr[i2] = tmp</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">partition</span>(<span class="params">arr, left, right</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> storeIndex = left <span class="comment">// 其值等于表示已找到的小于基准值的元素个数</span></span><br><span class="line">    <span class="keyword">let</span> pivot = arr[right] <span class="comment">//基准</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=left;i&lt;right;i++)&#123;</span><br><span class="line">      <span class="keyword">if</span>(arr[i]&lt;pivot)&#123;</span><br><span class="line">        swap(arr,storeIndex++,i)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    swap(arr,storeIndex,right)</span><br><span class="line">    <span class="keyword">return</span> storeIndex</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 基准在左边</span></span><br><span class="line">  <span class="comment">// function partition(arr, left, right)&#123;</span></span><br><span class="line">  <span class="comment">//   let storeIndex = left</span></span><br><span class="line">  <span class="comment">//   let pivot = arr[left] //基准</span></span><br><span class="line">  <span class="comment">//   for(let i = left+1;i&lt;=right;i++)&#123;</span></span><br><span class="line">  <span class="comment">//     if(arr[i]&lt;pivot)&#123;</span></span><br><span class="line">  <span class="comment">//       swap(arr,++storeIndex,i)</span></span><br><span class="line">  <span class="comment">//     &#125;</span></span><br><span class="line">  <span class="comment">//   &#125;</span></span><br><span class="line">  <span class="comment">//   swap(arr,storeIndex,left)</span></span><br><span class="line">  <span class="comment">//   return storeIndex</span></span><br><span class="line">  <span class="comment">// &#125;</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">sort</span>(<span class="params">arr,left,right</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(left&lt;right)&#123;</span><br><span class="line">      <span class="keyword">let</span> storeIndex = partition(arr, left, right);</span><br><span class="line">      sort(arr, left, storeIndex - <span class="number">1</span>);</span><br><span class="line">      sort(arr, storeIndex + <span class="number">1</span>, right);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  sort(array, <span class="number">0</span>, array.length - <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">return</span> array</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="v8-源码分析"><a href="#v8-源码分析" class="headerlink" title="v8 源码分析"></a>v8 源码分析</h2><p>理解了基本的排序算法，接下来我们开始研究源码。</p>
<p>比较 chrome v59 和 chrome v76 的 v8 实现差异在哪</p>
<h3 id="如何查找对应chrome版本的-v8-源码"><a href="#如何查找对应chrome版本的-v8-源码" class="headerlink" title="如何查找对应chrome版本的 v8 源码"></a>如何查找对应chrome版本的 v8 源码</h3><p>打开<code>chrome://version/</code></p>
<p>上面显示的 JavaScript 即是 v8 的版本</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Google Chrome	76.0.3809.132 (正式版本) （64 位） (cohort: Stable)</span><br><span class="line">操作系统	Windows 10 OS Version 1809 (Build 17763.316)</span><br><span class="line">JavaScript	V8 7.6.303.29</span><br></pre></td></tr></table></figure>
<p>也正如 <a href="https://v8.dev/docs/version-numbers" target="_blank" rel="noopener">V8’s version numbering scheme</a> 所述</p>
<p><code>Chromium 76</code> 对应 v8 的 <code>7.6</code></p>
<p>接着我们直接去 <a href="https://github.com/v8/v8" target="_blank" rel="noopener">v8</a> 查看源码，这里主要看两个版本的</p>
<h3 id="5-9-221"><a href="#5-9-221" class="headerlink" title="5.9.221"></a>5.9.221</h3><p>对应的排序算法 <a href="https://github.com/v8/v8/blob/5.9.221/src/js/array.js#L709" target="_blank" rel="noopener">源码地址</a></p>
<p><em>结合测试用例看更佳 <a href="https://github.com/v8/v8/blob/5.9.221/test/mjsunit/array-sort.js" target="_blank" rel="noopener">/test/mjsunit/array-sort</a></em></p>
<p>可以看出来，早期v8 排序的实现逻辑是用js写的，对应的实现为 ArraySort</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">utils.InstallFunctions(GlobalArray.prototype, DONT_ENUM, [</span><br><span class="line">  ...</span><br><span class="line">  <span class="string">"sort"</span>, getFunction(<span class="string">"sort"</span>, ArraySort),</span><br><span class="line">  ...</span><br><span class="line">])</span><br></pre></td></tr></table></figure>
<ul>
<li>ArraySort </li>
</ul>
<p>没有什么有用代码，直接进入 InnerArraySort</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ArraySort</span>(<span class="params">comparefn</span>) </span>&#123;</span><br><span class="line">  CHECK_OBJECT_COERCIBLE(<span class="keyword">this</span>, <span class="string">"Array.prototype.sort"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> array = TO_OBJECT(<span class="keyword">this</span>);</span><br><span class="line">  <span class="keyword">var</span> length = TO_LENGTH(array.length);</span><br><span class="line">  <span class="keyword">return</span> InnerArraySort(array, length, comparefn);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>InnerArraySort </li>
</ul>
<p>对类数组对象以及空洞数组进行特殊处理，然后进行排序</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// comparefn 不可调用（未定义，非function等），设置默认函数</span></span><br><span class="line"><span class="keyword">if</span> (!IS_CALLABLE(comparefn)) &#123;</span><br><span class="line">  comparefn = <span class="function"><span class="keyword">function</span> (<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x === y) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (% _IsSmi(x) &amp;&amp; % _IsSmi(y)) &#123;</span><br><span class="line">      <span class="keyword">return</span> % SmiLexicographicCompare(x, y);</span><br><span class="line">    &#125;</span><br><span class="line">    x = TO_STRING(x);</span><br><span class="line">    y = TO_STRING(y);</span><br><span class="line">    <span class="keyword">if</span> (x == y) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> x &lt; y ? <span class="number">-1</span> : <span class="number">1</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (length &lt; <span class="number">2</span>) <span class="keyword">return</span> array;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> is_array = IS_ARRAY(array);</span><br><span class="line"><span class="keyword">var</span> max_prototype_element;</span><br><span class="line"><span class="keyword">if</span> (!is_array) &#123;</span><br><span class="line">  <span class="comment">// 对 类数组对象（比如 &#123;length:10,0:'c',10:'b'&#125;） 进行排序，兼容 JSC标准</span></span><br><span class="line">  <span class="comment">// 考虑了继承属性，所以效率可能不高，不过这种需要排序的情况较少</span></span><br><span class="line">  <span class="comment">// e.g. 也可以看这个例子 https://github.com/v8/v8/blob/5.9.221/test/mjsunit/array-sort.js#L337</span></span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">  let f1 = &#123;1: "c", 3: "f"&#125;</span></span><br><span class="line"><span class="comment">  let f2 = &#123;6: "a", length: 10&#125;</span></span><br><span class="line"><span class="comment">  f2.__proto__ = f1</span></span><br><span class="line"><span class="comment">  f2 // &#123;6: "a", length: 10,__proto__:&#123;1: "c", 3: "f"&#125;&#125;</span></span><br><span class="line"><span class="comment">  Array.prototype.sort.call(f2) // &#123;0: "a", 1: "b", 2: "c", 3: "f", length: 10&#125;</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="comment">// 返回自身及原型链中所有属性的个数</span></span><br><span class="line">  max_prototype_element = CopyFromPrototype(array, length);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 快速RemoveArrayHoles：从数组末尾复制已定义元素填充到前面的空洞（末尾变为空洞）</span></span><br><span class="line"><span class="comment">// 类数组对象等情况不支持快速RemoveArrayHoles，会返回 -1</span></span><br><span class="line"><span class="comment">// 否则 返回已定义元素的个数</span></span><br><span class="line"><span class="keyword">var</span> num_non_undefined = % RemoveArrayHoles(array, length);</span><br><span class="line"><span class="comment">// 处理类数组对象等情况</span></span><br><span class="line"><span class="keyword">if</span> (num_non_undefined == <span class="number">-1</span>) &#123;</span><br><span class="line">  <span class="comment">// 返回 类数组对象的已定义实例属性的个数</span></span><br><span class="line">  num_non_undefined = SafeRemoveArrayHoles(array);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">QuickSort(array, <span class="number">0</span>, num_non_undefined);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!is_array &amp;&amp; (num_non_undefined + <span class="number">1</span> &lt; max_prototype_element)) &#123;</span><br><span class="line">  <span class="comment">// 处理 原型同名属性 等情况</span></span><br><span class="line">  ShadowPrototypeElements(array, num_non_undefined, max_prototype_element);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> array;</span><br></pre></td></tr></table></figure>
<p>其他的特殊处理不在文本论述中，我们直接看排序实现</p>
<ul>
<li>QuickSort</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">QuickSort</span> (<span class="params">a, from, to</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 基准选择第一个元素</span></span><br><span class="line">  <span class="keyword">var</span> third_index = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="comment">// 待排序数组长度 &lt;= 10 采用插入排序</span></span><br><span class="line">    <span class="keyword">if</span> (to - <span class="keyword">from</span> &lt;= <span class="number">10</span>) &#123;</span><br><span class="line">      InsertionSort(a, <span class="keyword">from</span>, to);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (to - <span class="keyword">from</span> &gt; <span class="number">1000</span>) &#123;</span><br><span class="line">      <span class="comment">// 每隔 200 ~ 215 （根据 length &amp; 15的结果）个元素取一个值，</span></span><br><span class="line">      <span class="comment">// 然后将这些值进行排序，取中间值的下标</span></span><br><span class="line">      <span class="comment">// 这里的排序其实又是一个递归调用</span></span><br><span class="line">      third_index = GetThirdIndex(a, <span class="keyword">from</span>, to);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 将中间元素设为基准值</span></span><br><span class="line">      third_index = <span class="keyword">from</span> + ((to - <span class="keyword">from</span>) &gt;&gt; <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 将第一个,中间元素（上面获取的基准值），最后一个元素三者中的中位数作为基准值</span></span><br><span class="line">    <span class="keyword">var</span> v0 = a[<span class="keyword">from</span>];</span><br><span class="line">    <span class="keyword">var</span> v1 = a[to - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">var</span> v2 = a[third_index];</span><br><span class="line">    <span class="keyword">var</span> c01 = comparefn(v0, v1);</span><br><span class="line">    <span class="keyword">if</span> (c01 &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="comment">// v1 &lt; v0, so swap them.</span></span><br><span class="line">      <span class="keyword">var</span> tmp = v0;</span><br><span class="line">      v0 = v1;</span><br><span class="line">      v1 = tmp;</span><br><span class="line">    &#125; <span class="comment">// v0 &lt;= v1.</span></span><br><span class="line">    <span class="keyword">var</span> c02 = comparefn(v0, v2);</span><br><span class="line">    <span class="keyword">if</span> (c02 &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="comment">// v2 &lt;= v0 &lt;= v1.</span></span><br><span class="line">      <span class="keyword">var</span> tmp = v0;</span><br><span class="line">      v0 = v2;</span><br><span class="line">      v2 = v1;</span><br><span class="line">      v1 = tmp;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// v0 &lt;= v1 &amp;&amp; v0 &lt; v2</span></span><br><span class="line">      <span class="keyword">var</span> c12 = comparefn(v1, v2);</span><br><span class="line">      <span class="keyword">if</span> (c12 &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// v0 &lt;= v2 &lt; v1</span></span><br><span class="line">        <span class="keyword">var</span> tmp = v1;</span><br><span class="line">        v1 = v2;</span><br><span class="line">        v2 = tmp;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 最终效果 v0 &lt;= v1 &lt;= v2</span></span><br><span class="line">    a[<span class="keyword">from</span>] = v0;</span><br><span class="line">    a[to - <span class="number">1</span>] = v2;</span><br><span class="line">    <span class="keyword">var</span> pivot = v1;</span><br><span class="line">    <span class="keyword">var</span> low_end = <span class="keyword">from</span> + <span class="number">1</span>;   <span class="comment">// 比基准值小的元素的上界</span></span><br><span class="line">    <span class="keyword">var</span> high_start = to - <span class="number">1</span>;  <span class="comment">// 比基准值大的元素的下界</span></span><br><span class="line">    <span class="comment">// 将基准值与 from + 1 位置的元素进行互换</span></span><br><span class="line">    <span class="comment">// 此时 from + 1 位置的元素肯定是要排 form 位置后面的</span></span><br><span class="line">    a[third_index] = a[low_end];</span><br><span class="line">    a[low_end] = pivot;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 划分函数 将小于（假设升序排序）基准值的元素排在左边</span></span><br><span class="line">    partition: <span class="keyword">for</span> (<span class="keyword">var</span> i = low_end + <span class="number">1</span>; i &lt; high_start; i++) &#123;</span><br><span class="line">      <span class="keyword">var</span> element = a[i];</span><br><span class="line">      <span class="keyword">var</span> order = comparefn(element, pivot);</span><br><span class="line">      <span class="keyword">if</span> (order &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        a[i] = a[low_end];</span><br><span class="line">        a[low_end] = element;</span><br><span class="line">        low_end++;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (order &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 当待排序元素大于基准值时，</span></span><br><span class="line">        <span class="comment">// 与到右侧第一个小于基准值的元素互换</span></span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">          high_start--;</span><br><span class="line">          <span class="keyword">if</span> (high_start == i) <span class="keyword">break</span> partition;</span><br><span class="line">          <span class="keyword">var</span> top_elem = a[high_start];</span><br><span class="line">          order = comparefn(top_elem, pivot);</span><br><span class="line">        &#125; <span class="keyword">while</span> (order &gt; <span class="number">0</span>);</span><br><span class="line">        a[i] = a[high_start];</span><br><span class="line">        a[high_start] = element;</span><br><span class="line">        <span class="comment">// 该元素小于基准值，需要排在基准值左边</span></span><br><span class="line">        <span class="keyword">if</span> (order &lt; <span class="number">0</span>) &#123;</span><br><span class="line">          element = a[i];</span><br><span class="line">          a[i] = a[low_end];</span><br><span class="line">          a[low_end] = element;</span><br><span class="line">          low_end++;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 对左右两个子数组再进行排序</span></span><br><span class="line">    <span class="comment">// 先处理待排序元素较少的</span></span><br><span class="line">    <span class="keyword">if</span> (to - high_start &lt; low_end - <span class="keyword">from</span>) &#123;</span><br><span class="line">      QuickSort(a, high_start, to);</span><br><span class="line">      to = low_end;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      QuickSort(a, <span class="keyword">from</span>, low_end);</span><br><span class="line">      <span class="keyword">from</span> = high_start;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>在基准选择上做了各种处理，详细看注释</p>
<p>以正常的升序排序为例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">array &#x3D; [1,2,13,14,5,6,17,18,9,10,11,12,31,14,51]</span><br><span class="line">comparefn &#x3D; (a,b)&#x3D;&gt;a-b</span><br></pre></td></tr></table></figure>

<p>第一轮执行过程如下：</p>
<ol>
<li>third_index = 7, from = 0, to = 15, pivot = a[7] = 18, low_end = 1, high_start = 14, a[7] = a[1] = 2, a[1] = 18<blockquote>
<p>[1,18,13,14,5,6,17,2,9,10,11,12,31,14,51]</p>
</blockquote>
</li>
<li>进入 partition 循环，从 i=2开始比较</li>
<li>i=2,由于 a[i] &lt; pivot, 此时 a[2] = a[low_end] = a[1] = 18, low_end = 2<blockquote>
<p>[1,13,18,14,5,6,17,2,9,10,11,12,31,14,51]</p>
</blockquote>
</li>
<li>直到 i=12 才出现 a[i]=31 &gt; pivot, 这段过程结束后 low_end = 11<blockquote>
<p>[1,13,14,5,6,17,2,9,10,11,12,18,31,14,51]</p>
</blockquote>
</li>
<li>i=12,由于 a[12] = 31 &gt; pivot,high_start = 13,由于 a[13] &lt; pivot,a[i=12]=a[13]=14,a[13]=31<blockquote>
<p>[1,13,14,5,6,17,2,9,10,11,12,18,14,31,51]</p>
</blockquote>
</li>
<li>同时由于 a[13] &lt; pivot，a[12] = a[low_end] = a[11] = 18,a[11] = 31, low_end = 12<blockquote>
<p>[1,13,14,5,6,17,2,9,10,11,12,14,18,31,51]</p>
</blockquote>
</li>
<li>i &lt; high_start 不成立，循环中断</li>
<li>to - high_start = 14-13=1，low_end - from = 12，分别进行 QuickSort(a,13,14) 和 QuickSort(a,0,12)</li>
<li>继续新一轮的执行</li>
</ol>
<p>看上去没有什么问题，这次采用开头的例子</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">array &#x3D; [1,2,13,14,5,6,17,18,9,10,11,12,31,14,51]</span><br><span class="line">comparefn &#x3D; (a,b)&#x3D;&gt;0</span><br></pre></td></tr></table></figure>

<p>第一轮执行过程如下：</p>
<ol>
<li>third_index = 7, from = 0, to = 15, v0=a[0]=1,v[1]=a[14]=51,v[2]=a[7]=18,</li>
<li>由于 comparefn(v0, v2)&gt;=0,表示 v2 &lt;= v0 &lt;= v1,v0=18,v1=1,v2=51, a[0]=18,a[14]=51,pivot = v1 = 1, low_end = 1, high_start = 14, a[7] = a[1] = 2, a[1] = 1<blockquote>
<p>[18,1,13,14,5,6,17,2,9,10,11,12,31,14,51]</p>
</blockquote>
</li>
<li>进入 partition 循环，从 i=2开始比较,由于 comparefn(element, pivot)=0 不进行处理直至循环结束</li>
<li>to - high_start = 14-14=0，low_end - from = 0，故先进行 QuickSort(a,0,0) 再进入循环判断 QuickSort(a,14,14)</li>
<li>判断结束，返回 [18,1,13,14,5,6,17,2,9,10,11,12,31,14,51]</li>
</ol>
<p>可以看出来，v8源码有两个问题</p>
<h4 id="①-v0-v1-v2-的交换处理代码"><a href="#①-v0-v1-v2-的交换处理代码" class="headerlink" title="① v0,v1,v2 的交换处理代码"></a>① v0,v1,v2 的交换处理代码</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">comparefn = <span class="function">(<span class="params">a,b</span>)=&gt;</span><span class="number">0</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">swap</span> (<span class="params">[v0, v1, v2]</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 给定 v0,v1,v2</span></span><br><span class="line">  <span class="comment">// 对其进行排序，保证 v0&lt;=v1&lt;=v2</span></span><br><span class="line">  <span class="keyword">var</span> c01 = comparefn(v0, v1);</span><br><span class="line">  <span class="keyword">if</span> (c01 &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">// v1 &lt; v0, so swap them.</span></span><br><span class="line">    <span class="keyword">var</span> tmp = v0;</span><br><span class="line">    v0 = v1;</span><br><span class="line">    v1 = tmp;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 此时 v0 &lt;= v1.</span></span><br><span class="line">  <span class="keyword">var</span> c02 = comparefn(v0, v2);</span><br><span class="line">  <span class="keyword">if</span> (c02 &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">// v2 &lt; v0 &lt;= v1.的情况 进行交换</span></span><br><span class="line">    <span class="keyword">var</span> tmp = v0;</span><br><span class="line">    v0 = v2;</span><br><span class="line">    v2 = v1;</span><br><span class="line">    v1 = tmp;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// v0 &lt;= v1 &amp;&amp; v0 &lt;= v2</span></span><br><span class="line">    <span class="keyword">var</span> c12 = comparefn(v1, v2);</span><br><span class="line">    <span class="keyword">if</span> (c12 &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="comment">// v1 &gt; v2</span></span><br><span class="line">      <span class="keyword">var</span> tmp = v1;</span><br><span class="line">      v1 = v2;</span><br><span class="line">      v2 = tmp;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> [v0, v1, v2]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>主要是 c02 的判断上改为 <code>&gt;</code> ,保证 v0与v2相同时 不会进行交换</p>
<h4 id="②-重新赋值"><a href="#②-重新赋值" class="headerlink" title="② 重新赋值"></a>② 重新赋值</h4><p>原来代码在交换后，做了这些操作，没有考虑相等的情况</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">a[<span class="keyword">from</span>] = v0;</span><br><span class="line">a[to - <span class="number">1</span>] = v2;</span><br><span class="line"><span class="keyword">var</span> pivot = v1;</span><br><span class="line"><span class="keyword">var</span> low_end = <span class="keyword">from</span> + <span class="number">1</span>;   <span class="comment">// Upper bound of elements lower than pivot.</span></span><br><span class="line"><span class="keyword">var</span> high_start = to - <span class="number">1</span>;  <span class="comment">// Lower bound of elements greater than pivot.</span></span><br><span class="line">a[third_index] = a[low_end];</span><br><span class="line">a[low_end] = pivot;</span><br></pre></td></tr></table></figure>
<p>假设 v0,v1,v2的顺序不变，但是原来 <code>a[to-1]</code> 的值是v1 此时变成v2,故在一开始赋值时应该变更顺序</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> v0 = a[<span class="keyword">from</span>];</span><br><span class="line"><span class="keyword">var</span> v1 = a[third_index];</span><br><span class="line"><span class="keyword">var</span> v2 = a[to - <span class="number">1</span>];</span><br></pre></td></tr></table></figure>
<p><code>a[third_index]</code> 是否与 <code>a[low_end]</code> 交换，也应该做个判断</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(comparefn(pivot,a[low_end])!==<span class="number">0</span>)&#123;</span><br><span class="line">  a[third_index] = a[low_end];</span><br><span class="line">  a[low_end] = pivot;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  a[third_index] = pivot</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>优化后的快排函数</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ArraySort</span> (<span class="params">array, comparefn</span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">InsertionSort</span> (<span class="params">a, from, to</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="keyword">from</span> + <span class="number">1</span>; i &lt; to; i++) &#123;</span><br><span class="line">      <span class="keyword">var</span> element = a[i];</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> j = i - <span class="number">1</span>; j &gt;= <span class="keyword">from</span>; j--) &#123;</span><br><span class="line">        <span class="keyword">var</span> tmp = a[j];</span><br><span class="line">        <span class="keyword">var</span> order = comparefn(tmp, element);</span><br><span class="line">        <span class="keyword">if</span> (order &gt; <span class="number">0</span>) &#123;</span><br><span class="line">          a[j + <span class="number">1</span>] = tmp;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      a[j + <span class="number">1</span>] = element;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">GetThirdIndex</span> (<span class="params">a, from, to</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> t_array = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line">    <span class="comment">// Use both 'from' and 'to' to determine the pivot candidates.</span></span><br><span class="line">    <span class="keyword">var</span> increment = <span class="number">200</span> + ((to - <span class="keyword">from</span>) &amp; <span class="number">15</span>);</span><br><span class="line">    <span class="keyword">var</span> j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">from</span> += <span class="number">1</span>;</span><br><span class="line">    to -= <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="keyword">from</span>; i &lt; to; i += increment) &#123;</span><br><span class="line">      t_array[j] = [i, a[i]];</span><br><span class="line">      j++;</span><br><span class="line">    &#125;</span><br><span class="line">    t_array.sort(<span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> comparefn(a[<span class="number">1</span>], b[<span class="number">1</span>]);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">var</span> third_index = t_array[t_array.length &gt;&gt; <span class="number">1</span>][<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">return</span> third_index;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">QuickSort</span> (<span class="params">a, from, to</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 基准选择第一个元素</span></span><br><span class="line">    <span class="keyword">var</span> third_index = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">      <span class="comment">// 待排序数组长度 &lt;= 10 采用插入排序</span></span><br><span class="line">      <span class="keyword">if</span> (to - <span class="keyword">from</span> &lt;= <span class="number">10</span>) &#123;</span><br><span class="line">        InsertionSort(a, <span class="keyword">from</span>, to);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (to - <span class="keyword">from</span> &gt; <span class="number">1000</span>) &#123;</span><br><span class="line">        <span class="comment">// 每隔 200 ~ 215 （根据 length &amp; 15的结果）个元素取一个值，</span></span><br><span class="line">        <span class="comment">// 然后将这些值进行排序，取中间值的下标</span></span><br><span class="line">        <span class="comment">// 这里的排序其实又是一个递归调用</span></span><br><span class="line">        third_index = GetThirdIndex(a, <span class="keyword">from</span>, to);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 将中间元素设为基准值</span></span><br><span class="line">        third_index = <span class="keyword">from</span> + ((to - <span class="keyword">from</span>) &gt;&gt; <span class="number">1</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 将第一个,中间元素（上面获取的基准值），最后一个元素三者中的中位数作为基准值</span></span><br><span class="line">      <span class="keyword">var</span> v0 = a[<span class="keyword">from</span>];</span><br><span class="line">      <span class="keyword">var</span> v1 = a[third_index];</span><br><span class="line">      <span class="keyword">var</span> v2 = a[to - <span class="number">1</span>];</span><br><span class="line">      <span class="keyword">var</span> c01 = comparefn(v0, v1);</span><br><span class="line">      <span class="keyword">if</span> (c01 &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// v1 &lt; v0, so swap them.</span></span><br><span class="line">        <span class="keyword">var</span> tmp = v0;</span><br><span class="line">        v0 = v1;</span><br><span class="line">        v1 = tmp;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 此时 v0 &lt;= v1.</span></span><br><span class="line">      <span class="keyword">var</span> c02 = comparefn(v0, v2);</span><br><span class="line">      <span class="keyword">if</span> (c02 &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// v2 &lt; v0 &lt;= v1.的情况 进行交换</span></span><br><span class="line">        <span class="keyword">var</span> tmp = v0;</span><br><span class="line">        v0 = v2;</span><br><span class="line">        v2 = v1;</span><br><span class="line">        v1 = tmp;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// v0 &lt;= v1 &amp;&amp; v0 &lt;= v2</span></span><br><span class="line">        <span class="keyword">var</span> c12 = comparefn(v1, v2);</span><br><span class="line">        <span class="keyword">if</span> (c12 &gt; <span class="number">0</span>) &#123;</span><br><span class="line">          <span class="comment">// v1 &gt; v2</span></span><br><span class="line">          <span class="keyword">var</span> tmp = v1;</span><br><span class="line">          v1 = v2;</span><br><span class="line">          v2 = tmp;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 最终效果 v0 &lt;= v1 &lt;= v2</span></span><br><span class="line">      a[<span class="keyword">from</span>] = v0;</span><br><span class="line">      a[to - <span class="number">1</span>] = v2;</span><br><span class="line">      <span class="keyword">var</span> pivot = v1;</span><br><span class="line">      <span class="keyword">var</span> low_end = <span class="keyword">from</span> + <span class="number">1</span>;   <span class="comment">// 比基准值小的元素的上界</span></span><br><span class="line">      <span class="keyword">var</span> high_start = to - <span class="number">1</span>;  <span class="comment">// 比基准值大的元素的下界</span></span><br><span class="line">      <span class="comment">// 将基准值与 from + 1 位置的元素进行互换</span></span><br><span class="line">      <span class="comment">// 此时 from + 1 位置的元素肯定是要排 form 位置后面的</span></span><br><span class="line">      <span class="keyword">if</span> (comparefn(pivot, a[low_end]) !== <span class="number">0</span>) &#123;</span><br><span class="line">        a[third_index] = a[low_end];</span><br><span class="line">        a[low_end] = pivot;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        a[third_index] = pivot</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 划分函数 将小于（假设升序排序）基准值的元素排在左边</span></span><br><span class="line">      partition: <span class="keyword">for</span> (<span class="keyword">var</span> i = low_end + <span class="number">1</span>; i &lt; high_start; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> element = a[i];</span><br><span class="line">        <span class="keyword">var</span> order = comparefn(element, pivot);</span><br><span class="line">        <span class="keyword">if</span> (order &lt; <span class="number">0</span>) &#123;</span><br><span class="line">          a[i] = a[low_end];</span><br><span class="line">          a[low_end] = element;</span><br><span class="line">          low_end++;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (order &gt; <span class="number">0</span>) &#123;</span><br><span class="line">          <span class="comment">// 当待排序元素大于基准值时，</span></span><br><span class="line">          <span class="comment">// 与到右侧第一个小于基准值的元素互换</span></span><br><span class="line">          <span class="keyword">do</span> &#123;</span><br><span class="line">            high_start--;</span><br><span class="line">            <span class="keyword">if</span> (high_start == i) <span class="keyword">break</span> partition;</span><br><span class="line">            <span class="keyword">var</span> top_elem = a[high_start];</span><br><span class="line">            order = comparefn(top_elem, pivot);</span><br><span class="line">          &#125; <span class="keyword">while</span> (order &gt; <span class="number">0</span>);</span><br><span class="line">          a[i] = a[high_start];</span><br><span class="line">          a[high_start] = element;</span><br><span class="line">          <span class="comment">// 该元素小于基准值，需要排在基准值左边</span></span><br><span class="line">          <span class="keyword">if</span> (order &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            element = a[i];</span><br><span class="line">            a[i] = a[low_end];</span><br><span class="line">            a[low_end] = element;</span><br><span class="line">            low_end++;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 对左右两个子数组再进行排序</span></span><br><span class="line">      <span class="comment">// 先处理待排序元素较少的</span></span><br><span class="line">      <span class="keyword">if</span> (to - high_start &lt; low_end - <span class="keyword">from</span>) &#123;</span><br><span class="line">        QuickSort(a, high_start, to);</span><br><span class="line">        to = low_end;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        QuickSort(a, <span class="keyword">from</span>, low_end);</span><br><span class="line">        <span class="keyword">from</span> = high_start;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  QuickSort(array, <span class="number">0</span>, array.length)</span><br><span class="line">  <span class="keyword">return</span> array</span><br><span class="line">&#125;</span><br><span class="line">ArraySort([<span class="number">1</span>,<span class="number">2</span>,<span class="number">13</span>,<span class="number">14</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">17</span>,<span class="number">18</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>,<span class="number">31</span>,<span class="number">41</span>],()=&gt;<span class="number">0</span>)</span><br><span class="line"><span class="comment">//  [1, 2, 13, 14, 5, 6, 17, 18, 9, 10, 11, 12, 31, 41]</span></span><br><span class="line">ArraySort([<span class="number">1</span>,<span class="number">2</span>,<span class="number">13</span>,<span class="number">14</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">17</span>,<span class="number">18</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>,<span class="number">31</span>,<span class="number">41</span>],(a,b)=&gt;a-b)</span><br><span class="line"><span class="comment">//  [1, 2, 5, 6, 9, 10, 11, 12, 13, 14, 17, 18, 31, 41]</span></span><br></pre></td></tr></table></figure>

<h3 id="7-6-303"><a href="#7-6-303" class="headerlink" title="7.6.303"></a>7.6.303</h3><p>根据 <a href="https://juejin.im/post/5c472940e51d455249762bef" target="_blank" rel="noopener">V8引擎中的排序</a> 得知，在v8 的7.0版本中修改了 Array.prototype.sort 的实现，不再采用js实现，进而采用一直叫 <code>Torque</code> 的语言，类似 TypeScript，强类型。</p>
<blockquote>
<p>v8 中的 src/js/array.js 在大概 7.2之后的版本删除，中间几个版本用来迁移 array的其他方法</p>
</blockquote>
<p>源码路径 <a href="https://github.com/v8/v8/blob/7.6.303/third_party/v8/builtins/array-sort.tq" target="_blank" rel="noopener">/third_party/v8/builtins/array-sort.tq</a></p>
<p>可以得知，sort 更换了实现，采用了 <a href="https://en.wikipedia.org/wiki/Timsort" target="_blank" rel="noopener">TimSort 排序算法</a></p>
<p>简单的说：</p>
<ol>
<li>扫描数组，确定其中的单调上升段和严格单调下降段，将严格下降段反转。我们将这样的段称之为run。 </li>
<li>定义最小run长度，短于此的run通过插入排序合并直至长度大于最小run长度； </li>
<li>反复归并一些相邻run，过程中需要避免归并长度相差很大的run，直至整个排序完成；</li>
</ol>
<p>实现还是较为复杂的，本文不进行深入，具体的可以查看 <a href="https://mp.weixin.qq.com/s?__biz=MzI2MTY0OTg2Nw==&mid=2247483816&idx=1&sn=079af3d70efcb68efa7400f09decb59c&chksm=ea56650cdd21ec1ace7c8fd168d62feb636e4b32f9a4d90329fe479489d8e7a70e612df8920b&token=2074049324&lang=zh_CN#rd" target="_blank" rel="noopener">TimSort的实现</a> 一文</p>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>在看源码的时候又发现一个实现差异的问题</p>
<p>chrome v59</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">[<span class="number">1</span>,,<span class="number">2</span>,,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>].sort(<span class="function"><span class="params">v</span>=&gt;</span><span class="number">0</span>)</span><br><span class="line"><span class="comment">// [1, 5, 2, 4, 3, undefined x 2]</span></span><br></pre></td></tr></table></figure>
<p>chrome 76</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">[<span class="number">1</span>,,<span class="number">2</span>,,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>].sort(<span class="function"><span class="params">v</span>=&gt;</span><span class="number">0</span>)</span><br><span class="line"><span class="comment">// [1, 2, 3, 4, 5, empty × 2]</span></span><br></pre></td></tr></table></figure>

<p>新版的实现应该是较为科学的</p>
<p>还有一些有趣的差异可以看<a href="https://juejin.im/post/5c472940e51d455249762bef#heading-2" target="_blank" rel="noopener">这里</a></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>低版本 v8 的快排实现有bug,当数组较小时采用插入排序是没问题的</p>
<p>新版本的chrome所使用的v8版本实现了稳定排序，并解决了一些潜在问题（与开发者想要的实现效果不同）</p>
<p>最后分享一个 <code>V8源码中寻找JS方法实现</code> 的技巧</p>
<ol>
<li>根据部分文件名快速查找文件：<a href="https://help.github.com/en/articles/finding-files-on-github" target="_blank" rel="noopener">https://help.github.com/en/articles/finding-files-on-github</a></li>
<li>在搜索栏中输入 “Array.prototype.sort” in:file 即可搜索含有全匹配 Array.prototype.sort 内容的文件</li>
<li>js方法实现一般在 /src/js/ 和 /src/runtime/ 目录中，参考自 <a href="https://www.zhihu.com/question/59792274/answer/169671660" target="_blank" rel="noopener">https://www.zhihu.com/question/59792274/answer/169671660</a></li>
<li>结合 test/mjsunit 一起看源码效果更佳</li>
</ol>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol>
<li><a href="http://yanhaijing.com/es5/#353" target="_blank" rel="noopener">es5中文规范</a></li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/sort" target="_blank" rel="noopener">MDN-Array.prototype.sort</a></li>
<li><a href="https://yalishizhude.com/2019/09/05/v8-sort/" target="_blank" rel="noopener">【深度】扒开V8引擎的源码，我找到了你们想要的前端算法</a></li>
<li><a href="https://juejin.im/post/59e80dc6f265da432a7aaf15" target="_blank" rel="noopener">JavaScript专题之解读 v8 排序源码</a></li>
<li><a href="https://v8.dev/blog/array-sort" target="_blank" rel="noopener">Getting things sorted in V8</a></li>
</ol>
]]></content>
      <categories>
        <category>大前端</category>
      </categories>
      <tags>
        <tag>ECMAScript</tag>
        <tag>V8</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue之从零编写一个ContextMenu(右键菜单)插件</title>
    <url>/2019/07/03/2019Q3/Vue%E4%B9%8B%E4%BB%8E%E9%9B%B6%E7%BC%96%E5%86%99%E4%B8%80%E4%B8%AAContextMenu(%E5%8F%B3%E9%94%AE%E8%8F%9C%E5%8D%95)%E6%8F%92%E4%BB%B6/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>ContextMenu 即右键菜单，当前的需求是：右键点击某些组件时，根据所点击组件的信息，展示不同的菜单。</p>
<p>本插件已开源，具体代码和使用可参考： <a href="https://github.com/Francecil/vue-contextmenu" target="_blank" rel="noopener">vue-contextmenu</a></p>
<p>本文采用的是 vue 技术栈，部分处理对于 react 是可以借鉴的</p>
<p>其中需要注意的点有：</p>
<ol>
<li>菜单完全显示，即右键点击位于页面下/右侧时，菜单应该向上/左显示</li>
<li>具体菜单由上层控制，该组件仅提供slot</li>
<li>该菜单dom上唯一，不需要时应该销毁</li>
<li>点击页面其他位置，菜单消失</li>
</ol>
<p>先不考虑插件形式，按日常组件开发</p>
<a id="more"></a>


<h2 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">|-components</span><br><span class="line">|---ContextMenu.vue    <span class="comment">//菜单组件</span></span><br><span class="line">|-views</span><br><span class="line">|---Home.vue            <span class="comment">//页面组件</span></span><br><span class="line">|---Dashbox.vue        <span class="comment">//图表组件，绝对定位于App中，有多个，右键展示自定义菜单</span></span><br></pre></td></tr></table></figure>
<p>其余的 vue-router 什么的，不再赘诉</p>
<p>右键菜单的内容由使用者定义（通过slot），所以我们可以很快的编写 ContextMenu 的代码</p>
<blockquote>
<p>同时解决了 <strong>注意点2</strong></p>
</blockquote>
<p>ContextMenu.vue</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"context-menu"</span> <span class="attr">v-show</span>=<span class="string">"show"</span> <span class="attr">:style</span>=<span class="string">"style"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="actionscript">  name: <span class="string">"context-menu"</span>,</span></span><br><span class="line">  props: &#123;</span><br><span class="line"><span class="javascript">    show: <span class="built_in">Boolean</span></span></span><br><span class="line">  &#125;,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    style() &#123;</span><br><span class="line"><span class="actionscript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">        left: <span class="string">"0px"</span>,</span></span><br><span class="line"><span class="actionscript">        top: <span class="string">"0px"</span></span></span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">"scss"</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="css"><span class="selector-class">.context-menu</span> &#123;</span></span><br><span class="line">  z-index: 1000;</span><br><span class="line">  display: block;</span><br><span class="line">  position: absolute;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>先不考虑显示的位置，通过 show prop 的值来显示/隐藏该菜单，当前实现 菜单将会显示在左上角</p>
<p>Dashbox.vue</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">:style</span>=<span class="string">"dashbox.style"</span> <span class="attr">class</span>=<span class="string">"dashbox"</span> @<span class="attr">contextmenu</span>=<span class="string">"showContextMenu"</span>&gt;</span></span><br><span class="line">    &#123;&#123; dashbox.content &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">  props: &#123;</span><br><span class="line"><span class="javascript">    dashbox: <span class="built_in">Object</span></span></span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    showContextMenu(e) &#123;</span><br><span class="line"><span class="actionscript">      <span class="keyword">this</span>.$emit(<span class="string">"show-contextmenu"</span>, e);</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css"><span class="selector-class">.dashbox</span> &#123;</span></span><br><span class="line">  position: absolute;</span><br><span class="line">  background-color: aliceblue;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>绝对定位在页面中，右键时会向上层传递事件</p>
<p>Home.vue</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"home"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Dashbox</span></span></span><br><span class="line"><span class="tag">      <span class="attr">v-for</span>=<span class="string">"dashbox in dashboxs"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:key</span>=<span class="string">"dashbox.id"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:dashbox</span>=<span class="string">"dashbox"</span></span></span><br><span class="line"><span class="tag">      @<span class="attr">show-contextmenu</span>=<span class="string">"showContextMenu"</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ContextMenu</span> <span class="attr">:show</span>=<span class="string">"contextMenuVisible"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>复制<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>粘贴<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>剪切<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ContextMenu</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> ContextMenu <span class="keyword">from</span> <span class="string">"@/components/ContextMenu.vue"</span>;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> Dashbox <span class="keyword">from</span> <span class="string">"./Dashbox.vue"</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="actionscript">  name: <span class="string">"home"</span>,</span></span><br><span class="line">  components: &#123;</span><br><span class="line">    ContextMenu,</span><br><span class="line">    Dashbox</span><br><span class="line">  &#125;,</span><br><span class="line">  data() &#123;</span><br><span class="line"><span class="actionscript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">      contextMenuVisible: <span class="literal">false</span>,</span></span><br><span class="line">      dashboxs: [</span><br><span class="line">        &#123;</span><br><span class="line">          id: 1,</span><br><span class="line"><span class="actionscript">          style: <span class="string">"left:200px;top:200px;width:100px;height:100px"</span>,</span></span><br><span class="line"><span class="actionscript">          content: <span class="string">"test1"</span></span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          id: 2,</span><br><span class="line"><span class="actionscript">          style: <span class="string">"left:400px;top:400px;width:100px;height:100px"</span>,</span></span><br><span class="line"><span class="actionscript">          content: <span class="string">"test2"</span></span></span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    showContextMenu(e) &#123;</span><br><span class="line">      e.preventDefault();</span><br><span class="line"><span class="actionscript">      <span class="keyword">this</span>.contextMenuVisible = <span class="literal">true</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>此时可以看到页面中有2个矩形框，右键的时候，左上角能出现菜单</p>
<p>当然，此时并没有办法将该菜单隐藏</p>
<p>下面，我们将一步步进行优化</p>
<h2 id="菜单处于右键点击位置"><a href="#菜单处于右键点击位置" class="headerlink" title="菜单处于右键点击位置"></a>菜单处于右键点击位置</h2><p>上面我们在 showContextMenu 方法中获取到点击事件e，</p>
<p>其中 <code>e.clientX/Y</code> 是基于浏览器窗口viewport的位置，参考点随着浏览器的滚动而变化（即一直是视窗左上角）</p>
<p>那么，将 clientX/Y 直接传入 ContextMenu 组件修改其样式是否就可以了？</p>
<p>思考一下…</p>
<hr>
<p>.</p>
<p>.</p>
<p>.</p>
<p>.</p>
<p>答案是不可以的，原因在于 ContextMenu 的祖先节点的定位可能不是 static,</p>
<p>当祖先节点定位非 static 时，absolute 定位的 ContextMenu 的参考点就是以祖先节点为参考点了。</p>
<p>举个例子：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"header"</span> <span class="attr">style</span>=<span class="string">"height:200px"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"home"</span> <span class="attr">style</span>=<span class="string">"position: relative;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"context-menu"</span> <span class="attr">style</span>=<span class="string">"left: 200px;top: 200px;position: absolute;"</span>&gt;</span></span><br><span class="line">      我是右键菜单</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>而实际上，当右键的 clientX/Y 值为 200，200时，传入 context-menu的style后，其菜单应该显示在点击处下方 200px, 即相对 viewport 的 left,top 分别为 200，400</p>
<blockquote>
<p>了解 element-ui等组件库的应该知道，在涉及 poper 显示的时候，官方默认<code>popper-append-to-body</code>，目的就是将弹窗组件插入body，脱离文档流，不与定义处的父组件产生关系，并且方便使用 event.clientX/Y</p>
</blockquote>
<p>所以，将其直接插入 body 是最省事的，</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">mounted () &#123;</span><br><span class="line">  <span class="built_in">document</span>.body.appendChild(<span class="keyword">this</span>.$el)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>ContextMenu 增加 offset 属性并修改样式</p>
<p>Home.vue</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"home"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Dashbox</span></span></span><br><span class="line"><span class="tag">      <span class="attr">v-for</span>=<span class="string">"dashbox in dashboxs"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:key</span>=<span class="string">"dashbox.id"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:dashbox</span>=<span class="string">"dashbox"</span></span></span><br><span class="line"><span class="tag">      @<span class="attr">show-contextmenu</span>=<span class="string">"showContextMenu"</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ContextMenu</span> <span class="attr">:show</span>=<span class="string">"contextMenuVisible"</span> <span class="attr">:offset</span>=<span class="string">"contextMenuOffset"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>复制<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>粘贴<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>剪切<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ContextMenu</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> ContextMenu <span class="keyword">from</span> <span class="string">"@/components/ContextMenu.vue"</span>;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> Dashbox <span class="keyword">from</span> <span class="string">"./Dashbox.vue"</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="actionscript">  name: <span class="string">"home"</span>,</span></span><br><span class="line">  components: &#123;</span><br><span class="line">    ContextMenu,</span><br><span class="line">    Dashbox</span><br><span class="line">  &#125;,</span><br><span class="line">  data() &#123;</span><br><span class="line"><span class="actionscript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">      contextMenuVisible: <span class="literal">false</span>,</span></span><br><span class="line">      contextMenuOffset: &#123;</span><br><span class="line">        left: 0,</span><br><span class="line">        top: 0</span><br><span class="line">      &#125;,</span><br><span class="line">      dashboxs: [</span><br><span class="line">        &#123;</span><br><span class="line">          id: 1,</span><br><span class="line"><span class="actionscript">          style: <span class="string">"left:200px;top:200px;width:100px;height:100px"</span>,</span></span><br><span class="line"><span class="actionscript">          content: <span class="string">"test1"</span></span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          id: 2,</span><br><span class="line"><span class="actionscript">          style: <span class="string">"left:400px;top:400px;width:100px;height:100px"</span>,</span></span><br><span class="line"><span class="actionscript">          content: <span class="string">"test2"</span></span></span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    showContextMenu(e) &#123;</span><br><span class="line">      e.preventDefault();</span><br><span class="line"><span class="actionscript">      <span class="keyword">this</span>.contextMenuVisible = <span class="literal">true</span>;</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">this</span>.contextMenuOffset = &#123;</span></span><br><span class="line">        left: e.clientX,</span><br><span class="line">        top: e.clientY</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>ContextMenu.vue</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"context-menu"</span> <span class="attr">v-show</span>=<span class="string">"show"</span> <span class="attr">:style</span>=<span class="string">"style"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="actionscript">  name: <span class="string">"context-menu"</span>,</span></span><br><span class="line">  props: &#123;</span><br><span class="line">    offset: &#123;</span><br><span class="line"><span class="javascript">      type: <span class="built_in">Object</span>,</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">default</span>: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line">          left: 0,</span><br><span class="line">          top: 0</span><br><span class="line">        &#125;;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"><span class="javascript">    show: <span class="built_in">Boolean</span></span></span><br><span class="line">  &#125;,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    style() &#123;</span><br><span class="line"><span class="actionscript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">        left: <span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.offset.left&#125;</span>px`</span>,</span></span><br><span class="line"><span class="javascript">        top: <span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.offset.top&#125;</span>px`</span></span></span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted() &#123;</span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.body.appendChild(<span class="keyword">this</span>.$el);</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">"scss"</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="css"><span class="selector-class">.context-menu</span> &#123;</span></span><br><span class="line">  z-index: 1000;</span><br><span class="line">  display: block;</span><br><span class="line">  position: absolute;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>到这里，我们就可以实现 <strong>菜单处于右键点击位置</strong> 的效果了，每次右键点击，context-menu 会显示在对应位置</p>
<h2 id="该菜单dom上唯一，不需要时应该销毁"><a href="#该菜单dom上唯一，不需要时应该销毁" class="headerlink" title="该菜单dom上唯一，不需要时应该销毁"></a>该菜单dom上唯一，不需要时应该销毁</h2><p>这个也很简单</p>
<p>在组件销毁时，把自己从 body 中移除</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">beforeDestroy () &#123;</span><br><span class="line">  <span class="keyword">let</span> popperElm = <span class="keyword">this</span>.$el</span><br><span class="line">  <span class="keyword">if</span> (popperElm &amp;&amp; popperElm.parentNode === <span class="built_in">document</span>.body) &#123;</span><br><span class="line">    <span class="built_in">document</span>.body.removeChild(popperElm);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="点击页面其他位置，菜单消失"><a href="#点击页面其他位置，菜单消失" class="headerlink" title="点击页面其他位置，菜单消失"></a>点击页面其他位置，菜单消失</h2><p>这里我们选择监听 mousedown，若事件没有停止传递，则 document 上可以监听到</p>
<blockquote>
<p>当然 这里我们需要保证 事件不会被 stopPropagation</p>
</blockquote>
<p>ContextMenu.vue</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span></span></span><br><span class="line"><span class="tag">    <span class="attr">class</span>=<span class="string">"context-menu"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">v-show</span>=<span class="string">"show"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:style</span>=<span class="string">"style"</span></span></span><br><span class="line"><span class="tag">    @<span class="attr">mousedown.stop</span></span></span><br><span class="line"><span class="tag">    @<span class="attr">contextmenu.prevent</span></span></span><br><span class="line"><span class="tag">  &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="actionscript">  name: <span class="string">"context-menu"</span>,</span></span><br><span class="line">  props: &#123;</span><br><span class="line">    offset: &#123;</span><br><span class="line"><span class="javascript">      type: <span class="built_in">Object</span>,</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">default</span>: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line">          left: 0,</span><br><span class="line">          top: 0</span><br><span class="line">        &#125;;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"><span class="javascript">    show: <span class="built_in">Boolean</span></span></span><br><span class="line">  &#125;,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    style() &#123;</span><br><span class="line"><span class="actionscript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">        left: <span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.offset.left&#125;</span>px`</span>,</span></span><br><span class="line"><span class="javascript">        top: <span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.offset.top&#125;</span>px`</span></span></span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  beforeDestroy() &#123;</span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> popperElm = <span class="keyword">this</span>.$el;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">if</span> (popperElm &amp;&amp; popperElm.parentNode === <span class="built_in">document</span>.body) &#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">document</span>.body.removeChild(popperElm);</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.removeEventListener(<span class="string">"mousedown"</span>, <span class="keyword">this</span>.clickDocumentHandler);</span></span><br><span class="line">  &#125;,</span><br><span class="line">  mounted() &#123;</span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.body.appendChild(<span class="keyword">this</span>.$el);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.addEventListener(<span class="string">"mousedown"</span>, <span class="keyword">this</span>.clickDocumentHandler);</span></span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    clickDocumentHandler() &#123;</span><br><span class="line"><span class="actionscript">      <span class="keyword">if</span> (<span class="keyword">this</span>.show) &#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">this</span>.$emit(<span class="string">"update:show"</span>, <span class="literal">false</span>);</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">"scss"</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="css"><span class="selector-class">.context-menu</span> &#123;</span></span><br><span class="line">  z-index: 1000;</span><br><span class="line">  display: block;</span><br><span class="line">  position: absolute;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>Home.vue 增加 <code>@update:show</code> 事件处理</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ContextMenu</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:show</span>=<span class="string">"contextMenuVisible"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:offset</span>=<span class="string">"contextMenuOffset"</span></span></span><br><span class="line"><span class="tag">  @<span class="attr">update:show</span>=<span class="string">"show =&gt; (contextMenuVisible = show)"</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>复制<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>粘贴<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>剪切<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ContextMenu</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h2 id="菜单完全显示"><a href="#菜单完全显示" class="headerlink" title="菜单完全显示"></a>菜单完全显示</h2><p>根据点击位置，判断菜单向上显示或向下显示，即右键点击位于页面下/右侧时，菜单应该向上/左显示</p>
<p>页面高度：<code>let docHeight = document.documentElement.clientHeight</code></p>
<p>菜单高度：<code>let menuHeight = this.$el.getBoundingClientRect().height</code></p>
<p>当 <code>e.clientY + menuHeight &gt;= docHeight</code> 时，菜单向下显示就会被遮挡了，需要向上显示</p>
<p>同理，</p>
<p>页面宽度：<code>let docWidth = document.documentElement.clientWidth</code></p>
<p>菜单高度：<code>let menuWidth = this.$el.getBoundingClientRect().width</code></p>
<p>当 <code>e.clientX + menuWidth &gt;= docWidth</code> 时，菜单需要向左显示</p>
<p>由于菜单由外部定义，宽高不可控，所以每次都需要通过 <code>getBoundingClientRect</code> 获取实际宽高</p>
<p>这里需要注意获取 getBoundingClientRect 的时机。</p>
<p>一开始尝试：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">computed: &#123;</span><br><span class="line">    style() &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>.$el)</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        left: <span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.offset.left&#125;</span>px`</span>,</span><br><span class="line">        top: <span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.offset.top&#125;</span>px`</span></span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>发现此时组件处于 <code>display:none</code> 状态，获取到的宽高都为0</p>
<p>有2种解决方案，一种是将 v-show 也就是 <code>display 样式</code> 改为 <code>visibility</code></p>
<p>但担心此法不够通用（其实是想试试 $nextTick，</p>
<p>另一种就是在下一个渲染周期结束后才执行，即 <code>v-show=&quot;true&quot;</code> 后计算宽高</p>
<p>故我们需要监听 show prop 的值，当其为 true 时，在 <code>$nextTick</code> 回调中设置菜单坐标样式，此时 style 不用 computed,具体看代码。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span></span></span><br><span class="line"><span class="tag">    <span class="attr">class</span>=<span class="string">"context-menu"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">v-show</span>=<span class="string">"show"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:style</span>=<span class="string">"style"</span></span></span><br><span class="line"><span class="tag">    @<span class="attr">mousedown.stop</span></span></span><br><span class="line"><span class="tag">    @<span class="attr">contextmenu.prevent</span></span></span><br><span class="line"><span class="tag">  &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="actionscript">  name: <span class="string">"context-menu"</span>,</span></span><br><span class="line">  data() &#123;</span><br><span class="line"><span class="actionscript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line">      style: &#123;&#125;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  props: &#123;</span><br><span class="line">    offset: &#123;</span><br><span class="line"><span class="javascript">      type: <span class="built_in">Object</span>,</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">default</span>: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line">          left: 0,</span><br><span class="line">          top: 0</span><br><span class="line">        &#125;;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"><span class="javascript">    show: <span class="built_in">Boolean</span></span></span><br><span class="line">  &#125;,</span><br><span class="line">  watch: &#123;</span><br><span class="line">    show(show) &#123;</span><br><span class="line">      if (show) &#123;</span><br><span class="line"><span class="actionscript">        <span class="keyword">this</span>.$nextTick(<span class="keyword">this</span>.setPosition);</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  beforeDestroy() &#123;</span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> popperElm = <span class="keyword">this</span>.$el;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">if</span> (popperElm &amp;&amp; popperElm.parentNode === <span class="built_in">document</span>.body) &#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">document</span>.body.removeChild(popperElm);</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.removeEventListener(<span class="string">"mousedown"</span>, <span class="keyword">this</span>.clickDocumentHandler);</span></span><br><span class="line">  &#125;,</span><br><span class="line">  mounted() &#123;</span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.body.appendChild(<span class="keyword">this</span>.$el);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.addEventListener(<span class="string">"mousedown"</span>, <span class="keyword">this</span>.clickDocumentHandler);</span></span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    clickDocumentHandler() &#123;</span><br><span class="line"><span class="actionscript">      <span class="keyword">if</span> (<span class="keyword">this</span>.show) &#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">this</span>.$emit(<span class="string">"update:show"</span>, <span class="literal">false</span>);</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    setPosition() &#123;</span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> docHeight = <span class="built_in">document</span>.documentElement.clientHeight;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> docWidth = <span class="built_in">document</span>.documentElement.clientWidth;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> menuHeight = <span class="keyword">this</span>.$el.getBoundingClientRect().height;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> menuWidth = <span class="keyword">this</span>.$el.getBoundingClientRect().width;</span></span><br><span class="line"><span class="actionscript">      <span class="comment">// 增加点击处与菜单间间隔，较为美观</span></span></span><br><span class="line"><span class="actionscript">      <span class="keyword">const</span> gap = <span class="number">10</span>;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> topover =</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">this</span>.offset.top + menuHeight + gap &gt;= docHeight</span></span><br><span class="line">          ? menuHeight + gap</span><br><span class="line">          : -gap;</span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> leftover =</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">this</span>.offset.left + menuWidth + gap &gt;= docWidth ? menuWidth + gap : -gap;</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">this</span>.style = &#123;</span></span><br><span class="line"><span class="javascript">        left: <span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.offset.left - leftover&#125;</span>px`</span>,</span></span><br><span class="line"><span class="javascript">        top: <span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.offset.top - topover&#125;</span>px`</span></span></span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">"scss"</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="css"><span class="selector-class">.context-menu</span> &#123;</span></span><br><span class="line">  z-index: 1000;</span><br><span class="line">  display: block;</span><br><span class="line">  position: absolute;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>当然，如果要做到（页面滚动/page resize）等菜单位置跟着变化，可以参考 element popper 的实现</p>
<ol>
<li><a href="https://github.com/ElemeFE/element/blob/dev/src/utils/popper.js" target="_blank" rel="noopener">https://github.com/ElemeFE/element/blob/dev/src/utils/popper.js</a></li>
<li><a href="https://github.com/ElemeFE/element/blob/dev/src/utils/vue-popper.js" target="_blank" rel="noopener">https://github.com/ElemeFE/element/blob/dev/src/utils/vue-popper.js</a></li>
</ol>
<p>右键菜单应该是没有这样的需求</p>
<h2 id="增加显示-隐藏的过度动画"><a href="#增加显示-隐藏的过度动画" class="headerlink" title="增加显示/隐藏的过度动画"></a>增加显示/隐藏的过度动画</h2><p>这个也比较简单，采用 vue 自带的 transition</p>
<p>ContextMenu 中包一层 <code>&lt;transition name=&quot;context-menu&quot;&gt;</code></p>
<p>style 样式 改为</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;style lang="scss" scoped&gt;</span><br><span class="line"><span class="selector-class">.context-menu</span> &#123;</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">1000</span>;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  &amp;-enter,</span><br><span class="line">  &amp;<span class="selector-tag">-leave-to</span> &#123;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  &amp;<span class="selector-tag">-enter-active</span>,</span><br><span class="line">  &amp;<span class="selector-tag">-leave-active</span> &#123;</span><br><span class="line">    <span class="attribute">transition</span>: opacity <span class="number">0.5s</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<h2 id="插件注册"><a href="#插件注册" class="headerlink" title="插件注册"></a>插件注册</h2><p>参考了 <a href="https://github.com/ElemeFE/element/blob/master/src/index.js" target="_blank" rel="noopener">element-ui</a> 的代码和 <a href="https://github.com/ElemeFE/element#quick-start" target="_blank" rel="noopener">README</a></p>
<p>以及 <a href="https://cn.vuejs.org/v2/guide/plugins.html" target="_blank" rel="noopener">vue 官方文档-插件</a> </p>
<p>我们先创建一个 contextmenu.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> ContextMenu <span class="keyword">from</span> <span class="string">"@/components/ContextMenu.vue"</span>;</span><br><span class="line"><span class="keyword">const</span> plugin = &#123;&#125;;</span><br><span class="line">plugin.install = <span class="function"><span class="keyword">function</span>(<span class="params">Vue</span>) </span>&#123;</span><br><span class="line">  Vue.component(ContextMenu.name, ContextMenu);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Auto install</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">window</span> !== <span class="string">"undefined"</span> &amp;&amp; <span class="built_in">window</span>.Vue) &#123;</span><br><span class="line">  <span class="built_in">window</span>.Vue.use(plugin);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> plugin;</span><br><span class="line"><span class="keyword">export</span> &#123; ContextMenu &#125;;</span><br></pre></td></tr></table></figure>

<p>接下来使用的话有3种方式</p>
<p>main.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> ContextMenu <span class="keyword">from</span> <span class="string">"./contextmenu"</span>;</span><br><span class="line"><span class="comment">// 将会调用install方法</span></span><br><span class="line">Vue.use(ContextMenu);</span><br><span class="line"><span class="comment">// or </span></span><br><span class="line"><span class="keyword">import</span> &#123; ContextMenu &#125; <span class="keyword">from</span> <span class="string">"./contextmenu"</span>;</span><br><span class="line">Vue.component(ContextMenu.name, ContextMenu);</span><br></pre></td></tr></table></figure>

<p>或者在vue文件中使用(同法2，局部注册)</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ContextMenu &#125; <span class="keyword">from</span> <span class="string">"@/contextmenu"</span>;</span><br><span class="line">components: &#123;</span><br><span class="line">  <span class="string">"context-menu"</span>: ContextMenu,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>需要注意的是，<code>ContextMenu.vue</code> 中 name 为 <code>context-name</code>, 故 Home.vue 中应该相应的改为 <code>&lt;context-name/&gt;</code> </p>
<h2 id="滚动定位偏移问题"><a href="#滚动定位偏移问题" class="headerlink" title="滚动定位偏移问题"></a>滚动定位偏移问题</h2><p>body 和 Dashbox 父容器 都可滚动的情况下，会出现菜单不在点击位置的问题，</p>
<p>测试页面：修改 Home.vue</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"home"</span>&gt;</span></span><br><span class="line">+   <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span></span><br><span class="line">      ...</span><br><span class="line">+   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">//增加样式</span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">"scss"</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="css"><span class="selector-class">.home</span> &#123;</span></span><br><span class="line">  margin: 10px;</span><br><span class="line">  overflow: scroll;</span><br><span class="line">  height: 1500px;</span><br><span class="line">  width: 100%;</span><br><span class="line"><span class="css">  <span class="selector-tag">background</span>: <span class="selector-id">#eee</span>;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.content</span> &#123;</span></span><br><span class="line">    position: relative;</span><br><span class="line">    height: 2000px;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>此时先滚动 home，然后右键dashbox 就会发现错位了，因为此时的 event.clientY 比 绝对定位的 top 少了一个 scrollY 值</p>
<p>有两种方法：</p>
<ol>
<li>将 ContextMenu 的 position 由 absolute 改为 fixed</li>
<li>传入的坐标采用 pageX/Y</li>
</ol>
<p><em>题外话</em></p>
<p>上文提到，ContextMenu 是插入 body 的，那有没有什么场景是不插入body的，另外 element-ui 中 <code>popper-append-to-body=false</code> 的场景是什么，这里会出现么，应该怎么解决？</p>
<p>当 Dashbox 组件的父节点容器是限制高度且可以 scroll 的时候，若要求右键菜单（弹框等）不能超出容器，则不应该插入body,当前，我们右键菜单没有这样的要求</p>
<p>参考 antd-select 例子 <a href="https://codesandbox.io/s/4j168r7jw0" target="_blank" rel="noopener">https://codesandbox.io/s/4j168r7jw0</a></p>
<h2 id="生成-vue-cli-插件"><a href="#生成-vue-cli-插件" class="headerlink" title="生成 vue-cli 插件"></a>生成 vue-cli 插件</h2><p>有用过 <code>vue-cli 3</code> 和 <code>element-ui</code> 的，应该熟悉 <a href="https://github.com/ElementUI/vue-cli-plugin-element" target="_blank" rel="noopener">vue-cli-plugin-element</a></p>
<p>在我们的项目中，使用 <code>vue add element</code> 命令后，会自动去下载 <code>vue-cli-plugin-element</code> 并在 plugins 文件夹中新增 element.js 最后在 main.js 中使用，省去了上面那些手动引入的过程。</p>
<p>这里我们也尝试编写一个 <a href="https://github.com/francecil/vue-cli-plugin-contextmenu" target="_blank" rel="noopener">vue-cli-plugin-contextmenu</a></p>
<p>项目结构</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── README.md</span><br><span class="line">├── generator.js  # generator (可选,这里采用 generator&#x2F;index.js 的形式)</span><br><span class="line">├── prompts.js    # prompt 文件 (可选,本项目不使用)</span><br><span class="line">├── index.js      # service 插件</span><br><span class="line">└── package.json</span><br></pre></td></tr></table></figure>

<p>代码的话主要是参考 <a href="https://github.com/ElementUI/vue-cli-plugin-element" target="_blank" rel="noopener">vue-cli-plugin-element</a> ，其中最主要的是 generator 的代码，如下</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function">(<span class="params">api, opts, rootOptions</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> utils = <span class="built_in">require</span>(<span class="string">'./utils'</span>)(api)</span><br><span class="line"></span><br><span class="line">  api.extendPackage(&#123;</span><br><span class="line">    dependencies: &#123;</span><br><span class="line">      <span class="string">'@gahing/vcontextmenu'</span>: <span class="string">'^1.0.0'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  api.injectImports(utils.getMain(), <span class="string">`import './plugins/contextmenu.js'`</span>)</span><br><span class="line"></span><br><span class="line">  api.render(&#123;</span><br><span class="line">    <span class="string">'./src/plugins/contextmenu.js'</span>: <span class="string">'./templates/src/plugins/contextmenu.js'</span>,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当我们写完后，需要进行本地测试下</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建测试项目(全选默认设置)</span></span><br><span class="line">vue create <span class="built_in">test</span>-app</span><br><span class="line"><span class="built_in">cd</span> <span class="built_in">test</span>-app</span><br><span class="line"><span class="comment"># cd到项目文件夹并安装我们新创建的插件</span></span><br><span class="line">npm i file://E:/WebProjects/vue-cli-plugin-contextmenu -S</span><br><span class="line"><span class="comment"># 调用该插件</span></span><br><span class="line">vue invoke vue-cli-plugin-contextmenu</span><br></pre></td></tr></table></figure>
<p>查看test-app项目的main.js,将会看到新增这行代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'./plugins/contextmenu.js'</span></span><br></pre></td></tr></table></figure>

<p>plugins/contextmenu.js 中内容为</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> ContextMenu <span class="keyword">from</span> <span class="string">'@gahing/vcontextmenu'</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'@gahing/vcontextmenu/lib/vcontextmenu.css'</span></span><br><span class="line">Vue.use(ContextMenu)</span><br></pre></td></tr></table></figure>

<p>至此，vue-cli-plugin-contextmenu 就开发完成，将其发布到 npm 上</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol>
<li><p><a href="https://cli.vuejs.org/zh/dev-guide/plugin-dev.html#%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5" target="_blank" rel="noopener">插件开发指南</a></p>
</li>
<li><p><a href="https://github.com/ElementUI/vue-cli-plugin-element" target="_blank" rel="noopener">vue-cli-plugin-element</a></p>
</li>
<li><p><a href="https://juejin.im/post/5cb59c4bf265da03a743e979" target="_blank" rel="noopener">「Vue进阶」5分钟撸一个Vue CLI 插件</a></p>
</li>
</ol>
]]></content>
      <categories>
        <category>大前端</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>大屏可视化之组件层级设置</title>
    <url>/2019/07/02/2019Q3/%E5%A4%A7%E5%B1%8F%E5%8F%AF%E8%A7%86%E5%8C%96%E4%B9%8B%E7%BB%84%E4%BB%B6%E5%B1%82%E7%BA%A7%E8%AE%BE%E7%BD%AE/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近在进行大屏可视化产品的技术调研，主要是调研 网易有数 和 datav</p>
<p>在组件层级排列这块，两者的实现是不一样的</p>
<ul>
<li>datav:组件均在同级（z-index都是一样的），后定义的属于高层。调整层级就需要移动dom节点位置</li>
<li>有数:根据z-index去设置，调整层级就需要调整自身z-index以及其他受影响的图表 z-index</li>
</ul>
<p>通过分析vue上两者的实现，比较两者的优缺点</p>
<a id="more"></a>


<h2 id="datav"><a href="#datav" class="headerlink" title="datav"></a>datav</h2><p>Dashbox 是层级控件</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Dashbox</span></span></span><br><span class="line"><span class="tag">    <span class="attr">v-for</span>=<span class="string">"dashbox in dashboxs"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:key</span>=<span class="string">"dashbox.id"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:dashbox</span>=<span class="string">"dashbox"</span></span></span><br><span class="line"><span class="tag">  &gt;</span><span class="tag">&lt;/<span class="name">Dashbox</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">  data()&#123;</span><br><span class="line"><span class="actionscript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line">      dashboxs:[&#123;...&#125;,&#123;...&#125;]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>当调整层级时，我们调用方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">move:<span class="function">(<span class="params">type,id</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> index = <span class="keyword">this</span>.dashboxs.findIndex(<span class="function"><span class="params">dashbox</span>=&gt;</span>dashbox.id===id)</span><br><span class="line">  <span class="keyword">switch</span>(type)&#123;</span><br><span class="line">    <span class="comment">//上移一层</span></span><br><span class="line">    <span class="keyword">case</span> <span class="string">'up'</span>:&#123;</span><br><span class="line">      <span class="keyword">let</span> dashbox = <span class="keyword">this</span>.dashboxs.splice(index,<span class="number">1</span>)</span><br><span class="line">      <span class="keyword">this</span>.dashboxs.splice(index+<span class="number">1</span>,<span class="number">0</span>,dashbox[<span class="number">0</span>])</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//下移一层</span></span><br><span class="line">    <span class="keyword">case</span> <span class="string">'down'</span>:&#123;</span><br><span class="line">      <span class="keyword">let</span> dashbox = <span class="keyword">this</span>.dashboxs.splice(index,<span class="number">1</span>)</span><br><span class="line">      <span class="keyword">this</span>.dashboxs.splice(index - <span class="number">1</span> &gt;= <span class="number">0</span> ? index - <span class="number">1</span> : <span class="number">0</span>, <span class="number">0</span>,dashbox[<span class="number">0</span>])</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//置顶</span></span><br><span class="line">    <span class="keyword">case</span> <span class="string">'top'</span>:&#123;</span><br><span class="line">      <span class="keyword">let</span> dashbox = <span class="keyword">this</span>.dashboxs.splice(index,<span class="number">1</span>)</span><br><span class="line">      <span class="keyword">this</span>.dashboxs.push(dashbox)</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//置底</span></span><br><span class="line">    <span class="keyword">case</span> <span class="string">'bottom'</span>:&#123;</span><br><span class="line">      <span class="keyword">let</span> dashbox = <span class="keyword">this</span>.dashboxs.splice(index,<span class="number">1</span>)</span><br><span class="line">      <span class="keyword">this</span>.dashboxs.unshift(dashbox)</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>每个 dashbox 有key值，根据 diff 算法同级组件之间更改位置还是很高效的</p>
<p>优点：</p>
<ol>
<li>层级调整方法实现简单</li>
<li>dashbox 数据不用带z-index参数，节省空间</li>
</ol>
<p>缺点：</p>
<ol>
<li>dom 节点移动会产生Layout,不过这里用的绝对定位，所以影响很小，测试Layout耗时在1ms左右(Performance中无红色提示)</li>
</ol>
<h2 id="有数"><a href="#有数" class="headerlink" title="有数"></a>有数</h2><p>Dashbox 是层级控件 组件的 zIndex 值从1开始，不断递增且不中断</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Dashbox</span></span></span><br><span class="line"><span class="tag">    <span class="attr">v-for</span>=<span class="string">"dashbox in dashboxs"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:key</span>=<span class="string">"dashbox.id"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:dashbox</span>=<span class="string">"dashbox"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">style</span>=<span class="string">"z-index:`$&#123;dashbox.zIndex&#125;`"</span></span></span><br><span class="line"><span class="tag">  &gt;</span><span class="tag">&lt;/<span class="name">Dashbox</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">  data()&#123;</span><br><span class="line"><span class="actionscript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line">      dashboxs:[&#123;...&#125;,&#123;...&#125;]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>当调整层级时，我们调用方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">move:<span class="function">(<span class="params">type,id</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> dashbox = <span class="keyword">this</span>.dashboxs.find(<span class="function"><span class="params">dashbox</span>=&gt;</span>dashbox.id===id)</span><br><span class="line">  <span class="keyword">let</span> maxz = <span class="keyword">this</span>.dashboxs.length</span><br><span class="line">  <span class="keyword">let</span> curz = dashbox.zIndex</span><br><span class="line">  <span class="keyword">switch</span>(type)&#123;</span><br><span class="line">    <span class="comment">//上移一层</span></span><br><span class="line">    <span class="keyword">case</span> <span class="string">'up'</span>:&#123;</span><br><span class="line">      <span class="keyword">if</span>(curz&lt;maxz)&#123;</span><br><span class="line">        <span class="keyword">this</span>.dashboxs.find(<span class="function"><span class="params">d</span>=&gt;</span>d.zIndex===curz+<span class="number">1</span>).zIndex = curz</span><br><span class="line">        dashbox.zIndex = curz +<span class="number">1</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//下移一层</span></span><br><span class="line">    <span class="keyword">case</span> <span class="string">'down'</span>:&#123;</span><br><span class="line">      <span class="keyword">if</span>(curz&gt;<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">this</span>.dashboxs.find(<span class="function"><span class="params">d</span>=&gt;</span>d.zIndex===curz<span class="number">-1</span>).zIndex = curz</span><br><span class="line">        dashbox.zIndex = curz - <span class="number">1</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//置顶</span></span><br><span class="line">    <span class="keyword">case</span> <span class="string">'top'</span>:&#123;</span><br><span class="line">      <span class="keyword">if</span>(curz!==maxz)&#123;</span><br><span class="line">        <span class="keyword">this</span>.dashboxs.forEach(<span class="function"><span class="params">v</span>=&gt;</span>v.zIndex&gt;curz&amp;&amp;v.zIndex=v.zIndex<span class="number">-1</span>)</span><br><span class="line">        dashbox.zIndex = maxz</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//置底</span></span><br><span class="line">    <span class="keyword">case</span> <span class="string">'bottom'</span>:&#123;</span><br><span class="line">      <span class="keyword">if</span>(curz!==<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">this</span>.dashboxs.forEach(<span class="function"><span class="params">v</span>=&gt;</span>v.zIndex&lt;curz&amp;&amp;v.zIndex=v.zIndex+<span class="number">1</span>)</span><br><span class="line">        dashbox.zIndex = <span class="number">0</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>优点：</p>
<ol>
<li>利用z-index仅重绘，不产生回流</li>
</ol>
<p>缺点：</p>
<ol>
<li>层级调整方法相对复杂</li>
<li>组件过多时z-index不可控，可能影响其他同层级非dashbox组件的层级显示（比如同层级有一个划框，其z-index就绝对要在最高层）</li>
<li>数据增加z-index字段，略微增加了空间</li>
</ol>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol>
<li><a href="https://csstriggers.com/" target="_blank" rel="noopener">不同渲染引擎在不同样式变动下的Layout/Paint/Composite(渲染层合并)情况</a></li>
</ol>
]]></content>
      <categories>
        <category>大前端</category>
      </categories>
      <tags>
        <tag>大屏</tag>
      </tags>
  </entry>
  <entry>
    <title>vscode配置同步及拓展批量离线安装</title>
    <url>/2019/07/01/2019Q3/vscode%E9%85%8D%E7%BD%AE%E5%90%8C%E6%AD%A5%E5%8F%8A%E6%8B%93%E5%B1%95%E6%89%B9%E9%87%8F%E7%A6%BB%E7%BA%BF%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ol>
<li>换电脑后，怎么保持 配置（settings.json,插件,键位设置等）同步？</li>
<li>离线安装拓展？</li>
<li>利用脚本自动进行前面两个步骤</li>
</ol>
<a id="more"></a>

<h2 id="配置同步"><a href="#配置同步" class="headerlink" title="配置同步"></a>配置同步</h2><p><a href="https://juejin.im/post/5b9b5a6f6fb9a05d22728e36" target="_blank" rel="noopener">三分钟教你同步 Visual Studio Code 设置</a></p>
<h2 id="离线安装拓展"><a href="#离线安装拓展" class="headerlink" title="离线安装拓展"></a>离线安装拓展</h2><p><a href="https://blog.csdn.net/u012814856/article/details/80684376" target="_blank" rel="noopener">简单的 VSCode 插件离线安装方法</a></p>
<p>安装指令</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># vscode安装目录/bin</span></span><br><span class="line"><span class="comment"># 注意拓展的路径</span></span><br><span class="line"></span><br><span class="line">./code --install-extension xxx/octref.vetur-0.22.6.vsix</span><br></pre></td></tr></table></figure>

<h2 id="批量下载离线安装包"><a href="#批量下载离线安装包" class="headerlink" title="批量下载离线安装包"></a>批量下载离线安装包</h2><p>这个需求的来源是：云桌面不能访问外网但是可以访问宿主机，想要同步宿主机的 vscode 拓展到云桌面环境</p>
<p>可以直接采用 <code>离线安装拓展</code> 的做法，但是当拓展多了就很浪费时间。</p>
<p>故主要做的事情就是：</p>
<ol>
<li>获取并解析 拓展列表 配置文件</li>
<li>根据配置下载安装包</li>
</ol>
<!--more-->

<p>我们先上最终的操作步骤：</p>
<blockquote>
<p>为了保证平台统一，我们的操作采用 <code>git bash</code></p>
</blockquote>
<p>进入宿主机的 vscode安装目录/bin 下,右键 <code>Git Bash Here</code> 执行以下脚本</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 先创建一个tmp临时目录，安装包都会下到里面</span></span><br><span class="line"><span class="comment"># tr '\n' ' ' 多行转一行</span></span><br><span class="line"><span class="comment"># | sh 将输出进行执行</span></span><br><span class="line">mkdir tmp;</span><br><span class="line">./code --list-extensions --show-versions | sed -r <span class="string">'s/(.*?)\.(.*?)@(.*)/https:\/\/marketplace.visualstudio.com\/_apis\/public\/gallery\/publishers\/\1\/vsextensions\/\2\/\3\/vspackage -o tmp\/\1.\2-\3.vsix/'</span> | tr <span class="string">'\n'</span> <span class="string">' '</span> | sed -r <span class="string">'s/(.*)/curl \1/'</span> | sh</span><br></pre></td></tr></table></figure>
<p>安装包下载到 tmp 目录下</p>
<p>在云桌面的 vscode 中，点击 EXTENSIONS 后面的 … 符号，选择 <code>install from VXIS</code> 然后选择本地相应的插件包，插入，reload 即可。</p>
<blockquote>
<p>下面进行详细介绍：</p>
</blockquote>
<h3 id="一、获取并解析-拓展列表-配置文件"><a href="#一、获取并解析-拓展列表-配置文件" class="headerlink" title="一、获取并解析 拓展列表 配置文件"></a>一、获取并解析 拓展列表 配置文件</h3><h4 id="方案0-直接拿-配置同步-时-gist-github-中保存的json"><a href="#方案0-直接拿-配置同步-时-gist-github-中保存的json" class="headerlink" title="方案0: 直接拿 配置同步 时 gist.github 中保存的json"></a>方案0: 直接拿 <code>配置同步</code> 时 gist.github 中保存的json</h4><h4 id="方案1：解析目录并得到列表："><a href="#方案1：解析目录并得到列表：" class="headerlink" title="方案1：解析目录并得到列表："></a>方案1：解析目录并得到列表：</h4><p>我们可以在以下目录中拿到拓展列表目录，目录名为<code>${publisher}.${name}-${version}</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Windows %USERPROFILE%\.vscode\extensions</span><br><span class="line">Mac ~&#x2F;.vscode&#x2F;extensions</span><br><span class="line">Linux ~&#x2F;.vscode&#x2F;extensions</span><br></pre></td></tr></table></figure>
<p>这个方案是可行的，但是感觉操作有点麻烦，弃</p>
<h4 id="方案2：使用code-list-extensions命令"><a href="#方案2：使用code-list-extensions命令" class="headerlink" title="方案2：使用code --list-extensions命令"></a>方案2：使用<code>code --list-extensions</code>命令</h4><p>在 vscode 安装目录下的bin目录中执行</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">// linux or git shell</span><br><span class="line">./code --list-extensions --show-versions</span><br><span class="line">// windows cmd or powershell</span><br><span class="line">.\code --list-extensions --show-versions</span><br></pre></td></tr></table></figure>
<p>可以列出 <code>${publisher}.${name}@${version}</code>列表</p>
<p>例如（第一行为命名行操作完的提示，不在实际输出中）：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[createInstance] extensionManagementService depends on downloadService <span class="built_in">which</span> is NOT registered.</span><br><span class="line">Andreabbondanza.ignoregit@1.0.1</span><br><span class="line">bpruitt-goddard.mermaid-markdown-syntax-highlighting@1.0.1</span><br><span class="line">dbaeumer.vscode-eslint@1.6.0</span><br></pre></td></tr></table></figure>

<p>参考<a href="https://code.visualstudio.com/docs/editor/command-line" target="_blank" rel="noopener">Command Line Interface (CLI)</a></p>
<h4 id="方案3：使用-vscode-npm-包"><a href="#方案3：使用-vscode-npm-包" class="headerlink" title="方案3：使用 vscode npm 包"></a>方案3：使用 vscode npm 包</h4><p>本想使用 vscode.extensions.all 接口拿到，碰到一些ts相关的问题后放弃了</p>
<hr>
<blockquote>
<p>最终采用 <strong>方案2</strong></p>
</blockquote>
<h3 id="二、根据配置下载安装包"><a href="#二、根据配置下载安装包" class="headerlink" title="二、根据配置下载安装包"></a>二、根据配置下载安装包</h3><p>下载链接为：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">https://marketplace.visualstudio.com/_apis/public/gallery/publishers/<span class="variable">$&#123;publisher&#125;</span>/vsextensions/<span class="variable">$&#123;name&#125;</span>/<span class="variable">$&#123;version&#125;</span>/vspackage</span><br></pre></td></tr></table></figure>

<p>假设某个插件配置为</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"metadata"</span>: &#123;</span><br><span class="line">    <span class="attr">"id"</span>: <span class="string">"e337c67b-55c2-4fef-8949-eb260e7fb7fd"</span>,</span><br><span class="line">    <span class="attr">"publisherId"</span>: <span class="string">"Shan.code-settings-sync"</span>,</span><br><span class="line">    <span class="attr">"publisherDisplayName"</span>: <span class="string">"Shan"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"code-settings-sync"</span>,</span><br><span class="line">  <span class="attr">"publisher"</span>: <span class="string">"Shan"</span>,</span><br><span class="line">  <span class="attr">"version"</span>: <span class="string">"3.1.2"</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<p>则 下载链接为 </p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">https://marketplace.visualstudio.com/_apis/public/gallery/publishers/Shan/vsextensions/code-settings-sync/3.1.2/vspackage</span><br></pre></td></tr></table></figure>

<p>下载的文件名为 <code>Shan.code-settings-sync-3.1.2.vsix</code></p>
<h4 id="在指定目录下利用-git-bash-下载文件"><a href="#在指定目录下利用-git-bash-下载文件" class="headerlink" title="在指定目录下利用 git bash 下载文件"></a>在指定目录下利用 git bash 下载文件</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl https:&#x2F;&#x2F;marketplace.visualstudio.com&#x2F;_apis&#x2F;public&#x2F;gallery&#x2F;publishers&#x2F;Shan&#x2F;vsextensions&#x2F;code-settings-sync&#x2F;3.1.2&#x2F;vspackage -O</span><br></pre></td></tr></table></figure>
<p>本以为使用 -O （以服务器上的名称保存在本地），下载的文件名是 <code>Shan.code-settings-sync-3.1.2.vsix</code>，结果是 <code>vspackage</code></p>
<p>根据 <a href="http://www.codebelief.com/article/2017/05/linux-command-line-curl-usage/#3" target="_blank" rel="noopener">cURL-将链接保存到文件</a> 中得知，</p>
<blockquote>
<p>注意：使用 -O 选项时，必须确保链接末尾包含文件名，否则 curl 无法正确保存文件。如果遇到链接中无文件名的情况，应该使用 -o 选项手动指定文件名，或使用重定向符号。</p>
</blockquote>
<p>另外介绍下 sh 的正则和文本替换</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> dbaeumer.vscode-eslint@1.6.0 | egrep <span class="string">"(.*?)\.(.*?)@(.*)"</span></span><br><span class="line"><span class="comment">#输出 dbaeumer.vscode-eslint@1.6.0</span></span><br></pre></td></tr></table></figure>
<p>一开始使用 egrep 命令，发现不能直接做替换，后直接采用 sed 命令</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">'dbaeumer.vscode-eslint@1.6.0'</span> |  sed -r <span class="string">'s/(.*?)\.(.*?)@(.*)/\1.\2-\3.vsix/'</span></span><br><span class="line"><span class="comment"># 输出 dbaeumer.vscode-eslint-1.6.0.vsix</span></span><br></pre></td></tr></table></figure>

<p>-r 参数表示 sed 开启拓展正则功能</p>
<p>参考 <a href="https://www.cnblogs.com/jcli/p/4088514.html" target="_blank" rel="noopener">sed介绍</a></p>
<p><strong>单文件下载的 sh 命令即</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">'dbaeumer.vscode-eslint@1.6.0'</span> | sed -r <span class="string">'s/(.*?)\.(.*?)@(.*)/curl https:\/\/marketplace.visualstudio.com\/_apis\/public\/gallery\/publishers\/\1\/vsextensions\/\2\/\3\/vspackage -o \1.\2-\3.vsix/'</span> | sh</span><br></pre></td></tr></table></figure>

<p>结合步骤一</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 先创建一个tmp临时目录，安装包都会下到里面</span></span><br><span class="line"><span class="comment"># tr '\n' ' ' 多行转一行</span></span><br><span class="line"><span class="comment"># | sh 将输出进行执行</span></span><br><span class="line">mkdir tmp;</span><br><span class="line">./code --list-extensions --show-versions | sed -r <span class="string">'s/(.*?)\.(.*?)@(.*)/https:\/\/marketplace.visualstudio.com\/_apis\/public\/gallery\/publishers\/\1\/vsextensions\/\2\/\3\/vspackage -o tmp\/\1.\2-\3.vsix/'</span> | tr <span class="string">'\n'</span> <span class="string">' '</span> | sed -r <span class="string">'s/(.*)/curl \1/'</span> | sh</span><br></pre></td></tr></table></figure>


<h2 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h2><p>发现有的文件下载下来安装不了，提示 <code>end of central directory record signature not found</code></p>
<p>可能是当前插件所依赖的 vscode 版本较高，要么升级 vscode 要么下载旧版插件</p>
<blockquote>
<p>可以去 <code>https://marketplace.visualstudio.com/items/${publisher}.${name}/changelog</code> 查看版本记录下载旧版本</p>
</blockquote>
<p>也有可能需要去 <code>gallery.vsassets.io</code> 下载</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">https://<span class="variable">$&#123;publisher&#125;</span>.gallery.vsassets.io/_apis/public/gallery/publisher/<span class="variable">$&#123;publisher&#125;</span>/extension/<span class="variable">$&#123;extension name&#125;</span>/<span class="variable">$&#123;version&#125;</span>/assetbyname/Microsoft.VisualStudio.Services.VSIXPackage</span><br></pre></td></tr></table></figure>

<p>sh 命令</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">'dbaeumer.vscode-eslint@1.6.0'</span> | sed -r <span class="string">'s/(.*?)\.(.*?)@(.*)/curl https:\/\/\1.gallery.vsassets.io\/_apis\/public\/gallery\/publisher\/\1\/extension\/\2\/\3\/assetbyname\/Microsoft.VisualStudio.Services.VSIXPackage -o \1.\2-\3.vsix/'</span> | sh</span><br></pre></td></tr></table></figure>

<p>注意，如果用命令行下载的时候提示：<code>curl:(92) HTTP/2 stream 1 was not closed cleanly: HTTP_1_1_REQUIRED (err 13)</code>,需要重新下</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>vscode</tag>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title>React Context及换肤功能实现</title>
    <url>/2019/07/01/2019Q3/React%20Context%E5%8F%8A%E6%8D%A2%E8%82%A4%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>通过讲解 React Context 的用法，引出 React 换肤功能的实现</p>
<a id="more"></a>

<h2 id="Context-概念"><a href="#Context-概念" class="headerlink" title="Context 概念"></a>Context 概念</h2><p>在组件树中共享数据，避免逐层传递。</p>
<p>我们经常遇到这样的场景，数据需要传到子组件的子组件更甚至更下层组件，用props逐层传递的代码如下：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">Toolbar</span> <span class="attr">theme</span>=<span class="string">"dark"</span> /&gt;</span>;</span></span><br><span class="line"><span class="xml">  &#125;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"><span class="xml">function Toolbar(props) &#123;</span></span><br><span class="line"><span class="xml">  // Toolbar 组件接受一个额外的“theme”属性，然后传递给 Button 组件。</span></span><br><span class="line"><span class="xml">  // 如果应用中每一个单独的按钮都需要知道 theme 的值，这会是件很麻烦的事，</span></span><br><span class="line"><span class="xml">  // 因为必须将这个值层层传递所有组件。</span></span><br><span class="line"><span class="xml">  return (</span></span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;Button theme=&#123;props.theme&#125; /&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line">function Button(props)&#123;</span><br><span class="line">  // Button 组件根据传递过来的 theme 决定 背景色</span><br><span class="line">  return (</span><br><span class="line">    &lt;button style=&#123;&#123;backgroundColor:props.theme==='dark'?'black':'white'&#125;&#125;&gt;</span><br><span class="line">      test</span><br><span class="line">    &lt;/button&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用 context,可以避免中间组件传递props</p>
<h2 id="Context-基本使用"><a href="#Context-基本使用" class="headerlink" title="Context 基本使用"></a>Context 基本使用</h2><h3 id="Provider-amp-Consumer"><a href="#Provider-amp-Consumer" class="headerlink" title="Provider &amp; Consumer"></a>Provider &amp; Consumer</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 为当前的 theme 创建一个 context（“light”为默认值）。</span></span><br><span class="line"><span class="keyword">const</span> ThemeContext = React.createContext(<span class="string">'light'</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 使用一个 Provider 来将当前的 theme 传递给以 Toolbar 开始的组件树</span></span><br><span class="line">  <span class="comment">// 本例使用 "dark" 值覆盖默认的 "light"值</span></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;ThemeContext.Provider value=<span class="string">"dark"</span>&gt;</span><br><span class="line">        &lt;Toolbar /&gt;</span><br><span class="line">      &lt;<span class="regexp">/ThemeContext.Provider&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">function Toolbar() &#123;</span></span><br><span class="line"><span class="regexp">  /</span><span class="regexp">/ 无需再传递 theme值</span></span><br><span class="line"><span class="regexp">  return (</span></span><br><span class="line"><span class="regexp">    &lt;div&gt;</span></span><br><span class="line"><span class="regexp">      &lt;Button /</span>&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">function Button()&#123;</span></span><br><span class="line"><span class="regexp">  /</span><span class="regexp">/ 在 Context.Consumer 中通过 RenderProps 的方式使用</span></span><br><span class="line"><span class="regexp">  return (</span></span><br><span class="line"><span class="regexp">    &lt;ThemeContext.Consumer&gt;</span></span><br><span class="line"><span class="regexp">      &#123;theme =&gt;(</span></span><br><span class="line"><span class="regexp">        &lt;button style=&#123;&#123;backgroundColor:theme==='dark'?'black':'white'&#125;&#125;&gt;</span></span><br><span class="line"><span class="regexp">          test</span></span><br><span class="line"><span class="regexp">        &lt;/</span>button&gt;</span><br><span class="line">      )&#125;</span><br><span class="line">    &lt;<span class="regexp">/ThemeContext.Consumer&gt;</span></span><br><span class="line"><span class="regexp">  )</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure>

<p>Button 往上组件树寻找最近的 ThemeContext.Provider 提供的value值，如果没有对应的 Provider，使用 createContext 时的默认值</p>
<p>同时也说明了一个问题，数据是单向的自上而下，若 <code>ThemeContext.Provider</code> 定义在子组件， <code>ThemeContext.Consumer</code> 在父组件，子组件传的值传不到父组件中。这里就不举例了</p>
<h3 id="Class-组件使用-Consumer"><a href="#Class-组件使用-Consumer" class="headerlink" title="Class 组件使用 Consumer"></a>Class 组件使用 Consumer</h3><p>在 Class 组件中也可以用 Consumer 的形式</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Button</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;ThemeContext.Consumer&gt;</span><br><span class="line">        &#123;theme =&gt; (</span><br><span class="line">          &lt;button style=&#123;&#123; <span class="attr">backgroundColor</span>: theme === <span class="string">'dark'</span> ? <span class="string">'black'</span> : <span class="string">'white'</span> &#125;&#125;&gt;</span><br><span class="line">            test</span><br><span class="line">          &lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">        )&#125;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>ThemeContext.Consumer&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>但是在 render 里这么写看着有点乱，如果 theme的值能像 props 那样使用就好了，</p>
<h3 id="Class-组件使用-contextType"><a href="#Class-组件使用-contextType" class="headerlink" title="Class 组件使用 contextType"></a>Class 组件使用 contextType</h3><p>这使用就要利用 <code>Class.contextType</code> 来获取 <code>this.context</code> 值，举个例子</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Button</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> contextType = ThemeContext;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">let</span> theme = <span class="keyword">this</span>.context;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;button style=&#123;&#123; <span class="attr">backgroundColor</span>: theme === <span class="string">'dark'</span> ? <span class="string">'black'</span> : <span class="string">'white'</span> &#125;&#125;&gt;</span><br><span class="line">        test</span><br><span class="line">      &lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p><code>static contextType = ThemeContext;</code> 也可以写在外面: <code>Button.contextType = ThemeContext;</code></p>
<p>挂载在 class 上的 contextType 属性会被重赋值为一个由 React.createContext() 创建的 Context 对象。这能让你使用 this.context 来消费最近 Context 上的那个值。你可以在任何生命周期中访问到它，包括 render 函数中。</p>
</blockquote>
<p>参考：<a href="https://react.docschina.org/docs/context.html#classcontexttype" target="_blank" rel="noopener">Class.contextType</a></p>
<h3 id="消费多个-Context"><a href="#消费多个-Context" class="headerlink" title="消费多个 Context"></a>消费多个 Context</h3><p>可以看出来，如果是使用 contextType 的做法，只能消费一种 Context 且最近的那个 ，多 Context 还是得通过 Consumer 实现</p>
<p>举例：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> ThemeContext = React.createContext(<span class="string">'light'</span>);</span><br><span class="line"><span class="keyword">const</span> UserContext = React.createContext(&#123;</span><br><span class="line">  name: <span class="string">'Guest'</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;ThemeContext.Provider value=<span class="string">"dark"</span>&gt;</span><br><span class="line">        &lt;ThemeContext.Provider value=<span class="string">"blue"</span>&gt;</span><br><span class="line">          &lt;UserContext.Provider value=&#123;&#123; <span class="attr">name</span>: <span class="string">'gahing'</span> &#125;&#125;&gt;</span><br><span class="line">            &lt;Toolbar /&gt;</span><br><span class="line">          &lt;<span class="regexp">/UserContext.Provider&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>ThemeContext.Provider&gt;</span><br><span class="line">      &lt;<span class="regexp">/ThemeContext.Provider&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">function Toolbar() &#123;</span></span><br><span class="line"><span class="regexp">  return (</span></span><br><span class="line"><span class="regexp">    &lt;div&gt;</span></span><br><span class="line"><span class="regexp">      &lt;Button /</span>&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">class Button extends React.Component &#123;</span></span><br><span class="line"><span class="regexp">  static contextType = ThemeContext;</span></span><br><span class="line"><span class="regexp">  render() &#123;</span></span><br><span class="line"><span class="regexp">    let theme = this.context;</span></span><br><span class="line"><span class="regexp">    console.log(theme)</span></span><br><span class="line"><span class="regexp">    return (</span></span><br><span class="line"><span class="regexp">      &lt;button style=&#123;&#123; backgroundColor: theme === 'dark' ? 'black' : 'red' &#125;&#125;&gt;</span></span><br><span class="line"><span class="regexp">        &lt;UserContext.Consumer&gt;</span></span><br><span class="line"><span class="regexp">          &#123;(user) =&gt; (</span></span><br><span class="line"><span class="regexp">            &lt;span&gt;&#123;user.name&#125;&lt;/</span>span&gt;</span><br><span class="line">          )&#125;</span><br><span class="line">        &lt;<span class="regexp">/UserContext.Consumer&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>button&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以看到,theme 拿到的值为最近的 Provider 提供的 <code>blue</code> ,button里面的内容是 <code>gahing</code> 。</p>
<p>同时，要想使用 UserContext 值，需要使用 <code>Context.Consumer</code></p>
<h3 id="在嵌套组件中更新-Context"><a href="#在嵌套组件中更新-Context" class="headerlink" title="在嵌套组件中更新 Context"></a>在嵌套组件中更新 Context</h3><p>还是以最开始的 ThemeContext 为例，此时我们需要加个功能，点击 button 后 backgroundColor 会进行切换，</p>
<p>最简单的想法是就是 Provider 包组件的时候传一个 toggleTheme prop,然后一层层传上去，最后 button 点击的时候执行 toggleTheme 方法，</p>
<p>就又回到了最开始说 props 逐层传递的弊端，那应该怎么做呢？</p>
<p>把 toggleTheme 和 theme 都作为一个对象属性放在 React.createContext 中的默认值参数</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> ThemeContext = React.createContext(&#123;</span><br><span class="line">  theme: <span class="string">'dark'</span>,</span><br><span class="line">  toggleTheme: <span class="function"><span class="params">()</span> =&gt;</span> &#123;&#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>具体例子</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> ThemeContext = React.createContext(&#123;</span><br><span class="line">  theme: <span class="string">'dark'</span>,</span><br><span class="line">  toggleTheme: <span class="function"><span class="params">()</span> =&gt;</span> &#123;&#125;,</span><br><span class="line">&#125;);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="keyword">this</span>.toggleTheme = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.setState(<span class="function">(<span class="params">state</span>) =&gt;</span> (&#123;</span><br><span class="line">        theme:</span><br><span class="line">          state.theme === <span class="string">'dark'</span></span><br><span class="line">            ? <span class="string">'light'</span></span><br><span class="line">            : <span class="string">'dark'</span>,</span><br><span class="line">      &#125;));</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">this</span>.state = &#123;</span><br><span class="line">      theme: <span class="string">'light'</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;ThemeContext.Provider value=&#123;&#123;</span><br><span class="line">        theme:<span class="keyword">this</span>.state.theme,</span><br><span class="line">        toggleTheme: <span class="keyword">this</span>.toggleTheme,</span><br><span class="line">      &#125;&#125;&gt;</span><br><span class="line">        &lt;Toolbar /&gt;</span><br><span class="line">      &lt;<span class="regexp">/ThemeContext.Provider&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">function Toolbar() &#123;</span></span><br><span class="line"><span class="regexp">  return (</span></span><br><span class="line"><span class="regexp">    &lt;div&gt;</span></span><br><span class="line"><span class="regexp">      &lt;Button /</span>&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">class Button extends React.Component &#123;</span></span><br><span class="line"><span class="regexp">  static contextType = ThemeContext;</span></span><br><span class="line"><span class="regexp">  render() &#123;</span></span><br><span class="line"><span class="regexp">    let &#123;theme, toggleTheme&#125; = this.context;</span></span><br><span class="line"><span class="regexp">    return (</span></span><br><span class="line"><span class="regexp">      &lt;button style=&#123;&#123; backgroundColor: theme === 'dark' ? 'black' : 'white' &#125;&#125; onClick=&#123;toggleTheme&#125;&gt;</span></span><br><span class="line"><span class="regexp">        test</span></span><br><span class="line"><span class="regexp">      &lt;/</span>button&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>效果即默认白色按钮，点击后切换成黑色，再点又变成白色…</p>
<h2 id="Context-注意事项"><a href="#Context-注意事项" class="headerlink" title="Context 注意事项"></a>Context 注意事项</h2><blockquote>
<p>写例子的时候用的是 tsx,不了解 typescript 的可以直接把 any 之类的删去</p>
</blockquote>
<h3 id="1-当传递对象给-value-时，检测变化的方式会导致一些问题"><a href="#1-当传递对象给-value-时，检测变化的方式会导致一些问题" class="headerlink" title="1.当传递对象给 value 时，检测变化的方式会导致一些问题"></a>1.当传递对象给 value 时，检测变化的方式会导致一些问题</h3><p>上面的例子中， ThemeContext value的值是这样的</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;ThemeContext.Provider value=&#123;&#123;</span><br><span class="line">  theme:<span class="keyword">this</span>.state.theme,</span><br><span class="line">  toggleTheme: <span class="keyword">this</span>.toggleTheme,</span><br><span class="line">&#125;&#125;&gt;</span><br></pre></td></tr></table></figure>
<p>当 provider 的父组件（App）进行重渲染（执行render方法）时，由于 provider 的<code>value</code>属性总是一个新的对象，导致 consumers 组件会触发意外的渲染</p>
<p>把上面的例子稍微改造下就知道了</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> ThemeContext = React.createContext(&#123;</span><br><span class="line">  theme: <span class="string">'dark'</span>,</span><br><span class="line">  toggleTheme: <span class="function"><span class="params">()</span> =&gt;</span> &#123;&#125;,</span><br><span class="line">&#125;);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span>&lt;<span class="title">any</span>,<span class="title">any</span>&gt; </span>&#123;</span><br><span class="line">  private toggleTheme:any;</span><br><span class="line">  <span class="keyword">constructor</span>(props: any) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="keyword">this</span>.toggleTheme = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.setState(<span class="function">(<span class="params">state: any</span>) =&gt;</span> (&#123;</span><br><span class="line">        themeContext: &#123;</span><br><span class="line">          theme: state.themeContext.theme === <span class="string">'dark'</span></span><br><span class="line">            ? <span class="string">'light'</span></span><br><span class="line">            : <span class="string">'dark'</span>,</span><br><span class="line">          toggleTheme: state.themeContext.toggleTheme</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;));</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">this</span>.state = &#123;</span><br><span class="line">      themeContext: &#123;</span><br><span class="line">        theme: <span class="string">'light'</span>,</span><br><span class="line">        toggleTheme: <span class="keyword">this</span>.toggleTheme,</span><br><span class="line">      &#125;,</span><br><span class="line">      count: <span class="number">1</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  componentDidMount()&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">        count:<span class="number">2</span></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;, <span class="number">5000</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'render App'</span>)</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;ThemeContext.Provider value=&#123;&#123;</span><br><span class="line">        theme: <span class="keyword">this</span>.state.themeContext.theme,</span><br><span class="line">        toggleTheme: <span class="keyword">this</span>.toggleTheme,</span><br><span class="line">      &#125;&#125;&gt;</span><br><span class="line">        &lt;Toolbar /&gt;</span><br><span class="line">        &lt;span&gt;&#123;<span class="keyword">this</span>.state.count&#125;&lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>ThemeContext.Provider&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 使用memo,当props没有变动时不触发render</span></span><br><span class="line"><span class="keyword">const</span> Toolbar = React.memo(<span class="function"><span class="params">()</span>=&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'render Toolbar'</span>)</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;Button /&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;)</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 使用 PureComponent,本来应该是 props没有变动时不触发render，但本例中还是触发了render</span></span><br><span class="line"><span class="regexp">class Button extends React.PureComponent &#123;</span></span><br><span class="line"><span class="regexp">  static contextType = ThemeContext;</span></span><br><span class="line"><span class="regexp">  render() &#123;</span></span><br><span class="line"><span class="regexp">    let &#123;theme, toggleTheme&#125; = this.context;</span></span><br><span class="line"><span class="regexp">    console.log('render Button')</span></span><br><span class="line"><span class="regexp">    return (</span></span><br><span class="line"><span class="regexp">      &lt;button style=&#123;&#123; backgroundColor: theme === 'dark' ? 'black' : 'white' &#125;&#125; onClick=&#123;toggleTheme&#125;&gt;</span></span><br><span class="line"><span class="regexp">        test</span></span><br><span class="line"><span class="regexp">      &lt;/</span>button&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出结果为</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">render App</span><br><span class="line">render Toolbar</span><br><span class="line">render Button</span><br><span class="line"><span class="comment"># 自动过5s后输出</span></span><br><span class="line">render App</span><br><span class="line">render Button</span><br></pre></td></tr></table></figure>
<p>可以发现，App组件重渲染的时候，Button 这个 consumers 组件也发生了重渲染</p>
<p>Button 换成 Consumer 的实现</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Button</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">PureComponent</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'render Button'</span>)</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;ThemeContext.Consumer&gt;</span><br><span class="line">        &#123;(&#123; theme, toggleTheme &#125;) =&gt; &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">'render Consumer'</span>)</span><br><span class="line">          <span class="keyword">return</span> (</span><br><span class="line">            &lt;button style=&#123;&#123; <span class="attr">backgroundColor</span>: theme === <span class="string">'dark'</span> ? <span class="string">'black'</span> : <span class="string">'white'</span> &#125;&#125; onClick=&#123;toggleTheme&#125;&gt;</span><br><span class="line">              test</span><br><span class="line">            &lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">          )</span></span><br><span class="line"><span class="regexp">        &#125;&#125;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>ThemeContext.Consumer&gt;</span><br><span class="line"></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出结果为</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">render App</span><br><span class="line">render Toolbar</span><br><span class="line">render Button</span><br><span class="line">render Consumer</span><br><span class="line"><span class="comment"># 自动过5s后输出</span></span><br><span class="line">render App</span><br><span class="line">render Consumer</span><br></pre></td></tr></table></figure>
<p>此时没有输出 <code>render Button</code> 是因为 Button 并不是 Consumer 组件，只有底下的子组件(Consumer包住的部分) 才是，才会进行重渲染</p>
<p>改造 <code>value</code>,使得 consumers 组件不会重渲染</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// App render 修改为</span></span><br><span class="line">&lt;ThemeContext.Provider value=&#123;<span class="keyword">this</span>.state.themeContext&#125;&gt;</span><br></pre></td></tr></table></figure>
<p>输出结果为</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">render App</span><br><span class="line">render Toolbar</span><br><span class="line">render Button</span><br><span class="line">render Consumer</span><br><span class="line"><span class="comment"># 自动过5s后输出</span></span><br><span class="line">render App</span><br><span class="line"><span class="comment"># 点击按钮后输出</span></span><br><span class="line">render App</span><br><span class="line">render Consumer</span><br></pre></td></tr></table></figure>
<p>这就说明，App组件进行重渲染，只要 provider 提供的 value 值不变，其下的 consumers 组件就不会意外的重渲染</p>
<p><strong>除了将 value 状态提升到父节点的 state 里，也可以利用 <code>memoization</code> 来实现</strong></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> memoize <span class="keyword">from</span> <span class="string">"memoize-one"</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span>&lt;<span class="title">any</span>, <span class="title">any</span>&gt; </span>&#123;</span><br><span class="line">  private toggleTheme: any;</span><br><span class="line">  <span class="keyword">constructor</span>(props: any) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="keyword">this</span>.toggleTheme = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.setState(<span class="function">(<span class="params">state: any</span>) =&gt;</span> (&#123;</span><br><span class="line">        themeContext: &#123;</span><br><span class="line">          theme: state.themeContext.theme === <span class="string">'dark'</span></span><br><span class="line">            ? <span class="string">'light'</span></span><br><span class="line">            : <span class="string">'dark'</span>,</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;));</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">this</span>.state = &#123;</span><br><span class="line">      themeContext: &#123;</span><br><span class="line">        theme: <span class="string">'light'</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      count: <span class="number">1</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  componentDidMount() &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">        count: <span class="number">2</span></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;, <span class="number">5000</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  cacheThemeContext = memoize(<span class="function">(<span class="params">theme</span>)=&gt;</span>(&#123;</span><br><span class="line">    theme,</span><br><span class="line">    toggleTheme: <span class="keyword">this</span>.toggleTheme</span><br><span class="line">  &#125;))</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'render App'</span>)</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;ThemeContext.Provider value=&#123;<span class="keyword">this</span>.cacheThemeContext(<span class="keyword">this</span>.state.themeContext.theme)&#125;&gt;</span><br><span class="line">        &lt;Toolbar /&gt;</span><br><span class="line">      &lt;<span class="regexp">/ThemeContext.Provider&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="2-什么情况下不该用-Context"><a href="#2-什么情况下不该用-Context" class="headerlink" title="2.什么情况下不该用 Context"></a>2.什么情况下不该用 Context</h3><blockquote>
<p>Context 主要应用场景在于<strong>很多</strong>不同层级的组件需要访问同样一些的数据</p>
</blockquote>
<blockquote>
<p>如果你只是想避免层层传递一些属性，<a href="https://react.docschina.org/docs/composition-vs-inheritance.html" target="_blank" rel="noopener">组件组合（component composition）</a>有时候是一个比 context 更好的解决方案</p>
</blockquote>
<p>参考: <a href="https://react.docschina.org/docs/context.html#before-you-use-context" target="_blank" rel="noopener">使用 Context 之前的考虑</a></p>
<p>大致意思就是把最底下需要用到 props 的组件提到最上层来，将组件包成一个prop往下传递，</p>
<p>这里有个疑问，那不还是得每个组件写一次 prop 而且这些高层组件变得更复杂了。。</p>
<p>当然有的说法是减少了传递的props数量，对高层组件更容易把控等等。。</p>
<p>所以，使用 <code>组件组合</code> 还是 <code>Context</code> 个人觉得没有详细的界限</p>
<h2 id="换肤"><a href="#换肤" class="headerlink" title="换肤"></a>换肤</h2><p>需求很简单，换个主题色。</p>
<p><a href="https://github.com/whinc/blog/issues/4" target="_blank" rel="noopener">React组件库主题设计</a> 的做法，主题色定义在js中，和上文一样，通过 Context 去设置或切换主题色</p>
<p>同样的，主题色定义在 css 中，context 值保存 className，切换 className 实现主题切换</p>
<p>（示例就不提供了，可以看上面的参考文献）</p>
]]></content>
      <categories>
        <category>大前端</category>
      </categories>
      <tags>
        <tag>React</tag>
        <tag>换肤</tag>
      </tags>
  </entry>
  <entry>
    <title>npm 发包过程</title>
    <url>/2019/07/01/npm/npm%E5%8F%91%E5%8C%85%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h2 id="发布前准备"><a href="#发布前准备" class="headerlink" title="发布前准备"></a>发布前准备</h2><h3 id="npm-pack-查看哪些文件会被发送"><a href="#npm-pack-查看哪些文件会被发送" class="headerlink" title="npm pack 查看哪些文件会被发送"></a>npm pack 查看哪些文件会被发送</h3><p>执行该命令后会生成一个 xxx.tgz 文件</p>
<p>这些要被打包发布的文件是通过以下命令筛选到的</p>
<ol>
<li>package.json 的 files 配置（白名单模式）</li>
<li>.npmignore</li>
<li>.gitignore</li>
</ol>
<a id="more"></a>

<p>只要其中一个生效，就会忽略余下的配置，参考自<a href="https://zellwk.com/blog/ignoring-files-from-npm-package/" target="_blank" rel="noopener">How to ignore files from your npm package</a></p>
<p>所以，files 配置<code>[&quot;lib&quot;]</code> 而 .npmignore 配置 <code>*.snap</code> 并不会过滤掉 lib 目录下的 snap 文件</p>
<p>因为 第一项配置生效了 也就忽略第二项配置了</p>
<p>那需要怎么做呢？ files 配置<code>[&quot;lib&quot;]</code> 改为 <code>[&quot;lib&quot;,&quot;!*.snap&quot;]</code> 即可</p>
<h3 id="link"><a href="#link" class="headerlink" title="link"></a>link</h3><p>npm link 发包前，先用本地项目连接调试下</p>
<p>npm link xxx 用测试项目链接待发布 npm 包</p>
<h2 id="发布"><a href="#发布" class="headerlink" title="发布"></a>发布</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm publish 包名</span><br></pre></td></tr></table></figure>
<h2 id="撤销已发布的包"><a href="#撤销已发布的包" class="headerlink" title="撤销已发布的包"></a>撤销已发布的包</h2><p>某个版本的包发布之后，不能再次发布相关版本的包。</p>
<p>如果发现有问题，只能升级包</p>
<p>不过可以进行撤回已发布的包（不提倡）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm unpublish 包名</span><br></pre></td></tr></table></figure>
<p>并且有要求：</p>
<ol>
<li>24小时内上传的</li>
<li>即使撤回了，也不能再发这个版本的包</li>
</ol>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>npm</tag>
      </tags>
  </entry>
  <entry>
    <title>TypeScript学习笔记</title>
    <url>/2019/05/01/2019Q2/TypeScript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><a id="more"></a>

<h2 id="Partial"><a href="#Partial" class="headerlink" title="Partial"></a>Partial</h2><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Partial&lt;T&gt; = &#123;</span><br><span class="line">    [P <span class="keyword">in</span> keyof T]?: T[P];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>使得T的所有属性可选</p>
<h2 id="Omit"><a href="#Omit" class="headerlink" title="Omit"></a>Omit</h2><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Omit&lt;T, K <span class="keyword">extends</span> keyof <span class="built_in">any</span>&gt; = Pick&lt;T, Exclude&lt;keyof T, K&gt;&gt;;</span><br></pre></td></tr></table></figure>
<p>构造一个带有T所有属性并去除K属性的类型</p>
<p>常见用法1：继承并覆盖接口类型</p>
<blockquote>
<p>ts继承的话不能修改父类某个属性的类型，可以采取 </p>
</blockquote>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> base &#123;</span><br><span class="line">  a:<span class="built_in">number</span>,</span><br><span class="line">  b:<span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> child <span class="keyword">extends</span> Omit&lt;base,'a'&gt; &#123;</span><br><span class="line">  a:<span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// right</span></span><br><span class="line"><span class="keyword">const</span> t:child = &#123;</span><br><span class="line">  a:<span class="string">""</span>,</span><br><span class="line">  b:<span class="string">""</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>常见用法2：组合两个接口，同名属性以后者为准</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> t1 &#123;</span><br><span class="line">  a:<span class="built_in">number</span>,</span><br><span class="line">  b:<span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> t2 &#123;</span><br><span class="line">  a:<span class="built_in">string</span>,</span><br><span class="line">  c:<span class="built_in">boolean</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> t3 = Omit&lt;t1, keyof t2&gt; &amp; t2;</span><br><span class="line"><span class="comment">// right</span></span><br><span class="line"><span class="keyword">const</span> t:t3 = &#123;</span><br><span class="line">  a:<span class="string">""</span>,</span><br><span class="line">  b:<span class="string">""</span>,</span><br><span class="line">  c:<span class="literal">true</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>用法1，2经常组合起来使用</p>
<h2 id="T-T-gt-T"><a href="#T-T-gt-T" class="headerlink" title="T | T[] =&gt; T[]"></a>T | T[] =&gt; T[]</h2><p>有个对象，其类型为 Option 或 Option 数组</p>
<p>现在需要将其强制转为 Option 数组类型，即如果他是 Option 则放入数组中</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">interface Option &#123;</span><br><span class="line">  [key: string]: React.ReactNode;</span><br><span class="line">&#125;</span><br><span class="line">type A = Option | Option[]</span><br><span class="line"><span class="keyword">const</span> a:A = &#123;<span class="attr">name</span>:<span class="string">"111"</span>&#125;</span><br><span class="line"><span class="comment">// 实现 toArray 函数，使得 b 的类型为 Option[]</span></span><br><span class="line"><span class="keyword">const</span> b = toArray(a)</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">export function toArray&lt;T&gt;(value: T | T[] | undefined): T[] &#123;</span><br><span class="line">  <span class="keyword">let</span> ret = value;</span><br><span class="line">  <span class="keyword">if</span> (value === <span class="literal">undefined</span>) &#123;</span><br><span class="line">    ret = [];</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!<span class="built_in">Array</span>.isArray(value)) &#123;</span><br><span class="line">    ret = [value <span class="keyword">as</span> T];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ret <span class="keyword">as</span> T[];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 本例还需要带上类型，其他的简单接口就不用了</span></span><br><span class="line">toArray&lt;Option&gt;(a)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>大前端</category>
      </categories>
      <tags>
        <tag>TypeScript</tag>
      </tags>
  </entry>
  <entry>
    <title>npm version 命令</title>
    <url>/2019/05/01/npm/npm%20version%20%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>对于 NodeJS 项目中，我们经常需要变更 package.json 中的版本信息。</p>
<p>正常操作是，手动修改 package.json 文件的版本信息，然后再commit。</p>
<p>每次这样做，操作太繁琐。</p>
<p>实际上，我们可以使用 <code>npm version &lt;newversion&gt;</code> 命令</p>
<a id="more"></a>

<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm version [&lt;newversion&gt; | major | minor | patch | premajor | preminor | prepatch | prerelease | from-git]</span><br></pre></td></tr></table></figure>
<ul>
<li>major：主版本号</li>
<li>minor：次版本号</li>
<li>patch：补丁号</li>
<li>premajor：预备主版本</li>
<li>prepatch：预备次版本</li>
<li>prerelease：预发布版本</li>
</ul>
<p>比如当前版本为 0.1.1，使用<code>npm version patch</code>后，会执行以下操作：</p>
<ol>
<li>修改 package.json 的 version 为0.1.2</li>
<li>git commit -m “0.1.2”</li>
<li>npm tag -a v0.1.2</li>
</ol>
<p>也可以指定 commit的信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm version patch -m <span class="string">"Upgrade to v%s"</span>  <span class="comment"># %s 会自动替换成版本号</span></span><br><span class="line"><span class="comment"># 此时提交信息为： Upgrade to v0.1.2</span></span><br></pre></td></tr></table></figure>

<p>注：使用 <code>npm version &lt;newversion&gt;</code> 命令，需要当前工作区为clean状态，否则会执行失败。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.jianshu.com/p/9e64bdf1e8f9" target="_blank" rel="noopener">https://www.jianshu.com/p/9e64bdf1e8f9</a></p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>npm</tag>
      </tags>
  </entry>
  <entry>
    <title>Antd Table 自适应和省略号</title>
    <url>/2019/04/20/2019Q2/Antd%20Table%20%E8%87%AA%E9%80%82%E5%BA%94%E5%92%8C%E7%9C%81%E7%95%A5%E5%8F%B7/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>之前写了一篇文章<a href="https://www.hongweipeng.com/index.php/archives/1724/" target="_blank" rel="noopener">Antd Table组件 配置规范</a></p>
<p>其主要利用x滚动条，让数据完全展现。</p>
<p>但是有的需求是数据一屏展示不滚动，当屏幕足够小时，单元格内容用省略号代替，然后用Tooltip展示内容</p>
<a id="more"></a>


<p>参考：</p>
<p><a href="https://github.com/ant-design/ant-design/issues/5753#issuecomment-451896473" target="_blank" rel="noopener">https://github.com/ant-design/ant-design/issues/5753#issuecomment-451896473</a></p>
<p><a href="https://github.com/ant-design/ant-design/issues/5753#issuecomment-457319869" target="_blank" rel="noopener">https://github.com/ant-design/ant-design/issues/5753#issuecomment-457319869</a></p>
<h2 id="实现方案"><a href="#实现方案" class="headerlink" title="实现方案"></a>实现方案</h2><p>先创建一个工具组件 EllipsisTooltip</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> &#123; Tooltip &#125; <span class="keyword">from</span> <span class="string">'antd'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EllipsisTooltip</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  state = &#123;</span><br><span class="line">    visible: <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">  handleVisibleChange = <span class="function">(<span class="params">visible</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.container.clientWidth &lt; <span class="keyword">this</span>.container.scrollWidth) &#123;</span><br><span class="line">      <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">        visible: visible</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  render () &#123;</span><br><span class="line">    <span class="keyword">const</span> style = &#123;</span><br><span class="line">      textOverflow: <span class="string">'ellipsis'</span>,</span><br><span class="line">      overflow: <span class="string">'hidden'</span>,</span><br><span class="line">      ...this.props.style</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;Tooltip visible=&#123;<span class="keyword">this</span>.state.visible&#125; onVisibleChange=&#123;<span class="keyword">this</span>.handleVisibleChange&#125; title=&#123;<span class="keyword">this</span>.props.title&#125;&gt;</span><br><span class="line">        &lt;div ref=&#123;node =&gt; <span class="keyword">this</span>.container = node&#125; style=&#123;style&#125;&gt;&#123;<span class="keyword">this</span>.props.children&#125;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>Tooltip&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> EllipsisTooltip</span><br></pre></td></tr></table></figure>
<p>当内容不能完全展示时，用省略号代替，鼠标移过去利用tooltip显示完整内容</p>
<p>然后在columns这样使用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">title: <span class="string">'xxx'</span>,</span><br><span class="line">dataIndex: <span class="string">'name'</span>,</span><br><span class="line"><span class="comment">// 当表格不能完全展示时，该列大小至少是100px</span></span><br><span class="line">onCell: <span class="function"><span class="params">()</span> =&gt;</span> (&#123;</span><br><span class="line">  style: &#123;</span><br><span class="line">    whiteSpace: <span class="string">'nowrap'</span>,</span><br><span class="line">    maxWidth: <span class="number">100</span>,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;),</span><br><span class="line">render: <span class="function">(<span class="params">text</span>)=&gt;</span> (<span class="xml"><span class="tag">&lt;<span class="name">EllipsisTooltip</span> <span class="attr">title</span>=<span class="string">&#123;text&#125;</span>&gt;</span>&#123;text&#125;<span class="tag">&lt;/<span class="name">EllipsisTooltip</span>&gt;</span></span>)</span><br></pre></td></tr></table></figure>
<p>可以看到数据能够自适应并且当页面足够小时显示省略号，但是表头却是折行的实现，能否也实现省略号呢？</p>
<p><strong>表头实现省略号</strong></p>
<p>未完待续。。</p>
]]></content>
      <categories>
        <category>大前端</category>
      </categories>
      <tags>
        <tag>ant-design</tag>
      </tags>
  </entry>
  <entry>
    <title>【前端】仿 Android TextView 实现完整的文本溢出截断省略效果</title>
    <url>/2019/04/20/2019Q2/%E5%89%8D%E7%AB%AF-%E6%BA%A2%E5%87%BA%E6%96%87%E6%9C%AC%E6%98%BE%E7%A4%BA%E7%9C%81%E7%95%A5%E5%8F%B7/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在 Android 的文本组件中，有个内容过长显示省略号的属性 - ellipsize ，有以下选项</p>
<ul>
<li>end: 省略号在末尾</li>
<li>start: 省略号在开头</li>
<li>middle: 省略号在中间</li>
<li>marquee: 跑马灯效果</li>
</ul>
<p>并通过 singleline/lines 等属性进行行数的约束</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">"@+id/tv"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:ellipsize</span>=<span class="string">"end"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:singleline</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br></pre></td></tr></table></figure>

<a id="more"></a>

<p>这些功能在前端中又该如何实现呢？本文将逐一进行介绍，并封装成一个 TextView 组件</p>
<p><s> 项目已开源，详见 <a href="https://github.com/francecil/TextView" target="_blank" rel="noopener">TextView</a> </s></p>
<p>实现过程中还需要注意以下几点：</p>
<ol>
<li>双击文本进行复制的时候，默认应该是拿到全部文本，且复制的内容中不含省略号（同时该实现对搜索引擎良好，因为所有文本保留）</li>
<li>自适应，宽度足够的话不显示省略号</li>
<li>增加省略号在两边的功能，适用于某些场景（后面会提到）</li>
</ol>
<!--more-->

<h1 id="单行"><a href="#单行" class="headerlink" title="单行"></a>单行</h1><p>针对块级元素溢出内容，CSS 有一个 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/text-overflow" target="_blank" rel="noopener">text-overflow</a> 属性，用于处理溢出内容的处理</p>
<p>目前浏览器支持的，通过提案的值有：</p>
<ul>
<li><code>clip</code> : 直接截断(默认值)</li>
<li><code>ellipsis</code>: 采用省略号表示被截断的文本</li>
</ul>
<p>以上为 Basic support 功能</p>
<p>在未通过的草案中还将支持 <code>&lt;string&gt;</code> 类型的值， fade 以及 fade() 方法，并允许配置两个值用于控制前后溢出内容的行为。但是浏览器基本都未支持，仅火狐支持了 String value 和 双值。详见<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/text-overflow#%E6%B5%8F%E8%A7%88%E5%99%A8%E5%85%BC%E5%AE%B9%E6%80%A7" target="_blank" rel="noopener">浏览器兼容性</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[ clip | ellipsis | &lt;string&gt; ]&#123;1,2&#125;</span><br></pre></td></tr></table></figure>

<p>基于兼容性问题，本节的实现仅基于 Basic support</p>
<h2 id="省略号在末尾"><a href="#省略号在末尾" class="headerlink" title="省略号在末尾"></a>省略号在末尾</h2><p>最常见的需求</p>
<p>简单使用 <code>text-overflow:ellipsis</code> 即可</p>
<p>为了满足需求，还需要进行其他设置：</p>
<ol>
<li><code>white-space: nowrap;</code> // 不对文本进行换行</li>
<li><code>overflow: hidden;</code> // 隐藏溢出的文本</li>
</ol>
<p>由于是隐藏溢出，所以双击复制文本的时候，拿到的是全部的文本(不含省略号)</p>
<script async src="//jsrun.pro/GWfKp/embed/all/light/"></script>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"width: 100px;overflow: hidden;text-overflow: ellipsis;white-space: nowrap;"</span>&gt;</span></span><br><span class="line">  我和五个优秀员工，分别是xxxx</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<div style="width: 100px;overflow: hidden;text-overflow: ellipsis;white-space: nowrap;">
  我和五个优秀员工，分别是xxxx
</div>

<h2 id="省略号在开头"><a href="#省略号在开头" class="headerlink" title="省略号在开头"></a>省略号在开头</h2><p>先上例子，如果看懂的话可以直接跳过最后看结论</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">dir</span>=<span class="string">"rtl"</span>&gt;</span>0:这是测试文本-ss!<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">dir</span>=<span class="string">"rtl"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">dir</span>=<span class="string">"ltr"</span>&gt;</span>0:这是测试文本-ss!<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>对应在浏览器上的显示效果是什么呢？</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">!这是测试文本-ss:0</span><br><span class="line">0:这是测试文本-ss!</span><br></pre></td></tr></table></figure>
<p>（自右向左的书写方向）</p>
<p><img src="https://pic2.zhimg.com/80/3c77c63b18cafd0f1d0706f332b88574_hd.jpg" alt="黑人问号"></p>
<h3 id="背景知识"><a href="#背景知识" class="headerlink" title="背景知识"></a>背景知识</h3><p><a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/dir" target="_blank" rel="noopener">dir</a> HTML 属性用于决定文本总体的书写方向。默认值为 ltr 表示从左到右， rtl 表示从右到左(一般用于阿拉伯语)</p>
<blockquote>
<p>效果与 CSS 的 direction 属性相同</p>
</blockquote>
<p>在浏览器中，字符按 html 结构中的顺序被存放到内存中，其与页面显示的顺序是不一样的。页面显示的方向由 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/unicode-bidi" target="_blank" rel="noopener">unicode-bidi</a> 双向书写算法决定。注意：双击选中复制文本的时候，拿的是内存中的值，不受 unicode-bidi 影响</p>
<p>根据方向属性， Unicode 字符分为以下几种类型：</p>
<table>
<thead>
<tr>
<th>类型</th>
<th>方向</th>
<th>字符</th>
<th>效果</th>
</tr>
</thead>
<tbody><tr>
<td>强字符</td>
<td>LTR/RTL</td>
<td>英文、汉字、阿拉伯文字等</td>
<td>方向性确定,LTR 或 RTL,和上下文无关.且可能影响其前后字符的方向性</td>
</tr>
<tr>
<td>弱字符</td>
<td>LTR/RTL</td>
<td>数字、数字相关符号</td>
<td>方向性确定，但是不会影响前后字符的方向性</td>
</tr>
<tr>
<td>中性字符</td>
<td>Neutral</td>
<td>大部分标点符号和空格</td>
<td>方向性不确定，由上下文环境决定其方向</td>
</tr>
</tbody></table>
<p>上下文环境由强字符方向及全局书写方向决定，具体规则后面再写一篇文章 bidi 算法的讲解</p>
<p>一段文本中具有相同方向性的连续字符，称为方向串</p>
<p>因此 <code>&lt;div dir=&quot;rtl&quot;&gt;0:这是测试文本-ss!&lt;/div&gt;</code> 包含了如下的方向串</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0 -&gt;</span><br><span class="line">: &lt;- &#x2F;&#x2F; dir&#x3D;&quot;rtl&quot;</span><br><span class="line">这是测试文本 -&gt;</span><br><span class="line">- -&gt; &#x2F;&#x2F; 受强字符影响</span><br><span class="line">ss -&gt;</span><br><span class="line">! &lt;- &#x2F;&#x2F; dir&#x3D;&quot;rtl&quot;</span><br></pre></td></tr></table></figure>

<p><code>这是测试文本</code>、<code>-</code>、<code>ss</code> 为相同方向，继续合并为一个方向串</p>
<p>最后就剩</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0 -&gt;</span><br><span class="line">: &lt;- </span><br><span class="line">这是测试文本-ss -&gt;</span><br><span class="line">! &lt;-</span><br></pre></td></tr></table></figure>

<p>根据 rtl 的总体书写方向，最后在页面中显示为 <code>!这是测试文本-ss:0</code> ，通过光标选中也能够测试其内部方向</p>
<p>如果文本应用了内联元素，其文本中中性字符的方向不受外层影响</p>
<p>对于 <code>&lt;div dir=&quot;rtl&quot;&gt;&lt;span dir=&quot;ltr&quot;&gt;0:这是测试文本-ss!&lt;/span&gt;&lt;/div&gt;</code> 这个例子</p>
<p>span 中所有字符都是采用 ltr 的方向，对于 div 来说，其内容又是自右向左的。</p>
<p>于是就能实现自右向左水平溢出，内部字符顺序保持不变的效果</p>
<h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><p>根据以上特性，我们再应用上 <code>text-overflow:ellipsis</code> 试试</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">HTML</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line">    div &#123;</span><br><span class="line">      text-align: left;</span><br><span class="line">      width: 100px;</span><br><span class="line">      overflow: hidden;</span><br><span class="line">      text-overflow: ellipsis;</span><br><span class="line">      white-space: nowrap;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">dir</span>=<span class="string">"rtl"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">dir</span>=<span class="string">"ltr"</span>&gt;</span>0:这是测试文本-ss!<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>考虑到父元素宽度足够大，而文本较少时，文本会靠右显示，故在 div 上设置 <code>text-align: left;</code></p>
<p>实验中发现，如果 span 采用的是 <code>direction: ltr;</code> ，还需要加上 <code>unicode-bidi: embed;</code> 在边界加入一些控制字符。具体原理本文不再分析。</p>
<p>unicode-bidi 的相关资料可以查看以下链接</p>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/unicode-bidi" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/CSS/unicode-bidi</a></p>
<p><a href="https://www.w3.org/TR/CSS2/visuren.html#propdef-unicode-bidi" target="_blank" rel="noopener">https://www.w3.org/TR/CSS2/visuren.html#propdef-unicode-bidi</a></p>
<script async src="//jsrun.pro/KffKp/embed/all/light/"></script>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">dir</span>=<span class="string">"rtl"</span> <span class="attr">style</span>=<span class="string">"text-align: left;width: 100px;overflow: hidden;text-overflow: ellipsis;white-space: nowrap;"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">dir</span>=<span class="string">"ltr"</span>&gt;</span>0:这是测试文本-ss!<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<div dir="rtl" style="text-align: left;width: 100px;overflow: hidden;text-overflow: ellipsis;white-space: nowrap;">
  <span dir="ltr">0:这是测试文本-ss!</span>
</div>

<p>需要注意的是，在火狐中，得到的效果是呈现的字符相对父容器靠右</p>
<h2 id="省略号在两边"><a href="#省略号在两边" class="headerlink" title="省略号在两边"></a>省略号在两边</h2><p>一般使用的场景是，我们搜索到某个关键字，然后要居中展示该关键字，左右两边超过边界的字符都显示省略号</p>
<p>实现思路为切分为两个字符串，分为应用 <strong>省略在开头</strong> 和 <strong>省略在末尾</strong> 的解决方案</p>
<p>如何切分，又有以下两种思路</p>
<p>一般采用第二种</p>
<h3 id="前半字符串含关键字"><a href="#前半字符串含关键字" class="headerlink" title="前半字符串含关键字"></a>前半字符串含关键字</h3><p>切分为两个字符串，前半字符串包含关键字</p>
<p>最后用一个div 包住两个字符串，该 div 宽度为前串 div 宽度+16，并应用 <strong>省略在末尾</strong> 的解决方案</p>
<p>注意，为了自适应，前串的宽度定义为 <code>max-width: calc(100% - 14px);</code></p>
<p>当父 div 足够大时，前面的字串会先展示，然后再展示后面的字串</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">HTML</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.wrapper</span> &#123;</span></span><br><span class="line">      width: 200px;</span><br><span class="line">      text-align: left;</span><br><span class="line">      overflow: hidden;</span><br><span class="line">      text-overflow: ellipsis;</span><br><span class="line">      white-space: nowrap;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.left</span> &#123;</span></span><br><span class="line">      display: inline-block;</span><br><span class="line">      text-align: left;</span><br><span class="line">      overflow: hidden;</span><br><span class="line">      text-overflow: ellipsis;</span><br><span class="line">      white-space: nowrap;</span><br><span class="line">      max-width: calc(100% - 14px);</span><br><span class="line">      vertical-align: text-bottom;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrapper"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">dir</span>=<span class="string">"rtl"</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">dir</span>=<span class="string">"ltr"</span>&gt;</span>12-这是一段测试文本一段测试文本!@<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span>右侧文本。<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<div class="wrapper" style="width: 200px;text-align: left;overflow: hidden;text-overflow: ellipsis;white-space: nowrap;">
  <span dir="rtl" class="left" style="display:inline-block;text-align: left;overflow: hidden;text-overflow: ellipsis;white-space: nowrap;max-width: calc(100% - 14px);vertical-align: text-bottom;"><span dir="ltr">12-这是一段测试文本一段测试文本!@</span></span
  ><span class="right">右侧文本。</span>
</div>

<p>在控制台中修改 wrapper 的宽度，查看效果</p>
<p>注意以下几点：</p>
<ul>
<li>行内元素之间会带一个空格；代码里写成一行就不会</li>
<li>在火狐中复制，需要 <code>ctrl+a</code> 全选才行</li>
<li>由于 IFC 的原因，后面的内联块会垂直偏下，通过设置 <code>vertical-align</code> 解决</li>
</ul>
<h3 id="切分时两个字符串各占50"><a href="#切分时两个字符串各占50" class="headerlink" title="切分时两个字符串各占50%"></a>切分时两个字符串各占50%</h3><p>与上种思路的效果不同，当父元素变大的时候，左右两边的字符会一起不断展示</p>
<p>前串通过设置 <code>max-width:50%;</code> 样式，当父元素足够大的时候，文字始终居左</p>
<p>若要实现文字始终居中，则改为 <code>width:50%;</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">HTML</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.wrapper</span> &#123;</span></span><br><span class="line">      width: 200px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.left</span> &#123;</span></span><br><span class="line">      display: inline-block;</span><br><span class="line">      max-width: 50%;</span><br><span class="line">      overflow: hidden;</span><br><span class="line">      text-overflow: ellipsis;</span><br><span class="line">      white-space: nowrap;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.right</span> &#123;</span></span><br><span class="line">      width: 50%;</span><br><span class="line">      display: inline-block;</span><br><span class="line">      overflow: hidden;</span><br><span class="line">      text-overflow: ellipsis;</span><br><span class="line">      white-space: nowrap;</span><br><span class="line">      text-align: left;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrapper"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span> <span class="attr">dir</span>=<span class="string">"rtl"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">dir</span>=<span class="string">"ltr"</span>&gt;</span>12-这是一段测试文本!@1<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span>吱吱吱吱看的到我吗？<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<div class="wrapper" style="width: 200px;">
  <div class="left" dir="rtl" style="display:inline-block;
  max-width:50%;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;"><span dir="ltr">12-这是一段测试文本!@1</span></div
  ><span class="right" style="width:50%;
  display:inline-block;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
  text-align: left;">吱吱吱吱看的到我吗？</span>
</div>

<h2 id="省略号在中间（或某个位置）"><a href="#省略号在中间（或某个位置）" class="headerlink" title="省略号在中间（或某个位置）"></a>省略号在中间（或某个位置）</h2><p>依旧需要对字符串进行切分</p>
<p>前后分别应用 <strong>省略在末尾</strong> 和  <strong>省略在开头</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">HTML</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.wrapper</span> &#123;</span></span><br><span class="line">      width: 200px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.left</span> &#123;</span></span><br><span class="line">      max-width: 50%;</span><br><span class="line">      display: inline-block;</span><br><span class="line">      overflow: hidden;</span><br><span class="line">      text-overflow: ellipsis;</span><br><span class="line">      white-space: nowrap;</span><br><span class="line">      text-align: right;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.right</span> &#123;</span></span><br><span class="line">      display: inline-block;</span><br><span class="line">      max-width: 50%;</span><br><span class="line">      overflow: hidden;</span><br><span class="line">      text-overflow: ellipsis;</span><br><span class="line">      white-space: nowrap;</span><br><span class="line">      text-align: left;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrapper"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span>12-这是一段测试文本!@1<span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"right"</span> <span class="attr">dir</span>=<span class="string">"rtl"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">dir</span>=<span class="string">"ltr"</span>&gt;</span>吱吱吱吱看的到我吗？<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在 chrome 上显示良好，但是火狐，IE 两个省略号中会存在一个间隔，并且当 wrapper 宽度足够的时候，省略号将变为一个，样式上不统一</p>
<div class="wrapper" style="width: 200px;">
  <div class="left" style="max-width:50%;
  display:inline-block;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
  text-align: right;">12-这是一段测试文本!@1</div
  ><span class="right" dir="rtl" style="display:inline-block;
  max-width:50%;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
  text-align: left;"><span dir="ltr">吱吱吱吱看的到我吗？</span><span>
</div>

<p>目前暂未找到其他解决方案</p>
<h2 id="跑马灯效果"><a href="#跑马灯效果" class="headerlink" title="跑马灯效果"></a>跑马灯效果</h2><p>采用 <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/marquee" target="_blank" rel="noopener">marquee</a> HTML 元素实现。该元素兼容性高，并提供多种属性配置。</p>
<p>loop 控制滚动次数,默认值 -1 表示连续滚动</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">marquee</span> <span class="attr">width</span>=<span class="string">"100"</span> <span class="attr">loop</span>=<span class="string">"-1"</span>&gt;</span>This text will scroll from right to left<span class="tag">&lt;/<span class="name">marquee</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">marquee</span> <span class="attr">width</span>=<span class="string">"100"</span> <span class="attr">loop</span>=<span class="string">"3"</span>&gt;</span>This text will scroll from right to left<span class="tag">&lt;/<span class="name">marquee</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><marquee width="100" loop="-1">This text will scroll from right to left</marquee><br><marquee width="100" loop="3">This text will scroll from right to left</marquee></p>
<p>direction 控制滚动方向，可选值有 left【默认】, right, up and down</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">marquee</span> <span class="attr">width</span>=<span class="string">"100"</span> <span class="attr">direction</span>=<span class="string">"left"</span>&gt;</span>This text will scroll from right to left<span class="tag">&lt;/<span class="name">marquee</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">marquee</span> <span class="attr">width</span>=<span class="string">"100"</span> <span class="attr">direction</span>=<span class="string">"up"</span>&gt;</span>This text will scroll from right to left<span class="tag">&lt;/<span class="name">marquee</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><marquee width="100" direction="left">This text will scroll from right to left</marquee><br><marquee width="100" direction="up">This text will scroll from right to left</marquee></p>
<p>利用 <code>scrollamount/scrolldelay/truespeed</code> 控制滚动速度</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">marquee</span> <span class="attr">width</span>=<span class="string">"100"</span> <span class="attr">scrollamount</span>=<span class="string">"6"</span> <span class="attr">scrolldelay</span>=<span class="string">"30"</span> <span class="attr">truespeed</span>&gt;</span>This text will scroll from right to left<span class="tag">&lt;/<span class="name">marquee</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">marquee</span> <span class="attr">width</span>=<span class="string">"100"</span> <span class="attr">scrollamount</span>=<span class="string">"10"</span> <span class="attr">scrolldelay</span>=<span class="string">"30"</span> <span class="attr">truespeed</span>&gt;</span>This text will scroll from right to left<span class="tag">&lt;/<span class="name">marquee</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">marquee</span> <span class="attr">width</span>=<span class="string">"100"</span> <span class="attr">scrollamount</span>=<span class="string">"6"</span> <span class="attr">scrolldelay</span>=<span class="string">"80"</span>&gt;</span>This text will scroll from right to left<span class="tag">&lt;/<span class="name">marquee</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><marquee width="100" scrollamount="6" scrolldelay="30" truespeed>This text will scroll from right to left</marquee><br><marquee width="100" scrollamount="10" scrolldelay="30" truespeed>This text will scroll from right to left</marquee><br><marquee width="100" scrollamount="6" scrolldelay="80">This text will scroll from right to left</marquee></p>
<p>根据需求进行配置</p>
<h1 id="多行"><a href="#多行" class="headerlink" title="多行"></a>多行</h1><p>网上也有很多解决方案，详见 <a href="https://juejin.im/post/5dc15b35f265da4d432a3d10" target="_blank" rel="noopener">可能是最全的 “文本溢出截断省略” 方案合集</a>，本文不做原理讲解</p>
<p>以及一个较为流行的开源库 <a href="https://github.com/josephschmitt/Clamp.js" target="_blank" rel="noopener">Clamp.js</a></p>
<p>各有优缺点，没有完美方案</p>
<p>这里以<strong>伪元素 + 定位实现多行省略</strong>的解决方案实现多行溢出省略的效果</p>
<p>通过 <code>line-height</code> 和 <code>max-height</code> 控制行数。至于行高应该设置多少，这个应该对外提供一个属性让用户进行配置。总之，<code>max-height = N * line-height (em)</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">HTML</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.multi-line-ellipsis</span> &#123;</span></span><br><span class="line">      width: 200px;</span><br><span class="line">      max-height: 2em;</span><br><span class="line">      line-height: 1;</span><br><span class="line">      overflow: hidden;</span><br><span class="line">      position: relative;</span><br><span class="line">      text-align: justify;</span><br><span class="line">      margin-right: -1em;</span><br><span class="line">      padding-right: 1em;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.multi-line-ellipsis</span><span class="selector-pseudo">::before</span> &#123;</span></span><br><span class="line">      content: '...';</span><br><span class="line">      position: absolute;</span><br><span class="line">      right: 0;</span><br><span class="line">      bottom: 0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.multi-line-ellipsis</span><span class="selector-pseudo">::after</span> &#123;</span></span><br><span class="line">      content: '';</span><br><span class="line">      position: absolute;</span><br><span class="line">      right: 0;</span><br><span class="line">      width: 1em;</span><br><span class="line">      height: 1em;</span><br><span class="line"><span class="css">      <span class="selector-tag">margin-top</span>: 0<span class="selector-class">.2em</span>;</span></span><br><span class="line">      background: white;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.block-with-text</span><span class="selector-pseudo">:before</span> &#123;</span></span><br><span class="line">      content: '...';</span><br><span class="line">      position: absolute;</span><br><span class="line">      right: 0;</span><br><span class="line">      bottom: 0;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"multi-line-ellipsis"</span>&gt;</span>这是一串短字符串<span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"multi-line-ellipsis"</span>&gt;</span>这是一串长长长长长长长长长长长字符串<span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"multi-line-ellipsis"</span>&gt;</span>这是一串长长长长长长长长长长长字符串，后面的内容应该会被截掉了<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>效果如下</p>
<p><img src="https://upload-images.jianshu.io/upload_images/9277731-74eb31c31be6d059.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="lines"></p>
<h1 id="文本溢出模式"><a href="#文本溢出模式" class="headerlink" title="文本溢出模式"></a>文本溢出模式</h1><p>还剩下一个问题，如何判断当前文本处于文本溢出模式。</p>
<p>用于外部监听，当处于文本溢出模式，鼠标指向该组件时应该出现一个完整文本的 Tooltip 组件</p>
<p>那如何判断呢？</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// target 为文本元素</span></span><br><span class="line"><span class="keyword">let</span> containerWidth = target.getBoundingClientRect().width  <span class="comment">//当前容器的宽度</span></span><br><span class="line"><span class="keyword">let</span> textWidth = target.scrollWidth; <span class="comment">//当前文字（包括省略部分）的宽度</span></span><br><span class="line"><span class="keyword">let</span> isEllipsis = textWidth &gt; containerWidth</span><br></pre></td></tr></table></figure>

<p>这里我们可以用 title 属性来模拟 Tooltip</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(isEllipsis)&#123;</span><br><span class="line">  target.setAttribute(<span class="string">"title"</span>,<span class="string">"完整文本"</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  el.removeAttribute(<span class="string">"title"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>基本上我们已经能够在前端模拟 Android TextView 的溢出文本效果</p>
<p>目前提出的解决方案能够兼容大多数主流浏览器，若存在不兼容的情况，欢迎提出</p>
<h1 id="展望"><a href="#展望" class="headerlink" title="展望"></a>展望</h1><p>若本身包含阿拉伯字符，以上操作是否还有效，还未验证</p>
<p>后续将采用 React Hooks 技术对组件进行封装，并进行开源</p>
<h1 id="拓展阅读"><a href="#拓展阅读" class="headerlink" title="拓展阅读"></a>拓展阅读</h1><ol>
<li><a href="https://blog.csdn.net/qq_25243451/article/details/89500218" target="_blank" rel="noopener">CSS深度学习 - 文本方向 direction 和 dir</a></li>
<li><a href="https://www.cnblogs.com/dojo-lzz/p/4289423.html" target="_blank" rel="noopener">bidi(双向文字)与RTL布局总结</a></li>
<li><a href="https://juejin.im/entry/5bbc7b18f265da0aeb712117" target="_blank" rel="noopener">Unicode 控制字符及其有关的双向算法</a></li>
<li><a href="https://www.jianshu.com/p/07bcb00aa0ee" target="_blank" rel="noopener">多行文本省略近完美方案</a></li>
</ol>
]]></content>
      <categories>
        <category>大前端</category>
      </categories>
      <tags>
        <tag>HTML</tag>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>vue-eslint-vscode 通用配置</title>
    <url>/2019/01/20/2019Q1/vue-eslint-vscode%E9%80%9A%E7%94%A8%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在vscode的vue项目中，关于代码检查和格式化，遇到各种各样的问题，比如：</p>
<ol>
<li>不清楚安装的拓展的功能，导致安装了重复功能的拓展</li>
<li>右键格式化文档的时候，不是按eslint的规则来格式化，导致需要我再次手动调整</li>
<li>保存时不能自动修复代码</li>
</ol>
<p>以下通过自己的实践，进行了相应配置，目前可以实现：</p>
<ul>
<li>仅安装2个推荐的拓展</li>
<li>右键格式化文档按照eslint规则，不会产生错误</li>
<li>保存时自动修复代码</li>
</ul>
<a id="more"></a>

<h2 id="vscode-拓展安装"><a href="#vscode-拓展安装" class="headerlink" title="vscode 拓展安装"></a>vscode 拓展安装</h2><h3 id="eslint-拓展"><a href="#eslint-拓展" class="headerlink" title="eslint 拓展"></a>eslint 拓展</h3><p>该拓展本身不带任何插件，当前项目要使用该拓展，需要安装相应的npm包（全局安装或当前项目安装）</p>
<p>对于 vue 项目，通常在 vscode 中做如下设置:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//保存时自动修复代码</span></span><br><span class="line"><span class="string">"eslint.autoFixOnSave"</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="string">"eslint.options"</span>: &#123;</span><br><span class="line">    <span class="comment">// 应检查代码的文件扩展名数组</span></span><br><span class="line">    <span class="string">"extensions"</span>: [</span><br><span class="line">        <span class="string">".js"</span>,</span><br><span class="line">        <span class="string">".vue"</span></span><br><span class="line">    ]</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">// 配置要验证的语言标识和自动修复选项，比前面两个配置的结合更为细粒度话。可以仅配置下面代码</span></span><br><span class="line"><span class="string">"eslint.validate"</span>: [</span><br><span class="line">    <span class="string">"javascript"</span>,</span><br><span class="line">    <span class="string">"javascriptreact"</span>,</span><br><span class="line">    <span class="string">"html"</span>,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">"language"</span>: <span class="string">"vue"</span>,</span><br><span class="line">        <span class="string">"autoFix"</span>: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">],</span><br></pre></td></tr></table></figure>




<h3 id="vetur-拓展"><a href="#vetur-拓展" class="headerlink" title="vetur 拓展"></a>vetur 拓展</h3><p>vue 工具，主要有以下功能</p>
<ul>
<li>Syntax-highlighting 语法高亮</li>
<li>Snippet 快速定义脚手架代码片段，如：写script后会跳出<code>export default{xxx}</code>,style 后面会带lang、scope等</li>
<li>Emmet 仿css选择器快速生成 html/css 代码</li>
<li>Linting / Error Checking vetur的 Linting 仅用于快速启动，对于规则配置需要用<code>eslint.validate</code><blockquote>
<p>Linting 不可配置，且自带了一个固定版本的<code>eslint-plugin-vue</code>，一般我们不用。而是采用以下配置：</p>
</blockquote>
<ol>
<li>vscode中设置<code>&quot;vetur.validation.template&quot;: false</code></li>
<li>安装ESlint拓展，错误处理将走eslint</li>
<li>项目中安装<code>npm i -D eslint eslint-plugin-vue</code>插件</li>
<li>在<code>.eslintrc.*</code>设置eslint规则,后面会介绍eslintrc相关配置</li>
</ol>
</li>
<li>Formatting 即右键的<code>Format Document</code>功能，不支持格式化选中内容。<blockquote>
<p>可以在设置中配置<code>vetur.format.defaultFormatter</code> <br>如：默认<code>&quot;vetur.format.defaultFormatter.html&quot;: &quot;prettyhtml&quot;</code>,也可将值设为 none 就不会格式化该类文件了 <br>这个默认设置非常难用，会将vue文件变得很乱，比如默认加分号，属性按列展开；我们在设置中进行如下配置即可实现格式化vue文件时按eslint的规则来</p>
</blockquote>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">"vetur.format.defaultFormatterOptions": &#123;</span><br><span class="line">      "js-beautify-html": &#123;</span><br><span class="line">          <span class="comment">// 属性列太长才折行,默认的force-expand-multiline不美观</span></span><br><span class="line">          "wrap_attributes": "auto"</span><br><span class="line">      &#125;,</span><br><span class="line">      "prettier": &#123;</span><br><span class="line">        <span class="comment">//去掉代码结尾分号</span></span><br><span class="line">        "semi": false,</span><br><span class="line">        <span class="comment">//使用eslint的代码格式进行校验</span></span><br><span class="line">        "eslintIntegration": true,</span><br><span class="line">        <span class="comment">//采用单引号</span></span><br><span class="line">        "singleQuote": true</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//格式化.vue中html，js</span></span><br><span class="line">  "vetur.format.defaultFormatter.html": "js-beautify-html",</span><br><span class="line">  "vetur.format.defaultFormatter.js": "vscode-typescript",</span><br><span class="line">  <span class="comment">//让函数(名)和后面的括号之间加个空格</span></span><br><span class="line">  "javascript.format.insertSpaceBeforeFunctionParenthesis": true,</span><br></pre></td></tr></table></figure></li>
<li>IntelliSense 智能感知vue文件结构,比如<code>&lt;template&gt;</code>中提供了html标签和属性的感知，当编辑<code>&lt;template&gt;</code>时如同编辑html文件一样，让其他插件可以如html支持一样进行支持<code>&lt;template&gt;</code></li>
<li>Debugging 调试功能</li>
<li>Framework Support for Element UI and Onsen UI UI框架支持</li>
</ul>
<p>如果想使用<code>Format Selection</code>功能，需要再下载<code>prettier-Code formatter</code>拓展。</p>
<p>但只要配置合理，全文格式化未尝不可</p>
<h2 id="eslintrc-配置"><a href="#eslintrc-配置" class="headerlink" title="eslintrc 配置"></a>eslintrc 配置</h2><p>安装完上文两个拓展和进行相应配置后，还需要 对<code>.eslintrc.js</code> 进行配置。文件不存在或配置不当，编码时不会进行错误提示</p>
<p>若使用<code>@vue/cli</code> 初始化项目并选择支持eslint，则默认生成时就存在了。</p>
<p>否则需要手动生成：</p>
<p>详见<a href="https://eslint.vuejs.org/user-guide/#installation" target="_blank" rel="noopener">Installation</a></p>
<p>###　.eslintrc.js</p>
<p>早期的一个配置</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// http://eslint.org/docs/user-guide/configuring</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  root: <span class="literal">true</span>,</span><br><span class="line">  parser: <span class="string">'babel-eslint'</span>,</span><br><span class="line">  parserOptions: &#123;</span><br><span class="line">    sourceType: <span class="string">'module'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  env: &#123;</span><br><span class="line">    browser: <span class="literal">true</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// https://github.com/feross/standard/blob/master/RULES.md#javascript-standard-style</span></span><br><span class="line">  extends: <span class="string">'standard'</span>,</span><br><span class="line">  <span class="comment">// required to lint *.vue files</span></span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="string">'html'</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="comment">// add your custom rules here</span></span><br><span class="line">  <span class="string">'rules'</span>: &#123;</span><br><span class="line">    <span class="comment">// allow paren-less arrow functions</span></span><br><span class="line">    <span class="string">'arrow-parens'</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="comment">// allow async-await</span></span><br><span class="line">    <span class="string">'generator-star-spacing'</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="comment">// allow debugger during development</span></span><br><span class="line">    <span class="string">'no-debugger'</span>: process.env.NODE_ENV === <span class="string">'production'</span> ? <span class="number">2</span> : <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>当前配置（主流）</strong>：extends配置vue校验规则，parser移至parserOptions下，plugins中配置为vue</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// http://eslint.org/docs/user-guide/configuring</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  root: <span class="literal">true</span>,</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// parser: 'babel-eslint',</span></span><br><span class="line">  parserOptions: &#123;</span><br><span class="line">    sourceType: <span class="string">'module'</span>,</span><br><span class="line">    parser: <span class="string">'babel-eslint'</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  env: &#123;</span><br><span class="line">    browser: <span class="literal">true</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// https://github.com/feross/standard/blob/master/RULES.md#javascript-standard-style</span></span><br><span class="line">  extends: [</span><br><span class="line">    <span class="comment">// 按从上往下的规则匹配</span></span><br><span class="line">    <span class="comment">//推荐校验</span></span><br><span class="line">    <span class="string">"plugin:vue/recommended"</span>,</span><br><span class="line">    <span class="comment">//基本校验</span></span><br><span class="line">    <span class="comment">//"plugin:vue/essential",</span></span><br><span class="line">    <span class="string">"standard"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="comment">// required to lint *.vue files</span></span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="string">'vue'</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="comment">// add your custom rules here</span></span><br><span class="line">  <span class="string">'rules'</span>: &#123;</span><br><span class="line">    <span class="comment">// allow paren-less arrow functions</span></span><br><span class="line">    <span class="string">'arrow-parens'</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="comment">// allow async-await</span></span><br><span class="line">    <span class="string">'generator-star-spacing'</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="comment">// allow debugger during development</span></span><br><span class="line">    <span class="string">'no-debugger'</span>: process.env.NODE_ENV === <span class="string">'production'</span> ? <span class="number">2</span> : <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>plugin:vue/recommended</code> 下 wrap_attributes 的规则是force-expand-multiline</p>
<p>即按上述配置，格式化文档时，属性会变成一列（auto），但保存时的eslint 的autoFix会按 force-expand-multiline 多行展开。</p>
<p>觉得麻烦的，可以配置为<code>plugin:vue/essential</code> </p>
<h2 id="配置分享"><a href="#配置分享" class="headerlink" title="配置分享"></a>配置分享</h2><p><strong>settings.json</strong></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 将设置放入此文件中以覆盖默认设置</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"editor.fontSize"</span>: <span class="number">12</span>,</span><br><span class="line">    <span class="attr">"editor.tabSize"</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="attr">"files.associations"</span>: &#123;</span><br><span class="line">        <span class="attr">"*.vue"</span>: <span class="string">"vue"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"eslint.autoFixOnSave"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"eslint.options"</span>: &#123;</span><br><span class="line">        <span class="attr">"extensions"</span>: [</span><br><span class="line">            <span class="string">".js"</span>,</span><br><span class="line">            <span class="string">".vue"</span></span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"eslint.validate"</span>: [</span><br><span class="line">        <span class="string">"javascript"</span>,</span><br><span class="line">        <span class="string">"javascriptreact"</span>,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"language"</span>: <span class="string">"html"</span>,</span><br><span class="line">            <span class="attr">"autoFix"</span>: <span class="literal">true</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"language"</span>: <span class="string">"vue"</span>,</span><br><span class="line">            <span class="attr">"autoFix"</span>: <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"vetur.validation.template"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"vetur.format.defaultFormatterOptions"</span>: &#123;</span><br><span class="line">        <span class="attr">"js-beautify-html"</span>: &#123;</span><br><span class="line">            <span class="comment">// 属性列太长才折行,默认的force-expand-multiline不美观</span></span><br><span class="line">            <span class="attr">"wrap_attributes"</span>: <span class="string">"auto"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"prettier"</span>: &#123;</span><br><span class="line">          <span class="comment">//去掉代码结尾分号</span></span><br><span class="line">          <span class="attr">"semi"</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="comment">//使用eslint的代码格式进行校验</span></span><br><span class="line">          <span class="attr">"eslintIntegration"</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="comment">//采用单引号</span></span><br><span class="line">          <span class="attr">"singleQuote"</span>: <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//格式化.vue中html，js</span></span><br><span class="line">    <span class="attr">"vetur.format.defaultFormatter.html"</span>: <span class="string">"js-beautify-html"</span>,</span><br><span class="line">    <span class="attr">"vetur.format.defaultFormatter.js"</span>: <span class="string">"vscode-typescript"</span>,</span><br><span class="line">    <span class="comment">//让函数(名)和后面的括号之间加个空格</span></span><br><span class="line">    <span class="attr">"javascript.format.insertSpaceBeforeFunctionParenthesis"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"search.exclude"</span>: &#123;</span><br><span class="line">        <span class="attr">"**/Node_modules"</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">"**/bower_components"</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">"**/dist"</span>: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"git.confirmSync"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"window.zoomLevel"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"editor.renderWhitespace"</span>: <span class="string">"boundary"</span>,</span><br><span class="line">    <span class="attr">"editor.cursorBlinking"</span>: <span class="string">"smooth"</span>,</span><br><span class="line">    <span class="attr">"editor.minimap.enabled"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"editor.minimap.renderCharacters"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"editor.fontFamily"</span>: <span class="string">"'Droid Sans Mono', 'Courier New', monospace, 'Droid Sans Fallback'"</span>,</span><br><span class="line">    <span class="attr">"window.title"</span>: <span class="string">"$&#123;dirty&#125;$&#123;activeEditorMedium&#125;$&#123;separator&#125;$&#123;rootName&#125;"</span>,</span><br><span class="line">    <span class="attr">"editor.codeLens"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"editor.snippetSuggestions"</span>: <span class="string">"top"</span>,</span><br><span class="line">    <span class="attr">"workbench.colorTheme"</span>: <span class="string">"Solarized Light"</span>,</span><br><span class="line">    <span class="attr">"extensions.ignoreRecommendations"</span>: <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>##　参考 ： </p>
<ol>
<li>eslint-plugin-vue： <a href="https://eslint.vuejs.org/user-guide/" target="_blank" rel="noopener">https://eslint.vuejs.org/user-guide/</a></li>
</ol>
]]></content>
      <categories>
        <category>大前端</category>
      </categories>
      <tags>
        <tag>VSCode</tag>
      </tags>
  </entry>
  <entry>
    <title>如何减少预检请求OPTIONS</title>
    <url>/2018/12/16/2018Q4/%E5%A6%82%E4%BD%95%E5%87%8F%E5%B0%91%E9%A2%84%E6%A3%80%E8%AF%B7%E6%B1%82OPTIONS/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>先说结论，只能将复杂请求改造为简单请求</p>
<p>常见的做法是：</p>
<ol>
<li>token放原生的请求头：Authorization </li>
<li>Content-Type 改为text/plain 然后后端统一处理</li>
</ol>
<a id="more"></a>

<p>若无法修改请求，那么可以设置 <code>Access-Control-Max-Age</code> 响应</p>
<p>每个url的OPTIONS都有一个生命周期，在该时间内不会再次发生。chrome默认是5s</p>
<p>故我们可以通过设置<code>Access-Control-Max-Age</code>来提高周期上限。不过每个浏览器也是有上限的，比如chrome上限是10min。</p>
<p>故此，在10min内 对于 <strong>同一请求（完整url相同,参数不同也视为不同url）</strong> 不会再发第二次OPTIONS。</p>
<p>注意：若设置了 <code>disable-cache</code> 那么每次复杂请求都会发OPTIONS</p>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>写这篇博客的背景是原来有个项目的前后端分离做的不对</p>
<p>前端资源(包括index.html)单独一台服务器，然后访问其他服务器的接口</p>
<p>实际这种应该在前端服务器这边做个转发，避免跨域。或者 index.html 放在后端服务器，其他资源放前端服务器，没有跨域问题</p>
]]></content>
      <categories>
        <category>大前端</category>
      </categories>
      <tags>
        <tag>HTTP</tag>
        <tag>跨域</tag>
      </tags>
  </entry>
  <entry>
    <title>Angular1.x学习</title>
    <url>/2018/11/10/2018Q4/Angular1.x%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>ng-app 指令告诉 AngularJS，<code>&lt;div&gt;</code> 元素是 AngularJS 应用程序 的”所有者”。</p>
<a id="more"></a>

<p>ng-model 指令把输入域的值绑定到应用程序变量 name。</p>
<p>ng-bind 指令把应用程序变量 name 绑定到某个段落的 innerHTML。</p>
<p>ng-init 指令初始化 AngularJS 应用程序变量。 <strong>一般不用。使用控制器去初始化</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-app</span>=<span class="string">""</span> <span class="attr">ng-init</span>=<span class="string">"firstName='John'"</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>姓名为 <span class="tag">&lt;<span class="name">span</span> <span class="attr">ng-bind</span>=<span class="string">"firstName"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>AngularJS 模块定义应用:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> app = angular.module(<span class="string">'myApp'</span>, []);</span><br></pre></td></tr></table></figure>
<p>AngularJS 控制器控制应用:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.controller(<span class="string">'myCtrl'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">$scope</span>) </span>&#123;</span><br><span class="line">    $scope.firstName= <span class="string">"John"</span>;</span><br><span class="line">    $scope.lastName= <span class="string">"Doe"</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h2><p>除了上面讲的外，常见的还有：</p>
<ol>
<li>ng-show 控制元素的disable值达到显示与隐藏</li>
<li>ng-repeat 指令会重复一个 HTML 元素：<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">ng-repeat</span>=<span class="string">"x in names"</span>&gt;</span></span><br><span class="line">  &#123;&#123; x &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="自定义指令-directive"><a href="#自定义指令-directive" class="headerlink" title="自定义指令 directive"></a>自定义指令 directive</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">ng-app</span>=<span class="string">"myApp"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">runoob-directive</span>&gt;</span><span class="tag">&lt;/<span class="name">runoob-directive</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> app = angular.module(<span class="string">"myApp"</span>, []);</span></span><br><span class="line"><span class="actionscript">app.directive(<span class="string">"runoobDirective"</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">        template : "<span class="tag">&lt;<span class="name">h1</span>&gt;</span>自定义指令!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>"</span></span></span><br><span class="line">    &#125;;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>使用驼峰法来命名一个指令， runoobDirective, 但在使用它时需要以 - 分割, runoob-directive:</p>
</blockquote>
<p>还可以用以下方式去调用该指令</p>
<ol>
<li>属性<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">runoob-directive</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>类名<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"runoob-directive"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> app = angular.module(<span class="string">"myApp"</span>, []);</span></span><br><span class="line"><span class="actionscript">app.directive(<span class="string">"runoobDirective"</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">        restrict : <span class="string">"C"</span>,</span></span><br><span class="line"><span class="handlebars"><span class="xml">        template : "<span class="tag">&lt;<span class="name">h1</span>&gt;</span>自定义指令!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>"</span></span></span><br><span class="line">    &#125;;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">strong</span>&gt;</span>注意：<span class="tag">&lt;/<span class="name">strong</span>&gt;</span> 你必须设置 <span class="tag">&lt;<span class="name">b</span>&gt;</span>restrict<span class="tag">&lt;/<span class="name">b</span>&gt;</span> 的值为 "C" 才能通过类名来调用指令。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>注释<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">ng-app</span>=<span class="string">"myApp"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- directive: runoob-directive --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> app = angular.module(<span class="string">"myApp"</span>, []);</span></span><br><span class="line"><span class="actionscript">app.directive(<span class="string">"runoobDirective"</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">        restrict : <span class="string">"M"</span>,</span></span><br><span class="line"><span class="actionscript">        replace : <span class="literal">true</span>,</span></span><br><span class="line"><span class="handlebars"><span class="xml">        template : "<span class="tag">&lt;<span class="name">h1</span>&gt;</span>自定义指令!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>"</span></span></span><br><span class="line">    &#125;;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">strong</span>&gt;</span>注意：<span class="tag">&lt;/<span class="name">strong</span>&gt;</span> 我们需要在该实例添加 <span class="tag">&lt;<span class="name">strong</span>&gt;</span>replace<span class="tag">&lt;/<span class="name">strong</span>&gt;</span> 属性， 否则评论是不可见的。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">strong</span>&gt;</span>注意：<span class="tag">&lt;/<span class="name">strong</span>&gt;</span> 你必须设置 <span class="tag">&lt;<span class="name">b</span>&gt;</span>restrict<span class="tag">&lt;/<span class="name">b</span>&gt;</span> 的值为 "M" 才能通过注释来调用指令。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>restrict 值可以是以下几种:</p>
<ol>
<li>E 作为元素名使用</li>
<li>A 作为属性使用</li>
<li>C 作为类名使用</li>
<li>M 作为注释使用</li>
</ol>
<blockquote>
<p>restrict 默认值为 EA, 即可以通过元素名和属性名来调用指令。</p>
</blockquote>
<h2 id="模型-ng-model"><a href="#模型-ng-model" class="headerlink" title="模型 ng-model"></a>模型 ng-model</h2><p>除了上述说的，还有以下需要了解：</p>
<h3 id="应用状态"><a href="#应用状态" class="headerlink" title="应用状态"></a>应用状态</h3><p>ng-model 指令可以为应用数据提供状态值(invalid, dirty, touched, error):</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">ng-app</span>=<span class="string">""</span> <span class="attr">name</span>=<span class="string">"myForm"</span> <span class="attr">ng-init</span>=<span class="string">"myText = 'test@runoob.com'"</span>&gt;</span></span><br><span class="line">    Email:</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"email"</span> <span class="attr">name</span>=<span class="string">"myAddress"</span> <span class="attr">ng-model</span>=<span class="string">"myText"</span> <span class="attr">required</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>编辑邮箱地址，查看状态的改变。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>状态<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Valid: &#123;&#123;myForm.myAddress.$valid&#125;&#125; (如果输入的值是合法的则为 true)。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Dirty: &#123;&#123;myForm.myAddress.$dirty&#125;&#125; (如果值改变则为 true)。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Touched: &#123;&#123;myForm.myAddress.$touched&#125;&#125; (如果通过触屏点击则为 true)。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="CSS类"><a href="#CSS类" class="headerlink" title="CSS类"></a>CSS类</h3><p>基于状态为html元素提供了css类</p>
<p>举例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css"><span class="selector-tag">input</span><span class="selector-class">.ng-dirty</span> &#123;</span></span><br><span class="line">    background-color: lightblue;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">ng-app</span>=<span class="string">""</span> <span class="attr">name</span>=<span class="string">"myForm"</span>&gt;</span></span><br><span class="line">    输入你的名字:</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"myName"</span> <span class="attr">ng-model</span>=<span class="string">"myText"</span> <span class="attr">required</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>当input的值改变时，应用了<code>input.ng-dirty</code> 的样式</p>
<p>有以下css类：</p>
<ol>
<li>ng-valid: 验证通过</li>
<li>ng-invalid: 验证失败</li>
<li>ng-valid-[key]: 由$setValidity添加的所有验证通过的值</li>
<li>ng-invalid-[key]: 由$setValidity添加的所有验证失败的值</li>
<li>ng-pristine: 控件为初始状态</li>
<li>ng-dirty: 控件输入值已变更</li>
<li>ng-touched: 控件已失去焦点</li>
<li>ng-untouched: 控件未失去焦点</li>
<li>ng-pending: 任何为满足$asyncValidators的情况</li>
</ol>
<h2 id="作用域-scope"><a href="#作用域-scope" class="headerlink" title="作用域 scope"></a>作用域 scope</h2><p>AngularJS 应用组成如下：</p>
<ul>
<li>View(视图), 即 HTML。</li>
<li>Model(模型), 当前视图中可用的数据。</li>
<li>Controller(控制器), 即 JavaScript 函数，可以添加或修改属性。</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-app</span>=<span class="string">"myApp"</span> <span class="attr">ng-controller</span>=<span class="string">"myCtrl"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">ng-model</span>=<span class="string">"name"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;greeting&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">ng-click</span>=<span class="string">'sayHello()'</span>&gt;</span>点我<span class="tag">&lt;/<span class="name">button</span>&gt;</span>    </span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> app = angular.module(<span class="string">'myApp'</span>, []);</span></span><br><span class="line"><span class="actionscript">app.controller(<span class="string">'myCtrl'</span>, <span class="function"><span class="keyword">function</span><span class="params">($scope)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">    $scope.name = <span class="string">"Runoob"</span>;</span></span><br><span class="line"><span class="actionscript">    $scope.sayHello = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        $scope.greeting = <span class="string">'Hello '</span> + $scope.name + <span class="string">'!'</span>;</span></span><br><span class="line">    &#125;;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这里scope的作用域在 整个div中都可以用，如果改成以下，</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-app</span>=<span class="string">"myApp"</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">ng-model</span>=<span class="string">"name"</span> <span class="attr">ng-controller</span>=<span class="string">"myCtrl"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> app = angular.module(<span class="string">'myApp'</span>, []);</span></span><br><span class="line"><span class="actionscript">app.controller(<span class="string">'myCtrl'</span>, <span class="function"><span class="keyword">function</span><span class="params">($scope)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">    $scope.name = <span class="string">"Runoob"</span>;</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><code>&lt;h1&gt;&lt;/h1&gt;</code> 不在 myCtrl 的作用域下，所以拿不到值</p>
<h3 id="根作用域-rootScope"><a href="#根作用域-rootScope" class="headerlink" title="根作用域 rootScope"></a>根作用域 rootScope</h3><p>rootscope 定义的值，可以在各个 controller 中使用。</p>
<p>参数的位置随意 但是参数命名一定要是<code>$rootscope</code></p>
<p>上面的例子修改如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-app</span>=<span class="string">"myApp"</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">ng-model</span>=<span class="string">"name"</span> <span class="attr">ng-controller</span>=<span class="string">"myCtrl"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> app = angular.module(<span class="string">'myApp'</span>, []);</span></span><br><span class="line"><span class="actionscript">app.controller(<span class="string">'myCtrl'</span>, <span class="function"><span class="keyword">function</span><span class="params">($scope,$rootScope)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">    $scope.name = <span class="string">"Runoob"</span>;</span></span><br><span class="line"><span class="actionscript">    $rootScope.name = <span class="string">"root Runoob"</span>;</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>&lt;h1&gt;&lt;/h1&gt;</code> 在根作用域有name的值，故这边可以显示<code>root Runoob</code> ,而input按照作用域传递原则，先拿到自己控制器作用域的<code>Runoob</code></p>
<blockquote>
<p>把 <code>$scope.name = &quot;Runoob&quot;;</code> 注释掉，input中能取到rootScope中的name对应的<code>root Runoob</code>,但input中name值的更新依然不会影响到h1中的name</p>
</blockquote>
<h2 id="控制器-controller"><a href="#控制器-controller" class="headerlink" title="控制器 controller"></a>控制器 controller</h2><p>略，看上文</p>
<h2 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h2><p>用于转换数据。</p>
<p>自带的过滤器有：</p>
<ul>
<li>currency 格式化数字为货币格式。</li>
<li>filter 从数组项中选择一个子集。</li>
<li>lowercase 格式化字符串为小写。</li>
<li>orderBy 根据某个表达式排列数组。</li>
<li>uppercase 格式化字符串为大写。</li>
</ul>
<p>在表达式中使用：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&#123; 变量 | 过滤器&#125;&#125;</span><br></pre></td></tr></table></figure>

<p>在输入中使用</p>
<p>过滤器后跟一个冒号和一个模型名称(或者一个常量)</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-app</span>=<span class="string">"myApp"</span> <span class="attr">ng-controller</span>=<span class="string">"namesCtrl"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>输入过滤:<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">ng-model</span>=<span class="string">"test"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">ng-repeat</span>=<span class="string">"x in names | filter:test "</span>&gt;</span></span><br><span class="line">    &#123;&#123; (x.name | uppercase) + ', ' + x.country &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">angular.module(<span class="string">'myApp'</span>, []).controller(<span class="string">'namesCtrl'</span>, <span class="function"><span class="keyword">function</span><span class="params">($scope)</span> </span>&#123;</span></span><br><span class="line">    $scope.names = [</span><br><span class="line"><span class="actionscript">        &#123;name:<span class="string">'Jani'</span>,country:<span class="string">'Norway'</span>&#125;,</span></span><br><span class="line"><span class="actionscript">        &#123;name:<span class="string">'Hege'</span>,country:<span class="string">'Sweden'</span>&#125;,</span></span><br><span class="line"><span class="actionscript">        &#123;name:<span class="string">'Kai'</span>,country:<span class="string">'Denmark'</span>&#125;</span></span><br><span class="line">    ];</span><br><span class="line">&#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>以上例子即，对于names的每一项，过滤出满足 <code>indexOf(test)&gt;=0</code>的项</p>
<p>再加个orderBy的过滤器：<code>&lt;li ng-repeat=&quot;x in names | filter:test | orderBy:&#39;country&#39;&quot;&gt;</code></p>
<p>在 <code>indexOf(test)&gt;=0</code>的前提下，按每项的<code>country</code>进行升序排序，若要降序，使用<code>orderBy:&#39;country&#39;:true</code></p>
<h3 id="自定义过滤器"><a href="#自定义过滤器" class="headerlink" title="自定义过滤器"></a>自定义过滤器</h3><p>自定义一个过滤器 reverse，将字符串反转：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-app</span>=<span class="string">"myApp"</span> <span class="attr">ng-controller</span>=<span class="string">"myCtrl"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">姓名: &#123;&#123; msg | reverse &#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> app = angular.module(<span class="string">'myApp'</span>, []);</span></span><br><span class="line"><span class="actionscript">app.controller(<span class="string">'myCtrl'</span>, <span class="function"><span class="keyword">function</span><span class="params">($scope)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">    $scope.msg = <span class="string">"Runoob"</span>;</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="actionscript">app.filter(<span class="string">'reverse'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123; <span class="comment">//可以注入依赖</span></span></span><br><span class="line"><span class="actionscript">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span><span class="params">(text)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> text.split(<span class="string">""</span>).reverse().join(<span class="string">""</span>);</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="服务-Service"><a href="#服务-Service" class="headerlink" title="服务 Service"></a>服务 Service</h2><p>服务是一个函数或对象，在 Angular 应用中使用。</p>
<p>service 是单例对象，在应用生命周期结束才会被清除</p>
<h3 id="内置服务"><a href="#内置服务" class="headerlink" title="内置服务"></a>内置服务</h3><p>作为参数传递到 controller 中即可使用，例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.controller(<span class="string">'customersCtrl'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">$scope, $location</span>) </span>&#123;</span><br><span class="line">    $scope.myUrl = $location.absUrl();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p> Angular 常用的内置服务</p>
<ul>
<li>$location<blockquote>
<p>返回当前页面的url地址</p>
</blockquote>
</li>
<li>$http 服务<blockquote>
<p>向服务端发送请求，<code>$http.get</code>等，参见 <a href="http://www.runoob.com/angularjs/angularjs-http.html" target="_blank" rel="noopener">http://www.runoob.com/angularjs/angularjs-http.html</a></p>
</blockquote>
</li>
<li>$injector<blockquote>
<p>可以用于获取其他对象（服务作用域控制器等）：<code>$injector.get(&quot;userService&quot;)</code></p>
</blockquote>
<h3 id="自定义的服务"><a href="#自定义的服务" class="headerlink" title="自定义的服务"></a>自定义的服务</h3></li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建名为hexafy 的服务:</span></span><br><span class="line">app.service(<span class="string">'hexafy'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.myFunc = <span class="function"><span class="keyword">function</span> (<span class="params">x</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x.toString(<span class="number">16</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用自定义的的服务 hexafy 将一个数字转换为16进制数:</span></span><br><span class="line"></span><br><span class="line">app.controller(<span class="string">'myCtrl'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">$scope, hexafy</span>) </span>&#123;</span><br><span class="line">    $scope.hex = hexafy.myFunc(<span class="number">255</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>在过滤器中使用服务,数组前面要传入服务名</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.filter(<span class="string">'myFormat'</span>,[<span class="string">'hexafy'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">hexafy</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> hexafy.myFunc(x);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;]);</span><br></pre></td></tr></table></figure>

<p>综合使用 service、controller、filter</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-app</span>=<span class="string">"myApp"</span> <span class="attr">ng-controller</span>=<span class="string">"myCtrl"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>在获取数组 [255, 251, 200] 值时使用过滤器:<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">ng-repeat</span>=<span class="string">"x in counts"</span>&gt;</span>&#123;&#123;x | myFormat&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>过滤器使用服务将10进制转换为16进制。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> app = angular.module(<span class="string">'myApp'</span>, []);</span></span><br><span class="line"><span class="actionscript">app.service(<span class="string">'hexafy'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">	<span class="keyword">this</span>.myFunc = <span class="function"><span class="keyword">function</span> <span class="params">(x)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> x.toString(<span class="number">16</span>);</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="actionscript">app.filter(<span class="string">'myFormat'</span>,[<span class="string">'hexafy'</span>, <span class="function"><span class="keyword">function</span><span class="params">(hexafy)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span><span class="params">(x)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> hexafy.myFunc(x);</span></span><br><span class="line">    &#125;;</span><br><span class="line">&#125;]);</span><br><span class="line"><span class="actionscript">app.controller(<span class="string">'myCtrl'</span>, <span class="function"><span class="keyword">function</span><span class="params">($scope)</span> </span>&#123;</span></span><br><span class="line">    $scope.counts = [255, 251, 200];</span><br><span class="line">&#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="依赖注入"><a href="#依赖注入" class="headerlink" title="依赖注入"></a>依赖注入</h2><p>有5个核心组件用于依赖注入</p>
<h3 id="value"><a href="#value" class="headerlink" title="value"></a>value</h3><p>value:一个简单js对象，用于向控制器或其他组件传值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> mainApp = angular.module(<span class="string">"mainApp"</span>, []);</span><br><span class="line">mainApp.value(<span class="string">"defaultInput"</span>, <span class="number">5</span>);</span><br><span class="line">mainApp.controller(<span class="string">'CalcController'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">$scope, defaultInput</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(defaultInput) <span class="comment">//5</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="factory"><a href="#factory" class="headerlink" title="factory"></a>factory</h3><p>factory: 一个函数，用于计算和返回值。一般用在service和controller</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">mainApp.factory(<span class="string">'MathService'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">   <span class="keyword">var</span> factory = &#123;&#125;;</span><br><span class="line">   </span><br><span class="line">   factory.multiply = <span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> a * b</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> factory;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="service"><a href="#service" class="headerlink" title="service"></a>service</h2><p>见上一节，service与factory的区别在于：</p>
<p>service 是用new实例化的，所以属性和方法定义在this上，</p>
<p>factory 是创建并返回一个对象</p>
<p>。。 好像就只是写法上的差异，没有核心差异</p>
<h3 id="provider"><a href="#provider" class="headerlink" title="provider"></a>provider</h3><p>通过 provider 创建一个 service、factory</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用 provider 创建 service 定义一个方法用于计算两数乘积</span></span><br><span class="line">mainApp.config(<span class="function"><span class="keyword">function</span>(<span class="params">$provide</span>) </span>&#123;</span><br><span class="line">   $provide.provider(<span class="string">'MathService'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">       <span class="comment">// 用于返回 value/service/factory</span></span><br><span class="line">      <span class="keyword">this</span>.$<span class="keyword">get</span> = function() &#123;</span><br><span class="line">         <span class="keyword">var</span> factory = &#123;&#125;;  </span><br><span class="line">         </span><br><span class="line">         factory.multiply = <span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> a * b; </span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">return</span> factory;</span><br><span class="line">      &#125;;</span><br><span class="line">   &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>具体使用差异 不过多了解</p>
<h3 id="constant"><a href="#constant" class="headerlink" title="constant"></a>constant</h3><p>配置常量</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">mainApp.constant(<span class="string">"configParam"</span>, <span class="string">"constant value"</span>);</span><br></pre></td></tr></table></figure>

<h2 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h2><ol>
<li><p>需要引入angular-route</p>
</li>
<li><p>在主模块中添加依赖模块——ngRoute</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">angular.module(<span class="string">'routingDemoApp'</span>,[<span class="string">'ngRoute'</span>])</span><br></pre></td></tr></table></figure></li>
<li><p>使用 ngView 指令</p>
</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-view</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>div 中内容会根据路由变化而变化</p>
<ol start="4">
<li>配置$routeProvider</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.config([<span class="string">'$routeProvider'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">$routeProvider</span>)</span>&#123;</span><br><span class="line">    $routeProvider</span><br><span class="line">        .when(<span class="string">'/'</span>,&#123;<span class="attr">template</span>:<span class="string">'这是首页页面'</span>&#125;)</span><br><span class="line">        .when(<span class="string">'/computers'</span>,&#123;<span class="attr">template</span>:<span class="string">'这是电脑分类页面'</span>&#125;)</span><br><span class="line">        .when(<span class="string">'/printers'</span>,&#123;<span class="attr">template</span>:<span class="string">'这是打印机页面'</span>&#125;)</span><br><span class="line">        .otherwise(&#123;<span class="attr">redirectTo</span>:<span class="string">'/'</span>&#125;);</span><br><span class="line">&#125;]);</span><br></pre></td></tr></table></figure>

<p>when 表示命中，otherwise表其他，</p>
<p>里面第一个参数是url或者正则，第二个参数是路由配置对象。</p>
<p>路由配置对象：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$routeProvider.when(url,&#123;</span><br><span class="line">    template:string, <span class="comment">//在ng-view中插入简单的html内容</span></span><br><span class="line">    templateUrl:string, <span class="comment">//在ng-view中插入html模版文件</span></span><br><span class="line">    controller:string,<span class="function"><span class="keyword">function</span> / <span class="title">array</span>, //在当前模版上执行的<span class="title">controller</span>函数</span></span><br><span class="line"><span class="function">    <span class="title">controllerAs</span>:<span class="title">string</span>, //为<span class="title">controller</span>指定别名</span></span><br><span class="line"><span class="function">    <span class="title">redirectTo</span>:<span class="title">string</span>,<span class="title">function</span>, //重定向的地址</span></span><br><span class="line"><span class="function">    <span class="title">resolve</span>:<span class="title">object</span>&lt;<span class="title">key</span>,<span class="title">function</span>&gt; //指定当前<span class="title">controller</span>所依赖的其他模块</span></span><br><span class="line"><span class="function">&#125;);</span></span><br></pre></td></tr></table></figure>

<p>不想新建html文件时，可以用</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/ng-template"</span> <span class="attr">id</span>=<span class="string">"embedded.about.html"</span>&gt;</span></span><br><span class="line"><span class="handlebars"><span class="xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span> About <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>templateUrl中指定<code>embedded.about.html</code>即可</p>
<h3 id="ui-view-angular-ui-router-stateProvider"><a href="#ui-view-angular-ui-router-stateProvider" class="headerlink" title="ui-view + angular-ui-router + $stateProvider"></a>ui-view + angular-ui-router + $stateProvider</h3><h2 id="run"><a href="#run" class="headerlink" title="run"></a>run</h2><pre><code class="js"><span class="built_in">module</span>.run(<span class="function"><span class="keyword">function</span>(<span class="params">...</span>)</span>{
    <span class="comment">//里面的代码将直接运行，一般用于执行配置</span>
})</code></pre>
<h2 id="第三方插件"><a href="#第三方插件" class="headerlink" title="第三方插件"></a>第三方插件</h2><p>略</p>
<h2 id="vs-Vue2"><a href="#vs-Vue2" class="headerlink" title="vs Vue2"></a>vs Vue2</h2><p>以下的相当，只是说明做技术栈迁移时的考虑方向。肯定有些细节不一样</p>
<p>directive 相当于 vue 的 props</p>
<p>controller 相当于 vue 的 method </p>
<p>数据相当于 vue 的 data 和 prop</p>
<p>html 相当于 vue 的 template</p>
<p>directive 中的 link: function(scope, element)</p>
<p>scope 相当于 vue 的当前作用域 this</p>
<p>ng1.x 中 element 表示带有类似 jquery 方法的 dom 节点；在 vue 中通过 ref 拿到的是实际 dom 节点</p>
]]></content>
      <categories>
        <category>大前端</category>
      </categories>
      <tags>
        <tag>Angular1.x</tag>
      </tags>
  </entry>
  <entry>
    <title>document-write重写</title>
    <url>/2018/11/01/2018Q4/document-write%E9%87%8D%E5%86%99/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文介绍的 <code>document.write</code> 重写方法，会放在文档头部执行，且不影响原先 <code>document.write</code> 的执行时间点。内部执行不再采用 <code>document.write</code></p>
<a id="more"></a>

<h2 id="document-write-的奇妙用法"><a href="#document-write-的奇妙用法" class="headerlink" title="document.write 的奇妙用法"></a>document.write 的奇妙用法</h2><p>html文档是边解释边执行的，所以 write 一部分时，会把这部分放入 html 解析器中。</p>
<p>若没有后续 write ，可能会把 js 代码断作为 html 节点内容的一部分</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">"&lt;script&gt;"</span>)</span><br><span class="line"><span class="comment">// 没有及时写入&lt;\/script&gt;</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="comment">// 上面的代码会变成&lt;script&gt;代码中的一部分</span></span><br></pre></td></tr></table></figure>

<p>这里我们假设用户的 <code>document.write</code> 用法是正确的，即 write 了开标签，如果不 write 闭标签会出错的话 后面一定会write闭标签。</p>
<p><strong>对于单个节点的write(无父节点等复杂情况)</strong>,考虑以下几种情况</p>
<ol>
<li>仅写入开标签，但必要的闭标签在下一个 <code>document.write</code> 中</li>
<li>仅写入开标签，但闭标签非必要</li>
<li>存在script标签</li>
<li>写入标签未闭合，例：<code>&lt;di</code> 暂未能判断是文本还是标签</li>
</ol>
<h3 id="仅写入开标签，但必要的闭标签在下一个-document-write-中"><a href="#仅写入开标签，但必要的闭标签在下一个-document-write-中" class="headerlink" title="仅写入开标签，但必要的闭标签在下一个 document.write 中"></a>仅写入开标签，但必要的闭标签在下一个 <code>document.write</code> 中</h3><p>维护一个 需要必要闭标签的标签列表，第一个write写入了开标签，此时将其暂存，在第二个write的时候再补上 <code>str=leLabel+str</code></p>
<h3 id="仅写入开标签，但闭标签非必要"><a href="#仅写入开标签，但闭标签非必要" class="headerlink" title="仅写入开标签，但闭标签非必要"></a>仅写入开标签，但闭标签非必要</h3><p>第一个write写入了开标签，但该标签不在<code>需要必要闭标签的标签列表</code>中,此时将其暂存，在第二个write的时候再补上 <code>str=leLabel+str</code></p>
<h3 id="存在script标签"><a href="#存在script标签" class="headerlink" title="存在script标签"></a>存在script标签</h3><p>先写入script前的内容，然后append script 再继续处理script后的内容</p>
<h3 id="写入标签未闭合，例：-lt-di-暂未能判断是文本还是标签"><a href="#写入标签未闭合，例：-lt-di-暂未能判断是文本还是标签" class="headerlink" title="写入标签未闭合，例：&lt;di 暂未能判断是文本还是标签"></a>写入标签未闭合，例：<code>&lt;di</code> 暂未能判断是文本还是标签</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">"&lt;spa"</span>)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">555</span>)</span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">"n&gt;dsdas&lt;/span&gt;"</span>)</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>

<p>将其当成标签，暂不写入内容，在下一次 <code>document.write</code> 的时候，先判断上下文。</p>
<p>若处于不同 currentScript,说明上一未闭合标签是普通文本，需要补上文本</p>
<p>否则检测本次 write 的文本 是否以 <code>xx&gt;</code> 开头，且<code>(document.createElement(标签名)).__proto__ instanceof HTMLUnknownElement === false</code> 则说明为标签，否则为普通文本</p>
<p>第三方库里面用的自定义元素，<code>(document.createElement(标签名)).__proto__ instanceof HTMLElement === true</code></p>
<h2 id="拓展知识：未知元素与自定义元素"><a href="#拓展知识：未知元素与自定义元素" class="headerlink" title="拓展知识：未知元素与自定义元素"></a>拓展知识：未知元素与自定义元素</h2><ul>
<li>未知元素<blockquote>
<p><code>&lt;unknownelement&gt;</code></p>
<p>HTML规范中将没有定义的元素作为 HTMLUnknownElement 进行解析。</p>
</blockquote>
</li>
</ul>
<ul>
<li>自定义元素<blockquote>
<p><code>&lt;custom-element&gt;</code></p>
<p>自定义元素则并非如此。如果在创建时使用有效的名称（包含“-”），则潜在的自定义元素将解析为 HTMLElement 。</p>
</blockquote>
</li>
</ul>
]]></content>
      <categories>
        <category>大前端</category>
      </categories>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>markdown技巧</title>
    <url>/2018/10/16/2018Q4/markdown%E6%8A%80%E5%B7%A7/</url>
    <content><![CDATA[<h2 id="1-文本删除线效果"><a href="#1-文本删除线效果" class="headerlink" title="1. 文本删除线效果"></a>1. 文本删除线效果</h2><p>在需要删除线效果的单行文本两侧加<code>~~</code>，例如</p>
<a id="more"></a>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">~~test~~</span><br></pre></td></tr></table></figure>
<p>效果如下：</p>
<p><del>test</del></p>
<p>但对于多行文本，使用</p>
<p>~~test1</p>
<p>test2~~</p>
<p>我们发现没有效果，此时有两种方法，</p>
<ol>
<li>每行都用<code>~~</code>包起来，即<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">~~test1~~</span><br><span class="line"></span><br><span class="line">~~test2~~</span><br></pre></td></tr></table></figure></li>
<li>利用html的<code>&lt;s&gt;</code>删除线标签<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;s&gt;test1</span><br><span class="line"></span><br><span class="line">test2~~&lt;&#x2F;s&gt;</span><br></pre></td></tr></table></figure>
效果如下：</li>
</ol>
<p><s>test1</p>
<p>test2</s></p>
<h2 id="2-区块引用的换行"><a href="#2-区块引用的换行" class="headerlink" title="2. 区块引用的换行"></a>2. 区块引用的换行</h2><p>我们可以在文明前使用<code>&gt;</code> 来对文本样式进行特殊的展示，常用于引用、说明、标注，例如</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; test</span><br></pre></td></tr></table></figure>
<p>效果如下：</p>
<blockquote>
<p>test</p>
</blockquote>
<p>对于多行文本，使用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; test1</span><br><span class="line">&gt; test2</span><br></pre></td></tr></table></figure>
<p>效果如下：</p>
<blockquote>
<p>test1<br>test2</p>
</blockquote>
<p>我们发现 test1 test2处于同一行，解决方法有两种</p>
<ol>
<li>加入空的<code>&gt;</code>行<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; test1</span><br><span class="line">&gt;</span><br><span class="line">&gt; test2</span><br></pre></td></tr></table></figure>
效果如下,会多一个空行：</li>
</ol>
<blockquote>
<p>test1</p>
<p>test2</p>
</blockquote>
<ol start="2">
<li>行末加入<code>\</code><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; test1\</span><br><span class="line">&gt; test2</span><br></pre></td></tr></table></figure>
效果如下：<blockquote>
<p>test1<br>test2</p>
</blockquote>
</li>
</ol>
<p>ps: 有些md解析器没有效果</p>
<h2 id="3-点击展开效果"><a href="#3-点击展开效果" class="headerlink" title="3. 点击展开效果"></a>3. 点击展开效果</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;details&gt;</span><br><span class="line">&lt;summary&gt;title&lt;&#x2F;summary&gt;</span><br><span class="line">content</span><br><span class="line">&lt;&#x2F;details&gt;</span><br></pre></td></tr></table></figure>
<p>效果如下:</p>
<details>
<summary>点击展开</summary>
我是内容详情
</details>

<h2 id="4-页内跳转"><a href="#4-页内跳转" class="headerlink" title="4. 页内跳转"></a>4. 页内跳转</h2><ol>
<li>先定义一个锚</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"anchor"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>使用链接跳转语法</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[点击跳转](#anchor)</span><br><span class="line">or</span><br><span class="line">&lt;a href&#x3D;&quot;#anchor&quot;&gt;点击跳转&lt;&#x2F;a&gt;</span><br></pre></td></tr></table></figure>

<p><strong>注意：</strong></p>
<p>使用 <code>#</code> 语法定义的各级标题，若标题为纯文本（没有使用md样式）且不带空格，该标题就是一个锚</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">## 前言</span><br><span class="line"></span><br><span class="line">## **内容** 1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 有效</span><br><span class="line">[点击跳转](#前言)</span><br><span class="line">&#x2F;&#x2F; 无效</span><br><span class="line">[点击跳转](#**内容** 1)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>思维导图组件开发</title>
    <url>/2018/10/16/2018Q4/%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE%E7%BB%84%E4%BB%B6%E5%BC%80%E5%8F%91/</url>
    <content><![CDATA[<p>本文主要描述思维导图实现的要素</p>
<p>偏向于概要设计</p>
<a id="more"></a>

<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><h3 id="元素定义"><a href="#元素定义" class="headerlink" title="元素定义"></a>元素定义</h3><ol>
<li>中心节点<blockquote>
<p>处于主树干，唯一，不可删除</p>
</blockquote>
</li>
<li>主树干<blockquote>
<p>以中心节点为根节点构成的树 </p>
</blockquote>
</li>
<li>游离树<blockquote>
<p>非主树干的树，其根节点由拖动、粘贴、空白处创建 生成</p>
</blockquote>
</li>
<li>普通节点<blockquote>
<p>包括主树干节点和游离树节点<br>含一个缩放按钮，控制子孙节点的展示</p>
</blockquote>
</li>
<li>连接线<blockquote>
<p>父子节点之间的连线，无箭头，无标题 </p>
</blockquote>
</li>
<li>关联线<blockquote>
<p>任意两节点之间的连线，带箭头，带标题</p>
</blockquote>
</li>
</ol>
<h3 id="状态定义"><a href="#状态定义" class="headerlink" title="状态定义"></a>状态定义</h3><ol>
<li>选择状态</li>
<li>编辑状态</li>
</ol>
<p>两个状态互斥</p>
<h2 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h2><h3 id="普通节点创建方式"><a href="#普通节点创建方式" class="headerlink" title="普通节点创建方式"></a>普通节点创建方式</h3><ol>
<li>节点选择状态，按回车键，创建同级节点</li>
<li>节点选择状态，鼠标右键，可以创建同级节点或子节点</li>
<li>在空白处鼠标右键，选择创建节点选项，将创建游离的普通节点</li>
<li>界面左侧预设一些节点，可以将其拖动过来。这些节点主要是带一些通用图标</li>
<li>节点粘贴：已进行节点复制操作，在节点选择状态或者空白处鼠标右键，进行元素粘贴</li>
</ol>
<h3 id="连接线创建方式"><a href="#连接线创建方式" class="headerlink" title="连接线创建方式"></a>连接线创建方式</h3><ol>
<li>自动创建：当节点创建时不是游离树根节点时，自动进行连接线创建</li>
<li>手动创建：鼠标右键处于主树干的普通节点，选择创建连接线，拖动至游离树根节点</li>
</ol>
<h3 id="关联线创建方式"><a href="#关联线创建方式" class="headerlink" title="关联线创建方式"></a>关联线创建方式</h3><p>鼠标右键普通节点，选择创建关联线，拉动并连上其他普通节点，将创建连接并进入节点标题编辑状态</p>
<h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><ol>
<li>父节点删除，子节点自动删除</li>
<li>节点选择状态：按Delete键，进行元素删除</li>
</ol>
<h2 id="选择"><a href="#选择" class="headerlink" title="选择"></a>选择</h2><p>按住CTRL键，点击节点，可进行多节点的选择。</p>
<p>同时选择父节点和子节点，对于后续各种操作，都只操作父节点。</p>
<p>例如，</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">A—A1</span><br><span class="line">|—A2</span><br></pre></td></tr></table></figure>
<p>选择A和A2节点，拖动至B节点，此时A节点为B节点的子节点，A1,A2仍是A的子节点。即<strong>只操作了父节点</strong>。</p>
<h2 id="拖动"><a href="#拖动" class="headerlink" title="拖动"></a>拖动</h2><p>拖动中心节点，则主树干进行移动，游离树不动</p>
<p>拖动普通节点至空白处，则位置进行调整；其子节点视情况调整（制定策略，有一定工作量），连接线和关联线自动调整。</p>
<blockquote>
<p>支持多个节点同时拖动</p>
</blockquote>
<p>拖动普通节点至节点处，当前节点会变为该节点的子节点</p>
<p>同时选择中心节点和游离树节点，则这些树一起拖动,且不能拖动至普通节点</p>
<p>连接线无法拖动</p>
<p>关联线可拖动，利用左右两个拉杆（参考processon</p>
<h2 id="复制与粘贴"><a href="#复制与粘贴" class="headerlink" title="复制与粘贴"></a>复制与粘贴</h2><h3 id="复制"><a href="#复制" class="headerlink" title="复制"></a>复制</h3><p>选择节点后，CTRL+C或者鼠标右键点复制，可进行节点的复制。</p>
<p>会同时复制这些节点的子孙节点</p>
<h3 id="粘贴"><a href="#粘贴" class="headerlink" title="粘贴"></a>粘贴</h3><ul>
<li>鼠标右键普通节点，选择粘贴，会将复制的节点作为该节点的子节点</li>
<li>鼠标右键空白处，选择粘贴。若复制的父节点超过一个，自动创建一个游离树根节点，并将这些节点作为根节点的子节点，否则直接粘贴。</li>
</ul>
<h2 id="保存，撤销，重做"><a href="#保存，撤销，重做" class="headerlink" title="保存，撤销，重做"></a>保存，撤销，重做</h2><p>一次操作定义：</p>
<ul>
<li>组件创建</li>
<li>组件拖动至鼠标松开</li>
<li>组件属性修改：标题、样式</li>
</ul>
<p>缩放操作仅针对本地显示，不涉及<code>一次操作</code></p>
<p>历史记录：操作步骤的记录，index记录当前处于历史记录的哪个操作</p>
<h3 id="保存"><a href="#保存" class="headerlink" title="保存"></a>保存</h3><p>每次操作结束，通过websocket发送当前操作到服务端，进行自动保存（autosave）。</p>
<blockquote>
<p>可用于多人操作及防止意外关闭</p>
</blockquote>
<p>点击保存按钮或按<code>CTRL+S</code>进行文件保存，会将当前整个文件结构上传（save），并清空<code>历史记录</code></p>
<h3 id="撤销"><a href="#撤销" class="headerlink" title="撤销"></a>撤销</h3><p>撤销（undo）一次操作，并进行自动保存（autosave）</p>
<blockquote>
<p>历史记录回退，若进行新的操作，index其后的历史记录会被舍弃</p>
</blockquote>
<h3 id="重做"><a href="#重做" class="headerlink" title="重做"></a>重做</h3><p>在处于撤销情况下进行还原操作（redo），并进行自动保存</p>
<h2 id="展开与缩略"><a href="#展开与缩略" class="headerlink" title="展开与缩略"></a>展开与缩略</h2><p>普通节点旁显示一个展开按钮<code>+</code>或缩略按钮<code>-</code> </p>
<p>点击展开按钮，展开当前节点的下一级节点</p>
<p>点击缩略按钮，缩略当前节点的所有子孙节点</p>
<h2 id="快捷操作"><a href="#快捷操作" class="headerlink" title="快捷操作"></a>快捷操作</h2><ol>
<li>节点选择状态：按回车键，自动创建同级节点并处于节点编辑状态；显示删除按钮</li>
<li>节点选择状态：按Tap键，自动创建子节点并处于节点编辑状态</li>
<li>节点选择状态：按Delete键，进行元素删除</li>
<li>节点编辑状态：按回车键，保存节点标题并处于节点选择状态</li>
<li>双击节点，进入节点标题编辑状态</li>
<li>按住CTRL，可以选择多个节点</li>
<li>CTRL+A 进行所有节点的选择</li>
</ol>
<h2 id="样式"><a href="#样式" class="headerlink" title="样式"></a>样式</h2><ul>
<li>画布初始化一定大小，中心节点处于中心。画布可无限拉伸</li>
<li>普通节点支持</li>
</ul>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
  </entry>
  <entry>
    <title>css与js的阻塞关系</title>
    <url>/2018/10/01/2018Q4/css%E4%B8%8Ejs%E7%9A%84%E9%98%BB%E5%A1%9E%E5%85%B3%E7%B3%BB/</url>
    <content><![CDATA[<p>在 html 的解析过程中，样式文件和脚本文件之间是否有依赖关系呢？</p>
<p>我们经常看到这样一句话</p>
<blockquote>
<p>浏览器将延迟脚本执行和 DOM 构建，直至其完成 CSSOM 的下载和构建</p>
</blockquote>
<a id="more"></a>

<p>(引自:<a href="https://developers.google.com/web/fundamentals/performance/critical-rendering-path/adding-interactivity-with-javascript?hl=zh-cn" target="_blank" rel="noopener">使用 JavaScript 添加交互</a></p>
<p>简单进行了以下测试</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>页面<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"><span class="keyword">var</span> start = +<span class="keyword">new</span> <span class="built_in">Date</span>;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> end1 = +<span class="keyword">new</span> <span class="built_in">Date</span>;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(end1-start);</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> end2 = +<span class="keyword">new</span> <span class="built_in">Date</span>;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(end2-start);</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"./css/style.css"</span> /&gt;</span></span><br><span class="line">   </span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> end3 = +<span class="keyword">new</span> <span class="built_in">Date</span>;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(end3-start);</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"span"</span>&gt;</span>test<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> end4 = +<span class="keyword">new</span> <span class="built_in">Date</span>;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(end4-start);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.getElementById(<span class="string">"span"</span>).style.height = <span class="string">"20px"</span>;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> end5 = +<span class="keyword">new</span> <span class="built_in">Date</span>;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(end5-start);</span></span><br><span class="line"><span class="actionscript">    alert((end1-start)+<span class="string">','</span>+(end2-start)+<span class="string">','</span>+(end3-start)+<span class="string">','</span>+(end4-start)+<span class="string">','</span>+(end5-start))</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>得到了这样的结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0</span><br><span class="line">3</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">83</span><br></pre></td></tr></table></figure>

<p>说明 script 的执行需要等待前面 css 的执行。</p>
<p>又看到这样一句话：</p>
<blockquote>
<p>Firefox 在样式表加载和解析的过程中，会禁止所有脚本。而对于 WebKit 而言，仅当脚本尝试访问的样式属性可能受尚未加载的样式表影响时，它才会禁止该脚本。</p>
</blockquote>
<p>(引自:<a href="https://www.html5rocks.com/zh/tutorials/internals/howbrowserswork/#Tree_construction_algorithm" target="_blank" rel="noopener">浏览器的工作原理</a></p>
<p>但测试了ios safari 12(WebKit),发现还是会禁用脚本，脚本还是会被样式阻塞</p>
<p>假设能实现，引擎是如何判断脚本中访问的样式会受未加载的样式表影响？欢迎探讨</p>
]]></content>
      <categories>
        <category>大前端</category>
      </categories>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>adblockplus.js源码解析</title>
    <url>/2018/09/15/2018Q3/adblockplus.js%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本次分析的是 <code>adblockplus</code> 的 3.3.2_0 版本，</p>
<p>源码见 <a href="https://github.com/adblockplus/adblockpluschrome" target="_blank" rel="noopener">adblockplus</a> </p>
<a id="more"></a>


<h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><p>每个模块的写法大致都是以下这样的</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">require</span>.scopes.xxx = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> obj =  &#123;&#125;</span><br><span class="line">  obj.Xxx = &#123;</span><br><span class="line">    <span class="comment">//公有方法</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> obj</span><br><span class="line">&#125;()</span><br></pre></td></tr></table></figure>

<p>其他模块使用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> xxx = <span class="built_in">require</span>(<span class="string">"xxx"</span>).Xxx</span><br></pre></td></tr></table></figure>

<h1 id="模块解析"><a href="#模块解析" class="headerlink" title="模块解析"></a>模块解析</h1><h2 id="过滤器模块"><a href="#过滤器模块" class="headerlink" title="过滤器模块"></a>过滤器模块</h2><p>核心代码，从 fromText 入手</p>
<p>在 fromText 中，对规则进行分类，构造相应的过滤器</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Cache for known filters, maps string representation to filter objects.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@type <span class="type">&#123;Map.&lt;string,Filter&gt;&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Filter.knownFilters = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Regular expression that content filters should match</span></span><br><span class="line"><span class="comment"> * 匹配内容过滤器，会继续细分 元素隐藏 等过滤器</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@type <span class="type">&#123;RegExp&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Filter.contentRegExp = <span class="regexp">/^([^/*|@"!]*?)#([@?$])?#(.+)$/</span>;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Regular expression that RegExp filters specified as RegExps should match</span></span><br><span class="line"><span class="comment"> * 匹配正则形式的规则</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@type <span class="type">&#123;RegExp&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Filter.regexpRegExp = <span class="regexp">/^(@@)?\/.*\/(?:\$~?[\w-]+(?:=[^,\s]+)?(?:,~?[\w-]+(?:=[^,\s]+)?)*)?$/</span>;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Regular expression that options on a RegExp filter should match</span></span><br><span class="line"><span class="comment"> * 匹配过滤规则选项，这些选项放在$后 并以,分割</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@type <span class="type">&#123;RegExp&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Filter.optionsRegExp = <span class="regexp">/\$(~?[\w-]+(?:=[^,]*)?(?:,~?[\w-]+(?:=[^,]*)?)*)$/</span>;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Regular expression that matches an invalid Content Security Policy</span></span><br><span class="line"><span class="comment"> * 匹配无效的csp</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@type <span class="type">&#123;RegExp&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Filter.invalidCSPRegExp = <span class="regexp">/(;|^) ?(base-uri|referrer|report-to|report-uri|upgrade-insecure-requests)\b/i</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Creates a filter of correct type from its text representation - does the</span></span><br><span class="line"><span class="comment"> * basic parsing and calls the right constructor then.</span></span><br><span class="line"><span class="comment"> * 解析单行字符串，构造相应过滤器</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;string&#125;</span> </span>text   as in Filter()</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;Filter&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Filter.fromText = <span class="function"><span class="keyword">function</span>(<span class="params">text</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">// 判断字符串是否已被解析成过滤器</span></span><br><span class="line">  <span class="keyword">let</span> filter = Filter.knownFilters.get(text);</span><br><span class="line">  <span class="keyword">if</span> (filter)</span><br><span class="line">    <span class="keyword">return</span> filter;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> match = text.includes(<span class="string">"#"</span>) ? Filter.contentRegExp.exec(text) : <span class="literal">null</span>;</span><br><span class="line">  <span class="comment">//匹配内容过滤器</span></span><br><span class="line">  <span class="keyword">if</span> (match)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">let</span> propsMatch;</span><br><span class="line">    <span class="keyword">if</span> (!match[<span class="number">2</span>] &amp;&amp;</span><br><span class="line">        (propsMatch = <span class="regexp">/\[-abp-properties=(["'])([^"']+)\1\]/</span>.exec(match[<span class="number">3</span>])))</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">// This is legacy CSS properties syntax, convert to current syntax</span></span><br><span class="line">      <span class="comment">// 转化遗留css语法到当前语法--引号形式变成括号形式，例[-abp-properties='width:300px;height:250px;'] will be converted to :-abp-properties(width:300px;height:250px;)</span></span><br><span class="line">      <span class="comment">// 括号中内容表示赋值这些属性给元素style ; match[3] ：选择器及-abp-properties内容</span></span><br><span class="line">      <span class="comment">// </span></span><br><span class="line">      <span class="keyword">let</span> prefix = match[<span class="number">3</span>].substr(<span class="number">0</span>, propsMatch.index);</span><br><span class="line">      <span class="keyword">let</span> expression = propsMatch[<span class="number">2</span>];</span><br><span class="line">      <span class="keyword">let</span> suffix = match[<span class="number">3</span>].substr(propsMatch.index + propsMatch[<span class="number">0</span>].length);</span><br><span class="line">      <span class="keyword">return</span> Filter.fromText(<span class="string">`<span class="subst">$&#123;match[<span class="number">1</span>]&#125;</span>#?#`</span> +</span><br><span class="line">          <span class="string">`<span class="subst">$&#123;prefix&#125;</span>:-abp-properties(<span class="subst">$&#123;expression&#125;</span>)<span class="subst">$&#123;suffix&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    filter = ContentFilter.fromText(text, match[<span class="number">1</span>], match[<span class="number">2</span>], match[<span class="number">3</span>]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//匹配注释规则</span></span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (text[<span class="number">0</span>] == <span class="string">"!"</span>)</span><br><span class="line">    filter = <span class="keyword">new</span> CommentFilter(text);</span><br><span class="line">  <span class="comment">//匹配正则形式规则</span></span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    filter = RegExpFilter.fromText(text);</span><br><span class="line">  <span class="comment">//缓存</span></span><br><span class="line">  Filter.knownFilters.set(filter.text, filter);</span><br><span class="line">  <span class="keyword">return</span> filter;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="内容过滤器-ContentFilter"><a href="#内容过滤器-ContentFilter" class="headerlink" title="内容过滤器-ContentFilter"></a>内容过滤器-ContentFilter</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">match = <span class="regexp">/^([^/*|@"!]*?)#([@?$])?#(.+)$/</span>.exec(text)</span><br><span class="line">ContentFilter.fromText(text, match[<span class="number">1</span>], match[<span class="number">2</span>], match[<span class="number">3</span>])</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Creates a content filter from a pre-parsed text representation</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;string&#125;</span> </span>text         same as in Filter()</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;string&#125;</span> </span>[domains]</span></span><br><span class="line"><span class="comment"> *   domains part of the text representation</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;string&#125;</span> </span>[type]</span></span><br><span class="line"><span class="comment"> *   rule type, either:</span></span><br><span class="line"><span class="comment"> *     &lt;li&gt;"" for an element hiding filter&lt;/li&gt;</span></span><br><span class="line"><span class="comment"> *     &lt;li&gt;"@" for an element hiding exception filter&lt;/li&gt;</span></span><br><span class="line"><span class="comment"> *     &lt;li&gt;"?" for an element hiding emulation filter&lt;/li&gt;</span></span><br><span class="line"><span class="comment"> *     &lt;li&gt;"$" for a snippet filter&lt;/li&gt;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;string&#125;</span> <span class="variable">body</span></span></span></span><br><span class="line"><span class="comment"> *   body part of the text representation, either a CSS selector or a snippet</span></span><br><span class="line"><span class="comment"> *   script</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;ElemHideFilter|ElemHideException|</span></span></span></span><br><span class="line"><span class="comment"><span class="doctag"><span class="type"> *          ElemHideEmulationFilter|SnippetFilter|InvalidFilter&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">ContentFilter.fromText = <span class="function"><span class="keyword">function</span>(<span class="params">text, domains, type, body</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">// We don't allow content filters which have any empty domains.</span></span><br><span class="line">  <span class="comment">// Note: The ContentFilter.prototype.domainSeparator is duplicated here, if</span></span><br><span class="line">  <span class="comment">// that changes this must be changed too.</span></span><br><span class="line">  <span class="comment">// 存在空的域名，即 'a.com,,b.com' 逗号中间为空，故该规则无效</span></span><br><span class="line">  <span class="keyword">if</span> (domains &amp;&amp; <span class="regexp">/(^|,)~?(,|$)/</span>.test(domains))</span><br><span class="line">    <span class="comment">// 无效过滤器</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> InvalidFilter(text, <span class="string">"filter_invalid_domain"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (type == <span class="string">"@"</span>)</span><br><span class="line">    <span class="comment">//元素隐藏例外过滤器，即匹配规则的不进行元素隐藏</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ElemHideException(text, domains, body);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (type == <span class="string">"$"</span>)</span><br><span class="line">    <span class="comment">// script片段过滤器，目前仅找到该条规则</span></span><br><span class="line">    <span class="comment">// e.g. ipv6.baidu.com,xueshu.baidu.com,www.baidu.com,www1.baidu.com#$#hide-if-contains 广告 .c-container '.f13 &gt; .m'</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> SnippetFilter(text, domains, body);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (type == <span class="string">"?"</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">// Element hiding emulation filters are inefficient so we need to make sure</span></span><br><span class="line">    <span class="comment">// that they're only applied if they specify active domains</span></span><br><span class="line">    <span class="comment">// 元素隐藏拓展选择器过滤器。可以使用拓展语法，但是有性能影响,需要指定域名使用</span></span><br><span class="line">    <span class="comment">//e.g. 58.com#?#.ac_item:-abp-has(.jingpin) 规则用到了-abp-has拓展选择器</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="regexp">/,[^~][^,.]*\.[^,]/</span>.test(<span class="string">","</span> + domains))</span><br><span class="line">      <span class="comment">//未设置域名</span></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> InvalidFilter(text, <span class="string">"filter_elemhideemulation_nodomain"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ElemHideEmulationFilter(text, domains, body);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//默认元素隐藏过滤器</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> ElemHideFilter(text, domains, body);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="注释过滤器-CommentFilter"><a href="#注释过滤器-CommentFilter" class="headerlink" title="注释过滤器-CommentFilter"></a>注释过滤器-CommentFilter</h3><p>不做处理</p>
<h3 id="正则过滤器-RegExpFilter"><a href="#正则过滤器-RegExpFilter" class="headerlink" title="正则过滤器-RegExpFilter"></a>正则过滤器-RegExpFilter</h3><h3 id="无效过滤器-InvalidFilter"><a href="#无效过滤器-InvalidFilter" class="headerlink" title="无效过滤器-InvalidFilter"></a>无效过滤器-InvalidFilter</h3><h2 id="匹配器-Matcher"><a href="#匹配器-Matcher" class="headerlink" title="匹配器 Matcher"></a>匹配器 Matcher</h2><p>规则匹配过滤器的过程</p>
<ol>
<li>将url分割成关键字候选列表<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Tests whether the URL matches any of the known filters</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;string&#125;</span> <span class="variable">location</span></span></span></span><br><span class="line"><span class="comment"> *   URL to be tested</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">typeMask</span></span></span></span><br><span class="line"><span class="comment"> *   bitmask of content / request types to match</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;string&#125;</span> <span class="variable">docDomain</span></span></span></span><br><span class="line"><span class="comment"> *   domain name of the document that loads the URL</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;boolean&#125;</span> <span class="variable">thirdParty</span></span></span></span><br><span class="line"><span class="comment"> *   should be true if the URL is a third-party request</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;string&#125;</span> <span class="variable">sitekey</span></span></span></span><br><span class="line"><span class="comment"> *   public key provided by the document</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;boolean&#125;</span> <span class="variable">specificOnly</span></span></span></span><br><span class="line"><span class="comment"> *   should be true if generic matches should be ignored</span></span><br><span class="line"><span class="comment"> *   非通用匹配，即含有css拓展选择器</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;?RegExpFilter&#125;</span></span></span></span><br><span class="line"><span class="comment"> *   matching filter or null</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">matchesAny(location, typeMask, docDomain, thirdParty, sitekey, specificOnly)&#125;&#123;</span><br><span class="line">  <span class="keyword">let</span> candidates = location.toLowerCase().match(<span class="regexp">/[a-z0-9%]&#123;3,&#125;/g</span>);</span><br><span class="line">  <span class="keyword">if</span> (candidates === <span class="literal">null</span>)candidates = [];</span><br><span class="line">  candidates.push(<span class="string">""</span>);</span><br><span class="line">  <span class="comment">//2.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>遍历关键字候选列表，判断该url属于哪个过滤器<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> blacklistHit = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, l = candidates.length; i &lt; l; i++) &#123;</span><br><span class="line">  <span class="keyword">let</span> substr = candidates[i];</span><br><span class="line">  <span class="comment">//在白名单列表中，直接返回</span></span><br><span class="line">  <span class="keyword">let</span> result = <span class="keyword">this</span>.whitelist._checkEntryMatch(</span><br><span class="line">    substr, location, typeMask, docDomain, thirdParty, sitekey</span><br><span class="line">  );</span><br><span class="line">  <span class="keyword">if</span> (result)</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  <span class="keyword">if</span> (blacklistHit === <span class="literal">null</span>) &#123;</span><br><span class="line">    blacklistHit = <span class="keyword">this</span>.blacklist._checkEntryMatch(</span><br><span class="line">      substr, location, typeMask, docDomain, thirdParty, sitekey,</span><br><span class="line">      specificOnly</span><br><span class="line">    );</span><br><span class="line">    <span class="comment">//这里命中黑名单不直接返回原因是为了确保没有关键字候选命中白名单</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> blacklistHit;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<ul>
<li>_checkEntryMatch 过程</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">_checkEntryMatch(keyword, location, typeMask, docDomain, thirdParty, sitekey, specificOnly) &#123;</span><br><span class="line">          <span class="comment">//获取关键字对应的过滤器列表</span></span><br><span class="line">          <span class="keyword">let</span> list = <span class="keyword">this</span>.filterByKeyword.get(keyword);</span><br><span class="line">          <span class="keyword">if</span> (<span class="keyword">typeof</span> list == <span class="string">"undefined"</span>) &#123; <span class="keyword">return</span> <span class="literal">null</span>; &#125;</span><br><span class="line">          <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; list.length; i++) &#123;</span><br><span class="line">            <span class="keyword">let</span> filter = list[i];</span><br><span class="line">            <span class="comment">// 属于css拓展规则，而该过滤器匹配通用规则且不在白名单（例外规则过滤器）中，则跳过</span></span><br><span class="line">            <span class="keyword">if</span> (specificOnly &amp;&amp; filter.isGeneric() &amp;&amp;</span><br><span class="line">              !(filter <span class="keyword">instanceof</span> WhitelistFilter))</span><br><span class="line">              <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (filter.matches(location, typeMask, docDomain, thirdParty, sitekey))</span><br><span class="line">              <span class="keyword">return</span> filter;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;,</span><br></pre></td></tr></table></figure>

<ul>
<li>过滤器匹配</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Tests whether the URL matches this filter</span></span><br><span class="line"><span class="comment">         * URL是否匹配该过滤器</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param <span class="type">&#123;string&#125;</span> </span>location URL to be tested</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param <span class="type">&#123;number&#125;</span> </span>typeMask bitmask of content / request types to match</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param <span class="type">&#123;string&#125;</span> </span>[docDomain] domain name of the document that loads the URL</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param <span class="type">&#123;boolean&#125;</span> </span>[thirdParty] should be true if the URL is a third-party</span></span><br><span class="line"><span class="comment">         *                               request</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param <span class="type">&#123;string&#125;</span> </span>[sitekey] public key provided by the document</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@return <span class="type">&#123;boolean&#125;</span> </span>true in case of a match</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        matches(location, typeMask, docDomain, thirdParty, sitekey) &#123;</span><br><span class="line">          <span class="keyword">if</span> (<span class="keyword">this</span>.contentType &amp; typeMask &amp;&amp;</span><br><span class="line">            (<span class="keyword">this</span>.thirdParty == <span class="literal">null</span> || <span class="keyword">this</span>.thirdParty == thirdParty) &amp;&amp;</span><br><span class="line">            <span class="keyword">this</span>.isActiveOnDomain(docDomain, sitekey) &amp;&amp; <span class="keyword">this</span>.regexp.test(location)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>关键字添加过滤器过程</li>
</ul>
<blockquote>
<p>下载规则库，url分析，初始化</p>
</blockquote>
<p>未完待续…</p>
]]></content>
      <categories>
        <category>大前端</category>
      </categories>
  </entry>
  <entry>
    <title>前端实现相对路径转绝对路径的几种方法</title>
    <url>/2018/08/16/2018Q3/js_%E7%9B%B8%E5%AF%B9%E8%B7%AF%E5%BE%84%E8%BD%AC%E7%BB%9D%E5%AF%B9%E8%B7%AF%E5%BE%84/</url>
    <content><![CDATA[<h2 id="1-使用a标签"><a href="#1-使用a标签" class="headerlink" title="1.使用a标签"></a>1.使用a标签</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getAbsoluteUrlByA</span> (<span class="params">url</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="built_in">document</span>.createElement(<span class="string">"a"</span>)</span><br><span class="line">  a.href = url</span><br><span class="line">  a.href = a.href <span class="comment">//ie8的问题</span></span><br><span class="line">  <span class="keyword">return</span> a.href</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<p>注：node.js 不适用</p>
<h2 id="2-数组处理"><a href="#2-数组处理" class="headerlink" title="2.数组处理"></a>2.数组处理</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getAbsoluteUrl</span>(<span class="params">url</span>) </span>&#123;</span><br><span class="line">  url = url.replace(<span class="regexp">/&amp;amp;|&amp;#38;/g</span>, <span class="string">"&amp;"</span>);</span><br><span class="line">  <span class="keyword">if</span> (url.startsWith(<span class="string">"http"</span>) || url.startsWith(<span class="string">"javascript:"</span>) || url === <span class="string">"about:blank"</span>) <span class="keyword">return</span> url;</span><br><span class="line">  <span class="keyword">if</span> (url.startsWith(<span class="string">"//"</span>)) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">window</span>.location.protocol + url</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> stack = <span class="built_in">window</span>.location.href.split(<span class="string">"/"</span>);</span><br><span class="line">  stack.pop()</span><br><span class="line">  <span class="keyword">var</span> parts = url.split(<span class="string">"/"</span>)</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; parts.length; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (parts[i] == <span class="string">"."</span>)</span><br><span class="line">          <span class="keyword">continue</span>;</span><br><span class="line">      <span class="keyword">if</span> (parts[i] == <span class="string">".."</span>)</span><br><span class="line">          stack.pop();</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">          stack.push(parts[i]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> stack.join(<span class="string">"/"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>参考<a href="https://stackoverflow.com/questions/14780350/convert-relative-path-to-absolute-using-javascript" target="_blank" rel="noopener">stackoverflow</a></p>
<h2 id="3-正则字符替换"><a href="#3-正则字符替换" class="headerlink" title="3.正则字符替换"></a>3.正则字符替换</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">relPathToAbs</span> (<span class="params">sRelPath</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> nUpLn, sDir = <span class="string">""</span>, sPath = location.pathname.replace(<span class="regexp">/[^\/]*$/</span>, sRelPath.replace(<span class="regexp">/(\/|^)(?:\.?\/+)+/g</span>, <span class="string">"$1"</span>));</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> nEnd, nStart = <span class="number">0</span>; nEnd = sPath.indexOf(<span class="string">"/../"</span>, nStart), nEnd &gt; <span class="number">-1</span>; nStart = nEnd + nUpLn) &#123;</span><br><span class="line">    nUpLn = <span class="regexp">/^\/(?:\.\.\/)*/</span>.exec(sPath.slice(nEnd))[<span class="number">0</span>].length;</span><br><span class="line">    sDir = (sDir + sPath.substring(nStart, nEnd)).replace(<span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"(?:\\\/+[^\\\/]*)&#123;0,"</span> + ((nUpLn - <span class="number">1</span>) / <span class="number">3</span>) + <span class="string">"&#125;$"</span>), <span class="string">"/"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> sDir + sPath.substr(nStart);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>转自<a href="https://developer.mozilla.org/en-US/docs/Web/API/document/cookie#Using_relative_URLs_in_the_path_parameter" target="_blank" rel="noopener">MDN</a></p>
<h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>测试多次,总体速度相近，第二种可能会快一点点</p>
]]></content>
      <categories>
        <category>大前端</category>
      </categories>
  </entry>
  <entry>
    <title>如何实现 script 并行异步加载顺序执行</title>
    <url>/2018/08/10/2018Q3/js%E5%BC%82%E6%AD%A5%E5%8A%A0%E8%BD%BD%E9%A1%BA%E5%BA%8F%E6%89%A7%E8%A1%8C/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>前端优化有个原则，叫资源懒加载。</p>
<p>对于某些js资源，我们在页面load前并不需要用到，加载反而会影响到首屏速度。</p>
<p>把这些js放到 load 后进行加载，我们称之为js异步加载。</p>
<a id="more"></a>

<h1 id="异步加载的手段"><a href="#异步加载的手段" class="headerlink" title="异步加载的手段"></a>异步加载的手段</h1><h2 id="1-最简单的做法：Script-Dom"><a href="#1-最简单的做法：Script-Dom" class="headerlink" title="1. 最简单的做法：Script Dom"></a>1. 最简单的做法：Script Dom</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> script = <span class="built_in">document</span>.createElement(<span class="string">"script"</span>)</span><br><span class="line">script.src=<span class="string">"xxx.js"</span></span><br><span class="line"><span class="built_in">document</span>.head.appendChild(script)</span><br></pre></td></tr></table></figure>
<p>多个js我们进行循环即可</p>
<h3 id="存在的问题："><a href="#存在的问题：" class="headerlink" title="存在的问题："></a>存在的问题：</h3><ol>
<li>大部分浏览器不会顺序执行script,(firefox、opera某些版本可以)，对于有依赖的脚本会出现各种未定义错误和逻辑错误</li>
</ol>
<h2 id="2-script-onload后再发起请求，按序下载-执行"><a href="#2-script-onload后再发起请求，按序下载-执行" class="headerlink" title="2. script onload后再发起请求，按序下载-执行"></a>2. script onload后再发起请求，按序下载-执行</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 顺序下载和执行</span></span><br><span class="line">AsyncLoad.sync = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 加载js并放入执行队列中</span></span><br><span class="line"><span class="comment">   * </span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param <span class="type">&#123;string&#125;</span> </span>url </span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param <span class="type">&#123;string&#125;</span> </span>[type="normal"] script类型，normal为普通js此外还有async、defer</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param <span class="type">&#123;function&#125;</span> </span>callback </span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">var</span> normalQueue = []</span><br><span class="line">  <span class="keyword">var</span> deferQueue = []</span><br><span class="line">  <span class="keyword">var</span> processedNum = <span class="number">0</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">loadScript</span>(<span class="params">url, type, callback</span>) </span>&#123;</span><br><span class="line">    type = type || <span class="string">'normal'</span></span><br><span class="line">    <span class="keyword">switch</span> (type) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">'defer'</span>:</span><br><span class="line">        <span class="keyword">var</span> dqId = deferQueue.length</span><br><span class="line">        <span class="comment">//cached: &lt;object&gt;缓存成功 done: 是否执行script成功</span></span><br><span class="line">        deferQueue[dqId] = &#123; <span class="attr">url</span>: url, <span class="attr">cached</span>: <span class="literal">false</span>, <span class="attr">done</span>: <span class="literal">false</span>, <span class="attr">onload</span>: callback &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">'async'</span>:</span><br><span class="line">        <span class="keyword">var</span> script = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>)</span><br><span class="line">        script.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">          <span class="keyword">if</span> (callback) &#123;</span><br><span class="line">            callback();</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        script.src = url</span><br><span class="line">        <span class="built_in">document</span>.head.appendChild(script)</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">var</span> nqId = normalQueue.length</span><br><span class="line">        normalQueue[nqId] = &#123; <span class="attr">url</span>: url, <span class="attr">cached</span>: <span class="literal">false</span>, <span class="attr">done</span>: <span class="literal">false</span>, <span class="attr">onload</span>: callback &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//顺序执行</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">processScripts</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (deferQueue.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      normalQueue = normalQueue.concat(deferQueue)</span><br><span class="line">      deferQueue = []</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 遇到有src的就中断执行</span></span><br><span class="line">    <span class="keyword">if</span> (processedNum &lt; normalQueue.length) &#123;</span><br><span class="line">      <span class="keyword">var</span> head = <span class="built_in">document</span>.head;</span><br><span class="line">      <span class="keyword">var</span> newScript = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>);</span><br><span class="line">      newScript.type = <span class="string">'text/javascript'</span>;</span><br><span class="line">      newScript.src = normalQueue[processedNum].url;</span><br><span class="line">      newScript.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        processScripts();</span><br><span class="line">      &#125;</span><br><span class="line">      newScript.onerror=newScript.onload</span><br><span class="line">      processedNum++;</span><br><span class="line">      head.appendChild(newScript);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    loadScript: loadScript,</span><br><span class="line">    processScripts: processScripts</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure>

<p>用法(后面的方法就把 sync 换成各自方法名)：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> AL = AsyncLoad.sync</span><br><span class="line">AL.loadScript(<span class="string">'./js/d.js'</span>, <span class="string">'defer'</span>, () =&gt; <span class="built_in">console</span>.log(<span class="string">"defer 1 加载完毕"</span>))</span><br><span class="line">AL.loadScript(<span class="string">'./js/a.js'</span>, <span class="string">'normal'</span>, () =&gt; <span class="built_in">console</span>.log(<span class="string">"a.js加载完毕"</span>))</span><br><span class="line">AL.loadScript(<span class="string">'./js/b.js'</span>, <span class="string">''</span>, () =&gt; <span class="built_in">console</span>.log(<span class="string">"async 1 加载完毕"</span>))</span><br></pre></td></tr></table></figure>
<h3 id="存在的问题：-1"><a href="#存在的问题：-1" class="headerlink" title="存在的问题："></a>存在的问题：</h3><ol>
<li>与浏览器页面解析时的并发下载顺序执行逻辑不同，不能充分利用IO/CPU的并行操作，耗时会较久。且当出现某个资源请求较久时会影响会更严重。</li>
</ol>
<h2 id="3-XHR-eval"><a href="#3-XHR-eval" class="headerlink" title="3. XHR+eval"></a>3. XHR+eval</h2><p>利用ajax请求js数据，保存响应内容，并按序eval。可以做到并行下载，按序执行</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">AsyncLoad.xhr = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> queuedScripts = []</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">loadScript</span>(<span class="params">url, type, onload</span>) </span>&#123;</span><br><span class="line">    type = type || <span class="string">'normal'</span></span><br><span class="line">    <span class="keyword">var</span> iQ = queuedScripts.length;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果需要按顺序执行，并将脚本对象放入数组</span></span><br><span class="line">    <span class="keyword">if</span> (type !== <span class="string">'async'</span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> qScript = &#123; <span class="attr">response</span>: <span class="literal">null</span>, <span class="attr">onload</span>: onload, <span class="attr">done</span>: <span class="literal">false</span> &#125;;</span><br><span class="line">      queuedScripts[iQ] = qScript;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//调用AJAX</span></span><br><span class="line">    <span class="keyword">var</span> xhrObj = getXHRObject();</span><br><span class="line">    xhrObj.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (xhrObj.readyState == <span class="number">4</span>) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (type !== <span class="string">'async'</span>) &#123;</span><br><span class="line">          queuedScripts[iQ].response = xhrObj.responseText;</span><br><span class="line">          injectScripts();</span><br><span class="line"></span><br><span class="line">          <span class="comment">//如果不需要按顺序执行，即立即加载脚本</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="built_in">eval</span>(xhrObj.responseText);</span><br><span class="line">          <span class="keyword">if</span> (onload) &#123;</span><br><span class="line">            onload();</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    xhrObj.open(<span class="string">'GET'</span>, url, <span class="literal">true</span>);</span><br><span class="line">    xhrObj.send(<span class="string">''</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">injectScripts</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> len = queuedScripts.length;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">      <span class="keyword">var</span> qScript = queuedScripts[i];</span><br><span class="line"></span><br><span class="line">      <span class="comment">//已加载的脚本</span></span><br><span class="line">      <span class="keyword">if</span> (!qScript.done) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果响应未返回 立即停止</span></span><br><span class="line">        <span class="keyword">if</span> (!qScript.response) &#123;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">          <span class="comment">//执行脚本</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="built_in">eval</span>(qScript.response);</span><br><span class="line">          <span class="keyword">if</span> (qScript.onload) &#123;</span><br><span class="line">            qScript.onload();</span><br><span class="line">          &#125;</span><br><span class="line">          qScript.done = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//AJAX对象</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">getXHRObject</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> xhrObj = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      xhrObj = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">      <span class="keyword">var</span> aTypes = [<span class="string">"Msxm12.XMLHTTP6.0"</span>,</span><br><span class="line">        <span class="string">"Msxm12.XMLHTTP3.0"</span>,</span><br><span class="line">        <span class="string">"Msxm12.XMLHTTP"</span>,</span><br><span class="line">        <span class="string">"Microsoft.XMLHTTP"</span>];</span><br><span class="line">      <span class="keyword">var</span> len = aTypes.length;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          xhrObj = <span class="keyword">new</span> ActiveXObject(aTypes[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">          <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">finally</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> xhrObj;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    loadScript: loadScript,</span><br><span class="line">    processScripts:<span class="function"><span class="params">()</span>=&gt;</span>&#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure>


<h3 id="存在的问题：-2"><a href="#存在的问题：-2" class="headerlink" title="存在的问题："></a>存在的问题：</h3><ol>
<li>跨域问题</li>
</ol>
<h2 id="4-object-tag-预加载资源，script-onload-按序下载-命中缓存-执行"><a href="#4-object-tag-预加载资源，script-onload-按序下载-命中缓存-执行" class="headerlink" title="4. object tag 预加载资源，script onload 按序下载(命中缓存)-执行"></a>4. object tag 预加载资源，script onload 按序下载(命中缓存)-执行</h2><p><a href="https://github.com/stevesouders/controljs/blob/master/control.js" target="_blank" rel="noopener">contorl.js二次命中缓存实现并行下载顺序执行，但是它通过setTimeout查询是否执行完毕，比我的实现差点</a></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">AsyncLoad.object = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 加载js并放入执行队列中</span></span><br><span class="line"><span class="comment">   * </span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param <span class="type">&#123;string&#125;</span> </span>url </span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param <span class="type">&#123;string&#125;</span> </span>[type="normal"] script类型，normal为普通js此外还有async、defer</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param <span class="type">&#123;function&#125;</span> </span>callback </span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">var</span> normalQueue = []</span><br><span class="line">  <span class="keyword">var</span> deferQueue = []</span><br><span class="line">  <span class="keyword">var</span> isExecuting = <span class="literal">false</span> <span class="comment">//dom插入script到script执行完毕这段过程 取值为true</span></span><br><span class="line">  <span class="keyword">var</span> waitNum = <span class="number">0</span> <span class="comment">// 待执行injectScripts的个数</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">loadScript</span>(<span class="params">url, type, callback</span>) </span>&#123;</span><br><span class="line">    type = type || <span class="string">'normal'</span></span><br><span class="line">    <span class="keyword">switch</span> (type) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">'defer'</span>:</span><br><span class="line">        <span class="keyword">var</span> dqId = deferQueue.length</span><br><span class="line">        <span class="comment">//cached: &lt;object&gt;缓存成功 done: 是否执行script成功</span></span><br><span class="line">        deferQueue[dqId] = &#123; <span class="attr">url</span>: url, <span class="attr">cached</span>: <span class="literal">false</span>, <span class="attr">done</span>: <span class="literal">false</span>, <span class="attr">onload</span>: callback &#125;</span><br><span class="line">        preload(deferQueue[dqId])</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">'async'</span>:</span><br><span class="line">        <span class="keyword">var</span> script = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>)</span><br><span class="line">        script.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">          <span class="keyword">if</span> (callback) &#123;</span><br><span class="line">            callback();</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        script.src = url</span><br><span class="line">        <span class="built_in">document</span>.head.appendChild(script)</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">var</span> nqId = normalQueue.length</span><br><span class="line">        normalQueue[nqId] = &#123; <span class="attr">url</span>: url, <span class="attr">cached</span>: <span class="literal">false</span>, <span class="attr">done</span>: <span class="literal">false</span>, <span class="attr">onload</span>: callback &#125;</span><br><span class="line">        preload(normalQueue[nqId])</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * </span></span><br><span class="line"><span class="comment">   * </span></span><br><span class="line"><span class="comment">   * </span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param <span class="type">&#123;any&#125;</span> </span>item 队列元素</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">preload</span>(<span class="params">item</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//chrome会出现Resource interpreted as Document but transferred with MIME type application/javascript警告</span></span><br><span class="line">    <span class="keyword">var</span> obj = <span class="built_in">document</span>.createElement(<span class="string">'object'</span>);</span><br><span class="line">    <span class="comment">// console.log(item.url, 'preload...')</span></span><br><span class="line">    obj.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="comment">// console.log(item.url, 'object cached...', isExecuting, waitNum)</span></span><br><span class="line">      <span class="comment">//触发script标签插入</span></span><br><span class="line">      item.cached = <span class="literal">true</span></span><br><span class="line">      obj.onload = <span class="literal">null</span></span><br><span class="line">      <span class="keyword">if</span> (isExecuting) &#123;</span><br><span class="line">        waitNum++</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        waitNum += injectScripts()</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    obj.onerrot = obj.onload</span><br><span class="line">    obj.data = item.url</span><br><span class="line">    obj.width = <span class="number">1</span>;</span><br><span class="line">    obj.height = <span class="number">1</span>;</span><br><span class="line">    obj.style.visibility = <span class="string">"hidden"</span>;</span><br><span class="line">    obj.type = <span class="string">"text/plain"</span>;</span><br><span class="line">    <span class="built_in">document</span>.body.appendChild(obj)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">injectScripts</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (deferQueue.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      normalQueue = normalQueue.concat(deferQueue)</span><br><span class="line">      deferQueue = []</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> num = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; normalQueue.length; i++) &#123;</span><br><span class="line">      <span class="keyword">var</span> normal = normalQueue[i];</span><br><span class="line">      <span class="keyword">if</span> (!normal.done) &#123;</span><br><span class="line">        <span class="keyword">if</span> (normal.cached) &#123;</span><br><span class="line">          num = <span class="number">0</span></span><br><span class="line">          syncExcuteScript(normal)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> num</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">syncExcuteScript</span>(<span class="params">item</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// console.log(item.url, 'pre insertScript...', isExecuting, waitNum)</span></span><br><span class="line">    isExecuting = <span class="literal">true</span></span><br><span class="line">    <span class="keyword">var</span> script = <span class="built_in">document</span>.createElement(<span class="string">"script"</span>)</span><br><span class="line">    script.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      isExecuting = <span class="literal">false</span></span><br><span class="line">      <span class="comment">// console.log(item.url, 'completed', isExecuting, waitNum)</span></span><br><span class="line">      script.onload = <span class="literal">null</span></span><br><span class="line">      item.done = <span class="literal">true</span></span><br><span class="line">      <span class="keyword">if</span> (item.onload) &#123;</span><br><span class="line">        item.onload();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (waitNum) &#123;</span><br><span class="line">        waitNum--</span><br><span class="line">        waitNum += injectScripts()</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    script.onerror = script.onload</span><br><span class="line">    script.src = item.url</span><br><span class="line">    <span class="built_in">document</span>.head.appendChild(script)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    loadScript: loadScript,</span><br><span class="line">    processScripts:<span class="function"><span class="params">()</span>=&gt;</span>&#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure>
<h3 id="存在的问题：-3"><a href="#存在的问题：-3" class="headerlink" title="存在的问题："></a>存在的问题：</h3><ol>
<li>创建<code>&lt;object/&gt;</code>后，需要插入文档才会发起请求（dom操作耗时），浏览器还会构建一个blob对象（挺耗时的），且即使命中本地缓存也有些许耗时，总体并没有方法2 顺序下载执行来的快</li>
<li>不论是否有缓存，都会发起两次请求，当js全被缓存的时候，该做法比方法2慢的多</li>
</ol>
<h2 id="5-new-Image-src-预加载资源，script-onload-按序下载-命中缓存-执行"><a href="#5-new-Image-src-预加载资源，script-onload-按序下载-命中缓存-执行" class="headerlink" title="5. new Image().src 预加载资源，script onload 按序下载(命中缓存)-执行"></a>5. new Image().src 预加载资源，script onload 按序下载(命中缓存)-执行</h2><p>相比object tag的一个好处是不需要进行dom操作，不用构建blob对象，总体速度比前几种方法都快</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">AsyncLoad.img = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 加载js并放入执行队列中</span></span><br><span class="line"><span class="comment">   * </span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param <span class="type">&#123;string&#125;</span> </span>url </span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param <span class="type">&#123;string&#125;</span> </span>[type="normal"] script类型，normal为普通js此外还有async、defer</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param <span class="type">&#123;function&#125;</span> </span>callback </span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">var</span> normalQueue = []</span><br><span class="line">  <span class="keyword">var</span> deferQueue = []</span><br><span class="line">  <span class="keyword">var</span> isExecuting = <span class="literal">false</span> <span class="comment">//dom插入script到script执行完毕这段过程 取值为true</span></span><br><span class="line">  <span class="keyword">var</span> waitNum = <span class="number">0</span> <span class="comment">// 待执行injectScripts的个数</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">loadScript</span>(<span class="params">url, type, callback</span>) </span>&#123;</span><br><span class="line">    type = type || <span class="string">'normal'</span></span><br><span class="line">    <span class="keyword">switch</span> (type) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">'defer'</span>:</span><br><span class="line">        <span class="keyword">var</span> dqId = deferQueue.length</span><br><span class="line">        <span class="comment">//cached: &lt;object&gt;缓存成功 done: 是否执行script成功</span></span><br><span class="line">        deferQueue[dqId] = &#123; <span class="attr">url</span>: url, <span class="attr">cached</span>: <span class="literal">false</span>, <span class="attr">done</span>: <span class="literal">false</span>, <span class="attr">onload</span>: callback &#125;</span><br><span class="line">        preload(deferQueue[dqId])</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">'async'</span>:</span><br><span class="line">        <span class="keyword">var</span> script = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>)</span><br><span class="line">        script.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">          <span class="keyword">if</span> (callback) &#123;</span><br><span class="line">            callback();</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        script.src = url</span><br><span class="line">        <span class="built_in">document</span>.head.appendChild(script)</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">var</span> nqId = normalQueue.length</span><br><span class="line">        normalQueue[nqId] = &#123; <span class="attr">url</span>: url, <span class="attr">cached</span>: <span class="literal">false</span>, <span class="attr">done</span>: <span class="literal">false</span>, <span class="attr">onload</span>: callback &#125;</span><br><span class="line">        preload(normalQueue[nqId])</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * </span></span><br><span class="line"><span class="comment">   * </span></span><br><span class="line"><span class="comment">   * </span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param <span class="type">&#123;any&#125;</span> </span>item 队列元素</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">preload</span>(<span class="params">item</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//chrome会出现Resource interpreted as Document but transferred with MIME type application/javascript警告</span></span><br><span class="line">    <span class="keyword">var</span> img = <span class="keyword">new</span> Image();</span><br><span class="line">    <span class="built_in">console</span>.log(item.url, <span class="string">'预加载'</span>)</span><br><span class="line">    img.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(item.url, <span class="string">'img cached 结束'</span>, isExecuting, waitNum)</span><br><span class="line">      <span class="comment">//触发script标签插入</span></span><br><span class="line">      item.cached = <span class="literal">true</span></span><br><span class="line">      img.onload = <span class="literal">null</span></span><br><span class="line">      <span class="keyword">if</span> (isExecuting) &#123;</span><br><span class="line">        waitNum++</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        waitNum += injectScripts()</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    img.onerror = img.onload</span><br><span class="line">    img.src = item.url</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">injectScripts</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (deferQueue.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'normalQueue.concat(deferQueue)'</span>,<span class="built_in">JSON</span>.stringify(deferQueue))</span><br><span class="line">      normalQueue = normalQueue.concat(deferQueue)</span><br><span class="line">      deferQueue = []</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> num = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; normalQueue.length; i++) &#123;</span><br><span class="line">      <span class="keyword">var</span> normal = normalQueue[i];</span><br><span class="line">      <span class="keyword">if</span> (!normal.done) &#123;</span><br><span class="line">        <span class="keyword">if</span> (normal.cached) &#123;</span><br><span class="line">          num = <span class="number">0</span></span><br><span class="line">          syncExcuteScript(normal)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> num</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">syncExcuteScript</span>(<span class="params">item</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(item.url, <span class="string">'预插入&lt;script&gt;'</span>, isExecuting, waitNum)</span><br><span class="line">    isExecuting = <span class="literal">true</span></span><br><span class="line">    <span class="keyword">var</span> script = <span class="built_in">document</span>.createElement(<span class="string">"script"</span>)</span><br><span class="line">    script.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      isExecuting = <span class="literal">false</span></span><br><span class="line">      <span class="built_in">console</span>.log(item.url, <span class="string">'js 执行完毕'</span>, isExecuting, waitNum)</span><br><span class="line">      script.onload = <span class="literal">null</span></span><br><span class="line">      item.done = <span class="literal">true</span></span><br><span class="line">      <span class="keyword">if</span> (item.onload) &#123;</span><br><span class="line">        item.onload();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (waitNum) &#123;</span><br><span class="line">        waitNum--</span><br><span class="line">        waitNum += injectScripts()</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    script.onerror = script.onload</span><br><span class="line">    script.src = item.url</span><br><span class="line">    <span class="built_in">document</span>.head.appendChild(script)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    loadScript: loadScript,</span><br><span class="line">    processScripts:<span class="function"><span class="params">()</span>=&gt;</span>&#123;<span class="built_in">console</span>.log(normalQueue)&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure>
<h3 id="存在的问题：-4"><a href="#存在的问题：-4" class="headerlink" title="存在的问题："></a>存在的问题：</h3><ol>
<li>不论是否有缓存，都会发起两次请求（尽管第二次是命中本地缓存），当js全被缓存的时候，该做法比方法2稍慢；</li>
<li>浏览器设置禁用缓存时该方案更慢</li>
<li><del>出现过img请求某些js时响应不完整，导致第二次请求不走缓存仍是完整请求 （留个坑，具体原因待分析）</del> <blockquote>
<p>第二次其实不是完整请求，响应码为206表示返回部分内容，应该是和第一次请求进行合并处理。具体技术细节还不清楚，但目前来看走的流量并不会多。</p>
</blockquote>
</li>
</ol>
<h4 id="补充："><a href="#补充：" class="headerlink" title="补充："></a><strong>补充：</strong></h4><blockquote>
<p>浏览器开发者工具开启 <strong>Disable cache</strong>后，任何请求都不会走本地强缓存，但是会走304协商缓存（强制刷新除外）<br>未开启<strong>Disable cache</strong>的状态下，ctrl+F5强制刷新，对于<code>page load</code>前的请求，都是不走缓存(强缓存和协商缓存<code>cache-control:no-cache</code>)的，但是<code>page load</code>后的请求不受限制可以走缓存</p>
</blockquote>
<h2 id="6-最终方案"><a href="#6-最终方案" class="headerlink" title="6. 最终方案"></a>6. 最终方案</h2><h3 id="LABjs-v3-0的方案："><a href="#LABjs-v3-0的方案：" class="headerlink" title="LABjs v3.0的方案："></a><strong>LABjs v3.0</strong>的方案：</h3><ol>
<li>对于支持<code>&lt;link rel=&quot;preload&quot; href=&quot;xxx.js&quot; as=&quot;script&quot;&gt;</code>的浏览器【chrome50+、safari 11+】，则用preload进行预加载（请求会复用，不用担心与script.src同时发起会发两个请求），只要支持就加上</li>
<li>对于支持async的，即<code>document.createElement(&quot;script&quot;).async === true</code>【IE&gt;=10 ,其他浏览器大部分版本】,在方案1的基础上设置一个<code>script.async=false</code>即可</li>
<li>对于其他浏览器，采用方案2做法</li>
</ol>
<p>PS: preload 和 prefetch 的区别可以参考：<a href="https://www.w3cplus.com/performance/reloading/preload-prefetch-and-priorities-in-chrome.html" target="_blank" rel="noopener">Preload，Prefetch 和它们在 Chrome 之中的优先级</a></p>
<p>PS2: <strong>preload预加载后，插入script节点不会发起请求，不是命中本地缓存的方式（200 from cache）。也就是说即使禁用缓存，后续也不会进行重复请求！</strong></p>
<h3 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h3><p>正常来说，<code>async=false</code>即可解决大部分浏览器，剩下的就是IE9版本及以下，以及其他浏览器的某些版本</p>
<p>本方案会利用IE的特性优化方案2做法，实现并行下载按序执行：IE系列 设置script.src 后即发起请求，插入dom才执行</p>
<p>对于不支持<code>async属性</code>、<code>async=false</code>不会按序执行的(如Safari 5.0)，则利用方案5做法。</p>
<p>从产品层面考虑，若担心方案5用户禁用缓存导致的双倍流量，则采用xhr预加载同域js eval+方案2。</p>
<h1 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h1><ol>
<li><a href="https://www.cnblogs.com/Darlietoothpaste/p/6518631.html" target="_blank" rel="noopener">异步加载脚本保持执行顺序</a></li>
<li><a href="https://www.html5rocks.com/en/tutorials/speed/script-loading/" target="_blank" rel="noopener">Deep dive into the murky waters of script loading</a></li>
<li><a href="https://github.com/getify/LABjs/tree/v3.0" target="_blank" rel="noopener">github LABjs3.0源码</a></li>
</ol>
]]></content>
      <categories>
        <category>大前端</category>
      </categories>
      <tags>
        <tag>前端优化</tag>
      </tags>
  </entry>
  <entry>
    <title>浅谈图片分层加载与懒加载</title>
    <url>/2018/07/18/2018Q3/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB-%E5%9B%BE%E7%89%87%E5%88%86%E5%B1%82%E5%8A%A0%E8%BD%BD%E4%B8%8E%E6%87%92%E5%8A%A0%E8%BD%BD/</url>
    <content><![CDATA[<h1 id="技术介绍"><a href="#技术介绍" class="headerlink" title="技术介绍"></a>技术介绍</h1><h2 id="一、-图片懒加载"><a href="#一、-图片懒加载" class="headerlink" title="一、 图片懒加载"></a>一、 图片懒加载</h2><p>按需加载，即用户滚动页面到一定位置（可视区域）时才触发图片的加载；</p>
<p>常用于图片较多的网页，可以延迟网络请求，页面更快load</p>
<a id="more"></a>
<h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><p><a href="https://www.jd.com/" target="_blank" rel="noopener">京东首页效果</a></p>
<h3 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h3><ol>
<li><code>&lt;img&gt;</code>节点不使用src属性，将图片地址放在其他自定义属性上</li>
<li>当页面滚动到一定位置，将自定义属性上的图片地址赋值给src</li>
</ol>
<p>主要有两种方案</p>
<h4 id="IntersectionObserver"><a href="#IntersectionObserver" class="headerlink" title="IntersectionObserver"></a>IntersectionObserver</h4><p>一个用于判断 dom 节点是否处于视口的API</p>
<p><img src="https://images2015.cnblogs.com/blog/604527/201610/604527-20161021180737935-494667792.gif"></img><br>      <em>(引用网上图片)</em></p>
<p>  <strong>简单代码：</strong><br>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> intersectionObserver = <span class="keyword">new</span> IntersectionObserver(<span class="function"><span class="keyword">function</span>(<span class="params">entries</span>) </span>&#123;</span><br><span class="line">  entries.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">entry</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//intersectionRatio：该元素的可见性比例</span></span><br><span class="line">    <span class="keyword">if</span> (entry.intersectionRatio &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="comment">//对其dom节点（entry.target）进行下一步操作</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;,&#123;</span><br><span class="line">  <span class="comment">// 用于计算相交区域的根元素，默认document顶层文档的视口</span></span><br><span class="line">  root：<span class="literal">null</span>,</span><br><span class="line">  <span class="comment">// 指定到root的距离，用于扩大或缩小交叉区域面积,一般用于提前/延迟懒加载</span></span><br><span class="line">  <span class="comment">// 与margin一样跨域用4个值，允许负值</span></span><br><span class="line">  <span class="comment">// 显示指定root时才可使用百分比值</span></span><br><span class="line">  rootMargin:<span class="string">"0px"</span>,</span><br><span class="line">  <span class="comment">// 触发回调函数的临界值，用 0 ~ 1 的比率指定，也可以是一个数组。</span></span><br><span class="line">  <span class="comment">// 其值是被观测元素可视面积 / 总面积</span></span><br><span class="line">  <span class="comment">// 当可视比率经过这个值的时候，回调函数就会被调用。</span></span><br><span class="line">  thresholds:[<span class="number">0</span>]</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">document</span>.querySelectorAll(<span class="string">'img'</span>).forEach(<span class="function"><span class="params">v</span>=&gt;</span>intersectionObserver.observe(v))</span><br></pre></td></tr></table></figure><br>  兼容性：<a href="https://caniuse.com/#search=intersectionObserver" target="_blank" rel="noopener">较差，caniuse</a></p>
<h4 id="scroll-requestAnimationFrame-getBoundingClientRect"><a href="#scroll-requestAnimationFrame-getBoundingClientRect" class="headerlink" title="scroll+requestAnimationFrame+getBoundingClientRect"></a>scroll+requestAnimationFrame+getBoundingClientRect</h4><p>监听窗口滚动和大小变化事件，利用 requestAnimationFrame 进行节流</p>
<p>判断元素是否在视区中代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">inViewport</span>(<span class="params">node</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//文档滚动距离</span></span><br><span class="line">  <span class="keyword">var</span> viewTop = getScrollY()</span><br><span class="line">  <span class="keyword">var</span> viewBot = viewTop + windowHeight</span><br><span class="line">  <span class="comment">//节点距离文档顶部的距离</span></span><br><span class="line">  <span class="keyword">var</span> nodeTop = getNodeTop(node)</span><br><span class="line">  <span class="keyword">var</span> nodeBot = nodeTop + getNodeOffsetHeight(wsnode)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> offset = (settings.lazyLoadStrategy.threshold / <span class="number">100</span>) * windowHeight</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (nodeBot &gt;= viewTop - offset) &amp;&amp; (nodeTop &lt;= viewBot + offset)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>兼容性：IE7+测试通过</p>
<h2 id="二、-分层加载"><a href="#二、-分层加载" class="headerlink" title="二、 分层加载"></a>二、 分层加载</h2><p>先显示一张模糊的图片，后面再换成原图</p>
<h3 id="效果-1"><a href="#效果-1" class="headerlink" title="效果"></a>效果</h3><p><a href="https://www.zhihu.com/question/20958648/answer/74805876" target="_blank" rel="noopener">知乎（为观察测试效果请限制带宽）</a></p>
<h3 id="实现原理-1"><a href="#实现原理-1" class="headerlink" title="实现原理"></a>实现原理</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">"img"</span> <span class="attr">src</span>=<span class="string">"small.jpg"</span> <span class="attr">data-original</span>=<span class="string">"big.jpg"</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> smallImage = <span class="built_in">document</span>.getElementById(<span class="string">'img'</span>)</span><br><span class="line"><span class="keyword">let</span> imgLarge = <span class="keyword">new</span> Image();</span><br><span class="line">imgLarge.src = smallImage.getAttribute(<span class="string">"data-original"</span>)</span><br><span class="line">imgLarge.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  smallImage.src = imgLarge.src</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="3-懒加载-分层加载"><a href="#3-懒加载-分层加载" class="headerlink" title="3. 懒加载+分层加载"></a>3. 懒加载+分层加载</h2><p><code>&lt;img src=&quot;small.jpg&quot;&gt;</code></p>
<p>然后按懒加载的做法，在图片节点进入视区时，进行src的替换</p>
<h1 id="技术架构"><a href="#技术架构" class="headerlink" title="技术架构"></a>技术架构</h1><h2 id="时序图"><a href="#时序图" class="headerlink" title="时序图"></a>时序图</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sequenceDiagram</span><br><span class="line">participant 浏览器</span><br><span class="line">participant 代理服务器</span><br><span class="line">participant 源站</span><br><span class="line">浏览器 -&gt;&gt; 代理服务器:请求模糊图</span><br><span class="line">Note right of 代理服务器:没有缓存，请求源站</span><br><span class="line">代理服务器 -&gt;&gt; 源站:请求原始图像资源</span><br><span class="line">Note right of 代理服务器:缓存图像</span><br><span class="line">代理服务器 -&gt;&gt; 代理服务器:图像模糊化</span><br><span class="line">代理服务器 --&gt;&gt; 浏览器:返回模糊图</span><br><span class="line">Note right of 浏览器:dom解析完毕&lt;br&#x2F;&gt;扫描文档</span><br><span class="line">浏览器 -&gt;&gt; 代理服务器:请求图片质量标识wsq对应图像</span><br><span class="line">代理服务器 -&gt;&gt; 代理服务器:根据wsq对原图做相应的压缩</span><br><span class="line">代理服务器 --&gt;&gt;浏览器:返回wsq对应图片</span><br></pre></td></tr></table></figure>
<h2 id="总流程"><a href="#总流程" class="headerlink" title="总流程"></a>总流程</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">graph TB</span><br><span class="line">  st(开始)--&gt;init((初始化))</span><br><span class="line">  init--&gt;obs[添加DOMContentLoaded,Load事件监听器]</span><br><span class="line">  obs--&gt;DOMContentLoaded[DOMContentLoaded事件触发]</span><br><span class="line">  DOMContentLoaded--&gt;cal[利用html文档下载速度来进行简单测速]</span><br><span class="line">  cal--&gt;firstScreenPicSpeed[参照网速压缩比对照表得到首屏图片压缩比]</span><br><span class="line">  firstScreenPicSpeed--&gt;firstScreen((扫描文档,获取图片节点))</span><br><span class="line">  firstScreen--&gt;quicksort[按视距快排图片节点]</span><br><span class="line">  quicksort--&gt;judgeCache[任取一模糊图的name,通过transferSize是否为0来判断本次加载是否为无缓存加载]</span><br><span class="line">  judgeCache--&gt;firstScreenCal[获取视距处于首屏的图片节点]</span><br><span class="line">  firstScreenCal--&gt;oripicload((进行原图加载))</span><br><span class="line">  oripicload--&gt;load[Load事件触发]</span><br><span class="line">  load--&gt;speedtest[采用测速算法测速,得到相应图像压缩比]</span><br><span class="line">  speedtest--&gt;islazyLoad&#123;是否懒加载&#125;</span><br><span class="line">  islazyLoad--是--&gt;lazyload[启动懒加载策略]</span><br><span class="line">  islazyLoad--否--&gt;replaceOther[找到其他未进行原图加载的节点]</span><br><span class="line">  replaceOther--&gt;oripicload1((进行原图加载))</span><br><span class="line">  lazyload--&gt;islazycompleted&#123;懒加载完毕?&#125;</span><br><span class="line">  islazycompleted--是--&gt;ed(结束)</span><br><span class="line">  islazycompleted--否--&gt;scall&#123;是否进行窗口滚动&#125;</span><br><span class="line">  scall--是--&gt;debounceCul[节流处理,获取满足视距条件的未进行原图加载的节点]</span><br><span class="line">  debounceCul--&gt;oripicload2((进行原图加载))</span><br><span class="line">  oripicload2--&gt;islazycompleted</span><br><span class="line">  scall--否--&gt;mousetimeout&#123;鼠标事件10s未触发&#125;</span><br><span class="line">  mousetimeout--是--&gt;replaceOther</span><br><span class="line">  mousetimeout--否--&gt;scall</span><br><span class="line">  oripicload1--&gt;ed</span><br></pre></td></tr></table></figure>
<h2 id="初始化具体流程"><a href="#初始化具体流程" class="headerlink" title="初始化具体流程"></a>初始化具体流程</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">graph LR</span><br><span class="line">  init(初始化开始)--&gt;evalElement(解析script标签中自定义属性)</span><br><span class="line">  evalElement--&gt;getHost[获取可替换图片域名]</span><br><span class="line">  evalElement--&gt;getHashHost[获取散列域名]</span><br><span class="line">  evalElement--&gt;getLazy[获取懒加载策略]</span><br><span class="line">  evalElement--&gt;getSpeedZip[获取网速压缩比参照表]</span><br><span class="line">  evalElement--&gt;getTTL[获取图片缓存时间]</span><br><span class="line">  getHost--&gt;initStop(初始化结束)</span><br><span class="line">  getHashHost--&gt;initStop</span><br><span class="line">  getLazy--&gt;initStop</span><br><span class="line">  getSpeedZip--&gt;initStop</span><br><span class="line">  getTTL--&gt;initStop</span><br></pre></td></tr></table></figure>

<h2 id="原图加载具体流程"><a href="#原图加载具体流程" class="headerlink" title="原图加载具体流程"></a>原图加载具体流程</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">graph TB</span><br><span class="line">oripicstart(原图加载开始)--&gt;judgeEle&#123;判断节点类型&#125;</span><br><span class="line">judgeEle--picture节点--&gt;getpic[获取其子节点中source节点和img节点中src和srcset属性中的图片url]</span><br><span class="line">judgeEle--img节点--&gt;getsrcset[获取节点的src和srcset属性中的图片url]</span><br><span class="line">judgeEle--video节点--&gt;getposter[获取节点的poster属性中的图片url]</span><br><span class="line">judgeEle--其他节点--&gt;getother[获取节点background-image的图片url]</span><br><span class="line">getpic--&gt;getfinalurl((url替换))</span><br><span class="line"></span><br><span class="line">getsrcset--&gt;getfinalurl1((url替换))</span><br><span class="line">getposter--&gt;getfinalurl1((url替换))</span><br><span class="line">getother--&gt;getfinalurl1((url替换))</span><br><span class="line"></span><br><span class="line">getfinalurl1--&gt;newImg[new Image的方式加载资源,其url为替换后的url,可能需要设置srcset属性]</span><br><span class="line">newImg--&gt;onload[Image的onload触发]</span><br><span class="line">onload--&gt;updateEle</span><br><span class="line"></span><br><span class="line">getfinalurl-.-hashurl[将模糊图url地址通过一定算法映射到固定的散列域名,得到新的图片url-newUrl]</span><br><span class="line">hashurl--&gt;findstorage&#123;localstorage中是否有newUrl且压缩比一样或更低的记录&#125;</span><br><span class="line">findstorage--是--&gt;isExpired&#123;是否过期&#125;</span><br><span class="line">findstorage--否--&gt;carrycur</span><br><span class="line">isExpired--否--&gt;carryhigh[取未过期的压缩比最低的记录,newUrl后带上压缩比参数]</span><br><span class="line">isExpired--是--&gt;carrycur[图片url后带上当前的压缩比]</span><br><span class="line">carryhigh--&gt;replaceEnd(url替换完毕)</span><br><span class="line">carrycur--&gt;replaceEnd</span><br><span class="line">getfinalurl--&gt;updateEle[将节点属性的图片url进行替换]</span><br><span class="line">updateEle--&gt;updatelocal[更新localstorage]</span><br><span class="line">updatelocal--&gt;isnocache&#123;无缓存加载或localstorage中没有命中缓存?&#125;</span><br><span class="line">isnocache--否--&gt;oripicstop[原图加载完毕]</span><br><span class="line">isnocache--是--&gt;update[更新 url-压缩比-ttl 记录]</span><br><span class="line">update--&gt;oripicstop</span><br></pre></td></tr></table></figure>

<h2 id="扫描文档，获取图片节点具体流程"><a href="#扫描文档，获取图片节点具体流程" class="headerlink" title="扫描文档，获取图片节点具体流程"></a>扫描文档，获取图片节点具体流程</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">graph LR</span><br><span class="line">init(初始化节点列表)--&gt;scanOver&#123;文档扫描完毕?&#125;</span><br><span class="line">scanOver--否--&gt;scan[扫描文档]</span><br><span class="line">scan--&gt;getPicEle[获取picture节点]</span><br><span class="line">getPicEle--&gt;getchild[获取子节点的src和srcset中所有图片的url]</span><br><span class="line">getchild--&gt;ishost&#123;节点图片url的域名存在可替换图片域名?&#125;</span><br><span class="line">ishost--否--&gt;skip[跳过该节点]</span><br><span class="line">ishost--是--&gt;addList[节点列表加入该节点]</span><br><span class="line">scan--&gt;getImgEle[获取父节点非picture的img节点]</span><br><span class="line">getImgEle--&gt;getsrc[获取节点的src或srcset属性]</span><br><span class="line">getsrc--&gt;ishost</span><br><span class="line">scan--&gt;getstyleEle[获取style中含有background-image属性且值为图片url的节点]</span><br><span class="line">getstyleEle--&gt;ishost</span><br><span class="line">scan--&gt;getcss[扫描css文档,获取含有background-image属性且值为图片url的css规则]</span><br><span class="line">getcss--&gt;getcssDom[匹配css规则得到相应节点]</span><br><span class="line">getcssDom--&gt;ishost</span><br><span class="line">scan--&gt;getvideo[获取含poster属性且值为图片url的video节点]</span><br><span class="line">getvideo--&gt;ishost</span><br><span class="line">skip--&gt;scanOver</span><br><span class="line">addList--&gt;scanOver</span><br><span class="line">scanOver--是--&gt;scanEnd(节点获取完毕)</span><br></pre></td></tr></table></figure>

<h1 id="问题与解决"><a href="#问题与解决" class="headerlink" title="问题与解决"></a>问题与解决</h1><h2 id="1-响应式图片处理"><a href="#1-响应式图片处理" class="headerlink" title="1. 响应式图片处理"></a>1. 响应式图片处理</h2><ul>
<li><code>&lt;img&gt;</code>的 srcset 属性和 <del>css的image-set()</del></li>
<li><code>&lt;picture&gt;</code> source、img子节点</li>
</ul>
<p>(1) 拿到srcset值，并获取srcset中的图片地址列表<br>(2) 将图片地址变成带质量标识的地址<br>(3) 将处理过的图片地址列表替换为原来的srcset值</p>
<h2 id="2-带宽估算"><a href="#2-带宽估算" class="headerlink" title="2. 带宽估算"></a>2. 带宽估算</h2><p>利用 WebPerformanceApi 获取已加载资源的网络请求时间耗费</p>
<h3 id="算法流程"><a href="#算法流程" class="headerlink" title="算法流程"></a>算法流程</h3><ol start="0">
<li><p>数据结构体</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  name: v.name,<span class="comment">//标识而已</span></span><br><span class="line">  start: v.responseStart,</span><br><span class="line">  end: v.responseEnd,</span><br><span class="line">  size: v.transferSize,</span><br><span class="line">  <span class="comment">//KB/S 新算法中不用该参数</span></span><br><span class="line">  speed: v.transferSize / (v.responseEnd - v.responseStart || <span class="number">1</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>过滤、按start值升序排序</p>
<blockquote>
<p>剔除小数据,保留满足以下条件数据–》小数据会导致出现过大的网速计算结果，剔除小数据后对总体结果影响小，<br><code>v.transferSize &gt; 100 &amp;&amp; (v.responseEnd - v.responseStart) &gt; 10 &amp;&amp; v.responseStart &lt; loadTime</code></p>
</blockquote>
</li>
<li><p>分组，将响应时间无连续的分组</p>
</li>
<li><p>计算每组的每条响应的速度（具体计算见如下），并计算整组均值、方差、最大值</p>
<ul>
<li>3.1 将每条响应的start,end放入numArr</li>
<li>3.2 numArr去重，升序排序</li>
<li>3.3 将每条响应的时间区间按numArr值分割，当其他响应有重复的区间，该条响应的该时间区间会乘以重复的数量(包括自己)</li>
<li>3.4 将每段时间区间相加，形成该响应的实际响应时间，用size处于该时间则为该响应的实际速度</li>
<li>3.5 计算每条响应的速度</li>
</ul>
</li>
<li><p>根据size做加权平均，得到每组带宽估算值。</p>
</li>
<li><p>比较每组数据的结果，取最大值</p>
</li>
</ol>
<h2 id="3-多版本缓存命中策略"><a href="#3-多版本缓存命中策略" class="headerlink" title="3. 多版本缓存命中策略"></a>3. 多版本缓存命中策略</h2><p>Q: 带网络参数，不会命中原图已有本地缓存 </p>
<p>详细描述：本地已缓存高质量图片<code>a.jpg?q=80</code>，本地通过网络计算需要去请求低清图片<code>a.jpg?q=50</code>,这样就浪费了原来的原图缓存了。</p>
<p><strong>解法：引入localStorage的缓存控制策略</strong></p>
<p>不同比例图片load后，将<code>url-TTL-q</code>放到 localstorage 中。<br>每次网络计算完后，先查询缓存中有没有更高清的且未过期的图片，有的话选更高清的进行请求，不对localstorage做处理 ；<br>否则请求相应网络状态的图片，onload后保存或更新localstorage。</p>
<blockquote>
<p>注1：每种清晰度图片的TTL可配置，通过script节点自定义属性设置。</p>
</blockquote>
<p><strong>注意：强刷页面或者<code>disable cache</code>，请求图片得到响应后，<code>cache-control</code>本地缓存时间会重新计算。</strong></p>
<p>相应的我们localstorage的TTL也要进行修改</p>
<p>这边我们主要就是判断图片是否为无缓存请求，当为无缓存请求，img.onload后需要对localstorage进行更新。</p>
<p>至于怎么判断是否为无缓存，就用<code>performance.getEntriesByName(&#39;当前加载图片的url&#39;)</code>结果是否满足某些规则来判断</p>
<h3 id="transferSize-比-encodedBodySize-小的情况："><a href="#transferSize-比-encodedBodySize-小的情况：" class="headerlink" title="transferSize 比 encodedBodySize 小的情况："></a>transferSize 比 encodedBodySize 小的情况：</h3><blockquote>
<p> It is possible for transferSize value to be lower than encodedBodySize: when a cached response is successfully revalidated the transferSize reports the size of the response HTTP headers incurred during the revalidation, and encodedBodySize reports the size of the previously retrieved payload body.</p>
</blockquote>
<p>缓存生效，transferSize 为响应HTTP头的大小，而encodedBodySize 为先前检索到的有效内容主体的大小。</p>
<p>200 from cache. 且 transferSize 一般为0</p>
<h3 id="encodedBodySize-为0-的情况："><a href="#encodedBodySize-为0-的情况：" class="headerlink" title="encodedBodySize 为0 的情况："></a>encodedBodySize 为0 的情况：</h3><blockquote>
<p>The encodedBodySize may be zero depending on the response code - e.g. HTTP 204 (No Content), 3XX, etc.</p>
</blockquote>
<p>204,3XX 。</p>
<h2 id="4-动态图片节点扫描"><a href="#4-动态图片节点扫描" class="headerlink" title="4. 动态图片节点扫描"></a>4. 动态图片节点扫描</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">wraptSet</span>(<span class="params">obj, attr, interceptor, callback, useParent</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> desc = <span class="built_in">Object</span>.getOwnPropertyDescriptor(obj, attr);</span><br><span class="line">    <span class="keyword">var</span> original = desc.set;</span><br><span class="line">    desc.set = <span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"inject to attr:"</span>, obj, attr)</span><br><span class="line">        <span class="keyword">var</span> new_value = interceptor(value);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">        <span class="built_in">console</span>.warn(err);</span><br><span class="line">      &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (callback) &#123;</span><br><span class="line">          callback(<span class="keyword">this</span>, useParent)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="comment">//说明是元素的图片地址属性设置</span></span><br><span class="line">          <span class="keyword">this</span>.setAttribute(<span class="string">"wsload"</span>, <span class="string">"true"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> original.call(<span class="keyword">this</span>, new_value);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">Object</span>.defineProperty(obj, attr, desc);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">wrapInvoke</span>(<span class="params">obj, method, callback, useParent</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> original = obj[method];</span><br><span class="line">    obj[method] = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"inject to method:"</span>, obj, method)</span><br><span class="line">        <span class="keyword">if</span> (callback) &#123;</span><br><span class="line">          callback(<span class="keyword">this</span>, useParent)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> original.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">        <span class="built_in">console</span>.warn(err);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> callback = <span class="function"><span class="keyword">function</span> (<span class="params">node, useParent</span>) </span>&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      nodeList = nodeList.concat(Util.queryImgNodeList(useParent ? node.parentNode : node))</span><br><span class="line">      LazyLoad.check()</span><br><span class="line">    &#125;, <span class="number">5</span>);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>进行处理的属性和方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">NodeWriter.wraptSet(<span class="built_in">window</span>.HTMLImageElement.prototype, <span class="string">'src'</span>, wrapSetSrc);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">window</span>.HTMLSourceElement &amp;&amp; NodeWriter.wraptSet(<span class="built_in">window</span>.HTMLSourceElement.prototype, <span class="string">'src'</span>, wrapSetSrc);</span><br><span class="line">    <span class="comment">// ie8 设置srcset会报错：属性不能同时具有取值函数和值</span></span><br><span class="line">    <span class="keyword">if</span> (!((gBrowser.name === <span class="string">"IE"</span> || gBrowser.name === <span class="string">'MSIE'</span>) &amp;&amp; gBrowser.version === <span class="string">"8"</span>)) &#123;</span><br><span class="line">      NodeWriter.wraptSet(<span class="built_in">window</span>.HTMLImageElement.prototype, <span class="string">'srcset'</span>, wrapSetSrcSet);</span><br><span class="line">      NodeWriter.wraptSet(<span class="built_in">window</span>.HTMLSourceElement.prototype, <span class="string">'srcset'</span>, wrapSetSrcSet);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">window</span>.HTMLVideoElement &amp;&amp; NodeWriter.wraptSet(<span class="built_in">window</span>.HTMLVideoElement.prototype, <span class="string">'poster'</span>, wrapSetSrc);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> EleProto = ((gBrowser.name === <span class="string">"IE"</span> || gBrowser.name === <span class="string">'MSIE'</span>) &amp;&amp; <span class="built_in">window</span>.HTMLElement) ? <span class="built_in">window</span>.HTMLElement.prototype : <span class="built_in">window</span>.Element.prototype</span><br><span class="line"></span><br><span class="line">    NodeWriter.wrapInvoke(EleProto, <span class="string">'insertAdjacentHTML'</span>, callback, <span class="literal">true</span>);</span><br><span class="line">    NodeWriter.wraptSet(EleProto, <span class="string">'innerHTML'</span>, wrapSetOrigin, callback);</span><br><span class="line">    NodeWriter.wraptSet(EleProto, <span class="string">'outerHTML'</span>, wrapSetOrigin, callback, <span class="literal">true</span>);</span><br><span class="line">    NodeWriter.wraptSet(EleProto, <span class="string">'className'</span>, wrapSetOrigin, callback);</span><br></pre></td></tr></table></figure>

<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>本文介绍了一个带宽估算模型，基于该模型实现分层加载与懒加载功能，有效减少用户流量消耗，提高页面加载速度。</p>
]]></content>
      <categories>
        <category>大前端</category>
      </categories>
      <tags>
        <tag>前端优化</tag>
      </tags>
  </entry>
  <entry>
    <title>getElementsByClassName遍历时出现的问题</title>
    <url>/2018/07/15/2018Q3/getElementsByClassName%E9%81%8D%E5%8E%86%E6%97%B6%E5%87%BA%E7%8E%B0%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>我们需要遍历 <code>.lyad</code> 的元素,并将其 <code>className</code> 中的 <code>lyad</code> 删掉。 </p>
<a id="more"></a>


<p>最开始的做法是</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> s = <span class="string">'lyad'</span></span><br><span class="line"><span class="keyword">var</span> eles = <span class="built_in">document</span>.querySelectorAll(<span class="string">'.'</span>+<span class="string">'s'</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>,len=eles.length; j &lt; len; j++) &#123;</span><br><span class="line">  eles[j].className = eles[j].className.replace(s, <span class="string">''</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>没有任何问题。</strong></p>
<p>查询文档以及自测，发现 <code>getElementsByClassName</code> 的速度比 <code>querySelectorAll</code> 快很多，5倍以上。</p>
<p>为了性能考虑，我们改为以下写法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> eles = <span class="built_in">document</span>.getElementsByClassName(s)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>,len=eles.length; j &lt; len; j++) &#123;</span><br><span class="line">  eles[j].className = eles[j].className.replace(s, <span class="string">''</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>不出意外，会报 <code>Cannot read property &#39;className&#39; of undefined</code> 错误。</p>
<p>观察发现，一开始 eles 为四个，在访问 <code>eles[2]</code> 的时候出错,说明此时 <code>eles.length===2</code> ，访问了一个空元素。</p>
<p>即， getElementsByClassName 得到的元素其对应 className 被删掉的话，eles 会自动删去其元素。</p>
<p>做个测试：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> eles = <span class="built_in">document</span>.getElementsByClassName(<span class="string">'lyad'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(eles.length) <span class="comment">//4</span></span><br><span class="line">eles[<span class="number">0</span>].className = eles[<span class="number">0</span>].className.replace(<span class="string">'lyad'</span>, <span class="string">''</span>)</span><br><span class="line"><span class="built_in">console</span>.log(eles.length) <span class="comment">//3</span></span><br></pre></td></tr></table></figure>

<h2 id="以下写法都是ok的"><a href="#以下写法都是ok的" class="headerlink" title="以下写法都是ok的"></a>以下写法都是ok的</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> eles = <span class="built_in">document</span>.getElementsByClassName(<span class="string">'lyad'</span>)</span><br><span class="line"><span class="keyword">while</span>(eles.length&gt;<span class="number">0</span>)&#123;</span><br><span class="line">  eles[<span class="number">0</span>].className = eles[<span class="number">0</span>].className.replace(<span class="string">'lyad'</span>, <span class="string">''</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意 eles 获取要用 <code>getElementsByClassName</code> 而不是 <code>querySelectorAll</code> 否则将导致死循环。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> eles = <span class="built_in">document</span>.getElementsByClassName(<span class="string">'lyad'</span>)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>,len=eles.length; j &lt; len; j++) &#123;</span><br><span class="line">  eles[<span class="number">0</span>].className = eles[<span class="number">0</span>].className.replace(<span class="string">'lyad'</span>, <span class="string">''</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意 len 需要用临时变量保存，否则每次获取将会得到不同的 length 导致提前结束。</p>
<p>相比上一种写法更安全。</p>
<h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><p>上面写法有差异，在于NodeList对象的不同表现。</p>
<blockquote>
<p>大多数情况下，NodeList 对象都是个实时集合。</p>
<p>意思是说，如果文档中的节点树发生变化，则已经存在的 NodeList 对象也可能会变化。</p>
<p>在另一些情况下，NodeList 是一个静态集合，也就意味着随后对文档对象模型的任何改动都不会影响集合的内容。document.querySelectorAll 返回一个静态的 NodeList。</p>
</blockquote>
<p>引用自：<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/NodeList" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/API/NodeList</a></p>
<p>同时，这也解释了为何<code>getElementsByClassName</code>获取NodeList的速度比<code>querySelectorAll</code>快。</p>
<p>因为前者仅返回 <strong>列表的引用地址</strong> 仅访问时才实时获取数据 , 而后者一开始就要获取和封装所有数据。</p>
<blockquote>
<p>DynamicNodeList 对象通过在cache缓存中 注册它的存在 并创建。 从本质上讲, 创建一个新的 DynamicNodeList 是非常轻量级的, 因为不需要做任何前期工作。 每次访问 DynamicNodeList 时, 必须查询 document 的变化, length 属性 以及 item() 方法证明了这一点(使用中括号的方式访问也是一样的).</p>
</blockquote>
<blockquote>
<p>相比之下, StaticNodeList 对象实例由另一个文件创建,然后循环填充所有的数据 。 在 document 中执行静态查询的前期成本上比起 DynamicNodeList 要显著提高很多倍。</p>
</blockquote>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://blog.csdn.net/renfufei/article/details/41088521" target="_blank" rel="noopener">DOM中的动态NodeList与静态NodeList</a></p>
]]></content>
      <categories>
        <category>大前端</category>
      </categories>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>前端小知识-格式化标签</title>
    <url>/2018/07/12/2018Q3/%E5%89%8D%E7%AB%AF%E5%B0%8F%E7%9F%A5%E8%AF%86-%E6%A0%BC%E5%BC%8F%E5%8C%96%E6%A0%87%E7%AD%BE/</url>
    <content><![CDATA[<p>常见的html格式化标签：<code>a, b, big, code, em, font, i, nobr, s, small, strike, strong, tt, and u.</code></p>
<a id="more"></a>

<p>对于以下代码</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">b</span>&gt;</span>666<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>aaa<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>渲染引擎会将其解析成</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">b</span>&gt;</span>666<span class="tag">&lt;/<span class="name">b</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">b</span>&gt;</span><span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">b</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>aaa<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>即浏览器认为格式化标签的开闭标签可能是会跨节点的（非同一级）</p>
<p>后续查找没有找到闭标签会在原节点基础上添加格式化标签为父节点</p>
<blockquote>
<p>因为 b 等带有格式化的标签会特殊处理，遇到一个开标签时会它们放到一个列表里面：</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">m_activeFormattingElements.append(currentElementRecord()-&gt;stackItem());</span><br></pre></td></tr></table></figure>

<p>遇到一个闭标签时，又会从这个列表里面删掉。每处理一个新标签时就会进行检查和这个列表和栈里的开标签是否对应，如果不对应则会 reconstruct ：重新插入一个开标签。因此 b 就不断地被重新插入，直到遇到下一个b的闭标签为止。</p>
<p>参考 <a href="https://zhuanlan.zhihu.com/p/24911872" target="_blank" rel="noopener">从Chrome源码看浏览器如何构建DOM树</a></p>
]]></content>
      <categories>
        <category>大前端</category>
      </categories>
  </entry>
  <entry>
    <title>浅谈 preload 预加载</title>
    <url>/2018/07/10/2018Q3/%E6%B5%85%E8%B0%88%20preload%20%E9%A2%84%E5%8A%A0%E8%BD%BD/</url>
    <content><![CDATA[<h1 id="preload简介"><a href="#preload简介" class="headerlink" title="preload简介"></a>preload简介</h1><p>一种资源预加载的方式。用于提高性能，方便开发人员控制资源加载。</p>
<p>preload 指示浏览器预先请求当前页面接下来会需要用到的资源。</p>
<p>在chrome中，采用 preload 预加载资源后，后续没有在对资源进行请求(3s)，控制台会提示说是否有必要预加载该资源。</p>
<a id="more"></a>


<h1 id="使用preload的几种方式"><a href="#使用preload的几种方式" class="headerlink" title="使用preload的几种方式"></a>使用preload的几种方式</h1><h2 id="方式1：html页面书写link标签"><a href="#方式1：html页面书写link标签" class="headerlink" title="方式1：html页面书写link标签"></a>方式1：html页面书写link标签</h2><p><code>&lt;link rel=&quot;preload&quot; href=&quot;资源地址&quot; as=&quot;script&quot;&gt;</code> </p>
<p>as 属性告诉浏览器加载的是什么资源，<a href="https://link.jianshu.com/?t=https://fetch.spec.whatwg.org/#concept-request-destination" target="_blank" rel="noopener">常见取值有：”script”,”style”,”image”,”media”,”document”</a></p>
<p>不加as参数，资源请求优先级和异步xhr一样，非常低。(新版chrome无as或错误值将不会进行preload)</p>
<p>对于字体文件<code>as=&quot;font&quot;</code>，需要加上<code>crossorigin</code>属性: <a href="https://drafts.csswg.org/css-fonts/#font-fetching-requirements" target="_blank" rel="noopener">fonts were fetched using anonymous mode CORS </a>,<br>否则接下来的字体资源请求会重新获取（二次获取）。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"preload"</span> <span class="attr">href</span>=<span class="string">"font.woff2"</span> <span class="attr">as</span>=<span class="string">"font"</span> <span class="attr">type</span>=<span class="string">"font/woff2"</span> <span class="attr">crossorigin</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>type和as有一样的作用，取值不一样</p>
<blockquote>
<p>一行代码实现css懒加载</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"preload"</span> <span class="attr">as</span>=<span class="string">"style"</span> <span class="attr">href</span>=<span class="string">"asyncstyle.css"</span> <span class="attr">onload</span>=<span class="string">"this.rel='stylesheet'"</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>响应式加载</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"preload"</span> <span class="attr">as</span>=<span class="string">"image"</span> <span class="attr">href</span>=<span class="string">"map.png"</span> <span class="attr">media</span>=<span class="string">"(max-width: 600px)"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"preload"</span> <span class="attr">as</span>=<span class="string">"script"</span> <span class="attr">href</span>=<span class="string">"map.js"</span> <span class="attr">media</span>=<span class="string">"(min-width: 601px)"</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="方式2：js创建link标签"><a href="#方式2：js创建link标签" class="headerlink" title="方式2：js创建link标签"></a>方式2：js创建link标签</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> elem = <span class="built_in">document</span>.createElement(<span class="string">"link"</span>);</span><br><span class="line">elem.setAttribute(<span class="string">"href"</span>, url);</span><br><span class="line">elem.setAttribute(<span class="string">"as"</span>, <span class="string">"script"</span>);</span><br><span class="line">elem.setAttribute(<span class="string">"rel"</span>, <span class="string">"preload"</span>);</span><br><span class="line"><span class="built_in">document</span>.head.appendChild(elem);</span><br></pre></td></tr></table></figure>

<h2 id="利用http响应头预加载"><a href="#利用http响应头预加载" class="headerlink" title="利用http响应头预加载"></a>利用http响应头预加载</h2><p>在html页面的响应头中增加 Link 响应头，其内容为<code>&lt;./js/image-optimizer.js&gt;; rel=preload; as=script</code></p>
<p>在html文档下载完毕时，则会进行<code>./js/image-optimizer.js</code>的预加载</p>
<blockquote>
<p>本地利用 fiddler4做个测试</p>
</blockquote>
<ol>
<li>输入bpu localhost/test.html命令 拦截测试页面html请求，此时可以进行请求头和内容的修改</li>
<li>点击 <em>Break on Response</em> 按钮 发起请求，并拦截响应，此处我们对响应头进行内容添加</li>
<li>点击 <em>Run to Completino</em> 按钮,返回响应。</li>
</ol>
<h1 id="浏览器兼容性"><a href="#浏览器兼容性" class="headerlink" title="浏览器兼容性"></a>浏览器兼容性</h1><p><a href="https://caniuse.com/#search=preload" target="_blank" rel="noopener">chrome 50+,safari 11+等</a></p>
<blockquote>
<p>检测<code>&lt;link rel=&quot;preload&quot;&gt;</code>是否被支持</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> preloadSupported = <span class="function"><span class="params">()</span> =&gt;</span> &#123; </span><br><span class="line">  <span class="keyword">const</span> link = <span class="built_in">document</span>.createElement(<span class="string">'link'</span>); </span><br><span class="line">  <span class="keyword">const</span> relList = link.relList; </span><br><span class="line">  <span class="keyword">if</span> (!relList || !relList.supports) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>; </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> relList.supports(<span class="string">'preload'</span>); </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>


<h1 id="与-prefetch-的异同点"><a href="#与-prefetch-的异同点" class="headerlink" title="与 prefetch 的异同点"></a>与 prefetch 的异同点</h1><h2 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h2><p>当前页面必要资源则采用<code>preload</code>,将来页面使用的资源采用<code>prefetch</code></p>
<p>A页面发起 a.js 的 prefetch 预加载，在请求过程中此时调转到B页面，a.js 请求不会中断，而换成 preload预加载则请求会中断。</p>
<h2 id="共通点"><a href="#共通点" class="headerlink" title="共通点"></a>共通点</h2><blockquote>
<p>Chrome 有四种缓存: HTTP 缓存，内存缓存，Service Worker 缓存和 Push 缓存。preload 和 prefetch 都被存储在 HTTP 缓存中。</p>
<p>当一个资源被 preload 或者 prefetch 获取后，它可以从 HTTP 缓存移动至渲染器的内存缓存中。如果资源可以被缓存（比如说存在有效的cache-control 和 max-age），它被存储在 HTTP 缓存中可以被现在或将来的任务使用，如果资源不能被&gt;缓存在 HTTP 缓存中，作为代替，它被放在内存缓存中直到被使用。</p>
</blockquote>
<h2 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h2><ol>
<li>当prefetch和preload预加载同一个资源时，实际会产生两次下载</li>
</ol>
<h2 id="Chrome-对于-preload-和-prefetch-的网络优先级？"><a href="#Chrome-对于-preload-和-prefetch-的网络优先级？" class="headerlink" title="Chrome 对于 preload 和 prefetch 的网络优先级？"></a>Chrome 对于 preload 和 prefetch 的网络优先级？</h2><p><img src="https://www.w3cplus.com/sites/default/files/blogs/2017/1708/preload-6.jpeg"></img><br>(来源：<a href="https://docs.google.com/document/d/1bCDuq9H1ih9iNjgzyAL0gpwNFiEP4TZS-YLRp_RuMlc/edit#" target="_blank" rel="noopener">https://docs.google.com/document/d/1bCDuq9H1ih9iNjgzyAL0gpwNFiEP4TZS-YLRp_RuMlc/edit#</a>)</p>
<blockquote>
<p>perload利用as或type来表示请求资源的优先级。</p>
</blockquote>
<p>按DevTools的标准，as取值对应的优先级如下：</p>
<ul>
<li>style–&gt;Highest</li>
<li>script,font–&gt;High </li>
<li>image–&gt;Low</li>
</ul>
<p>Prefetch的优先级为 Lowest</p>
<p>从该表得到的其他信息：</p>
<ol>
<li>第一张图片预加载之前发起的脚本请求优先级为 High</li>
<li>第一张图片预加载之后发起的脚本请求优先级为 Medium</li>
<li>异步脚本请求优先级为 Low</li>
<li>视口图片比非视口图片的请求优先级高</li>
</ol>
<p>图片预加载之前：<code>script节点</code>在dom解析时处于图片节点之前</p>
<h1 id="DNS-prefetch"><a href="#DNS-prefetch" class="headerlink" title="DNS prefetch"></a>DNS prefetch</h1><p>预解析 DNS</p>
<p>默认情况下 <code>dns prefetch</code> 只对href属性的url地址进行dns预解析，但若当该网站处于https时则不会进行处理</p>
<p>可以通过<code>&lt;meta http-equiv=&quot;x-dns-prefetch-control&quot; content=&quot;on&quot;&gt;</code>手动开启，此时https也可正常处理，可通过设置off来进行关闭，当设置off关闭后，再设置on就没有效果了。</p>
<p>利用 <code>&lt;link rel=&quot;dns-prefetch&quot; href=&quot;//host_name_to_prefetch.com&quot;&gt;</code>手动预解析，一般用来预解析以下场景：请求重定向后的地址，js代码中的异步请求地址，图片请求地址，较晚被dom解析的script节点地址</p>
<h1 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h1><ol>
<li><a href="https://www.w3.org/TR/preload/" target="_blank" rel="noopener">W3C preload 文档</a></li>
<li><a href="https://www.smashingmagazine.com/2016/02/preload-what-is-it-good-for/" target="_blank" rel="noopener">Preload: What is it Good For?</a></li>
<li><a href="http://dev.chromium.org/developers/design-documents/dns-prefetching" target="_blank" rel="noopener">chromium DNS Prefetching</a></li>
<li><a href="https://www.w3cplus.com/performance/reloading/preload-prefetch-and-priorities-in-chrome.html" target="_blank" rel="noopener">Preload，Prefetch 和它们在 Chrome 之中的优先级</a> </li>
<li><a href="http://dev.chromium.org/developers/design-documents/dns-prefetching" target="_blank" rel="noopener">DNS Prefetching</a></li>
</ol>
]]></content>
      <categories>
        <category>大前端</category>
      </categories>
      <tags>
        <tag>前端优化</tag>
      </tags>
  </entry>
  <entry>
    <title>前端监听资源加载错误</title>
    <url>/2018/07/05/2018Q3/%E5%89%8D%E7%AB%AF%E7%9B%91%E5%90%AC%E8%B5%84%E6%BA%90%E5%8A%A0%E8%BD%BD%E9%94%99%E8%AF%AF/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>页面上有很多资源元素，比如 <code>&lt;img&gt;</code>,<code>&lt;iframe&gt;</code>等，我们需要知道其加载情况,根据加载成功与否进行下一步的处理。</p>
<a id="more"></a>

<p>常见的做法是给这些元素上设置 <code>onload</code>,<code>onerror</code>方法。</p>
<p>比如：<code>&lt;img onerror=&quot;errFn()&quot; onload=&quot;loadFn()&quot;&gt;</code></p>
<blockquote>
<p>支持 <code>onload</code> 的标签：<code>&lt;body&gt;, &lt;frame&gt;, &lt;frameset&gt;, &lt;iframe&gt;, &lt;img&gt;, &lt;input type=&quot;image&quot;&gt;, &lt;link&gt;, &lt;script&gt;, &lt;style&gt;</code></p>
</blockquote>
<blockquote>
<p>支持 <code>onerror</code> 的标签：<code>&lt;img&gt;, &lt;input type=&quot;image&quot;&gt;, &lt;object&gt;, &lt;script&gt;, &lt;style&gt; , &lt;audio&gt;, &lt;video&gt;</code></p>
</blockquote>
<p>注意IE9.0及以上才支持 <code>&lt;audio&gt;, &lt;video&gt;</code> 标签</p>
<p>此外几乎所有浏览器都支持 <code>onload</code> 和 <code>onerror</code>,</p>
<p><strong>这种做法的缺点：</strong></p>
<ol>
<li>每个要处理的元素都要绑定事件，html和js耦合太深,处理的脚本不能通用化、插件化，比如给另一个页面也能方便使用</li>
<li>Windows 7 下的 Internet Explorer 11 不支持 <code>&lt;audio&gt;, &lt;video&gt;</code>的 onerror 事件（我没试过。</li>
</ol>
<h2 id="window-addEventListener"><a href="#window-addEventListener" class="headerlink" title="window.addEventListener"></a>window.addEventListener</h2><p><code>window.addEventListener(&#39;error&#39;)</code>与window.onerror的异同点在于：</p>
<ol>
<li>前者能够捕获到资源加载错误，后者不能。</li>
<li>都能捕获js运行时错误，捕获到的错误参数不同。前者参数为一个event对象；后者为 msg, url, lineNo, columnNo, error一系列参数。event对象中都含有后者参数的信息。</li>
</ol>
<p>用法如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'error'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(event)</span><br><span class="line">  <span class="keyword">if</span> (event) &#123;</span><br><span class="line">    <span class="keyword">var</span> target = event.target || event.srcElement;</span><br><span class="line">    <span class="comment">// 写上</span></span><br><span class="line">    <span class="keyword">var</span> isElementTarget = target <span class="keyword">instanceof</span> HTMLElement</span><br><span class="line">    <span class="keyword">if</span> (!isElementTarget) <span class="keyword">return</span>; <span class="comment">// js error不再处理</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> source = event.target</span><br><span class="line">    <span class="comment">// 对该资源进行处理..</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//设为true表示捕获阶段调用，会在元素的onerror前调用</span></span><br><span class="line">&#125;, <span class="literal">true</span>)</span><br></pre></td></tr></table></figure>

<p>上面说过，<code>&lt;iframe&gt;</code>支持 onload 不支持 onerror,故以上代码不会监听到iframe加载失败事件</p>
<p>此外，由于<code>window.addEventListener(&#39;load&#39;)</code>是监听文档是否加载完毕，故无法监听资源加载成功事件</p>
<h2 id="最终方案：-document-addEventListener"><a href="#最终方案：-document-addEventListener" class="headerlink" title="最终方案： document.addEventListener"></a>最终方案： document.addEventListener</h2><p><code>document.addEventListener</code> 可以用来监听<code>Element元素</code>的加载情况</p>
<p>对于iframe来说，我们只能监听load.</p>
<p><s>至于判断是否加载成功，我们可以通过：<code>event.target.contentWindow!==null</code>来判断。</p>
<p><strong>只要请求响应成功，该 contentWindow 就不会为null。</strong></p>
<p>注意：对于设置了<code>X-Frame-Options:DENY</code>或<code>Content Security Policy</code>的情况，由于请求响应是ok的，所以 contentWindow 不会为空。</p>
<p>这种情况是否属于资源加载错误属于产品层面定义。</p>
<p>若归类为加载错误，暂未找到好的解决方案。</p>
<blockquote>
<p>同域的话可以访问 contetnDocument, 看里面内容是否为空（仅只有head和body标签）<br></s></p>
</blockquote>
<blockquote>
<p>但是加载成功失败与否，contentWindow 对象都存在。</p>
</blockquote>
<p>对于同域 iframe 可以检查 contenDocument 的内容来判断</p>
<p><strong>完整代码如下：</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">'load'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (event) &#123;</span><br><span class="line">    <span class="keyword">var</span> target = event.target</span><br><span class="line">    <span class="keyword">if</span>(target.localName===<span class="string">'iframe'</span>)&#123;</span><br><span class="line">      <span class="comment">// 继续判断...</span></span><br><span class="line">    &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="comment">//资源加载成功处理..</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;, <span class="literal">true</span>)</span><br><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">'error'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (event) &#123;</span><br><span class="line">    <span class="keyword">var</span> target = event.target</span><br><span class="line">    <span class="comment">// 资源加载错误处理.. target.outerHTML 拿到原标签内容，例 &lt;img src="./img/a.png"&gt;</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//设为true表示捕获阶段调用，会在元素的onerror前调用,在window.addEventListener('error')后调用</span></span><br><span class="line">&#125;, <span class="literal">true</span>)</span><br></pre></td></tr></table></figure>

<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://segmentfault.com/a/1190000014672384" target="_blank" rel="noopener">JS错误监控总结</a></p>
]]></content>
      <categories>
        <category>大前端</category>
      </categories>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>git命令学习</title>
    <url>/2018/06/14/2018Q2/git%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h2 id="1-分支切换"><a href="#1-分支切换" class="headerlink" title="1. 分支切换"></a>1. 分支切换</h2><h3 id="查看远程分支"><a href="#查看远程分支" class="headerlink" title="查看远程分支"></a>查看远程分支</h3><p>git branch -a</p>
<h3 id="查看本地分支"><a href="#查看本地分支" class="headerlink" title="查看本地分支"></a>查看本地分支</h3><p>git branch</p>
<h3 id="切换分支"><a href="#切换分支" class="headerlink" title="切换分支"></a>切换分支</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git checkout -b dev origin&#x2F;dev   </span><br><span class="line">从远程dev分支取得到本地分支dev</span><br><span class="line">Branch dev set up to track remote branch dev from origin.</span><br><span class="line">Switched to a new branch &#39;v0.9rc1&#39;</span><br></pre></td></tr></table></figure>

<p>-b :创建并切换，相当于 git branch dev;git checkout dev</p>
<a id="more"></a>

<h2 id="2-分支合并"><a href="#2-分支合并" class="headerlink" title="2. 分支合并"></a>2. 分支合并</h2><h3 id="整个分支合并"><a href="#整个分支合并" class="headerlink" title="整个分支合并"></a>整个分支合并</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#切换到master分支</span></span><br><span class="line">git checkout master</span><br><span class="line"><span class="comment">#合并dev分支</span></span><br><span class="line">git merge dev</span><br></pre></td></tr></table></figure>

<h3 id="合并某个commit到指定的分支上"><a href="#合并某个commit到指定的分支上" class="headerlink" title="合并某个commit到指定的分支上"></a>合并某个commit到指定的分支上</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看当前分支的commit记录，记录commit_id</span></span><br><span class="line">git <span class="built_in">log</span></span><br><span class="line"><span class="comment"># 切换到master分支</span></span><br><span class="line">git checkout master</span><br><span class="line"><span class="comment"># 将该次commit 合并到master分支</span></span><br><span class="line">git cherry-pick &lt;commit_id&gt;</span><br></pre></td></tr></table></figure>

<h3 id="合并连续多个commit（aaaa-gt-bbbb）到指定的分支上"><a href="#合并连续多个commit（aaaa-gt-bbbb）到指定的分支上" class="headerlink" title="合并连续多个commit（aaaa-&gt;bbbb）到指定的分支上"></a>合并连续多个commit（aaaa-&gt;bbbb）到指定的分支上</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建并切换到newbranch分支 以bbbb提交为结尾</span></span><br><span class="line">git checkout -b newbranch bbbb</span><br><span class="line"><span class="comment"># 以aaaa的commit记录开始合并到master，此时合并的为aaaa-&gt;bbbb的commit</span></span><br><span class="line">git rebase —onto master aaaa^</span><br></pre></td></tr></table></figure>

<h2 id="3-push"><a href="#3-push" class="headerlink" title="3. push"></a>3. push</h2><h3 id="推送到指定名称的远程分支"><a href="#推送到指定名称的远程分支" class="headerlink" title="推送到指定名称的远程分支"></a>推送到指定名称的远程分支</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 将<span class="built_in">local</span>-dev推送到 origin-dev 分支</span><br><span class="line">git push origin <span class="built_in">local</span>-dev:origin-dev</span><br><span class="line">// 当 <span class="built_in">local</span>-dev 为空时，将删除 origin-dev 分支</span><br><span class="line">git push origin :origin-dev</span><br></pre></td></tr></table></figure>
<h3 id="将本地仓库转到远程仓库"><a href="#将本地仓库转到远程仓库" class="headerlink" title="将本地仓库转到远程仓库"></a>将本地仓库转到远程仓库</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 添加远程仓库</span></span><br><span class="line">git remote add [name] [url]</span><br><span class="line"><span class="comment"># 推送远程仓库：这里的场景 localBranchName 一般用master</span></span><br><span class="line">git push [remoteName] [localBranchName]</span><br></pre></td></tr></table></figure>

<h2 id="4-版本回退"><a href="#4-版本回退" class="headerlink" title="4. 版本回退"></a>4. 版本回退</h2><h3 id="删除远程仓库的文件-并忽略提交"><a href="#删除远程仓库的文件-并忽略提交" class="headerlink" title="删除远程仓库的文件 并忽略提交"></a>删除远程仓库的文件 并忽略提交</h3><p>当文件进入版本管理时，设置 gitignore 将没有效果，此时将提交push到远程仓库会发现远程仓库有这些文件</p>
<p>举例：在<code>.gitignore</code>设置忽略test目录时，已进行test目录的git管理,此时我们不小心把test目录也push到远程分支了，怎么办？</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git rm -r --cached <span class="built_in">test</span></span><br><span class="line">git commit -m <span class="string">"delete test/"</span></span><br><span class="line">git push origin master</span><br></pre></td></tr></table></figure>

<p>此时可以把忽略规则写到gitignore中了。</p>
<h3 id="git-reset"><a href="#git-reset" class="headerlink" title="git reset"></a>git reset</h3><p>先用git log 查看commit记录，回车下一页，q退出查看</p>
<p>git reset –hard commit_id 或者 HEAD^ 表示当前版本的上一个版本，10个前的版本就是 HEAD~10</p>
<p>将 commit 信息和文件都进行回退</p>
<blockquote>
<p>不指定 –hard 的话即默认的 –mixed 模式, 回退 commit 信息，文件处于工作区（待 add）</p>
</blockquote>
<p>还可以指定为 –soft ，回退 commit 信息，文件处于 staged 状态（待 commit）</p>
<p>当前版本被重置后，想回到刚刚的版本，又找不到commit_id,刚刚的命令窗口被关闭，怎么办?</p>
<p>可以通过 git reflog 里面记录了我们每次的命令 </p>
<h2 id="git-文件改一半需要临时改个bug-commit上怎么写？"><a href="#git-文件改一半需要临时改个bug-commit上怎么写？" class="headerlink" title="git 文件改一半需要临时改个bug -commit上怎么写？"></a>git 文件改一半需要临时改个bug -commit上怎么写？</h2><p><a href="https://www.cnblogs.com/wufangfang/p/6085617.html" target="_blank" rel="noopener">参考</a></p>
<ol>
<li>git stash  存储工作区</li>
<li>git checkout -b issue-xxx 复制当前分支到issue-xxx分支</li>
<li>git commit -m “fix bug xxx”  修改bug并提交</li>
<li>git checkout master 切换到master分支</li>
<li>git merge issue-xxx 合并issue-xxx分支</li>
<li>git branch -d issue-xxx 删除issue-xxx分支</li>
<li>git stash list 展示刚才的工作区</li>
<li>git stash pop 还原工作区并删除对应的stash</li>
<li>git stash list 此时应该是空的</li>
</ol>
<h2 id="git-commit"><a href="#git-commit" class="headerlink" title="git commit"></a>git commit</h2><p>–amend : 用来修改上次提交时的 message</p>
<h2 id="git-rebase"><a href="#git-rebase" class="headerlink" title="git rebase"></a>git rebase</h2><h3 id="i-start-point-end-point-可交互变基"><a href="#i-start-point-end-point-可交互变基" class="headerlink" title="-i [start_point] [end_point] 可交互变基"></a>-i [start_point] [end_point] 可交互变基</h3><p>常用来调整 commit 记录的顺序， 进行 commit 合并等。</p>
<p>首条 pick or edit(修改 message 用)，其他的用 s or f(丢弃该 commit 的 message)</p>
<h2 id="git-tag"><a href="#git-tag" class="headerlink" title="git tag"></a>git tag</h2><p><a href="https://www.jianshu.com/p/9e64bdf1e8f9" target="_blank" rel="noopener">参考</a></p>
<h3 id="添加tag"><a href="#添加tag" class="headerlink" title="添加tag"></a>添加tag</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git tag -a  &lt;tag名&gt; -m &lt;注释文字&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># git tag -a v0.1.0 -m v0.1.0</span></span><br></pre></td></tr></table></figure>

<h3 id="push-tag"><a href="#push-tag" class="headerlink" title="push tag"></a>push tag</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git push origin &lt;标签名&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">#一次推送本地所有 tags，使用 --tags选项：</span></span><br><span class="line">git push origin --tags</span><br></pre></td></tr></table></figure>

<h2 id="git-clone"><a href="#git-clone" class="headerlink" title="git clone"></a>git clone</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">##最近一次提交</span></span><br><span class="line">git <span class="built_in">clone</span> --depth 1 &lt;remote-addr:repo.git&gt;</span><br></pre></td></tr></table></figure>

<h2 id="gh-pages"><a href="#gh-pages" class="headerlink" title="gh-pages"></a>gh-pages</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 指定某个文件夹</span></span><br><span class="line">git subtree push --prefix=dist origin gh-pages</span><br><span class="line"><span class="comment"># 整个项目都上传</span></span><br><span class="line">git symbolic-ref HEAD refs/heads/gh-pages</span><br><span class="line">git push origin gh-pages</span><br></pre></td></tr></table></figure>

<h2 id="切换仓库"><a href="#切换仓库" class="headerlink" title="切换仓库"></a>切换仓库</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git remote <span class="built_in">set</span>-url origin url</span><br></pre></td></tr></table></figure>

<p>注意，正常的话 切换完 pull 是没问题的（新的远程仓库也是原来本地仓库的记录）</p>
<p>但如果新的仓库地址的记录与本地不相关的话，就会报</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">fatal: refusing to merge unrelated histories</span><br></pre></td></tr></table></figure>

<p>此时应该放弃原来的git记录，采用代码覆盖重新提交的方式。。</p>
<p>若采用 <code>git pull origin master --allow-unrelated-histories</code> 强制合并，会有各种冲突等等，</p>
<p>其实最好的方法就是让同伴不要把不相关的记录直接传新的仓库。。</p>
<p><strong>方式2</strong></p>
<p>具体迁移步骤</p>
<p>在新地址上新建对应项目</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> --bare <span class="variable">$url</span>  //拷贝一份旧GIT裸版本的代码</span><br><span class="line"><span class="built_in">cd</span> xxx.git             //进入到目录底下</span><br><span class="line">git push --mirror <span class="variable">$newurl</span>   //推送到新的仓库地址</span><br><span class="line"><span class="built_in">cd</span> ../ &amp;&amp; rm -rf xxx.git     //删除拷贝</span><br></pre></td></tr></table></figure>

<p>git remote add 和 set-url 区别</p>
<h2 id="克隆仓库"><a href="#克隆仓库" class="headerlink" title="克隆仓库"></a>克隆仓库</h2><p>https 与 ssh 的区别</p>
<p>前者每次 push 时都需要输入账号密码</p>
<p>后者会利用已经配置的 key 进行登陆，要求自身为克隆的仓库的拥有者或者加入者</p>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
  </entry>
  <entry>
    <title>前端图片分层加载详解</title>
    <url>/2018/05/20/2018Q2/%E5%9B%BE%E7%89%87%E5%88%86%E5%B1%82%E5%8A%A0%E8%BD%BD/</url>
    <content><![CDATA[<h1 id="一、引言"><a href="#一、引言" class="headerlink" title="一、引言"></a>一、引言</h1><h2 id="1-1-编写目的"><a href="#1-1-编写目的" class="headerlink" title="1.1 编写目的"></a>1.1 编写目的</h2><p>介绍图片分层加载系统架构及技术方案，结合懒加载后的总流程，梳理常见问题及相应解决方案。</p>
<a id="more"></a>

<h2 id="1-2-项目背景"><a href="#1-2-项目背景" class="headerlink" title="1.2 项目背景"></a>1.2 项目背景</h2><h3 id="1-2-1-背景"><a href="#1-2-1-背景" class="headerlink" title="1.2.1 背景"></a>1.2.1 背景</h3><p>前端优化站的功能模块之一，属于图像优化范畴。</p>
<h3 id="1-2-2-业界客户现状"><a href="#1-2-2-业界客户现状" class="headerlink" title="1.2.2 业界客户现状"></a>1.2.2 业界客户现状</h3><p>大部分客户在图片加载上没做优化，页面直接加载原图，浏览器会发起大量原图请求，导致页面加载时间过长，网络带宽消耗大。</p>
<p>因此，我们提出了一整套的图片优化解决方案，实现页面图片懒加载，加快客户页面加载速度，节省流量。</p>
<h3 id="1-2-3-友商技术方案"><a href="#1-2-3-友商技术方案" class="headerlink" title="1.2.3 友商技术方案"></a>1.2.3 友商技术方案</h3><p>Akamai 在图像优化上提出了三个解决方案：</p>
<ul>
<li>自适应压缩<blockquote>
<p>基于网络条件分层加载,提供多种压缩级别的图像资源</p>
</blockquote>
</li>
<li>懒加载<blockquote>
<p>仅加载当前浏览器视区可见的图像，当用户向下滑动时加载新图像</p>
</blockquote>
</li>
<li>特定图像格式优化<blockquote>
<p>webp、jpeg2000等图像格式可以降低负载，而不影响图片质量,但只有特定浏览器兼容</p>
</blockquote>
</li>
</ul>
<p><strong>目前本方案能实现以上功能</strong>，并在懒加载方案继续优化，结合了预加载的思想，当pageload后且scroll一定时间没有触发，会触发图像加载机制，用于满足某些客户需求。</p>
<h2 id="1-3-术语定义"><a href="#1-3-术语定义" class="headerlink" title="1.3 术语定义"></a>1.3 术语定义</h2><p>小图： 分辨率不变，图像质量较低的图片资源-模糊图<br>小小图： 后台又对小图做了压缩处理</p>
<h2 id="1-4-参考资料"><a href="#1-4-参考资料" class="headerlink" title="1.4 参考资料"></a>1.4 参考资料</h2><p><a href="https://www.akamai.com/cn/zh/web-and-mobile-performance.jsp" target="_blank" rel="noopener">AKAMAI WEB 性能解决方案</a></p>
<p><a href="https://github.com/tuupola/jquery_lazyload/tree/master" target="_blank" rel="noopener">lazy_load开源库</a></p>
<h1 id="二、系统架构"><a href="#二、系统架构" class="headerlink" title="二、系统架构"></a>二、系统架构</h1><p><em>本套系统分为前端和后台，本文侧重于介绍前端部分。</em></p>
<p>当浏览器发起html文档请求时，后台会对该文档进行修改并返回。</p>
<p>先介绍下后台的<strong>html文档改写规则</strong>(仅针对图像优化功能):</p>
<blockquote>
<p>在文档底部插入图片优化的js代码，配置项通过设置script节点的自定义属性来实现。</p>
<p>主要配置项：散列域名，是否开启懒加载，懒加载策略，是否处理<code>background-image</code></p>
</blockquote>
<p>前端这边收到html文档之后，与后台交互流程如下：</p>
<h2 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">graph TB</span><br><span class="line">  st(浏览器dom解析)--&gt;op[浏览器发起图片请求]</span><br><span class="line">  op--&gt;op2[后台处理并返回模糊图]</span><br><span class="line">  op2--&gt;co&#123; pageload完成? &#125;</span><br><span class="line">  co--no--&gt;co</span><br><span class="line">  co--yes--&gt;op3[扫描文档的图像资源]</span><br><span class="line">  op3--&gt;op4[修改图像url地址的域名部分并作为图像新的src]</span><br><span class="line">  op4--&gt;op5[浏览器发起新的图片请求]</span><br><span class="line">  op5--&gt;co2&#123; 后台判断是否有缓存? &#125;</span><br><span class="line">  co2--no--&gt;op6[回源获取并缓存]</span><br><span class="line">  co2--yes--&gt;op7[进行响应]</span><br><span class="line">  op6--&gt;op7</span><br></pre></td></tr></table></figure>

<h2 id="时序图"><a href="#时序图" class="headerlink" title="时序图"></a>时序图</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sequenceDiagram</span><br><span class="line">participant 浏览器</span><br><span class="line">participant shark</span><br><span class="line">participant 源站</span><br><span class="line">浏览器 -&gt;&gt; shark:请求图像资源</span><br><span class="line">Note right of shark:没有缓存，请求源站</span><br><span class="line">shark -&gt;&gt; 源站:请求图像资源</span><br><span class="line">Note right of shark:缓存图像</span><br><span class="line">shark -&gt;&gt; shark:图像模糊化</span><br><span class="line">shark --&gt;&gt; 浏览器:返回模糊图</span><br><span class="line">Note right of 浏览器:dom解析完毕&lt;br&#x2F;&gt;扫描文档</span><br><span class="line">浏览器 -&gt;&gt; shark:请求图片质量标识wsq对应图像</span><br><span class="line">shark -&gt;&gt; shark:根据wsq对原图做相应的压缩</span><br><span class="line">shark --&gt;&gt;浏览器:返回wsq对应图片</span><br></pre></td></tr></table></figure>

<p><del>或者采用另外一个方案，修改html文档中img的src，原图放在data-src中，这样可以控制哪些图片需要做分层，可解决后面提到的 <strong><code>根据媒体属性的渲染</code></strong> 问题，但是改写文档的工作量和难度都比较大</del></p>
<h2 id="前端流程"><a href="#前端流程" class="headerlink" title="前端流程"></a>前端流程</h2><p>原图请求通过url替换的方式，不采用ajax</p>
<h3 id="总流程"><a href="#总流程" class="headerlink" title="总流程"></a>总流程</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">graph TB</span><br><span class="line">  st(开始)--&gt;init((初始化))</span><br><span class="line">  init--&gt;obs[添加DOMContentLoaded,Load事件监听器]</span><br><span class="line">  obs--&gt;DOMContentLoaded[DOMContentLoaded事件触发]</span><br><span class="line">  DOMContentLoaded--&gt;cal[利用html文档下载速度来进行简单测速]</span><br><span class="line">  cal--&gt;firstScreenPicSpeed[参照网速压缩比对照表得到首屏图片压缩比]</span><br><span class="line">  firstScreenPicSpeed--&gt;firstScreen((扫描文档,获取图片节点))</span><br><span class="line">  firstScreen--&gt;quicksort[按视距快排图片节点]</span><br><span class="line">  quicksort--&gt;judgeCache[任取一模糊图的name,通过transferSize是否为0来判断本次加载是否为无缓存加载]</span><br><span class="line">  judgeCache--&gt;firstScreenCal[获取视距处于首屏的图片节点]</span><br><span class="line">  firstScreenCal--&gt;oripicload((进行原图加载))</span><br><span class="line">  oripicload--&gt;load[Load事件触发]</span><br><span class="line">  load--&gt;speedtest[采用测速算法测速,得到相应图像压缩比]</span><br><span class="line">  speedtest--&gt;islazyLoad&#123;是否懒加载&#125;</span><br><span class="line">  islazyLoad--是--&gt;lazyload[启动懒加载策略]</span><br><span class="line">  islazyLoad--否--&gt;replaceOther[找到其他未进行原图加载的节点]</span><br><span class="line">  replaceOther--&gt;oripicload1((进行原图加载))</span><br><span class="line">  lazyload--&gt;islazycompleted&#123;懒加载完毕?&#125;</span><br><span class="line">  islazycompleted--是--&gt;ed(结束)</span><br><span class="line">  islazycompleted--否--&gt;scall&#123;是否进行窗口滚动&#125;</span><br><span class="line">  scall--是--&gt;debounceCul[节流处理,获取满足视距条件的未进行原图加载的节点]</span><br><span class="line">  debounceCul--&gt;oripicload2((进行原图加载))</span><br><span class="line">  oripicload2--&gt;islazycompleted</span><br><span class="line">  scall--否--&gt;mousetimeout&#123;鼠标事件10s未触发&#125;</span><br><span class="line">  mousetimeout--是--&gt;replaceOther</span><br><span class="line">  mousetimeout--否--&gt;scall</span><br><span class="line">  oripicload1--&gt;ed</span><br></pre></td></tr></table></figure>
<h3 id="初始化具体流程"><a href="#初始化具体流程" class="headerlink" title="初始化具体流程"></a>初始化具体流程</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">graph LR</span><br><span class="line">  init(初始化开始)--&gt;evalElement(解析script标签中自定义属性)</span><br><span class="line">  evalElement--&gt;getHost[获取可替换图片域名]</span><br><span class="line">  evalElement--&gt;getHashHost[获取散列域名]</span><br><span class="line">  evalElement--&gt;getLazy[获取懒加载策略]</span><br><span class="line">  evalElement--&gt;getSpeedZip[获取网速压缩比参照表]</span><br><span class="line">  evalElement--&gt;getTTL[获取图片缓存时间]</span><br><span class="line">  getHost--&gt;initStop(初始化结束)</span><br><span class="line">  getHashHost--&gt;initStop</span><br><span class="line">  getLazy--&gt;initStop</span><br><span class="line">  getSpeedZip--&gt;initStop</span><br><span class="line">  getTTL--&gt;initStop</span><br></pre></td></tr></table></figure>

<h3 id="原图加载具体流程"><a href="#原图加载具体流程" class="headerlink" title="原图加载具体流程"></a>原图加载具体流程</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">graph TB</span><br><span class="line">oripicstart(原图加载开始)--&gt;judgeEle&#123;判断节点类型&#125;</span><br><span class="line">judgeEle--picture节点--&gt;getpic[获取其子节点中source节点和img节点中src和srcset属性中的图片url]</span><br><span class="line">judgeEle--img节点--&gt;getsrcset[获取节点的src和srcset属性中的图片url]</span><br><span class="line">judgeEle--video节点--&gt;getposter[获取节点的poster属性中的图片url]</span><br><span class="line">judgeEle--其他节点--&gt;getother[获取节点background-image的图片url]</span><br><span class="line">getpic--&gt;getfinalurl((url替换))</span><br><span class="line"></span><br><span class="line">getsrcset--&gt;getfinalurl1((url替换))</span><br><span class="line">getposter--&gt;getfinalurl1((url替换))</span><br><span class="line">getother--&gt;getfinalurl1((url替换))</span><br><span class="line"></span><br><span class="line">getfinalurl1--&gt;newImg[new Image的方式加载资源,其url为替换后的url,可能需要设置srcset属性]</span><br><span class="line">newImg--&gt;onload[Image的onload触发]</span><br><span class="line">onload--&gt;updateEle</span><br><span class="line"></span><br><span class="line">getfinalurl-.-hashurl[将模糊图url地址通过一定算法映射到固定的散列域名,得到新的图片url-newUrl]</span><br><span class="line">hashurl--&gt;findstorage&#123;localstorage中是否有newUrl且压缩比一样或更低的记录&#125;</span><br><span class="line">findstorage--是--&gt;isExpired&#123;是否过期&#125;</span><br><span class="line">findstorage--否--&gt;carrycur</span><br><span class="line">isExpired--否--&gt;carryhigh[取未过期的压缩比最低的记录,newUrl后带上压缩比参数]</span><br><span class="line">isExpired--是--&gt;carrycur[图片url后带上当前的压缩比]</span><br><span class="line">carryhigh--&gt;replaceEnd(url替换完毕)</span><br><span class="line">carrycur--&gt;replaceEnd</span><br><span class="line">getfinalurl--&gt;updateEle[将节点属性的图片url进行替换]</span><br><span class="line">updateEle--&gt;updatelocal[更新localstorage]</span><br><span class="line">updatelocal--&gt;isnocache&#123;无缓存加载或localstorage中没有命中缓存?&#125;</span><br><span class="line">isnocache--否--&gt;oripicstop[原图加载完毕]</span><br><span class="line">isnocache--是--&gt;update[更新 url-压缩比-ttl 记录]</span><br><span class="line">update--&gt;oripicstop</span><br></pre></td></tr></table></figure>
<h3 id="扫描文档，获取图片节点具体流程"><a href="#扫描文档，获取图片节点具体流程" class="headerlink" title="扫描文档，获取图片节点具体流程"></a>扫描文档，获取图片节点具体流程</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">graph LR</span><br><span class="line">init(初始化节点列表)--&gt;scanOver&#123;文档扫描完毕?&#125;</span><br><span class="line">scanOver--否--&gt;scan[扫描文档]</span><br><span class="line">scan--&gt;getPicEle[获取picture节点]</span><br><span class="line">getPicEle--&gt;getchild[获取子节点的src和srcset中所有图片的url]</span><br><span class="line">getchild--&gt;ishost&#123;节点图片url的域名存在可替换图片域名?&#125;</span><br><span class="line">ishost--否--&gt;skip[跳过该节点]</span><br><span class="line">ishost--是--&gt;addList[节点列表加入该节点]</span><br><span class="line">scan--&gt;getImgEle[获取父节点非picture的img节点]</span><br><span class="line">getImgEle--&gt;getsrc[获取节点的src或srcset属性]</span><br><span class="line">getsrc--&gt;ishost</span><br><span class="line">scan--&gt;getstyleEle[获取style中含有background-image属性且值为图片url的节点]</span><br><span class="line">getstyleEle--&gt;ishost</span><br><span class="line">scan--&gt;getcss[扫描css文档,获取含有background-image属性且值为图片url的css规则]</span><br><span class="line">getcss--&gt;getcssDom[匹配css规则得到相应节点]</span><br><span class="line">getcssDom--&gt;ishost</span><br><span class="line">scan--&gt;getvideo[获取含poster属性且值为图片url的video节点]</span><br><span class="line">getvideo--&gt;ishost</span><br><span class="line">skip--&gt;scanOver</span><br><span class="line">addList--&gt;scanOver</span><br><span class="line">scanOver--是--&gt;scanEnd(节点获取完毕)</span><br></pre></td></tr></table></figure>

<h1 id="三、常见问题及解决方案"><a href="#三、常见问题及解决方案" class="headerlink" title="三、常见问题及解决方案"></a>三、常见问题及解决方案</h1><h2 id="3-1-源站有做懒加载策略的"><a href="#3-1-源站有做懒加载策略的" class="headerlink" title="3.1 源站有做懒加载策略的"></a>3.1 源站有做懒加载策略的</h2><p>默认情况下，会出现后续请求原图时，后台返回小图的问题。</p>
<p>因为访问的域名没有做更改，后台默认小图处理。</p>
<p>此外，还会发起更多的请求</p>
<ul>
<li>img中没有src</li>
</ul>
<p>pageload后扫描文档并拿不到src 故不会发起获取原图的异步请求</p>
<ul>
<li>img中src为源站的小图</li>
</ul>
<p>初次访问小图，后台会返回一张小小图，pageload之后我们扫描文档会去拿小图，加上懒加载策略触发又请求的图片，我们会发三次请求</p>
<p><strong><code>这个由客户配置，客户自己有做懒加载可以不选择我们的分层加载功能，所以这边我们无需考虑</code></strong></p>
<h2 id="3-2-css和style中background-image是否进行处理"><a href="#3-2-css和style中background-image是否进行处理" class="headerlink" title="3.2 css和style中background-image是否进行处理"></a>3.2 css和style中background-image是否进行处理</h2><p><strong><code>目前前端这边可以做到扫描文档获取到图片地址,对于伪类css（如 div:hover{background:xxx}）还得做额外处理</code></strong></p>
<p>需要测试下伪类</p>
<p>对于 <code>background-image:inherit</code>（使用父节点的bg-image）不做处理</p>
<h2 id="3-3-根据媒体属性的渲染"><a href="#3-3-根据媒体属性的渲染" class="headerlink" title="3.3 根据媒体属性的渲染"></a>3.3 根据媒体属性的渲染</h2><ul>
<li><p><code>&lt;img&gt;</code>的srcset属性和css的image-set()</p>
</li>
<li><p><code>&lt;picture&gt;</code> source、img子节点</p>
</li>
</ul>
<p><del>初次返回小图，pageload之后前端这边不知道应该请求哪张图片，不知道有没有办法获取渲染的是哪张图</del><br>可以通过img节点的currentSrc拿到值。(注：picture的也是去拿img的currentSrc)</p>
<p>但还是有新的问题，这个是响应式的，界面变化又会去拿新的图片地址了</p>
<blockquote>
<p>故需要做img节点currentSrc值变化监听</p>
<p>目前没有找到直接监听currentSrc的方法，但是一般currentSrc的变化都是由窗口大小变化引起的，故需要节流监听下window.resize,判断currentSrc有变化没。</p>
</blockquote>
<p>后面发现，即使知道图片地址变化了，也并不能通过img改src的方式替换图片，因为srcset存在的时候src是无效的。</p>
<p><strong><code>故解法只有在pageload的时候，把srcset中图片的地址做替换</code></strong></p>
<h2 id="3-4-和懒加载结合的策略"><a href="#3-4-和懒加载结合的策略" class="headerlink" title="3.4 和懒加载结合的策略"></a>3.4 和懒加载结合的策略</h2><ul>
<li><p>加载全部小图，pageload后加载全部大图，不做懒加载</p>
</li>
<li><p>加载全部小图，滑动懒加载大图</p>
</li>
<li><p>加载首屏小图，滑动懒加载大图</p>
</li>
</ul>
<blockquote>
<p>目前是加载全部小图和首屏大图</p>
</blockquote>
<ul>
<li>loaded时开启懒加载，滑动懒加载大图，load前滑动不做处理</li>
<li>domcontentloaded时开启懒加载，未load前都是加载的原图。</li>
</ul>
<h2 id="3-5-原始图片较小，第二次不做加载"><a href="#3-5-原始图片较小，第二次不做加载" class="headerlink" title="3.5 原始图片较小，第二次不做加载"></a>3.5 原始图片较小，第二次不做加载</h2><p>采用ajax请求，根据响应值长度判断，响应值长度小于某个值 说明是错误请求或者不做加载</p>
<p>最后通过 window.URL.createObjectURL() 插入图片。但是该方案不能解决<code>问题3</code></p>
<p><strong>新方案</strong>：<strong><code>第一次发过来若是原图，设置缓存策略，后续请求，返回307重定向到原来地址，这时候本地有缓存就不会再发请求了</code></strong></p>
<h2 id="3-6-根据网络速度，在第二次按照一定比例加载高清图"><a href="#3-6-根据网络速度，在第二次按照一定比例加载高清图" class="headerlink" title="3.6 根据网络速度，在第二次按照一定比例加载高清图"></a>3.6 根据网络速度，在第二次按照一定比例加载高清图</h2><p>如何测速？</p>
<p>利用<code>Resource Timing API</code> ，现代浏览器大部分支持，详见caniuse，</p>
<p>若不支持(safari11以下)，则采用<code>navigation timing</code></p>
<p>该api必须在<code>page load</code>后才能使用。</p>
<p><strong><code>具体网络带宽估计算法需要一定策略来评判</code></strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//计算浏览器加载该文档的时间</span></span><br><span class="line"><span class="keyword">var</span> nav = performance.getEntriesByType(<span class="string">'navigation'</span>)[<span class="number">0</span>]</span><br><span class="line"><span class="built_in">console</span>.log(nav.responseEnd-nav.responseStart,nav.transferSize,nav.transferSize/(nav.responseEnd-nav.responseStart)+<span class="string">"KB/s"</span>)</span><br></pre></td></tr></table></figure>

<p>facebook的测速算法：</p>
<p>前面资源还有做一定的过滤和排序（按responseEnd），</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">performance.getEntriesByType(<span class="string">'resource'</span>).filter(<span class="function"><span class="params">v</span>=&gt;</span>v.responseEnd-v.responseStart&gt;<span class="number">30</span>).reduce(<span class="function">(<span class="params">sum,cur</span>)=&gt;</span><span class="number">0.5</span>*(cur.transferSize / (cur.responseEnd - cur.responseStart || <span class="number">1</span>))+<span class="number">0.5</span>*sum,<span class="number">0</span>)</span><br></pre></td></tr></table></figure>
<p>facebook带宽利用率：<code>所有响应时间和及响应间隔和/所有响应时间</code></p>
<p><del>我们假设网络速度恒定（不抖动），给出以下数据（响应开始时间，响应结束时间，资源大小）。我们会计算每一段的响应速度，最后取最大值。这样解决了之前只计算html文档存在的问题，并且该方案的结果也兼容了html文档计算。<br>这边假设了网络不抖动。当出现网络抖动情况，会出现前面下载速度和后面不一致情况，但是由于我们后面也会做计算，在数据量足够的情况下是趋于稳定的。<br>推荐数据结构：线段树+扫描线 <code>O(nlogn)</code><br>暴力解法：<code>O(n²)</code></del></p>
<h3 id="算法流程"><a href="#算法流程" class="headerlink" title="算法流程"></a>算法流程</h3><ol start="0">
<li><p>数据结构体</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  name: v.name,<span class="comment">//标识而已</span></span><br><span class="line">  start: v.responseStart,</span><br><span class="line">  end: v.responseEnd,</span><br><span class="line">  size: v.transferSize,</span><br><span class="line">  <span class="comment">//KB/S 新算法中不用该参数</span></span><br><span class="line">  speed: v.transferSize / (v.responseEnd - v.responseStart || <span class="number">1</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>过滤、按start值升序排序</p>
<blockquote>
<p>剔除小数据,保留满足以下条件数据–》小数据会导致出现过大的网速计算结果，剔除小数据后对总体结果影响小，<br><code>v.transferSize &gt; 100 &amp;&amp; (v.responseEnd - v.responseStart) &gt; 10 &amp;&amp; v.responseStart &lt; loadTime</code></p>
</blockquote>
</li>
<li><p>分组，将响应时间无连续的分组</p>
</li>
<li><p>计算每组的每条响应的速度（具体计算见如下），并计算整组均值、方差、最大值</p>
<ul>
<li>3.1 将每条响应的start,end放入numArr</li>
<li>3.2 numArr去重，升序排序</li>
<li>3.3 将每条响应的时间区间按numArr值分割，当其他响应有重复的区间，该条响应的该时间区间会乘以重复的数量(包括自己)</li>
<li>3.4 将每段时间区间相加，形成该响应的实际响应时间，用size处于该时间则为该响应的实际速度</li>
<li>3.5 计算每条响应的速度</li>
</ul>
</li>
<li><p>根据size做加权平均，得到每组带宽估算值。</p>
</li>
<li><p>比较每组数据的结果，取最大值</p>
</li>
</ol>
<p>目前仍存在问题：小数据短时间，当×上一定并发时，会使数据过大。</p>
<blockquote>
<p>size加权平均，弱化小数据的影响</p>
</blockquote>
<p>算法效率过低O(n³)：需要改进</p>
<blockquote>
<p>目前O(n²)，仍可以剪枝优化</p>
</blockquote>
<h2 id="3-7-图片合并，第一次是模糊图片，第二次是补充信息，合并后变成原图"><a href="#3-7-图片合并，第一次是模糊图片，第二次是补充信息，合并后变成原图" class="headerlink" title="3.7 图片合并，第一次是模糊图片，第二次是补充信息，合并后变成原图"></a>3.7 图片合并，第一次是模糊图片，第二次是补充信息，合并后变成原图</h2><p>较难，目前不研究</p>
<h2 id="3-8-存在缓存，还是会分层加载，体验不好"><a href="#3-8-存在缓存，还是会分层加载，体验不好" class="headerlink" title="3.8 存在缓存，还是会分层加载，体验不好"></a>3.8 存在缓存，还是会分层加载，体验不好</h2><p>简单的将过程放在domcontentloaded时并不能解决问题，会导致初次加载或者无缓存加载，可能不触发分层机制（模糊的src未下完又直接被替换了）。</p>
<p><strong>分层加载逻辑修改为</strong>：</p>
<ol>
<li>html的原始文档,img仅做占位<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 初次加载的文档 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">figure</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">noscript</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"https://pic4.zhimg.com/50/1355440786fffad694ed56130dbbc0bc_hd.jpg"</span> <span class="attr">data-rawheight</span>=<span class="string">"667"</span> <span class="attr">data-rawwidth</span>=<span class="string">"1000"</span> <span class="attr">class</span>=<span class="string">"origin_image zh-lightbox-thumb"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">width</span>=<span class="string">"1000"</span> <span class="attr">data-original</span>=<span class="string">"https://pic4.zhimg.com/1355440786fffad694ed56130dbbc0bc_r.jpg"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">noscript</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"data:image/svg+xml;utf8,<span class="symbol">&amp;lt;</span>svg%20xmlns='http://www.w3.org/2000/svg'%20width='1000'%20height='667'<span class="symbol">&amp;gt;</span><span class="symbol">&amp;lt;</span>    /svg<span class="symbol">&amp;gt;</span>"</span><span class="attr">data-rawheight</span>=<span class="string">"667"</span> <span class="attr">data-rawwidth</span>=<span class="string">"1000"</span> <span class="attr">class</span>=<span class="string">"origin_image zh-lightbox-thumb lazy"</span> <span class="attr">width</span>=<span class="string">"1000"</span>           <span class="attr">data-original</span>=<span class="string">"https://pic4.zhimg.com/1355440786fffad694ed56130dbbc0bc_r.jpg"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">data-actualsrc</span>=<span class="string">"https://pic4.zhimg.com/50/1355440786fffad694ed56130dbbc0bc_hd.jpg"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">figure</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>domcontentload后，js将img用div替换，并开始模糊和高清图片的加载<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">figure</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">noscript</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"https://pic4.zhimg.com/50/1355440786fffad694ed56130dbbc0bc_hd.jpg"</span> <span class="attr">data-rawheight</span>=<span class="string">"667"</span> <span class="attr">data-rawwidth</span>=<span class="string">"1000"</span> <span class="attr">class</span>=<span class="string">"origin_image zh-lightbox-thumb"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">width</span>=<span class="string">"1000"</span> <span class="attr">data-original</span>=<span class="string">"https://pic4.zhimg.com/1355440786fffad694ed56130dbbc0bc_r.jpg"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">noscript</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--VagurImage中设置了背景色--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"VagurImage"</span> <span class="attr">data-src</span>=<span class="string">"https://pic4.zhimg.com/50/1355440786fffad694ed56130dbbc0bc_hd.jpg"</span> <span class="attr">style</span>=<span class="string">"width:654px;height:980.51px"</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--设置了高斯模糊和透明度--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"VagueImage-mask is-active"</span>&gt;</span></span><br><span class="line">        ::before</span><br><span class="line">        ::after</span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">figure</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>模糊图片下载完毕,设置background-image<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 文档其他地方不变不变--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"VagueImage-mask is-active"</span> <span class="attr">background-image</span>=<span class="string">"url('https://pic4.zhimg.com/50/1355440786fffad694ed56130dbbc0bc_60w.jpg')"</span>&gt;</span></span><br><span class="line">  ::before</span><br><span class="line">  ::after</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>高清图下载完毕<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">figure</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">noscript</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"https://pic4.zhimg.com/50/1355440786fffad694ed56130dbbc0bc_hd.jpg"</span> <span class="attr">data-rawheight</span>=<span class="string">"667"</span> <span class="attr">data-rawwidth</span>=<span class="string">"1000"</span> <span class="attr">class</span>=<span class="string">"origin_image zh-lightbox-thumb"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">width</span>=<span class="string">"1000"</span> <span class="attr">data-original</span>=<span class="string">"https://pic4.zhimg.com/1355440786fffad694ed56130dbbc0bc_r.jpg"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">noscript</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"https://pic4.zhimg.com/1355440786fffad694ed56130dbbc0bc_hd.jpg"</span> <span class="attr">data-rawheight</span>=<span class="string">"667"</span> <span class="attr">data-rawwidth</span>=<span class="string">"1000"</span> <span class="attr">class</span>=<span class="string">"origin_image zh-lightbox-thumb lazy"</span> <span class="attr">width</span>=<span class="string">"1000"</span>           <span class="attr">data-original</span>=<span class="string">"https://pic4.zhimg.com/1355440786fffad694ed56130dbbc0bc_r.jpg"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">data-actualsrc</span>=<span class="string">"https://pic4.zhimg.com/50/1355440786fffad694ed56130dbbc0bc_hd.jpg"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">figure</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>js代码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//还是放在domcontentloaded执行</span></span><br><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">"DOMContentLoaded"</span>,func,<span class="literal">false</span>)</span><br><span class="line"><span class="comment">//func</span></span><br><span class="line"><span class="comment">//采用两次Image，若img直接加载模糊图的话，只需imgLarge即可</span></span><br><span class="line"><span class="keyword">let</span> smallImage = <span class="built_in">document</span>.getElementById(<span class="string">'small-img'</span>)</span><br><span class="line"><span class="keyword">let</span> img = <span class="keyword">new</span> Image()</span><br><span class="line">img.src=smallImage.src</span><br><span class="line"><span class="comment">//由于smallImage的已经load了，这边我们利用缓存再加载同个图，会去拿缓存触发onload</span></span><br><span class="line">img.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="comment">//下图加载完毕</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> imgLarge = <span class="keyword">new</span> Image();</span><br><span class="line">imgLarge.src = smallImage.getAttribute(<span class="string">"originSrc"</span>)</span><br><span class="line">imgLarge.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  smallImage.src = imgLarge.src</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>但是目前该做法有个问题，就是原图获取是在domcontentloaded的时候进行，此时还未进行测速，或者说此时进行测速用我们的测速算法是不准的（资源下载过程中<code>performance.getEntries</code>是拿不到该资源的）。<br>一个想法是对于未测速时，都加载原图</p>
</blockquote>
<h2 id="3-9-带网络参数，不会命中原图已有本地缓存"><a href="#3-9-带网络参数，不会命中原图已有本地缓存" class="headerlink" title="3.9 带网络参数，不会命中原图已有本地缓存"></a>3.9 带网络参数，不会命中原图已有本地缓存</h2><p>问题详细描述：本地已缓存原图<code>a.jpg</code>，本地通过网络计算需要去请求低清图片<code>a.jpg?q=50</code>,这样就浪费了原来的原图缓存了。</p>
<p>解法：不同比例图片load后，将<code>url-TTL</code>放到localstorage中。每次网络计算完后，先查询缓存中有没有更高清的且未过期的图片，有的话选更高清的进行请求，不对localstorage做处理 ；否则请求相应网络状态的图片，onload后保存或更新localstorage。</p>
<blockquote>
<p>注1：每种清晰度图片的TTL可配置，通过script节点自定义属性设置。</p>
</blockquote>
<blockquote>
<p>注2：本地只有低清缓存不考虑请求是因为我们当前网络状态算还行了，不需要用低清的，否则多次清晰度切换会对用户造成视觉上影响。</p>
</blockquote>
<p>当前这个问题也可以通过<code>blur+动画</code>解决，需要产品评估下。</p>
<p>存在问题：强刷页面或者<code>disable cache</code>，请求图片得到响应后，<code>cache-control</code>本地缓存时间会重新计算。相应的我们localstorage的TTL也要进行修改</p>
<p>解决方案：这边我们主要就是判断图片是否为无缓存请求，当为无缓存请求，img.onload后需要对localstorage进行更新。<br>至于怎么判断是否为无缓存，就用<code>performance.getEntriesByName(&#39;当前加载图片的url&#39;)</code>结果是否满足某些规则来判断</p>
<h2 id="3-10-原图访问会做url替换，当前不是用h2-而是用域分片，当两次图片请求不是同个域时会不走缓存"><a href="#3-10-原图访问会做url替换，当前不是用h2-而是用域分片，当两次图片请求不是同个域时会不走缓存" class="headerlink" title="3.10 原图访问会做url替换，当前不是用h2 而是用域分片，当两次图片请求不是同个域时会不走缓存"></a>3.10 原图访问会做url替换，当前不是用h2 而是用域分片，当两次图片请求不是同个域时会不走缓存</h2><blockquote>
<p>方法1： 将图片链接与域名做map映射<code>url-&gt;host</code>，保存在localstorage，下次访问会先查一遍，没有的话就随机访问并保存在localstorage</p>
</blockquote>
<blockquote>
<p>方法2： 利用算法将图片url映射到某个MOD值(length为散列域名列表大小) 需要保证每个计算结果值不变且映射每个域名的概率一致<br>js 名称的每个字符的ascii码值相加再mod length</p>
</blockquote>
<h2 id="3-11-JavaScript被禁用-分层加载拿不到原图"><a href="#3-11-JavaScript被禁用-分层加载拿不到原图" class="headerlink" title="3.11 JavaScript被禁用 分层加载拿不到原图"></a>3.11 JavaScript被禁用 分层加载拿不到原图</h2><p>目前不考虑</p>
<h2 id="3-12-透明遮罩，动画让图片切换变得自然"><a href="#3-12-透明遮罩，动画让图片切换变得自然" class="headerlink" title="3.12 透明遮罩，动画让图片切换变得自然"></a>3.12 透明遮罩，动画让图片切换变得自然</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.VagueImage-mask</span> &#123;</span><br><span class="line">    <span class="attribute">z-index</span>: <span class="number">1</span>;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">background-size</span>: cover;</span><br><span class="line">    <span class="attribute">background-position</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">background-repeat</span>: no-repeat;</span><br><span class="line">    <span class="attribute">transition</span>: opacity .<span class="number">3s</span> ease-in</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>不过 由于我们不是提供的小分辨率图再放大，而是提供同分辨率的模糊图，这边就不进行透明遮罩处理了。</p>
<h2 id="3-13-图片节点扫描完毕后，后续通过js动态增加的Image节点，若图片src满足分层规则，后台会返回模糊图片"><a href="#3-13-图片节点扫描完毕后，后续通过js动态增加的Image节点，若图片src满足分层规则，后台会返回模糊图片" class="headerlink" title="3.13 图片节点扫描完毕后，后续通过js动态增加的Image节点，若图片src满足分层规则，后台会返回模糊图片"></a>3.13 图片节点扫描完毕后，后续通过js动态增加的Image节点，若图片src满足分层规则，后台会返回模糊图片</h2><ol>
<li>定时扫描<br>无任何优化时，jd 3k多节点  每次扫描耗时20ms左右，后面可能可以做增量优化。<br>但有个问题就是需要一直去做定时扫描，对客户网页性能有影响</li>
</ol>
<p>技术难度低</p>
<ol start="2">
<li>元素监听</li>
</ol>
<h3 id="通过Object-defineProperty去监听src的set"><a href="#通过Object-defineProperty去监听src的set" class="headerlink" title="通过Object.defineProperty去监听src的set"></a>通过<code>Object.defineProperty</code>去监听src的set</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="built_in">Object</span>.defineProperty(HTMLImageElement.prototype, <span class="string">'src'</span>, &#123;</span><br><span class="line">      enumerable: <span class="literal">false</span>,</span><br><span class="line">      configurable: <span class="literal">true</span>,</span><br><span class="line">      <span class="keyword">get</span>: function () &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.getAttribute(<span class="string">'src'</span>)</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="keyword">set</span>: function (newval) &#123;</span><br><span class="line">        <span class="comment">//属于可替换域的</span></span><br><span class="line">        <span class="keyword">if</span> (newval.indexOf(<span class="string">"data:image"</span>) === <span class="number">-1</span> &amp;&amp; Util.inlist(newval, settings.imgHostList)) &#123;</span><br><span class="line">          <span class="keyword">this</span>.setAttribute(<span class="string">'src'</span>, Util.getNewUrlFromCache(newval, MAX_QUALITY).url);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">this</span>.setAttribute(<span class="string">'src'</span>, newval);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">//TODO srcset的defineProperty</span></span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="built_in">console</span>.error(<span class="string">'Image Element set error'</span>, error)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>兼容IE8，IE8支持对html元素对象进行 defineProperty ,enumerable 需要设置为false</p>
<h3 id="document-write方法重载"><a href="#document-write方法重载" class="headerlink" title="document.write方法重载"></a>document.write方法重载</h3><p>注：要么必须支持js异步加载让document.write延后执行，要么把图片优化脚本放在head中</p>
<p>以下步骤仅测试图片优化功能用，暂不兼容js异步加载功能，document.write方法也是等图片优化脚本加载完毕后执行</p>
<ol>
<li>获得当前执行脚本节点-currentScript<blockquote>
<p>作为标志位，内容将插入在该节点之前，此处命中为节点 CUR</p>
</blockquote>
</li>
<li>找到CUR的父节点CURP,创建一个CURP.tagName的节点CURC，其innerHTML为所插入内容</li>
<li>遍历节点，找到满足条件的图片节点并进行host替换</li>
<li>将CURC的所有子节点insertBefore(CUR)</li>
</ol>
<p>该做法获取不到css渲染</p>
<p>技术难度较高</p>
<h2 id="3-14-图片节点寻找完毕后，需要进行一个视距排序，这样当没开启懒加载时才会优先加载首屏图像"><a href="#3-14-图片节点寻找完毕后，需要进行一个视距排序，这样当没开启懒加载时才会优先加载首屏图像" class="headerlink" title="3.14 图片节点寻找完毕后，需要进行一个视距排序，这样当没开启懒加载时才会优先加载首屏图像"></a>3.14 图片节点寻找完毕后，需要进行一个视距排序，这样当没开启懒加载时才会优先加载首屏图像</h2><p>有空写</p>
<h1 id="四、详细设计"><a href="#四、详细设计" class="headerlink" title="四、详细设计"></a>四、详细设计</h1><h2 id="4-1-获取script自定义数据"><a href="#4-1-获取script自定义数据" class="headerlink" title="4.1 获取script自定义数据"></a>4.1 获取script自定义数据</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">data-host</span>=<span class="string">"xxx"</span> <span class="attr">id</span>=<span class="string">"speed"</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">let</span> ele = <span class="built_in">document</span>.currentScript</span></span><br><span class="line"><span class="javascript">  <span class="built_in">console</span>.log(ele.attributes[<span class="string">"data-host"</span>].nodeValue)</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>这样可以获取到本script节点的自定义数据</p>
<h2 id="4-2-注册window-load事件监听器"><a href="#4-2-注册window-load事件监听器" class="headerlink" title="4.2 注册window.load事件监听器"></a>4.2 注册window.load事件监听器</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addLoadEvent</span>(<span class="params">func</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">window</span>.addEventListener) &#123;</span><br><span class="line">    <span class="built_in">window</span>.addEventListener(<span class="string">"load"</span>, func, <span class="literal">false</span>)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">//低版ie兼容</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">window</span>.attachEvent) &#123;</span><br><span class="line">      <span class="built_in">window</span>.attachEvent(<span class="string">"onload"</span>, func)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">addLoadEvent(streamFunc);</span><br></pre></td></tr></table></figure>
<h2 id="4-3-计算用户网络状况"><a href="#4-3-计算用户网络状况" class="headerlink" title="4.3 计算用户网络状况"></a>4.3 计算用户网络状况</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//计算浏览器加载该文档的时间</span></span><br><span class="line"><span class="keyword">var</span> nav = performance.getEntriesByType(<span class="string">'navigation'</span>)[<span class="number">0</span>]</span><br><span class="line"><span class="built_in">console</span>.log(nav.responseEnd-nav.responseStart,nav.transferSize,nav.transferSize/(nav.responseEnd-nav.responseStart)+<span class="string">"KB/s"</span>)</span><br></pre></td></tr></table></figure>

<h2 id="4-4-节点获取"><a href="#4-4-节点获取" class="headerlink" title="4.4 节点获取"></a>4.4 节点获取</h2><h3 id="4-4-1-获取img元素"><a href="#4-4-1-获取img元素" class="headerlink" title="4.4.1 获取img元素"></a>4.4.1 获取img元素</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> imgDOMList = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"img"</span>);</span><br><span class="line">[...imgDOMList].forEach(<span class="function">(<span class="params">dom</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//其他处理</span></span><br><span class="line">    <span class="comment">//含srcset属性做额外标识</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h3 id="4-4-2-获取style中的background"><a href="#4-4-2-获取style中的background" class="headerlink" title="4.4.2 获取style中的background"></a>4.4.2 获取style中的background</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> styleDOMList = <span class="built_in">document</span>.querySelectorAll(<span class="string">"[style*=background]"</span>);</span><br><span class="line">[...styleDOMList].filter(<span class="function"><span class="params">v</span>=&gt;</span>v.nodeType == <span class="number">1</span> &amp;&amp; v.style.backgroundImage).forEach(<span class="function">(<span class="params">dom</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//其他处理</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h3 id="4-4-3-获取css中的background"><a href="#4-4-3-获取css中的background" class="headerlink" title="4.4.3 获取css中的background"></a>4.4.3 获取css中的background</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取css中的background，</span></span><br><span class="line"><span class="built_in">document</span>.styleSheets.filter(<span class="function"><span class="params">v</span>=&gt;</span>&#123;</span><br><span class="line">  <span class="comment">//根据v.href过滤第三方css</span></span><br><span class="line">  <span class="keyword">return</span> </span><br><span class="line">&#125;).forEach(<span class="function"><span class="params">v</span>=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> rules = v.cssRules || v.rules</span><br><span class="line">  rules.forEach(<span class="function"><span class="params">v</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> sel = v.selectorText</span><br><span class="line">    <span class="keyword">let</span> domList = <span class="built_in">document</span>.querySelectorAll(sel);</span><br><span class="line">    <span class="keyword">if</span>(v.style.backgroundImage)&#123;</span><br><span class="line">      <span class="comment">//满足条件的操作</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>完整版本</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">queryImgNodeList: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> list = []</span><br><span class="line">        <span class="comment">//获取picture节点</span></span><br><span class="line">        ; (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">          <span class="keyword">var</span> pictureList = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"picture"</span>);</span><br><span class="line">          <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; pictureList.length; i++) &#123;</span><br><span class="line">            <span class="comment">//仅img子节点存在时进行下一步判断，一般都会有img子节点</span></span><br><span class="line">            <span class="keyword">if</span> (pictureList[i].getElementsByTagName(<span class="string">"img"</span>).length) &#123;</span><br><span class="line">              <span class="keyword">var</span> urlList = []</span><br><span class="line">              <span class="keyword">var</span> nodeList = pictureList[i].querySelectorAll(<span class="string">"source,img"</span>)</span><br><span class="line">              <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; nodeList.length; j++) &#123;</span><br><span class="line">                <span class="keyword">var</span> srcset = nodeList[j].getAttribute(<span class="string">"srcset"</span>)</span><br><span class="line">                <span class="keyword">var</span> src = nodeList[j].getAttribute(<span class="string">"src"</span>)</span><br><span class="line">                <span class="keyword">if</span> (srcset) &#123;</span><br><span class="line">                  urlList = urlList.concat(getUrlListInSrcset(srcset))</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (src &amp;&amp; src.indexOf(<span class="string">"data:image"</span>) === <span class="number">-1</span>) &#123;</span><br><span class="line">                  urlList.push(src)</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;</span><br><span class="line">              <span class="keyword">if</span> (urlList.length &gt; <span class="number">0</span> &amp;&amp; inlist(urlList, settings.imgHostList)) &#123;</span><br><span class="line">                list.push(<span class="keyword">new</span> WsNode(<span class="string">'picture'</span>, pictureList[i]))</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)()</span><br><span class="line">        <span class="comment">// 获取video节点</span></span><br><span class="line">        ; (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">          <span class="keyword">var</span> videoList = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"video"</span>);</span><br><span class="line">          <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; videoList.length; i++) &#123;</span><br><span class="line">            <span class="keyword">var</span> poster = videoList[i].getAttribute(<span class="string">"poster"</span>)</span><br><span class="line">            <span class="keyword">if</span> (poster &amp;&amp; poster.indexOf(<span class="string">"data:image"</span>) === <span class="number">-1</span> &amp;&amp; inlist(poster, settings.imgHostList)) &#123;</span><br><span class="line">              list.push(<span class="keyword">new</span> WsNode(<span class="string">'video'</span>, videoList[i]))</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)()</span><br><span class="line">        <span class="comment">// 获取img节点</span></span><br><span class="line">        ; (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">          <span class="keyword">var</span> imgList = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"img"</span>);</span><br><span class="line">          <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; imgList.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (imgList[i].parentNode.nodeName !== <span class="string">"PICTURE"</span>) &#123;</span><br><span class="line">              <span class="keyword">var</span> urlList = []</span><br><span class="line">              <span class="keyword">var</span> srcset = imgList[i].getAttribute(<span class="string">"srcset"</span>)</span><br><span class="line">              <span class="keyword">var</span> src = imgList[i].getAttribute(<span class="string">"src"</span>)</span><br><span class="line">              <span class="keyword">if</span> (srcset) &#123;</span><br><span class="line">                urlList = getUrlListInSrcset(srcset)</span><br><span class="line">              &#125; <span class="keyword">else</span> <span class="keyword">if</span> (src &amp;&amp; src.indexOf(<span class="string">"data:image"</span>) === <span class="number">-1</span>) &#123;</span><br><span class="line">                urlList.push(src)</span><br><span class="line">              &#125;</span><br><span class="line">              <span class="keyword">if</span> (urlList.length &gt; <span class="number">0</span> &amp;&amp; inlist(urlList, settings.imgHostList)) &#123;</span><br><span class="line">                list.push(<span class="keyword">new</span> WsNode(<span class="string">'img'</span>, imgList[i]))</span><br><span class="line">              &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)()</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        //获取style*background-image</span></span><br><span class="line"><span class="comment">        ; (function () &#123;</span></span><br><span class="line"><span class="comment">          var styleList = document.querySelectorAll("[style]");</span></span><br><span class="line"><span class="comment">          //ie8 not support [style*=background]</span></span><br><span class="line"><span class="comment">          for (var i = 0; i &lt; styleList.length; i++) &#123;</span></span><br><span class="line"><span class="comment">            var cur = styleList[i];</span></span><br><span class="line"><span class="comment">            if (cur.nodeType == 1 &amp;&amp; cur.style.backgroundImage) &#123;</span></span><br><span class="line"><span class="comment">              var url = getBackgroundImageUrl(cur.style.backgroundImage);</span></span><br><span class="line"><span class="comment">              if (url &amp;&amp; inlist(url, settings.imgHostList)) &#123;</span></span><br><span class="line"><span class="comment">                list.push(new WsNode('style', cur))</span></span><br><span class="line"><span class="comment">              &#125;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">          &#125;</span></span><br><span class="line"><span class="comment">        &#125;)()</span></span><br><span class="line"><span class="comment">        //获取css background-image</span></span><br><span class="line"><span class="comment">        ; (function () &#123;</span></span><br><span class="line"><span class="comment">          for (var i = 0; i &lt; document.styleSheets.length; i++) &#123;</span></span><br><span class="line"><span class="comment">            var href = document.styleSheets[i].href;</span></span><br><span class="line"><span class="comment">            //过滤不满足规则的css外链</span></span><br><span class="line"><span class="comment">            if (href &amp;&amp; !inlist(href, settings.cssHostList)) &#123;</span></span><br><span class="line"><span class="comment">              continue</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">            var rules = document.styleSheets[i].cssRules || document.styleSheets[i].rules</span></span><br><span class="line"><span class="comment">            //遍历每条规则</span></span><br><span class="line"><span class="comment">            for (var j = 0; j &lt; rules.length; j++) &#123;</span></span><br><span class="line"><span class="comment">              var url = getBackgroundImageUrl(rules[j].style.backgroundImage)</span></span><br><span class="line"><span class="comment">              if (url &amp;&amp; inlist(url, settings.imgHostList)) &#123;</span></span><br><span class="line"><span class="comment">                var eles = document.querySelectorAll(rules[j].selectorText)</span></span><br><span class="line"><span class="comment">                for (var k = 0; k &lt; eles.length; k++) &#123;</span></span><br><span class="line"><span class="comment">                  list.push(new WsNode('css', eles[k], url))</span></span><br><span class="line"><span class="comment">                &#125;</span></span><br><span class="line"><span class="comment">              &#125;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">          &#125;</span></span><br><span class="line"><span class="comment">        &#125;)()*/</span></span><br><span class="line">        <span class="comment">//获取background-image的节点</span></span><br><span class="line">        ; (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">          <span class="keyword">var</span> bglist = <span class="built_in">document</span>.querySelectorAll(<span class="string">"*"</span>)</span><br><span class="line">          <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; bglist.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (bglist[i].nodeType === <span class="number">1</span>) &#123;</span><br><span class="line">              <span class="keyword">var</span> url = getBackgroundImageUrl(getStyleBackgroundImage(bglist[i]))</span><br><span class="line">              <span class="keyword">if</span> (url &amp;&amp; inlist(url, settings.imgHostList)) &#123;</span><br><span class="line">                list.push(<span class="keyword">new</span> WsNode(<span class="string">'bg'</span>, bglist[i], url))</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)()</span><br><span class="line">      <span class="keyword">return</span> list</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure>
<h3 id="4-4-4-获取picture节点"><a href="#4-4-4-获取picture节点" class="headerlink" title="4.4.4 获取picture节点"></a>4.4.4 获取picture节点</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> imgDOMList = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"picture"</span>);</span><br><span class="line">imgDOMList.forEach(<span class="function"><span class="params">v</span>=&gt;</span>v.childList.forEach(<span class="function"><span class="params">c</span>=&gt;</span>c))</span><br></pre></td></tr></table></figure>

<p>为避免重复计算，先扫描<code>picture</code>,再扫描<code>img</code></p>
<h2 id="4-5-懒加载"><a href="#4-5-懒加载" class="headerlink" title="4.5 懒加载"></a>4.5 懒加载</h2><h3 id="方法1-IntersectionObserver"><a href="#方法1-IntersectionObserver" class="headerlink" title="方法1 IntersectionObserver"></a>方法1 IntersectionObserver</h3><p>兼容性差，开发量低</p>
<h3 id="方法2-scroll-window-requestAnimationFrame"><a href="#方法2-scroll-window-requestAnimationFrame" class="headerlink" title="方法2 scroll+window.requestAnimationFrame()"></a>方法2 scroll+window.requestAnimationFrame()</h3><p>兼容性高，开发量还行</p>
<h2 id="4-6-图片地址替换"><a href="#4-6-图片地址替换" class="headerlink" title="4.6 图片地址替换"></a>4.6 图片地址替换</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 判断是否为可替换域名</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">judgeHost</span>(<span class="params">url</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 相对路径转绝对路径(IE6, IE7)无效</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">directlink</span>(<span class="params">url</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="built_in">document</span>.createElement(<span class="string">'a'</span>);</span><br><span class="line">  a.href = url;</span><br><span class="line">  <span class="keyword">return</span> a.href;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 根据散列域名、网速替换url</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">replace</span>(<span class="params">originUrl,hashHost,networkSpeed</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>大前端</category>
      </categories>
      <tags>
        <tag>前端优化</tag>
      </tags>
  </entry>
  <entry>
    <title>基于CDN的前端优化可行性分析</title>
    <url>/2018/05/14/2018Q2/%E5%9F%BA%E4%BA%8ECDN%E7%9A%84%E5%89%8D%E7%AB%AF%E4%BC%98%E5%8C%96%E5%8F%AF%E8%A1%8C%E6%80%A7%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>探索 CDN 厂商能为前端页面提供的优化方案</p>
<a id="more"></a>

<h1 id="基本优化"><a href="#基本优化" class="headerlink" title="基本优化"></a>基本优化</h1><h2 id="资源压缩"><a href="#资源压缩" class="headerlink" title="资源压缩"></a>资源压缩</h2><blockquote>
<p>html,css,js等资源文件进行压缩</p>
</blockquote>
<h2 id="缓存控制"><a href="#缓存控制" class="headerlink" title="缓存控制"></a>缓存控制</h2><blockquote>
<p>设置合理的缓存策略,文件设置版本号等等</p>
</blockquote>
<h2 id="域分片"><a href="#域分片" class="headerlink" title="域分片"></a>域分片</h2><blockquote>
<p>增大http并发连接数</p>
</blockquote>
<h1 id="图像优化"><a href="#图像优化" class="headerlink" title="图像优化"></a>图像优化</h1><h2 id="分层加载"><a href="#分层加载" class="headerlink" title="分层加载"></a>分层加载</h2><blockquote>
<p>基于网络条件分层加载,提供多种压缩级别的图像资源</p>
</blockquote>
<h2 id="懒加载"><a href="#懒加载" class="headerlink" title="懒加载"></a>懒加载</h2><blockquote>
<p>仅加载当前浏览器视区可见的图像，当用户向下滑动时加载新图像,参考lazyload。除了图像外，其他资源也是同理</p>
</blockquote>
<blockquote>
<p>参考：<a href="http://taobaofed.org/blog/2016/04/06/optimize-in-tbhome#关键模块优先" target="_blank" rel="noopener">http://taobaofed.org/blog/2016/04/06/optimize-in-tbhome#关键模块优先</a></p>
</blockquote>
<h2 id="特定浏览器的图像优化"><a href="#特定浏览器的图像优化" class="headerlink" title="特定浏览器的图像优化"></a>特定浏览器的图像优化</h2><blockquote>
<p>webp、jpeg2000等图像格式可以降低负载，而不影响图片质量</p>
</blockquote>
<h2 id="图像内联"><a href="#图像内联" class="headerlink" title="图像内联"></a>图像内联</h2><blockquote>
<p>对于小于10k(具体大小可商定)的图像资源采用base64内联</p>
</blockquote>
<h1 id="js优化"><a href="#js优化" class="headerlink" title="js优化"></a>js优化</h1><h2 id="js合并"><a href="#js合并" class="headerlink" title="js合并"></a>js合并</h2><blockquote>
<p>将无依赖的js打包为一个js，减少http请求数。还需要考虑到是否会让缓存失效</p>
</blockquote>
<h2 id="异步化"><a href="#异步化" class="headerlink" title="异步化"></a>异步化</h2><blockquote>
<p>与dom无关的js放在页面渲染后加载</p>
</blockquote>
<h1 id="其他方向"><a href="#其他方向" class="headerlink" title="其他方向"></a>其他方向</h1><h2 id="组件预加载"><a href="#组件预加载" class="headerlink" title="组件预加载"></a>组件预加载</h2><blockquote>
<p>利用浏览器空闲时间请求用户接下来可能会访问的组件。</p>
</blockquote>
<p>用户行为预测分析</p>
<h2 id="http2"><a href="#http2" class="headerlink" title="http2"></a>http2</h2><blockquote>
<p>多路复用，header压缩</p>
</blockquote>
<h2 id="dns-prefetch"><a href="#dns-prefetch" class="headerlink" title="dns-prefetch"></a>dns-prefetch</h2><p>见 <code>W3C_DNS_Prefetching.md</code></p>
<h2 id="尽早发送html部分响应"><a href="#尽早发送html部分响应" class="headerlink" title="尽早发送html部分响应"></a>尽早发送html部分响应</h2><blockquote>
<p>缩短提供第一部分html响应的世界，使浏览器更早下载资源。</p>
<p>akamai 提供的 EdgeStart 功能。我理解应该是对服务端渲染网页的加速，可以探讨下</p>
</blockquote>
<p><a href="https://developer.akamai.com/learn/FEO/edgestart.html" target="_blank" rel="noopener">What is EdgeStart?</a></p>
<p>针对动态网页,需要客户配合设置一些标签位（或者看是否设置缓存策略），将动态网页分为两部分，设为标识位的内容先返回给前端（并带上我们的加速脚本），内容一般是一些可缓存的资源。未标识的为动态内容，需要回源渲染。</p>
<p>可以利用http的chunk，逐步把html文档推给用户。或者插入我们加速脚本 采用ajax请求获取数据。（需要CDN或源站配合配合</p>
<p>标志位内容可以先被解析，用于提高非缓存页面的渲染时间和TTFB</p>
<h2 id="big-pipe-块式传输"><a href="#big-pipe-块式传输" class="headerlink" title="big_pipe 块式传输"></a>big_pipe 块式传输</h2><p>前端模块化，服务端块式传输。</p>
<h2 id="监控由js发起的js请求，外链加速"><a href="#监控由js发起的js请求，外链加速" class="headerlink" title="监控由js发起的js请求，外链加速"></a>监控由js发起的js请求，外链加速</h2><p>对该对象的src属性重新定义</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Object</span>.defineProperty(HTMLScriptElement.prototype, <span class="string">'src'</span>, &#123;</span><br><span class="line">    enumerable: <span class="literal">true</span>,</span><br><span class="line">    configurable: <span class="literal">true</span>,</span><br><span class="line">    <span class="keyword">get</span>: function()&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.getAttribute(<span class="string">'src'</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">set</span>: function(newval)&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">this</span>.setAttribute(<span class="string">'src'</span>,<span class="string">'http://www.wangsu.com/'</span>+newval);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>对于<code>doument.write(&#39;&lt;script src=&quot;a.js&quot;/&gt;&#39;)</code> 需要额外处理</p>
<h2 id="CSS-DataURI"><a href="#CSS-DataURI" class="headerlink" title="CSS-DataURI"></a>CSS-DataURI</h2><h2 id="异步加载js不执行，按序执行"><a href="#异步加载js不执行，按序执行" class="headerlink" title="异步加载js不执行，按序执行"></a>异步加载js不执行，按序执行</h2><p>上文，我们提出了js异步，让js在domcontentload之后再去加载，js加载的过程中，只是简单的插入<code>&lt;script&gt;</code>节点到文档中，不能保证script的执行顺序。</p>
<p>未异步前，script是严格的按序执行的，而无论在浏览器的哪个节点，通过动态插入<code>script</code>的方式无法保证其执行顺序</p>
<p>最粗暴的做法即：前一个脚本onload事件触发后(脚本执行完毕)，执行下一个脚本的下载的执行</p>
<p>但是这样就变成顺序下载了，无法充分利用带宽。</p>
<p>我们可以利用<code>&lt;object&gt;</code>进行预下载，并做一套控制</p>
<p>(利用object tag 会生成blob,挺耗时的)</p>
<h1 id="移动端优化"><a href="#移动端优化" class="headerlink" title="移动端优化"></a>移动端优化</h1><h2 id="AMP"><a href="#AMP" class="headerlink" title="AMP"></a>AMP</h2>]]></content>
      <categories>
        <category>大前端</category>
      </categories>
      <tags>
        <tag>CDN</tag>
        <tag>前端优化</tag>
      </tags>
  </entry>
  <entry>
    <title>yahoo前端优化35军规</title>
    <url>/2018/05/10/2018Q2/yahoo%E5%89%8D%E7%AB%AF%E4%BC%98%E5%8C%9635%E5%86%9B%E8%A7%84/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本文为 yahoo 前端优化35军规的梗概，部分优化技术已过时，请注意分辨</p>
<a id="more"></a>

<h1 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h1><h2 id="1-尽量减少HTTP请求数"><a href="#1-尽量减少HTTP请求数" class="headerlink" title="1.尽量减少HTTP请求数"></a>1.尽量减少HTTP请求数</h2><ol>
<li>资源合并</li>
<li>小图片base64编码</li>
<li>多图合并为单图</li>
<li>CSS Sprites，通过background-image和background-position属性来定位要显示的部分</li>
</ol>
<h2 id="2-减少DNS查找"><a href="#2-减少DNS查找" class="headerlink" title="2. 减少DNS查找"></a>2. 减少DNS查找</h2><p>组件分散到2-4个主机名，这是同时减少DNS查找和允许高并发下载的折中方案</p>
<h2 id="3-避免重定向"><a href="#3-避免重定向" class="headerlink" title="3. 避免重定向"></a>3. 避免重定向</h2><p>HTTP 重定向是一项用于将客户端重定向到设备专用网址的常用技术。</p>
<p>但采用重定向会增加延迟。</p>
<p>若必须重定向的话，请使用HTTP重定向（响应体为空）并用301(永久转移)或302（暂时转移）状态码。（两者区别在于302会被url拦截，具体百度</p>
<p>因为系统会根据 HTTP 请求标头中的用户代理来执行重定向。 例子：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">HTTP&#x2F;1.1 301 Moved Permanently</span><br><span class="line">Location: http:&#x2F;&#x2F;example.com&#x2F;newuri</span><br><span class="line">Content-Type: text&#x2F;html</span><br></pre></td></tr></table></figure>


<p>若难以实现HTTP重定向，则用js再去做。该做法多了文档下载，js解析的过程。</p>
<p><strong>注意1：</strong>有一种常见的极其浪费资源的重定向，就是URL尾部缺少一个斜线的时候。</p>
<p>例如，跳转到<a href="http://astrology.yahoo.com/astrology会返回一个重定向到http://astrology.yahoo.com/astrology/的301响应（注意添在尾部的斜线）。" target="_blank" rel="noopener">http://astrology.yahoo.com/astrology会返回一个重定向到http://astrology.yahoo.com/astrology/的301响应（注意添在尾部的斜线）。</a></p>
<p>在Apache中可以用Alias，mod_rewrite或者DirectorySlash指令来取消不必要的重定向。</p>
<p><strong>注意2：</strong>进行双向重定向与单向重定向</p>
<p>将访问桌面版网页的移动用户重定向到对应的移动版网页 – “单向”重定向</p>
<p>在移动用户以及桌面设备用户分别访问桌面版网站和移动网站上的网页时，对他们进行重定向 –“双向”重定向</p>
<p><a href="https://developers.google.com/search/mobile-sites/mobile-seo/separate-urls#automatic-redirection" target="_blank" rel="noopener">https://developers.google.com/search/mobile-sites/mobile-seo/separate-urls#automatic-redirection</a></p>
<!--more-->


<h2 id="4-缓存Ajax"><a href="#4-缓存Ajax" class="headerlink" title="4. 缓存Ajax"></a>4. 缓存Ajax</h2><p>Ajax GET请求，可以使用客户端缓存（而且只要地址一样，它总是会使用客户端缓存）</p>
<p>e.g: 邮箱web,请求通讯录数据，请求时返回结果带上通讯录最后修改的时间。后续请求带上该时间戳&amp;t=xxx，若通讯录没有改变则请求缓存。若通讯录做了修改，时间戳改变，后续该请求新的数据.</p>
<p><strong>注意：</strong>可能只适用于单用户，如这边的通讯录数据可以多人更改的话，就不能缓存了</p>
<h2 id="5-延迟加载组件"><a href="#5-延迟加载组件" class="headerlink" title="5. 延迟加载组件"></a>5. 延迟加载组件</h2><p>与渲染页面无关的内容可以往后。</p>
<p>比如淘宝首页，把非关键模块放入了懒加载队列，满足一定条件的时候再去加载，参考：<a href="http://taobaofed.org/blog/2016/04/06/optimize-in-tbhome#关键模块优先" target="_blank" rel="noopener">http://taobaofed.org/blog/2016/04/06/optimize-in-tbhome#关键模块优先</a></p>
<h2 id="6-预加载组件"><a href="#6-预加载组件" class="headerlink" title="6. 预加载组件"></a>6. 预加载组件</h2><p>利用浏览器空闲时间请求用户接下来可能会访问的组件。</p>
<ol>
<li>无条件预加载 <blockquote>
<p>比如：搜索主页，预加载后面搜索页一定会出现的资源</p>
</blockquote>
</li>
<li>条件性预加载<blockquote>
<p>猜测用户将要跳转到哪里并据此预加载。比如正在填写“添加表单”，后面会跳到表单详情，则先把表单详情的资源拿到</p>
</blockquote>
</li>
<li>提前预加载<blockquote>
<p>比如提供了一个新版网站入口。用户从旧版转向新版时，资源都是初次加载，会比较慢。此时可以选择预加载</p>
</blockquote>
</li>
</ol>
<h2 id="7-减少dom元素数量"><a href="#7-减少dom元素数量" class="headerlink" title="7. 减少dom元素数量"></a>7. 减少dom元素数量</h2><p>只在语义上有意义的时候使用<code>&lt;div&gt;</code>，而不是因为它能够渲染一个新行</p>
<p>按需加载</p>
<p><code>document.getElementsByTagName(&#39;*&#39;).length</code> 查看dom元素数量</p>
<h2 id="8-跨域分离组件"><a href="#8-跨域分离组件" class="headerlink" title="8. 跨域分离组件"></a>8. 跨域分离组件</h2><p>可以最大化并行下载。与 <strong><code>2. 减少DNS查找</code></strong> 结合，一般不超过2-4个域</p>
<h2 id="9-尽量少用，合理使用iframe"><a href="#9-尽量少用，合理使用iframe" class="headerlink" title="9. 尽量少用，合理使用iframe"></a>9. 尽量少用，合理使用iframe</h2><p>缺点：</p>
<ol>
<li>代价高，即使是空白的iframe</li>
<li>浏览器返回按钮失效</li>
<li>堵塞主页面的onload事件，</li>
<li>与主页面共享连接池，而浏览器对相同域的连接有限制，所以会影响页面的并行加载</li>
</ol>
<p>优点：</p>
<ol>
<li>可以引入缓慢的第三方内容，如广告</li>
<li>iframe引入了安全沙箱，可避免引入的页面对自己的页面产生不利的影响。比如防止访问父页面dom,防止读写cookie等数据</li>
</ol>
<p>建议：</p>
<blockquote>
<p>如果要使用iframe,采用动态给iframe添加src属性值的方式（js脚本放在body底部）。<br>可以避免上述缺点的3和4</p>
</blockquote>
<h2 id="10-避免404"><a href="#10-避免404" class="headerlink" title="10. 避免404"></a>10. 避免404</h2><p>请求不存在的脚本文件，即使返回404，仍会去解析响应内容，无疑多了很多处理时间</p>
<h1 id="css-部分"><a href="#css-部分" class="headerlink" title="css 部分"></a>css 部分</h1><h2 id="11-避免在css中使用表达式"><a href="#11-避免在css中使用表达式" class="headerlink" title="11. 避免在css中使用表达式"></a>11. 避免在css中使用表达式</h2><p>运算多次，性能消耗大。</p>
<p>现代浏览器已不支持了，无需了解。</p>
<h2 id="12-使用link而不是-import导入样式表"><a href="#12-使用link而不是-import导入样式表" class="headerlink" title="12. 使用link而不是@import导入样式表"></a>12. 使用link而不是@import导入样式表</h2><p>使用更加标准的link标记，而不是使用IE专用的@import语句</p>
<h2 id="13-避免使用Filters-滤镜"><a href="#13-避免使用Filters-滤镜" class="headerlink" title="13. 避免使用Filters(滤镜)"></a>13. 避免使用Filters(滤镜)</h2><p>滤镜会阻塞渲染，影响性能。</p>
<p>现代浏览器已不支持了，无需了解。</p>
<h2 id="14-把样式表放在顶部"><a href="#14-把样式表放在顶部" class="headerlink" title="14. 把样式表放在顶部"></a>14. 把样式表放在顶部</h2><p>之所以放在顶部，是为了能让页面逐步渲染（渐进式呈现（render progressively））</p>
<h1 id="js部分"><a href="#js部分" class="headerlink" title="js部分"></a>js部分</h1><h2 id="15-去除重复脚本"><a href="#15-去除重复脚本" class="headerlink" title="15. 去除重复脚本"></a>15. 去除重复脚本</h2><h2 id="16-尽量减少DOM访问"><a href="#16-尽量减少DOM访问" class="headerlink" title="16. 尽量减少DOM访问"></a>16. 尽量减少DOM访问</h2><ol>
<li>缓存已访问过的dom元素</li>
<li>一批节点操作，不用一个一个的在dom树上操作，应该一起操作完再放dom树上</li>
<li>避免js直接修改布局，而是用js让节点选择预定义的其他css布局 </li>
</ol>
<h2 id="17-设计“智能”的事件处理程序"><a href="#17-设计“智能”的事件处理程序" class="headerlink" title="17. 设计“智能”的事件处理程序"></a>17. 设计“智能”的事件处理程序</h2><p>举例：监听A节点下的10个子节点的点击事件。应该把事件处理器绑定A节点而不是10个节点各自绑定。</p>
<p>通过事件冒泡获知哪个按钮是事件源</p>
<p>这样做维护方便（取消监听时只要取消一处），性能好（只有一个事件监听器）</p>
<h2 id="18-把脚本放在底部"><a href="#18-把脚本放在底部" class="headerlink" title="18. 把脚本放在底部"></a>18. 把脚本放在底部</h2><p>脚本会堵塞页面的解析和渲染。</p>
<p>如果脚本不存在document依赖，则可以放在页面底部</p>
<h1 id="js-css"><a href="#js-css" class="headerlink" title="js,css"></a>js,css</h1><h2 id="19-将js和css作为外部文件引用"><a href="#19-将js和css作为外部文件引用" class="headerlink" title="19. 将js和css作为外部文件引用"></a>19. 将js和css作为外部文件引用</h2><p>优点：</p>
<ol>
<li>提高复用性</li>
<li>可以被浏览器缓存</li>
<li>提高可维护性</li>
</ol>
<p>缺点：<br>增加额外请求</p>
<p>在下面三种情况下应该考虑直接在<strong>页面中</strong>定义脚本和样式：</p>
<ol>
<li>不复用</li>
<li>页面不被经常访问</li>
<li>脚本和样式很少</li>
</ol>
<h2 id="20-压缩JAVASCRIPT和CSS"><a href="#20-压缩JAVASCRIPT和CSS" class="headerlink" title="20. 压缩JAVASCRIPT和CSS"></a>20. 压缩JAVASCRIPT和CSS</h2><p>压缩，混淆。</p>
<h1 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h1><h2 id="21-优化图片"><a href="#21-优化图片" class="headerlink" title="21. 优化图片"></a>21. 优化图片</h2><p>gif采用<code>&lt;video&gt;</code>实现</p>
<p>图片继续压缩</p>
<h2 id="22-优化-CSS-Sprite"><a href="#22-优化-CSS-Sprite" class="headerlink" title="22. 优化 CSS Sprite"></a>22. 优化 CSS Sprite</h2><p>在<code>1.尽量减少HTTP请求数</code>中提到的技术。</p>
<p>通过background-image和background-position属性来定位要显示的部分</p>
<p>该技术的注意点：</p>
<ol>
<li>选用<a href="https://www.toptal.com/developers/css/sprite-generator" target="_blank" rel="noopener">工具</a>完成图片合并，省去人工测量像素位置</li>
<li>额外维护工作：某图片修改了，不仅需要生成新的图片，还涉及css的修改</li>
<li>一般只能使用固定大小的盒子，这样才能够遮挡住不应该看到的部分</li>
</ol>
<p>几个优化建议：</p>
<ol>
<li>尽可能使用横向组合图片，这比纵向组合图片的体积通常更小一点</li>
<li>尽量使图片具有接近的色系，这样最终组合出来的图片也会小一些。</li>
<li>尽量使用小一些的图片，并且图片之间的间隙尽量也小一些，目的还是为了最终组合出来的图片体积更小</li>
</ol>
<h2 id="23-不要在页面中缩放图片"><a href="#23-不要在页面中缩放图片" class="headerlink" title="23. 不要在页面中缩放图片"></a>23. 不要在页面中缩放图片</h2><p>不要因为html本身可以设置宽高来使用<strong>本不需要的大图</strong>，</p>
<p>若需要<code>&lt;img width=&quot;100&quot; height=&quot;100&quot; src=&quot;mycat.jpg&quot; alt=&quot;My Cat&quot; /&gt;</code></p>
<p>那么图片本身应该是100x100 px的，而不是去缩放500x500 px。</p>
<p>请记住并遵守这条原则：你需要在网页中显示什么尺寸的图片，就请图片设计人员提供什么尺寸的图片，而不是在网页中进行缩放。</p>
<h2 id="24-使favicon-ico尽可能小并可缓存"><a href="#24-使favicon-ico尽可能小并可缓存" class="headerlink" title="24. 使favicon.ico尽可能小并可缓存"></a>24. 使favicon.ico尽可能小并可缓存</h2><p><strong>注意：</strong>即便你不管它，浏览器也会自动请求它，导致出现404。放在</p>
<p>建议：</p>
<ol>
<li>1KB左右，百度：在线favicon.icon制作</li>
<li>可缓存</li>
<li>放在其他主机，避免请求时带上cookie</li>
</ol>
<h1 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h1><h2 id="25-减小Cookie的体积"><a href="#25-减小Cookie的体积" class="headerlink" title="25. 减小Cookie的体积"></a>25. 减小Cookie的体积</h2><ol>
<li>设置合适的有效期</li>
<li>设置合适的域级别</li>
<li>尽可能小</li>
</ol>
<h2 id="26-把组件放在不含cookie的域下"><a href="#26-把组件放在不含cookie的域下" class="headerlink" title="26. 把组件放在不含cookie的域下"></a>26. 把组件放在不含cookie的域下</h2><p>页面请求某个域时，会带上该域的cookie，对于一些静态资源，该cookie是没有必要发送的，此时可以把这些静态资源放在另外的域上。</p>
<p>除了不带cookie,还增加了页面资源的并发下载</p>
<h1 id="移动端"><a href="#移动端" class="headerlink" title="移动端"></a>移动端</h1><h2 id="27-保证单个内容体积＜25K"><a href="#27-保证单个内容体积＜25K" class="headerlink" title="27. 保证单个内容体积＜25K"></a>27. 保证单个内容体积＜25K</h2><p>iOS safari 早期版本（v3.2） 不能缓存超过25K（未压缩大小）的组件。 </p>
<p>现在版本应该能比较大了，也不知道其他浏览器支持的都多大= =</p>
<p>不过，总的来说<strong>20. 压缩JAVASCRIPT和CSS</strong>是必要的</p>
<h2 id="28-将组件直接打包到页面"><a href="#28-将组件直接打包到页面" class="headerlink" title="28. 将组件直接打包到页面"></a>28. 将组件直接打包到页面</h2><p>例子：</p>
<ol>
<li>CSS中还有小图片的请求，可以直接把小图片base64化替换该css样式的图片url</li>
<li>邮件内容带图片，这种图片也是作为正文的一部分被编码进去的，无需新请求</li>
</ol>
<h1 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h1><h2 id="29-Gzip组件"><a href="#29-Gzip组件" class="headerlink" title="29. Gzip组件"></a>29. Gzip组件</h2><p>请求头中带有如下信息</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Accept-Encoding: gzip, deflate</span><br></pre></td></tr></table></figure>
<p>这是根据浏览器的设置决定的,表示浏览器接受的压缩格式。</p>
<p>web服务器通过Content-Encoding相应头来通知客户端数据采用了哪种压缩方式。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Content-Encoding: gzip</span><br></pre></td></tr></table></figure>
<h2 id="30-避免将img的src属性设置为空"><a href="#30-避免将img的src属性设置为空" class="headerlink" title="30. 避免将img的src属性设置为空"></a>30. 避免将img的src属性设置为空</h2><p>早期浏览器仍会发送请求，现代浏览器不会发了。</p>
<p>设置为空，本意可能是想先不加载，等页面解析完再用js去设置img的src。</p>
<p>应该采取更好的实现方式：ImageLoader</p>
<h2 id="31-配置ETags"><a href="#31-配置ETags" class="headerlink" title="31. 配置ETags"></a>31. 配置ETags</h2><p>ETags 是一个字符串，作为某组件某版本的唯一标识符。</p>
<p>服务器响应组件资源时，带上ETags响应头。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">HTTP&#x2F;1.1 200 OK</span><br><span class="line">Last-Modified: Tue, 12 Dec 2006 03:03:59 GMT</span><br><span class="line">ETag: &quot;10c24bc-4ab-457e1c1f&quot;</span><br><span class="line">Content-Length: 12195</span><br></pre></td></tr></table></figure>

<p>浏览器继续请求组件时，会用If-None-Match请求头来把ETag传回源服务器。如果匹配成功，返回304，就减少了12195字节的响应</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET &#x2F;i&#x2F;yahoo.gif HTTP&#x2F;1.1</span><br><span class="line">      Host: us.yimg.com</span><br><span class="line">      If-Modified-Since: Tue, 12 Dec 2006 03:03:59 GMT</span><br><span class="line">      If-None-Match: &quot;10c24bc-4ab-457e1c1f&quot;</span><br><span class="line">      HTTP&#x2F;1.1 304 Not Modified</span><br></pre></td></tr></table></figure>

<h2 id="32-对Ajax用GET请求"><a href="#32-对Ajax用GET请求" class="headerlink" title="32. 对Ajax用GET请求"></a>32. 对Ajax用GET请求</h2><p>推荐用GET请求的原因：</p>
<ol>
<li>GET请求能利用客户端的缓存</li>
<li>POST请求进行了两次请求：先发送请求头再发送数据</li>
</ol>
<p>但是，长度方面可能会有限制。</p>
<p>语义不易理解，违背RESTful原则</p>
<h2 id="33-尽早发送缓冲区内容"><a href="#33-尽早发送缓冲区内容" class="headerlink" title="33. 尽早发送缓冲区内容"></a>33. 尽早发送缓冲区内容</h2><p>后台服务器还在组装html页面的时候，先发一部分到给浏览器，一般是head之后。这样浏览器端可以先去加载head中指定的资源 和页面的剩余部分加载是并行的。</p>
<p>当响应耗时主要在后台的动态页面组装时，最能体现优势</p>
<p>具体实现技术应该是动态网页相关的，暂时不是很理解，这边先留个坑。</p>
<h2 id="34-使用CDN"><a href="#34-使用CDN" class="headerlink" title="34. 使用CDN"></a>34. 使用CDN</h2><p><a href="http://www.wangsu.com/" target="_blank" rel="noopener">网宿科技</a>了解一下</p>
<h2 id="35-添上Expires或者Cache-Control-HTTP头"><a href="#35-添上Expires或者Cache-Control-HTTP头" class="headerlink" title="35. 添上Expires或者Cache-Control HTTP头"></a>35. 添上Expires或者Cache-Control HTTP头</h2><p><del>需要总结下缓存控制的用法。这边先留个坑</del></p>
<p>这两个都是用于强缓存(200 form cache)的，</p>
<blockquote>
<p>Cache-Control:缓存时间值<br>Expires:绝对时间<br>同时存在时，<code>Cache-Control</code> 优先于<code>Expires</code>，使用<code>Cache-Control</code>的一个好处是不用担心服务端时间和本地时间不一致</p>
</blockquote>
<p>这篇总结的还行：<a href="https://www.cnblogs.com/wonyun/p/5524617.html" target="_blank" rel="noopener">http协商缓存VS强缓存</a></p>
<p>这里补充两点：</p>
<ol>
<li>浏览器开发者工具开启 <strong>Disable cache</strong>后，任何请求都不会走本地强缓存，但是会走304协商缓存（强制刷新除外）</li>
<li>未开启<strong>Disable cache</strong>的状态下，ctrl+F5强制刷新，对于<code>page load</code>前的请求，都是不走缓存(强缓存和协商缓存<code>cache-control:no-cache</code>)的，但是<code>page load</code>后的请求不受限制可以走缓存</li>
</ol>
<h1 id="其他新技术"><a href="#其他新技术" class="headerlink" title="其他新技术"></a>其他新技术</h1><h2 id="DNS预解析-dns-prefetch"><a href="#DNS预解析-dns-prefetch" class="headerlink" title="DNS预解析-dns-prefetch"></a>DNS预解析-dns-prefetch</h2><p>见 <code>W3C_DNS_Prefetching.md</code></p>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>以上内容只是对35优化原则的简单记录和个人见解，非译文。</p>
<p>yahoo原文：<a href="https://developer.yahoo.com/performance/rules.html" target="_blank" rel="noopener">https://developer.yahoo.com/performance/rules.html</a></p>
<p>分享几篇写的不错的：</p>
<ol>
<li><a href="https://www.cnblogs.com/xianyulaodi/p/5755079.html" target="_blank" rel="noopener">雅虎前端优化的35条军规</a></li>
<li><a href="http://www.cnblogs.com/chenxizhang/archive/2013/05/20/3088196.html" target="_blank" rel="noopener">优化网站设计系列文章总结和导读</a></li>
</ol>
]]></content>
      <categories>
        <category>大前端</category>
      </categories>
      <tags>
        <tag>前端优化</tag>
      </tags>
  </entry>
  <entry>
    <title>log4js配置详解</title>
    <url>/2018/04/14/2018Q2/log4js%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>log4js 主要包括以下几项配置</p>
<a id="more"></a>

<h2 id="Appender"><a href="#Appender" class="headerlink" title="Appender"></a>Appender</h2><p>负责日志记录的方式：文件、控制台输出、网络发送、邮件发送</p>
<p>常用方式：console,file,dataFile</p>
<p>REF: <a href="https://blog.csdn.net/hfty290/article/details/42844085" target="_blank" rel="noopener">https://blog.csdn.net/hfty290/article/details/42844085</a></p>
<ol>
<li>type:”console”</li>
</ol>
<p>将日志输出至控制台，这样可以方便开发人员在开发时接看到所有日志信息，在其他环境不建议设置</p>
<ol start="2">
<li>type:”file”</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;filename&quot;: &quot;log&#x2F;access.log&quot;,</span><br><span class="line">&quot;maxLogSize &quot;: 31457280,&#x2F;&#x2F;设置文件大小，当达到最大容量，重命名文件为access.log.1，日志写入新文件access.log</span><br><span class="line">&quot;backups&quot;:1,&#x2F;&#x2F;最多产生的文件备份数，超过会删除</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>type:”dateFile”</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;filename&quot;: &quot;log&#x2F;app-info.log&quot;,</span><br><span class="line">&quot;pattern&quot;: &quot;.yyyy-MM-dd&quot;,&#x2F;&#x2F;e.g.:app-info.log.2018-04-18</span><br><span class="line">&quot;alwaysIncludePattern&quot;:false&#x2F;&#x2F;如果为true，则每个文件都会按pattern命名，否则最新的文件不会按照pattern命名</span><br><span class="line">&quot;compress&quot;:false,是否压缩，之前的文件会被压缩</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>type:”logLevelFilter”</li>
</ol>
<p>继续配置appender 会继承AppenderName的所有设置并在其上做level的过滤</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;appender&quot;: &quot;AppenderName&quot;,</span><br><span class="line">&quot;level&quot;: &quot;error&quot;</span><br></pre></td></tr></table></figure>

<h3 id="layout"><a href="#layout" class="headerlink" title="layout"></a>layout</h3><p>定义日志记录格式：哪些字段，颜色等</p>
<h3 id="level-maxLevel"><a href="#level-maxLevel" class="headerlink" title="level,maxLevel"></a>level,maxLevel</h3><p>当 <code>let log=log4js.getLogger(name)</code> 得到的 Category 后，有一个 appender 列表，<br>log 记录的方式，如 <code>log.warn/log.error</code> ,会在 appender 列表中继续过滤，取满足 <code>[level,maxLevel]</code> 的 level 的 appender</p>
<p>若未设置，默认 all</p>
<h2 id="Category"><a href="#Category" class="headerlink" title="Category"></a>Category</h2><p>配置日志的类别，可以配置一个Appender数组，表示当前类别日志会通过其Appender数组的每种方式被记录，<br>可以配置一个level属性，表示传入的日志的level需要在其配置的level及之上才会被记录</p>
<p>Appender 和 Category 的关系：<code>Category &lt;--- 1：n ---&gt; Appender</code></p>
<p>Category 可以配置一个default，当log4js.getLogger(name)的name不在Category配置中就走default,如果没有配置该default，<strong>name也不在Category配置中，会走所有Appender</strong></p>
<p>Category中可以直接配置level 或者log4js.getLogger(name).setLevel(log4js.levels.INFO)这样配置</p>
<h2 id="replaceConsole"><a href="#replaceConsole" class="headerlink" title="replaceConsole"></a>replaceConsole</h2><p>默认false,如果为true，则程序中用console.log输出到控制台的信息，也会输出到日志文件中，且格式按照log4js的格式输出，如果为false，则console.log只会输出在控制台。与type:console的appender正好相反，如果设置了type:console，则会将log4js.log日志输出至控制台。</p>
<h2 id="level"><a href="#level" class="headerlink" title="level"></a>level</h2><p>从低到高：ALL,TRACE,DEBUG,INFO,WARN,ERROR,FATAL,OFF</p>
<h2 id="DEMO"><a href="#DEMO" class="headerlink" title="DEMO"></a>DEMO</h2><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"appenders"</span>: &#123;</span><br><span class="line">    <span class="attr">"console"</span>: &#123;</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"console"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"trace"</span>: &#123;</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"file"</span>,</span><br><span class="line">      <span class="attr">"filename"</span>: <span class="string">"log/access.log"</span>,</span><br><span class="line">      <span class="attr">"maxLogSize "</span>: <span class="number">31457280</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"http"</span>: &#123;</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"logLevelFilter"</span>,</span><br><span class="line">      <span class="attr">"appender"</span>: <span class="string">"trace"</span>,</span><br><span class="line">      <span class="attr">"level"</span>: <span class="string">"trace"</span>,</span><br><span class="line">      <span class="attr">"maxLevel"</span>: <span class="string">"trace"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"info"</span>: &#123;</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"dateFile"</span>,</span><br><span class="line">      <span class="attr">"filename"</span>: <span class="string">"log/app-info.log"</span>,</span><br><span class="line">      <span class="attr">"pattern"</span>: <span class="string">".yyyy-MM-dd"</span>,</span><br><span class="line">      <span class="attr">"layout"</span>: &#123;</span><br><span class="line">        <span class="attr">"type"</span>: <span class="string">"pattern"</span>,</span><br><span class="line">        <span class="attr">"pattern"</span>: <span class="string">"[%d&#123;ISO8601&#125;][%5p  %z  %c] %m"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">"compress"</span>: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"maxInfo"</span>: &#123;</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"logLevelFilter"</span>,</span><br><span class="line">      <span class="attr">"appender"</span>: <span class="string">"info"</span>,</span><br><span class="line">      <span class="attr">"level"</span>: <span class="string">"debug"</span>,</span><br><span class="line">      <span class="attr">"maxLevel"</span>: <span class="string">"info"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"error"</span>: &#123;</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"dateFile"</span>,</span><br><span class="line">      <span class="attr">"filename"</span>: <span class="string">"log/app-error.log"</span>,</span><br><span class="line">      <span class="attr">"pattern"</span>: <span class="string">".yyyy-MM-dd"</span>,</span><br><span class="line">      <span class="attr">"layout"</span>: &#123;</span><br><span class="line">        <span class="attr">"type"</span>: <span class="string">"pattern"</span>,</span><br><span class="line">        <span class="attr">"pattern"</span>: <span class="string">"[%d&#123;ISO8601&#125;][%5p  %z  %c] %m"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">"compress"</span>: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"minError"</span>: &#123;</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"logLevelFilter"</span>,</span><br><span class="line">      <span class="attr">"appender"</span>: <span class="string">"error"</span>,</span><br><span class="line">      <span class="attr">"level"</span>: <span class="string">"error"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"replaceConsole"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"pm2"</span>:<span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"categories"</span>: &#123;</span><br><span class="line">    <span class="attr">"default"</span>: &#123;</span><br><span class="line">      <span class="attr">"appenders"</span>: [</span><br><span class="line">        <span class="string">"console"</span>,</span><br><span class="line">        <span class="string">"http"</span>,</span><br><span class="line">        <span class="string">"maxInfo"</span>,</span><br><span class="line">        <span class="string">"minError"</span></span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">"level"</span>: <span class="string">"debug"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>大前端</category>
      </categories>
      <tags>
        <tag>nodejs</tag>
      </tags>
  </entry>
  <entry>
    <title>nodejs文件下载</title>
    <url>/2018/04/03/2018Q2/nodejs%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD/</url>
    <content><![CDATA[<p>本文来谈谈 nodejs 文件下载的细节</p>
<p>注：这边的文件下载，发起者为客户端</p>
<a id="more"></a>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//项目根目录下的/files/xls/demo.xlsx文件</span></span><br><span class="line">  <span class="keyword">var</span> filePath = path.join(__dirname, <span class="string">'../'</span>) + <span class="string">'/files/xls/demo.xlsx'</span></span><br><span class="line">  <span class="comment">// 定位到具体文件</span></span><br><span class="line">  <span class="keyword">var</span> stats = fs.statSync(filePath)</span><br><span class="line">  <span class="comment">//判断文件是否存在</span></span><br><span class="line">  <span class="keyword">if</span> (stats.isFile()) &#123;</span><br><span class="line">    <span class="comment">//Content-Disposition属性，如果不考虑中文的话，直接用filename=demo.xlsx即可</span></span><br><span class="line">    <span class="comment">//如果有中文，需要进行utf8编码，filename后需带上*=UTF-8''</span></span><br><span class="line">    <span class="comment">// 如有中文但不进行编码设置，Content-Disposition参数将不生效，还是原来的文件名</span></span><br><span class="line">    res.set(&#123;</span><br><span class="line">      <span class="string">'Content-Type'</span>: <span class="string">'application/octet-stream'</span>,</span><br><span class="line">      <span class="string">'Content-Disposition'</span>: <span class="string">"attachment; filename*=UTF-8''"</span> + <span class="built_in">encodeURI</span>(<span class="string">'App提交模板.xlsx'</span>),</span><br><span class="line">      <span class="string">'Content-Length'</span>: stats.size</span><br><span class="line">    &#125;)</span><br><span class="line">    res.send(stats)</span><br><span class="line">    <span class="comment">//fs.createReadStream(filePath).pipe(res)</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      res.status(<span class="number">404</span>).end()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>对于小文件来说，采用<code>res.send(buffer)</code> 或<code>res.sendFile(fileName)</code>的形式，是先将文件内容放到buff中再进行传输</p>
<p>若文件相对较大，需要采用<code>fs.createReadStream(filePath).pipe(res)</code>用流管道的方式传输,这种方式读一部分写一部分，用过的部分会被GC,故占内存少</p>
<p>express 还对res封装了一个download方法，已采用<code>res.set</code>进行参数设置，并调用<code>res.sendFile()</code>方法进行文件传输，用起来很方便</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> filePath = path.join(__dirname, <span class="string">'../'</span>) + <span class="string">'/files/xls/demo.xlsx'</span></span><br><span class="line">res.download(filePath, <span class="string">'App提交模板.xlsx'</span>)</span><br></pre></td></tr></table></figure>
<p>当文件不存在时(err)，是走路由的Error Handler.若指定第三个参数<code>(err)=&gt;{}</code>则走该参数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//文件不存在时产生的err</span></span><br><span class="line">err:</span><br><span class="line">  code:<span class="string">"ENOENT"</span></span><br><span class="line">  errno:<span class="number">-4058</span></span><br><span class="line">  expose:<span class="literal">false</span></span><br><span class="line">  message:<span class="string">"ENOENT: no such file or directory, stat 'e:\WebProjects\client-management-server\files\xls\demos.xlsx'"</span></span><br><span class="line">  path:<span class="string">"e:\WebProjects\client-management-server\files\xls\demos.xlsx"</span></span><br><span class="line">  stack:<span class="string">"Error: ENOENT: no such file or directory, stat 'e:\WebProjects\client-management-server\files\xls\demos.xlsx'"</span></span><br><span class="line">  status:<span class="number">404</span></span><br><span class="line">  statusCode:<span class="number">404</span></span><br><span class="line">  syscall:<span class="string">"stat"</span></span><br></pre></td></tr></table></figure>


<p>故小文件（&lt;500M），推荐直接采用express的download方法</p>
]]></content>
      <categories>
        <category>大前端</category>
      </categories>
      <tags>
        <tag>nodejs</tag>
      </tags>
  </entry>
  <entry>
    <title>Node子进程执行ping操作并获取统计信息</title>
    <url>/2018/03/09/2018Q1/Node%E5%AD%90%E8%BF%9B%E7%A8%8B%E6%89%A7%E8%A1%8Cping%E6%93%8D%E4%BD%9C%E5%B9%B6%E8%8E%B7%E5%8F%96%E7%BB%9F%E8%AE%A1%E4%BF%A1%E6%81%AF/</url>
    <content><![CDATA[<h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>采用<code>ping -t</code>方式不断进行ping操作，直到收到关闭信号or某个超时时间时结束操作，获取统计信息。</p>
<a id="more"></a>

<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>在cmd窗口进行<code>ping -t</code>操作，会一直进行ping，直到输入<code>ctrl+C</code> 会输出ping统计信息。</p>
<p><code>kill(&#39;SIGINT&#39;)</code> 即模拟 <code>ctrl+C</code> 终止进程</p>
<h2 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h2><p>这里我自己手动进行统计信息，原因见下面分析。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> exec = <span class="built_in">require</span>(<span class="string">'child_process'</span>).exec;</span><br><span class="line"><span class="keyword">var</span> iconv = <span class="built_in">require</span>(<span class="string">'iconv-lite'</span>);</span><br><span class="line"><span class="keyword">let</span> ping = exec(<span class="string">`ping www.google.com.hk -t`</span>, &#123; <span class="attr">encoding</span>: <span class="string">'binary'</span>&#125;, <span class="function"><span class="keyword">function</span> (<span class="params">err, stdout, stderr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> send = <span class="number">0</span></span><br><span class="line">    <span class="keyword">let</span> accept = <span class="number">0</span></span><br><span class="line">    <span class="keyword">let</span> lost = <span class="number">0</span></span><br><span class="line">    <span class="keyword">let</span> min = <span class="literal">Infinity</span></span><br><span class="line">    <span class="keyword">let</span> max = -<span class="literal">Infinity</span></span><br><span class="line">    <span class="keyword">let</span> avg = <span class="number">0</span></span><br><span class="line">    <span class="keyword">let</span> Min = <span class="function">(<span class="params">a,b</span>)=&gt;</span>a&lt;b?a:b;</span><br><span class="line">    <span class="keyword">let</span> Max = <span class="function">(<span class="params">a,b</span>)=&gt;</span>a&gt;b?a:b;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> str = iconv.decode(<span class="keyword">new</span> Buffer(stdout, <span class="string">'binary'</span>), <span class="string">'GBK'</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(str);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'========='</span>)</span><br><span class="line">    <span class="keyword">let</span> regAccept = <span class="regexp">/来自 .*的回复: 字节=(\d+) 时间=(\d+)ms TTL=(\d+)/g</span></span><br><span class="line">    <span class="keyword">let</span> regAll = <span class="regexp">/\n/g</span></span><br><span class="line">    send = str.match(regAll).length - <span class="number">2</span></span><br><span class="line">    send=send&lt;<span class="number">0</span>?<span class="number">0</span>:send</span><br><span class="line">    <span class="keyword">let</span> res</span><br><span class="line">    <span class="keyword">while</span> (res = regAccept.exec(str)) &#123;</span><br><span class="line">        accept++</span><br><span class="line">        <span class="keyword">let</span> tim = <span class="built_in">Number</span>(res[<span class="number">2</span>])</span><br><span class="line">        min=Min(tim,min)</span><br><span class="line">        max=Max(tim,max)</span><br><span class="line">        avg= (avg*(accept<span class="number">-1</span>)+tim)/accept</span><br><span class="line">        <span class="built_in">console</span>.log(res[<span class="number">1</span>], tim, res[<span class="number">3</span>],avg)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'========='</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`发送:<span class="subst">$&#123;send&#125;</span>;接收:<span class="subst">$&#123;accept&#125;</span>;丢失:<span class="subst">$&#123;send-accept&#125;</span>;<span class="subst">$&#123;(<span class="number">1</span>-(accept<span class="regexp">/send))*100&#125;%丢失`)</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="regexp">    console.log(`最短:$&#123;min&#125;ms;最长:$&#123;max&#125;ms;平均:$&#123;avg&#125;ms`)</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="regexp">&#125;);</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="regexp">ping.on('close', (code) =&gt; &#123; console.log('close by', code) &#125;)</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="regexp">setTimeout(function () &#123;</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="regexp">    ping.kill('SIGINT')</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="regexp">&#125;, 5 * 1000);</span></span></span></span><br></pre></td></tr></table></figure>

<p>想通过<code>ping.kill(&#39;SIGINT&#39;)</code>去关闭exec子进程。</p>
<p>测试结果是：输出了 <code>close by null</code> 后，程序依然再运行，并且没有输出统计信息。</p>
<h2 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h2><p><strong>思路1</strong>：在<code>setTimeout</code>中增加<code>process.kill(ping.pid,&#39;SIGINT&#39;);process.exit(0)</code></p>
<p>测试结果：程序会退出，但是没有输出<code>close by</code>也没有输出统计信息。并且任务管理器中ping进程仍然存在。</p>
<p><strong>思路2</strong>：换个思路，给exec的options增加<code>timeout</code>参数，取消<code>setTimeout</code>。</p>
<p>测试结果：达到timeout时间后，会执行回调函数，可以输出统计信息（cmd ping操作最后的统计信息在这边是没有的，这边我自己进行了统计）。</p>
<p>但是！！ping进程并没有关闭。当ping进程大量存在的时候，ping的速度会越来越慢。</p>
<p><strong>看到网上有篇文章<a href="https://cnodejs.org/topic/5664f61e374362a006a1a572" target="_blank" rel="noopener">child_process模块怎么真正的杀死子进程</a>有一样的问题。</strong></p>
<p>最后他是采用 <a href="https://github.com/pkrumins/node-tree-kill" target="_blank" rel="noopener">node-tree-kill</a> 库解决。</p>
<h3 id="node-tree-kill-使用、源码及原理"><a href="#node-tree-kill-使用、源码及原理" class="headerlink" title="node-tree-kill 使用、源码及原理"></a>node-tree-kill 使用、源码及原理</h3><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><p><code>npm i tree-kill</code> 安装</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> kill = <span class="built_in">require</span>(<span class="string">'tree-kill'</span>);</span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    kill(ping.pid) <span class="comment">//把最初代码这边做下替换</span></span><br><span class="line">&#125;, <span class="number">5</span> * <span class="number">1000</span>);</span><br></pre></td></tr></table></figure>

<h4 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> (<span class="params">pid, signal, callback</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> tree = &#123;&#125;;</span><br><span class="line">    <span class="keyword">var</span> pidsToProcess = &#123;&#125;;</span><br><span class="line">    tree[pid] = [];</span><br><span class="line">    pidsToProcess[pid] = <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> signal === <span class="string">'function'</span> &amp;&amp; callback === <span class="literal">undefined</span>) &#123;</span><br><span class="line">      callback = signal;</span><br><span class="line">      signal = <span class="literal">undefined</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> (process.platform) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'win32'</span>:</span><br><span class="line">        <span class="comment">// /T终止指定的进程和由它启用的子进程</span></span><br><span class="line">        <span class="comment">// /F指定强制终止进程 /pid指定进程pid号</span></span><br><span class="line">        exec(<span class="string">'taskkill /pid '</span> + pid + <span class="string">' /T /F'</span>, callback);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'darwin'</span>:</span><br><span class="line">        buildProcessTree(pid, tree, pidsToProcess, <span class="function"><span class="keyword">function</span> (<span class="params">parentPid</span>) </span>&#123;</span><br><span class="line">          <span class="keyword">return</span> spawn(<span class="string">'pgrep'</span>, [<span class="string">'-P'</span>, parentPid]);</span><br><span class="line">        &#125;, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            killAll(tree, signal, callback);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="comment">// case 'sunos':</span></span><br><span class="line">    <span class="comment">//     buildProcessTreeSunOS(pid, tree, pidsToProcess, function () &#123;</span></span><br><span class="line">    <span class="comment">//         killAll(tree, signal, callback);</span></span><br><span class="line">    <span class="comment">//     &#125;);</span></span><br><span class="line">    <span class="comment">//     break;</span></span><br><span class="line">    <span class="keyword">default</span>: <span class="comment">// Linux</span></span><br><span class="line">        buildProcessTree(pid, tree, pidsToProcess, <span class="function"><span class="keyword">function</span> (<span class="params">parentPid</span>) </span>&#123;</span><br><span class="line">          <span class="keyword">return</span> spawn(<span class="string">'ps'</span>, [<span class="string">'-o'</span>, <span class="string">'pid'</span>, <span class="string">'--no-headers'</span>, <span class="string">'--ppid'</span>, parentPid]);</span><br><span class="line">        &#125;, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            killAll(tree, signal, callback);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><p>很简单。就是调用了系统指令强行关闭进程，而不是原来程序中去做关闭。做了不同平台的兼容。</p>
]]></content>
      <categories>
        <category>大前端</category>
      </categories>
      <tags>
        <tag>nodejs</tag>
      </tags>
  </entry>
  <entry>
    <title>puppeteer初探-测试webrtc</title>
    <url>/2018/02/07/2018Q1/puppeteer%E5%88%9D%E6%8E%A2-%E6%B5%8B%E8%AF%95webrtc/</url>
    <content><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>puppeteer是什么?</p>
<p>它是一个nodejs的库，支持调用Chrome的API来操纵Web 它的dom操作可以完全在内存中进行模拟而不打开浏览器</p>
<p>功能强大，可用于截图、pdf生成、UI测试、表单提交、数据爬取、性能诊断…</p>
<p>官方接口地址：<a href="https://github.com/GoogleChrome/puppeteer/blob/master/docs/api.md" target="_blank" rel="noopener">https://github.com/GoogleChrome/puppeteer/blob/master/docs/api.md</a></p>
<a id="more"></a>

<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>通过<code>npm i puppeteer</code>安装</p>
<p>正常是会报错的。</p>
<p>解法方法1：</p>
<blockquote>
<p>1.采用<code>cnpm i puppeteer</code></p>
</blockquote>
<p>解法方法2：</p>
<blockquote>
<p>1.使用<code>npm i --save puppeteer --ignore-scripts</code>安装并忽略<code>chromium</code>的下载<br>2.自行下载 <a href='https://link.jianshu.com/?t=https%3A%2F%2Fdownload-chromium.appspot.com%2F' target="_blank" rel="noopener">chromium</a><br>或 采用本地chrome (后面会说明这样的好处)</p>
</blockquote>
<p>参考：<a href="https://www.jianshu.com/p/a89d8d6c007b" target="_blank" rel="noopener">https://www.jianshu.com/p/a89d8d6c007b</a></p>
<h1 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h1><p>新建index.js,代码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> puppeteer = <span class="built_in">require</span>(<span class="string">'puppeteer'</span>);</span><br><span class="line"></span><br><span class="line">(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> browser = <span class="keyword">await</span> puppeteer.launch();</span><br><span class="line">    <span class="keyword">const</span> page = <span class="keyword">await</span> browser.newPage();</span><br><span class="line">    <span class="keyword">await</span> page.goto(<span class="string">'https://y.qq.com'</span>);</span><br><span class="line">    <span class="keyword">await</span> page.screenshot(&#123;<span class="attr">path</span>: <span class="string">'yqq.png'</span>&#125;);</span><br><span class="line">    browser.close();</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>
<p>使用<code>node index.js</code>运行</p>
<p>若出现<code>async/await</code> 问题，检测node版本是否在7.6以上 否则的话重新安装即可</p>
<p>正常应该是可以获得截图了。</p>
<h1 id="测试webrtc应用"><a href="#测试webrtc应用" class="headerlink" title="测试webrtc应用"></a>测试webrtc应用</h1><p><code>puppeteer.launch()</code> 可以填入参数<code>{headless: false}</code> 这样就可以打开浏览器测试，默认是只在内存跑</p>
<p>首先采用 chromium  测试我们的webrtc应用，发现画面没有显示，采用<code>chrome://webrtc-internals</code>发现本地只支持VP8,而我们的webrtc服务端只传H.264的流。</p>
<p>百度查看了下 chrome 和 chromium 的区别，chromium 会比chrome 少一些音视频的格式支持，包括<code>h264,acc</code></p>
<p>那么本地的chrome能否支持呢？测试结果发现是可以支持的。（没下的话记得下</p>
<p>使用也很简单。</p>
<p>找到chrome的安装目录。我这里是<code>C:/Program Files (x86)/Google/Chrome/Application/chrome.exe</code></p>
<p>然后launch方法中传入<code>executablePath: &#39;C:/Program Files (x86)/Google/Chrome/Application/chrome.exe&#39;</code></p>
<p>测试成功。</p>
<p>完整测试代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> puppeteer = <span class="built_in">require</span>(<span class="string">'puppeteer'</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">timeout</span>(<span class="params">ms</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">    setTimeout(resolve, ms);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(process.argv)</span><br><span class="line">puppeteer.launch(&#123;</span><br><span class="line">  <span class="comment">// headless: false,</span></span><br><span class="line">  executablePath: <span class="string">'./chrome/chrome.exe'</span>,</span><br><span class="line">&#125;).then(<span class="keyword">async</span> browser =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> page = <span class="keyword">await</span> browser.newPage();</span><br><span class="line">  <span class="keyword">await</span> page.goto(<span class="string">'http://10.8.116.11:8081/tryplay-h5/#/main?....'</span>);</span><br><span class="line">  <span class="keyword">await</span> timeout(<span class="number">10000</span>);</span><br><span class="line">  <span class="keyword">await</span> page.screenshot(&#123; <span class="attr">path</span>: <span class="string">'rtc.png'</span> &#125;);</span><br><span class="line">  <span class="keyword">await</span> browser.close();</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'end'</span>)</span><br><span class="line">&#125;).catch(<span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.error(e)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>大前端</category>
      </categories>
      <tags>
        <tag>puppeteer</tag>
        <tag>前端测试</tag>
      </tags>
  </entry>
  <entry>
    <title>ECMAScript6入门</title>
    <url>/2018/01/07/2018Q1/ECMAScript6%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<h1 id="let-和-const"><a href="#let-和-const" class="headerlink" title="let 和 const"></a>let 和 const</h1><h2 id="let"><a href="#let" class="headerlink" title="let"></a>let</h2><h3 id="块作用域内有效"><a href="#块作用域内有效" class="headerlink" title="块作用域内有效"></a>块作用域内有效</h3><h3 id="不存在变量提升"><a href="#不存在变量提升" class="headerlink" title="不存在变量提升"></a>不存在变量提升</h3><h3 id="暂时性死区（TDZ）"><a href="#暂时性死区（TDZ）" class="headerlink" title="暂时性死区（TDZ）"></a>暂时性死区（TDZ）</h3><a id="more"></a>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">  <span class="comment">// TDZ开始</span></span><br><span class="line">  tmp = <span class="string">'abc'</span>; <span class="comment">// ReferenceError</span></span><br><span class="line">  <span class="built_in">console</span>.log(tmp); <span class="comment">// ReferenceError</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> tmp; <span class="comment">// TDZ结束</span></span><br><span class="line">  <span class="built_in">console</span>.log(tmp); <span class="comment">// undefined</span></span><br><span class="line"></span><br><span class="line">  tmp = <span class="number">123</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(tmp); <span class="comment">// 123</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="块作用域内声明函数"><a href="#块作用域内声明函数" class="headerlink" title="块作用域内声明函数"></a>块作用域内声明函数</h3><p><a href="https://stackoverflow.com/questions/31419897/what-are-the-precise-semantics-of-block-level-functions-in-es6" target="_blank" rel="noopener">https://stackoverflow.com/questions/31419897/what-are-the-precise-semantics-of-block-level-functions-in-es6</a></p>
<p>浏览器的实现无需按照标准</p>
<p>在块级作用域中采用函数表达式代替函数声明</p>
<h2 id="const"><a href="#const" class="headerlink" title="const"></a>const</h2><p>const 定义常量后，其值不可变。</p>
<p>const定义变量后，保证的不是变量的值不得改动，而是变量所指向的内存地址不得改变。</p>
<p>举例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const MIN &#x3D; 1</span><br><span class="line">MIN &#x3D; 0 &#x2F;&#x2F;TypeError: Assignment to constant variable</span><br><span class="line">const obj &#x3D; &#123;&#125;</span><br><span class="line">obj.a &#x3D; 1 &#x2F;&#x2F;1</span><br><span class="line">obj &#x3D; &#123;&#125;  &#x2F;&#x2F;TypeError: Assignment to constant variable</span><br></pre></td></tr></table></figure>

<p>obj对象本身仍是可变的，只是所处内存地址不能改变</p>
<p>如果真的想让对象冻结，采用<code>Object.freeze</code>方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = &#123;<span class="attr">name</span>:&#123;<span class="attr">first</span>:<span class="string">'gahing'</span>&#125;&#125;</span><br><span class="line"><span class="keyword">const</span> foo = <span class="built_in">Object</span>.freeze(a); <span class="comment">//仍可以使用a=&#123;&#125; 改变a的内存地址</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 常规模式时，下面一行不起作用；</span></span><br><span class="line"><span class="comment">// 严格模式时，该行会报错</span></span><br><span class="line">foo.prop = <span class="number">123</span>;</span><br></pre></td></tr></table></figure>

<p>但是对象其下的属性是不起作用的，比如</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">foo.name.last&#x3D;&#39;z&#39;</span><br><span class="line">foo.name &#x2F;&#x2F;&#123;first: &quot;gahing&quot;, last: &quot;z&quot;&#125;</span><br></pre></td></tr></table></figure>

<h2 id="获取顶层对象"><a href="#获取顶层对象" class="headerlink" title="获取顶层对象"></a>获取顶层对象</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(typeof window !&#x3D;&#x3D; &#39;undefined&#39;</span><br><span class="line">   ? window</span><br><span class="line">   : (typeof process &#x3D;&#x3D;&#x3D; &#39;object&#39; &amp;&amp;</span><br><span class="line">      typeof require &#x3D;&#x3D;&#x3D; &#39;function&#39; &amp;&amp;</span><br><span class="line">      typeof global &#x3D;&#x3D;&#x3D; &#39;object&#39;)</span><br><span class="line">     ? global</span><br><span class="line">     : this);</span><br></pre></td></tr></table></figure>

<h1 id="正则的拓展"><a href="#正则的拓展" class="headerlink" title="正则的拓展"></a>正则的拓展</h1><h2 id="增加构造函数"><a href="#增加构造函数" class="headerlink" title="增加构造函数"></a>增加构造函数</h2><h2 id="u修饰符"><a href="#u修饰符" class="headerlink" title="u修饰符"></a>u修饰符</h2><p>用于四个字节的字符</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;𠮷&#123;2&#125;&#x2F;.test(&#39;𠮷𠮷&#39;) &#x2F;&#x2F; false</span><br><span class="line">&#x2F;𠮷&#123;2&#125;&#x2F;u.test(&#39;𠮷𠮷&#39;) &#x2F;&#x2F; true</span><br></pre></td></tr></table></figure>

<h2 id="y修饰符"><a href="#y修饰符" class="headerlink" title="y修饰符"></a>y修饰符</h2><p>和g一样也是全局匹配，只是匹配都是从剩余字符串的第一个字符开始匹配</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var s &#x3D; &#39;aaa_aa_a&#39;;</span><br><span class="line">var r1 &#x3D; &#x2F;a+&#x2F;g;</span><br><span class="line">var r2 &#x3D; &#x2F;a+&#x2F;y;</span><br><span class="line"></span><br><span class="line">r1.exec(s) &#x2F;&#x2F; [&quot;aaa&quot;]</span><br><span class="line">r2.exec(s) &#x2F;&#x2F; [&quot;aaa&quot;] 剩余_aa_a</span><br><span class="line"></span><br><span class="line">r1.exec(s) &#x2F;&#x2F; [&quot;aa&quot;]</span><br><span class="line">r2.exec(s) &#x2F;&#x2F; null</span><br></pre></td></tr></table></figure>
<p>即 y 修饰符号隐含了头部匹配的标志 ^ </p>
<p>单单一个y修饰符对match方法，只能返回第一个匹配，必须与g修饰符联用，才能返回所有匹配。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#39;a1a2a3&#39;.match(&#x2F;a\d&#x2F;y) &#x2F;&#x2F; [&quot;a1&quot;]</span><br><span class="line">&#39;a1a2a3&#39;.match(&#x2F;a\d&#x2F;gy) &#x2F;&#x2F; [&quot;a1&quot;, &quot;a2&quot;, &quot;a3&quot;]</span><br></pre></td></tr></table></figure>


<h2 id="具名组匹配"><a href="#具名组匹配" class="headerlink" title="具名组匹配"></a>具名组匹配</h2><p>ES2018引入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const RE_DATE &#x3D; &#x2F;(?&lt;year&gt;\d&#123;4&#125;)-(?&lt;month&gt;\d&#123;2&#125;)-(?&lt;day&gt;\d&#123;2&#125;)&#x2F;;</span><br><span class="line"></span><br><span class="line">const matchObj &#x3D; RE_DATE.exec(&#39;1999-12-31&#39;);</span><br><span class="line">const year &#x3D; matchObj.groups.year; &#x2F;&#x2F; 1999</span><br><span class="line">const month &#x3D; matchObj.groups.month; &#x2F;&#x2F; 12</span><br><span class="line">const day &#x3D; matchObj.groups.day; &#x2F;&#x2F; 31</span><br></pre></td></tr></table></figure>

<p>可以使用<code>\k&lt;组名&gt;</code>写法和<code>\1</code> 数字引用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const RE_TWICE &#x3D; &#x2F;^(?&lt;word&gt;[a-z]+)!\k&lt;word&gt;!\1$&#x2F;;</span><br><span class="line">RE_TWICE.test(&#39;abc!abc!abc&#39;) &#x2F;&#x2F; true</span><br><span class="line">RE_TWICE.test(&#39;abc!abc!ab&#39;) &#x2F;&#x2F; false</span><br></pre></td></tr></table></figure>

<h1 id="函数拓展"><a href="#函数拓展" class="headerlink" title="函数拓展"></a>函数拓展</h1><h2 id="函数默认值"><a href="#函数默认值" class="headerlink" title="函数默认值"></a>函数默认值</h2><p>利用函数默认值，可以指定某个参数不得省略否则抛出异常</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function throwIfMissing() &#123;</span><br><span class="line">  throw new Error(&#39;Missing parameter&#39;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function foo(mustBeProvided &#x3D; throwIfMissing()) &#123;</span><br><span class="line">  return mustBeProvided;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo()</span><br><span class="line">&#x2F;&#x2F; Error: Missing parameter</span><br></pre></td></tr></table></figure>

<h2 id="严格模式"><a href="#严格模式" class="headerlink" title="严格模式"></a>严格模式</h2><p>只要函数参数使用了默认值、解构赋值、或者扩展运算符，那么函数内部就不能显式设定为严格模式</p>
<p>解法有：1.设定全局严格 2.包在无参的立即执行函数中</p>
<p>尾调用优化：严格模式不含以下参数，故可以采用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">func.arguments：返回调用时函数的参数。</span><br><span class="line">func.caller：返回调用当前函数的那个函数。</span><br></pre></td></tr></table></figure>

<h1 id="数组拓展"><a href="#数组拓展" class="headerlink" title="数组拓展"></a>数组拓展</h1><h2 id="ES5的一些常用用法"><a href="#ES5的一些常用用法" class="headerlink" title="ES5的一些常用用法"></a>ES5的一些常用用法</h2><p><code>[&#39;a&#39;,&#39;b&#39;,&#39;c&#39;].reduce((tot,cur)=&gt;tot+cur) === &#39;abc&#39;</code></p>
<h2 id="拓展运算符-…"><a href="#拓展运算符-…" class="headerlink" title="拓展运算符 …"></a>拓展运算符 …</h2><p>该运算符将一个数组，变为参数序列。</p>
<h2 id="Array-from"><a href="#Array-from" class="headerlink" title="Array.from"></a>Array.from</h2><p><strong>ES5写法：</strong><code>[].slice.call()</code><br><code>Array.from</code>也是<strong><code>浅复制</code></strong><br>将（1）类数组对象(DOM 操作返回的 NodeList 集合、arguments对象 )和（2）可遍历对象（包括set map）转为数组<br>例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let arrayLike &#x3D; &#123;</span><br><span class="line">    &#39;0&#39;: &#39;a&#39;,</span><br><span class="line">    &#39;1&#39;: &#39;b&#39;,</span><br><span class="line">    &#39;2&#39;: &#39;c&#39;,</span><br><span class="line">    length: 3&#125;;</span><br><span class="line">Array.from(arrayLike)</span><br><span class="line"></span><br><span class="line">let map &#x3D; new Map([</span><br><span class="line">  [1, &#39;one&#39;],</span><br><span class="line">  [2, &#39;two&#39;],</span><br><span class="line">  [3, &#39;three&#39;],</span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line">let arr &#x3D; [...map];</span><br></pre></td></tr></table></figure>
<p><code>Array.from</code> 接受第二个参数 类似于数组map方法 对每个元素进行处理，再放回数组</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let arrayLike &#x3D;&#123;</span><br><span class="line">    &#39;0&#39;: 1,</span><br><span class="line">    &#39;1&#39;: 2,</span><br><span class="line">    &#39;2&#39;: 3,</span><br><span class="line">    length: 3</span><br><span class="line">&#125;</span><br><span class="line">Array.from(arrayLike , (x) &#x3D;&gt; x * x)</span><br><span class="line">&#x2F;&#x2F; [1, 4, 9]</span><br></pre></td></tr></table></figure>
<p>相比<code>Array.from().map()</code> 省略了一个步骤，<strong>测试显示节省一半时间</strong></p>
<p>同理，map需要传this的话，Array.from可以传第三个参数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[1,2,3].map(x&#x3D;&gt;x*x,window)</span><br><span class="line">&#x2F;&#x2F;等价于</span><br><span class="line">Array.from([1,2,3] , (x) &#x3D;&gt; x * x,window)</span><br></pre></td></tr></table></figure>
<p><strong>应用</strong><br>返回字符串长度。<br>由于大于”\uFFFF”的字符的长度大于1，而我们需求一般是长度算1<br>故可以把字符串转为数组后得到其数组大小<br><code>return Array.from(str).length</code></p>
<h2 id="Array-of"><a href="#Array-of" class="headerlink" title="Array.of"></a>Array.of</h2><p>用于替代<code>Array()</code>和<code>new Array()</code><br>因为后者根据参数个数不同行为有异</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Array() &#x2F;&#x2F; []</span><br><span class="line">Array(3) &#x2F;&#x2F; [, , ,]</span><br><span class="line">Array(3, 11, 8) &#x2F;&#x2F; [3, 11, 8]</span><br></pre></td></tr></table></figure>
<p>采用<code>Array.of</code>表现则一致</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Array.of(3, 11, 8) &#x2F;&#x2F; [3,11,8]</span><br><span class="line">Array.of(3) &#x2F;&#x2F; [3]</span><br><span class="line">Array.of(3).length &#x2F;&#x2F; 1</span><br></pre></td></tr></table></figure>

<h2 id="find和findIndex"><a href="#find和findIndex" class="headerlink" title="find和findIndex"></a>find和findIndex</h2><p>find返回第一个返回值为true的成员 若无返回undefined</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[1, 4, -5, 10].find((n) &#x3D;&gt; n &lt; 0)</span><br><span class="line">&#x2F;&#x2F; -5</span><br><span class="line">[1, 5, 10, 15].find(function(value, index, arr) &#123;</span><br><span class="line">  return value &gt; 9;</span><br><span class="line">&#125;) &#x2F;&#x2F; 10</span><br></pre></td></tr></table></figure>
<p>findIndex返回第一个返回值为true的成员的索引</p>
<h2 id="copyWithin"><a href="#copyWithin" class="headerlink" title="copyWithin"></a>copyWithin</h2><p>将指定位置的成员复制到其他位置（会覆盖原有成员），然后返回当前数组</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Array.prototype.copyWithin(target, start &#x3D; 0, end &#x3D; this.length)</span><br></pre></td></tr></table></figure>
<p>它接受三个参数。</p>
<p>target（必需）：从该位置开始替换数据。<br>start（可选）：从该位置开始读取数据，默认为 0。如果为负值，表示倒数。<br>end（可选）：到该位置前停止读取数据，默认等于数组长度。如果为负值，表示倒数。</p>
<h2 id="fill"><a href="#fill" class="headerlink" title="fill"></a>fill</h2><p>使用给定值，填充一个数组</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">new Array(3).fill(7) &#x2F;&#x2F;[7,7,7]</span><br></pre></td></tr></table></figure>
<h2 id="keys-values-entries"><a href="#keys-values-entries" class="headerlink" title="keys() values() entries()"></a>keys() values() entries()</h2><h1 id="对象的拓展"><a href="#对象的拓展" class="headerlink" title="对象的拓展"></a>对象的拓展</h1><h2 id="Object-is"><a href="#Object-is" class="headerlink" title="Object.is()"></a>Object.is()</h2><p>与===相比 不同之处为：<strong>一是+0不等于-0，二是NaN等于自身</strong></p>
<p>es5可以用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function(x, y) &#123;</span><br><span class="line">    if (x &#x3D;&#x3D;&#x3D; y) &#123;</span><br><span class="line">      &#x2F;&#x2F; 针对+0 不等于 -0的情况</span><br><span class="line">      return x !&#x3D;&#x3D; 0 || 1 &#x2F; x &#x3D;&#x3D;&#x3D; 1 &#x2F; y;</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F; 针对NaN的情况</span><br><span class="line">    return x !&#x3D;&#x3D; x &amp;&amp; y !&#x3D;&#x3D; y;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<h2 id="Object-create"><a href="#Object-create" class="headerlink" title="Object.create"></a>Object.create</h2><blockquote>
<p>第一个参数为创建对象的原型对象<br>传入null时，返回的是一个没有原型的对象（控制台调试下，{}显示 No properties ）<br>而创建的{}会有原型</p>
</blockquote>
<p><code>({}).__proto__ 为一个对象 ,Object.create(null).__proto__===undefined</code></p>
<h1 id="async-函数"><a href="#async-函数" class="headerlink" title="async 函数"></a>async 函数</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">async function test()&#123;</span><br><span class="line">	await new Promise((res,rej)&#x3D;&gt;rej())</span><br><span class="line">	console.log(&#39;hello&#39;)</span><br><span class="line">	await new Promise((res,rej)&#x3D;&gt;res())</span><br><span class="line">&#125;</span><br><span class="line">test()</span><br><span class="line">&#x2F;&#x2F;返回 Promise &#123;[[PromiseStatus]]: &quot;rejected&quot;, [[PromiseValue]]: undefined&#125;</span><br></pre></td></tr></table></figure>
<p>async的是promise对象，其中一步返回或者抛出错误（reject,error）则状态改变,test执行then/catch回调</p>
<h2 id="await"><a href="#await" class="headerlink" title="await"></a>await</h2><p>其后接一个promise对象，非则转</p>
<p>实现重试次数功能</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const superagent &#x3D; require(&#39;superagent&#39;);</span><br><span class="line">const NUM_RETRIES &#x3D; 3;</span><br><span class="line"></span><br><span class="line">async function test() &#123;</span><br><span class="line">  let i;</span><br><span class="line">  for (i &#x3D; 0; i &lt; NUM_RETRIES; ++i) &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">      await superagent.get(&#39;http:&#x2F;&#x2F;google.com&#x2F;this-throws-an-error&#39;);</span><br><span class="line">      break;</span><br><span class="line">    &#125; catch(err) &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">  console.log(i); &#x2F;&#x2F; 3</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test();</span><br></pre></td></tr></table></figure>
<p>上面代码中，如果await操作成功，就会使用break语句退出循环；如果失败，会被catch语句捕捉，然后进入下一轮循环。</p>
<h2 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h2><p>当两个异步操作无继发关系（数据存在依赖），可以利用<code>Promise.all</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let foo &#x3D; await getFoo();</span><br><span class="line">let bar &#x3D; await getBar();</span><br><span class="line">&#x2F;&#x2F;改为</span><br><span class="line">let [foo, bar] &#x3D; await Promise.all([getFoo(), getBar()]);</span><br></pre></td></tr></table></figure>

<h1 id="Symbol"><a href="#Symbol" class="headerlink" title="Symbol"></a>Symbol</h1><p>Symbol函数的参数只是表示对当前 Symbol 值的描述，因此相同参数的Symbol函数的返回值是不相等的</p>
<h2 id="Symbol-作为属性名"><a href="#Symbol-作为属性名" class="headerlink" title="Symbol 作为属性名"></a>Symbol 作为属性名</h2><p>1.不能用点运算符</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const mySymbol &#x3D; Symbol();</span><br><span class="line">a.mySymbol &#x3D; &#39;Hello!&#39;; &#x2F;&#x2F;实际是指a[&#39;mySymbol&#39;] 为字符串属性 非symbol属性</span><br></pre></td></tr></table></figure>

<p>2.使用 Symbol 值定义属性时，Symbol 值必须放在方括号之中。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let s &#x3D; Symbol()</span><br><span class="line">let ss &#x3D; Symbol()</span><br><span class="line">let obj &#x3D; &#123;</span><br><span class="line">  [s]:function(arg)&#123;&#125;,</span><br><span class="line">  [ss]:33</span><br><span class="line">&#125;</span><br><span class="line">obj[s](123)</span><br><span class="line">obj[ss]</span><br></pre></td></tr></table></figure>

<p>3.用于定义常量</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">log.levels &#x3D; &#123;</span><br><span class="line">  DEBUG: Symbol(&#39;debug&#39;),</span><br><span class="line">  INFO: Symbol(&#39;info&#39;),</span><br><span class="line">  WARN: Symbol(&#39;warn&#39;)</span><br><span class="line">&#125;;</span><br><span class="line">log(log.levels.DEBUG, &#39;debug message&#39;);</span><br><span class="line">log(log.levels.INFO, &#39;info message&#39;);</span><br></pre></td></tr></table></figure>
<p><strong>注</strong> Symbol作为属性名，该属性是公开属性</p>
<h2 id="属性名遍历"><a href="#属性名遍历" class="headerlink" title="属性名遍历"></a>属性名遍历</h2><p>Symbol 作为属性名，该属性不会出现在for…in、for…of循环，也不会被Object.keys()、Object.getOwnPropertyNames()、JSON.stringify()返回</p>
<p>但是，它也不是私有属性，有一个Object.getOwnPropertySymbols方法，可以获取指定对象的所有 Symbol 属性名。</p>
<h2 id="Symbol-for-、Symbol-keyFor"><a href="#Symbol-for-、Symbol-keyFor" class="headerlink" title="Symbol.for()、Symbol.keyFor()"></a>Symbol.for()、Symbol.keyFor()</h2><p>重新使用同一个Symbol值。</p>
<p><code>Symbol.for(&#39;test&#39;)</code> 搜索是否有以<code>test</code>为参数的 Symbol 值，有则返回无则创建并登记到全局</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> s1 = <span class="built_in">Symbol</span>.for(<span class="string">'foo'</span>);</span><br><span class="line"><span class="keyword">let</span> s2 = <span class="built_in">Symbol</span>.for(<span class="string">'foo'</span>);</span><br><span class="line"></span><br><span class="line">s1 === s2 <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Symbol</span>(<span class="string">'foo'</span>) === <span class="built_in">Symbol</span>.for(<span class="string">'foo'</span>) <span class="comment">//false</span></span><br><span class="line"><span class="comment">//原因是Symbol()没有登记机制，后面Symbol.for()将搜索不到</span></span><br></pre></td></tr></table></figure>

<p><code>Symbol.keyFor</code>方法返回一个已登记的 Symbol 类型值的<code>key</code>,无则返回undefined。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let s1 &#x3D; Symbol.for(&quot;foo&quot;);</span><br><span class="line">Symbol.keyFor(s1) &#x2F;&#x2F; &quot;foo&quot;</span><br></pre></td></tr></table></figure>

<p><strong>注</strong> Symbol.for()注册的symbol值是全局环境的 （iframe 中注册的主页面也获取的到</p>
<h1 id="Reflect"><a href="#Reflect" class="headerlink" title="Reflect"></a>Reflect</h1><h2 id="让Object操作都变成函数行为"><a href="#让Object操作都变成函数行为" class="headerlink" title="让Object操作都变成函数行为"></a>让Object操作都变成函数行为</h2><p>如</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">delete obj[name]</span><br><span class="line">新写法</span><br><span class="line">Reflect.deleteProperty(obj, name)</span><br></pre></td></tr></table></figure>

<h2 id="与Proxy上的方法一一对应"><a href="#与Proxy上的方法一一对应" class="headerlink" title="与Proxy上的方法一一对应"></a>与Proxy上的方法一一对应</h2><p>Proxy中可以调用Reflect方法，去完成默认行为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Proxy(&#123;&#125;,&#123;</span><br><span class="line">  set:function(t,n,v)&#123;</span><br><span class="line">    let suc &#x3D; Reflect.set(t,n,v)</span><br><span class="line">    if(suc)&#123;</span><br><span class="line">      log(..)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h3 id="Reflect-set-target-name-value-receiver"><a href="#Reflect-set-target-name-value-receiver" class="headerlink" title="Reflect.set(target, name, value, receiver)"></a>Reflect.set(target, name, value, receiver)</h3><p><code>Reflect.set</code>方法设置<code>target</code>对象的 name 属性等于 value</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var myObject &#x3D; &#123;</span><br><span class="line">  foo: 4,</span><br><span class="line">  set bar(value) &#123;</span><br><span class="line">    return this.foo &#x3D; value;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">var myReceiverObject &#x3D; &#123;</span><br><span class="line">  foo: 0,</span><br><span class="line">&#125;;</span><br><span class="line">myObject.foo &#x2F;&#x2F; 4</span><br><span class="line"></span><br><span class="line">Reflect.set(myObject, &#39;foo&#39;, 2);</span><br><span class="line">myObject.foo &#x2F;&#x2F; 2</span><br><span class="line"></span><br><span class="line">Reflect.set(myObject, &#39;bar&#39;, 1, myReceiverObject);</span><br><span class="line">myObject.foo &#x2F;&#x2F; 2</span><br><span class="line">myReceiverObject.foo &#x2F;&#x2F; 1</span><br><span class="line"></span><br><span class="line">Reflect.set(myObject, &#39;foo&#39;, 3, myReceiverObject);</span><br><span class="line">myObject.foo &#x2F;&#x2F;2</span><br><span class="line">myReceiverObject.foo &#x2F;&#x2F;3</span><br></pre></td></tr></table></figure>
<p>含receiver参数的时候，若name属性可赋值或设置了赋值函数，则该name属性或name属性对应的赋值函数的this绑定receiver</p>
<h3 id="Proxy-与-Reflect一起使用"><a href="#Proxy-与-Reflect一起使用" class="headerlink" title="Proxy 与 Reflect一起使用"></a>Proxy 与 Reflect一起使用</h3><p><strong>注意：</strong> Proxy的方法中的<code>receiver</code> 总是指向<code>当前的Proxy实例</code></p>
<p>所以若Proxy的set方法含有<code>receiver参数</code>，执行<code>Reflect.set</code> 时，会将属性赋值给 receiver 上面（即Proxy实例），即触发<code>Proxy.defineProperty</code></p>
<h1 id="字符串的拓展"><a href="#字符串的拓展" class="headerlink" title="字符串的拓展"></a>字符串的拓展</h1><h2 id="复习下-es5-的一些用法"><a href="#复习下-es5-的一些用法" class="headerlink" title="复习下 es5 的一些用法"></a>复习下 es5 的一些用法</h2><h3 id="切割字符串"><a href="#切割字符串" class="headerlink" title="切割字符串"></a>切割字符串</h3><blockquote>
<p>substr(start,len)<br>substring(start,end) </p>
</blockquote>
<h2 id="codePointAt"><a href="#codePointAt" class="headerlink" title="codePointAt()"></a>codePointAt()</h2><p>Unicode 码 大于 0xFFFF 的字符 ，由4个字节存储</p>
<p>故</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;\u&#123;20BB7&#125;&quot; &#x2F;&#x2F;&quot;𠮷&quot;  用&#123;&#125;来包装 可以表示双字节。</span><br><span class="line">var s &#x3D; &quot;𠮷&quot;;</span><br><span class="line"></span><br><span class="line">s.length &#x2F;&#x2F; 2</span><br><span class="line">s.charAt(0) &#x2F;&#x2F; &#39;&#39;</span><br><span class="line">s.charAt(1) &#x2F;&#x2F; &#39;&#39;</span><br><span class="line">s.charCodeAt(0) &#x2F;&#x2F; 55362</span><br><span class="line">s.charCodeAt(1) &#x2F;&#x2F; 57271</span><br></pre></td></tr></table></figure>

<p>利用<code>codePointAt</code>可以拿到 Unicode码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let s &#x3D; &#39;𠮷a&#39;;</span><br><span class="line"></span><br><span class="line">s.codePointAt(0) &#x2F;&#x2F; 134071</span><br><span class="line">s.codePointAt(1) &#x2F;&#x2F; 57271</span><br><span class="line"></span><br><span class="line">s.codePointAt(2) &#x2F;&#x2F; 97</span><br></pre></td></tr></table></figure>
<p>这样写的话不够自动，因为不知道是否该跳过（如At(1)）.</p>
<p>使用<code>for of</code>正确获取</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let s &#x3D; &#39;𠮷a&#39;;</span><br><span class="line">for (let ch of s) &#123;</span><br><span class="line">  console.log(ch.codePointAt(0).toString(16));</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; 20bb7</span><br><span class="line">&#x2F;&#x2F; 61</span><br></pre></td></tr></table></figure>

<p><code>String.fromCodePoint(0x20BB7)</code> 用来解决es5的<code>String.fromCharCode(0x20BB7)</code>不能识别32位字符的问题</p>
<h2 id="includes-startsWith-endsWith"><a href="#includes-startsWith-endsWith" class="headerlink" title="includes(), startsWith(), endsWith()"></a>includes(), startsWith(), endsWith()</h2><p>参数： <code>str,startIndex:开始搜索的位置</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let s &#x3D; &#39;Hello world!&#39;;</span><br><span class="line"></span><br><span class="line">s.startsWith(&#39;world&#39;, 6) &#x2F;&#x2F; true</span><br><span class="line">s.endsWith(&#39;Hello&#39;, 5) &#x2F;&#x2F; true</span><br><span class="line">s.includes(&#39;Hello&#39;, 6) &#x2F;&#x2F; false</span><br></pre></td></tr></table></figure>

<h2 id="模板字符串"><a href="#模板字符串" class="headerlink" title="模板字符串"></a>模板字符串</h2><p>使用 <strong>`</strong>  保留换行</p>
<p>变量名写在<code>${}</code>中,<code>{}</code>中可以写任何js代码</p>
<p>模板字符串可嵌套</p>
<h2 id="实例：模板编译"><a href="#实例：模板编译" class="headerlink" title="实例：模板编译"></a>实例：模板编译</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> templateStr = <span class="string">`</span></span><br><span class="line"><span class="string">&lt;ul class="users"&gt;</span></span><br><span class="line"><span class="string">  &lt;% users.forEach((user) =&gt; &#123; %&gt;</span></span><br><span class="line"><span class="string">    &lt;li class="user-item"&gt;</span></span><br><span class="line"><span class="string">      &lt;%= 'My name is ' + user.name %&gt;</span></span><br><span class="line"><span class="string">    &lt;/li&gt;</span></span><br><span class="line"><span class="string">  &lt;% &#125;) %&gt;</span></span><br><span class="line"><span class="string">&lt;/ul&gt;</span></span><br><span class="line"><span class="string">`</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> data = &#123;</span><br><span class="line">  users: [</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">'Jerry'</span>, <span class="attr">age</span>: <span class="number">12</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">'Lucy'</span>, <span class="attr">age</span>: <span class="number">13</span> &#125;, </span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">'Tomy'</span>, <span class="attr">age</span>: <span class="number">14</span> &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">render(templateStr, data)</span><br><span class="line"><span class="comment">/*返回结果：</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">&lt;ul class="users"&gt;</span></span><br><span class="line"><span class="comment">  &lt;li class="user-item"&gt;</span></span><br><span class="line"><span class="comment">    My name is Jerry</span></span><br><span class="line"><span class="comment">  &lt;/li&gt;</span></span><br><span class="line"><span class="comment">  &lt;li class="user-item"&gt;</span></span><br><span class="line"><span class="comment">    My name is Lucy</span></span><br><span class="line"><span class="comment">  &lt;/li&gt;</span></span><br><span class="line"><span class="comment">  &lt;li class="user-item"&gt;</span></span><br><span class="line"><span class="comment">    My name is Tomy</span></span><br><span class="line"><span class="comment">  &lt;/li&gt;</span></span><br><span class="line"><span class="comment">&lt;/ul&gt;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>思路</strong> 将其转成：</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">`</span></span><br><span class="line"><span class="comment">$&#123;</span></span><br><span class="line"><span class="comment">echo('&lt;ul class="users"&gt;')</span></span><br><span class="line"><span class="comment">  users.forEach((user) =&gt; &#123;</span></span><br><span class="line"><span class="comment">    echo('&lt;li class="user-item"&gt;')</span></span><br><span class="line"><span class="comment">      echo('My name is ' + user.name)</span></span><br><span class="line"><span class="comment">    echo('&lt;/li&gt;')</span></span><br><span class="line"><span class="comment">  &#125;)</span></span><br><span class="line"><span class="comment">&lt;/ul&gt;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">`</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//定义echo函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">echo</span>(<span class="params">html</span>)</span>&#123;</span><br><span class="line">  output += html;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>代码实现</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> render = <span class="function">(<span class="params">template, data</span>) =&gt;</span> <span class="comment">/* TODO */</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">let</span> exp0 = <span class="regexp">/&lt;%=(.+)%&gt;/g</span></span><br><span class="line">  <span class="keyword">let</span> exp1 = <span class="regexp">/&lt;%(.+)%&gt;/g</span></span><br><span class="line">  template = template.replace(exp0,<span class="string">'`);\n echo($1) \n echo(`'</span>).replace(exp1,<span class="string">'`);\n $1 \n echo(`'</span>)</span><br><span class="line">  template = <span class="string">'echo(`'</span> + template +<span class="string">'`)'</span></span><br><span class="line">  <span class="comment">//$&#123;template&#125;的结果为 调用若干echo函数</span></span><br><span class="line">  <span class="keyword">let</span> comp = <span class="string">`</span></span><br><span class="line"><span class="string">  let html = ''</span></span><br><span class="line"><span class="string">  function echo(t)&#123;</span></span><br><span class="line"><span class="string">    html+=t</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">  <span class="subst">$&#123;template&#125;</span></span></span><br><span class="line"><span class="string">  return html</span></span><br><span class="line"><span class="string">  `</span></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Function</span>(...Object.keys(data),comp)(...Object.values(data))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="标签模板"><a href="#标签模板" class="headerlink" title="标签模板"></a>标签模板</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">tag</span>(<span class="params">s, v1, v2</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(s[<span class="number">0</span>]);</span><br><span class="line">  <span class="built_in">console</span>.log(s[<span class="number">1</span>]);</span><br><span class="line">  <span class="built_in">console</span>.log(s[<span class="number">2</span>]);</span><br><span class="line">  <span class="built_in">console</span>.log(v1);</span><br><span class="line">  <span class="built_in">console</span>.log(v2);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="string">"OK"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// "Hello "</span></span><br><span class="line"><span class="comment">// " world "</span></span><br><span class="line"><span class="comment">// ""</span></span><br><span class="line"><span class="comment">// 15</span></span><br><span class="line"><span class="comment">// 50</span></span><br><span class="line"><span class="comment">// "OK"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">let</span> b = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">tag<span class="string">`Hello <span class="subst">$&#123; a + b &#125;</span> world <span class="subst">$&#123; a * b&#125;</span>`</span> <span class="comment">//最后面需要还有一个不被变量替换的''</span></span><br><span class="line"><span class="comment">//等价于</span></span><br><span class="line">tag([<span class="string">'Hello '</span>, <span class="string">' world '</span>, <span class="string">''</span>], <span class="number">15</span>, <span class="number">50</span>)</span><br></pre></td></tr></table></figure>

<p><strong>应用：</strong> 过滤html字符串，防止用户输入恶意内容</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">function SaferHTML(templateData,...values) &#123;</span><br><span class="line">  let s &#x3D; &#39;&#39;;</span><br><span class="line">  let i &#x3D; 0</span><br><span class="line">  for (; i &lt; values.length; i++) &#123;</span><br><span class="line">    s +&#x3D; templateData[i];</span><br><span class="line">    let arg &#x3D; String(values[i]);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; Escape special characters in the substitution.</span><br><span class="line">    s +&#x3D; arg.replace(&#x2F;&amp;&#x2F;g, &quot;&amp;&quot;)</span><br><span class="line">            .replace(&#x2F;&lt;&#x2F;g, &quot;&lt;&quot;)</span><br><span class="line">            .replace(&#x2F;&gt;&#x2F;g, &quot;&gt;&quot;);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; Don&#39;t escape special characters in the template.</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line">  return s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let sender &#x3D; &#39;&lt;script&gt;alert(&quot;abc&quot;)&lt;&#x2F;script&gt;&#39;; &#x2F;&#x2F; 恶意代码</span><br><span class="line">let message &#x3D; SaferHTML&#96;&lt;p&gt;$&#123;sender&#125; has sent you a message.&lt;&#x2F;p&gt;&#96;;</span><br><span class="line"></span><br><span class="line">message</span><br><span class="line">&#x2F;&#x2F; &lt;p&gt;&lt;script&gt;alert(&quot;abc&quot;)&lt;&#x2F;script&gt; has sent you a message.&lt;&#x2F;p&gt;</span><br></pre></td></tr></table></figure>



<h1 id="Class"><a href="#Class" class="headerlink" title="Class"></a>Class</h1><p>ES5的原型链继承</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function Parent()&#123;</span><br><span class="line">  this.name &#x3D; &#39;parent&#39;</span><br><span class="line">&#125;</span><br><span class="line">function Child()&#123;</span><br><span class="line">  this.name &#x3D; &#39;child&#39;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; 用子类的原型对象等于父类的实例</span><br><span class="line">&#x2F;&#x2F; 则子类原型拥有父类的所有实例属性和实例方法,即Child.prototype.name &#x3D; &#39;parent&#39;</span><br><span class="line">Child.prototype &#x3D; new Parent()</span><br><span class="line">&#x2F;&#x2F; 实例调用方法，先去找实例方法 再去找原型方法</span><br></pre></td></tr></table></figure>

<h1 id="Set-amp-Map"><a href="#Set-amp-Map" class="headerlink" title="Set &amp; Map"></a>Set &amp; Map</h1><h2 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h2><p>用于去重，可以存储任意类型的值</p>
<p>Set 存储对象，会存在一个引用，导致该对象无法被垃圾回收，使用时需要注意手动删除引用(从 set 中delete)</p>
<h2 id="WeakSet"><a href="#WeakSet" class="headerlink" title="WeakSet"></a>WeakSet</h2><p>只能存储对象</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> ws = <span class="keyword">new</span> <span class="built_in">WeakSet</span>();</span><br><span class="line">ws.add(<span class="number">1</span>)</span><br><span class="line"><span class="comment">// TypeError: Invalid value used in weak set</span></span><br><span class="line">ws.add(<span class="built_in">Symbol</span>())</span><br><span class="line"><span class="comment">// TypeError: invalid value used in weak set</span></span><br></pre></td></tr></table></figure>
<p>垃圾回收机制不考虑 WeakSet 对该对象的引用</p>
<p>WeakSet 内部有多少个成员，取决于垃圾回收机制有没有运行，运行前后很可能成员个数是不一样的，而垃圾回收机制何时运行是不可预测的，因此 ES6 规定 WeakSet <strong>不可遍历</strong></p>
<p>使用场景：</p>
<ul>
<li>存储 DOM 节点</li>
</ul>
<p>举例</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> weakSet = <span class="keyword">new</span> <span class="built_in">WeakSet</span>()</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">set</span> = new Set()</span><br><span class="line">class Foo &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> foo1 = <span class="keyword">new</span> Foo()</span><br><span class="line"><span class="keyword">let</span> foo2 = <span class="keyword">new</span> Foo()</span><br><span class="line">weakSet.add(foo1)</span><br><span class="line"><span class="keyword">set</span>.add(foo2)</span><br><span class="line">foo1 = null</span><br><span class="line">foo2 = null</span><br><span class="line"></span><br><span class="line">// 观察输出的结果</span><br><span class="line">// <span class="keyword">set</span> 中有元素， weakSet 中没有元素</span><br><span class="line">console.log(weakSet)</span><br><span class="line">console.log(<span class="keyword">set</span>)</span><br><span class="line"></span><br><span class="line">// 如果 weakSet 中也有元素，应该是还没有触发垃圾回收</span><br><span class="line">// 手动触发 GC -- Chrome Performance 标签页点击 Collect garbage</span><br></pre></td></tr></table></figure>

<h2 id="Map-amp-WeakMap"><a href="#Map-amp-WeakMap" class="headerlink" title="Map &amp; WeakMap"></a>Map &amp; WeakMap</h2><p>与 Set/WeakSet 类似，只是变成存储 k-v</p>
<p>垃圾回收机制不考虑 WeakSet 对 key 对象的引用 </p>
]]></content>
      <categories>
        <category>大前端</category>
      </categories>
      <tags>
        <tag>ECMAScript</tag>
      </tags>
  </entry>
  <entry>
    <title>趣味js-只用特殊字符生成任意字符串</title>
    <url>/2018/01/07/2018Q1/%E8%B6%A3%E5%91%B3js-%E5%8F%AA%E7%94%A81%E5%92%8C%E7%89%B9%E6%AE%8A%E5%AD%97%E7%AC%A6%E7%94%9F%E6%88%90%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
    <content><![CDATA[<p><strong>180306更新</strong>：发现有个<code>http://www.jsfuck.com/</code> ,上面就做了我想做的东西。也找到了C的生成方法</p>
<p>同时，由于+[]=0,+!+[]=1。我们可以把1也给省略</p>
<p>jsfuck里面还有很多骚操作，比如 <code>+(&quot;11e20&quot;)=1.1e+21</code></p>
<a id="more"></a>

<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>今天逛<a href="http://justjavac.com/about.html" target="_blank" rel="noopener">justjavac 老哥的博客</a>看到了类似下面的代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(+([]+(11^(1&lt;&lt;1))+((1+1)&lt;&lt;(1+1))+(11&gt;&gt;&gt;1)+(1^1)+((11&gt;&gt;1)+(1&lt;&lt;1))+(-~1)+(-~1+1)+(1^1)+(1^1)))[(!!1+[])[1^1]+([]+&#123;&#125;+[])[1]+(([]+&#123;&#125;)[([]+&#123;&#125;)[11-1&gt;&gt;1]+[[],[]+&#123;&#125;+[]][[]+1][1]+(&#x2F;^&#x2F;[1]+[])[1|1&gt;&gt;1|1]+[&#123;&#125;,11^1,!&#123;&#125;+[]][1+1][1&lt;&lt;1^1]+(11&#x2F;!&#123;&#125;+&#123;&#125;)[~1+(11^1)+~1]+[!!&#123;&#125;+&#123;&#125;][[]&amp;111][1&amp;1]+(&#x2F;^&#x2F;[111]+[])[11^11]+[&#123;&#125;,[&#123;&#125;]+&#123;&#125;,1][1+[]][11-~1+11&gt;&gt;1]+(!!1+&#123;&#125;)[1&amp;1&gt;&gt;1]+([]+&#123;1:1&#125;+[])[1|1]+[[]+!!1][111&gt;&gt;&gt;111][1&lt;&lt;1&gt;&gt;1]]+[])[([]+![111])[1|1&lt;&lt;1|1]+[&#x2F;&#x3D;&#x2F;,[]+[][11]][1|[]][1&gt;&gt;1]+([&#123;&#125;]+&#123;&#125;)[1+!![1]]+[1,!1+&#x2F;~&#x2F;][1%11][1^1&lt;&lt;1]+(!!1+[])[1^1]+[!!&#x2F;-&#x2F;+&#x2F;-&#x2F;][11%11][+!!1]](11^1&lt;&lt;1,-~11&gt;&gt;1)](~1-~(11^1)&lt;&lt;1&lt;&lt;1)</span><br></pre></td></tr></table></figure>
<p>输出：<code>gahing</code></p>
<p>实现的原理是什么？</p>
<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>了解 js 隐式类型转换（不懂可以参考<a href="https://github.com/jawil/blog/issues/5" target="_blank" rel="noopener">这里</a>）的都知道</p>
<p>我们可以通过执行<code>!1+[]</code>得到<code>&quot;false&quot;</code></p>
<blockquote>
<p>具体原理是 false+object 操作会先去调用object的valueOf()方法 发现其值=this </p>
</blockquote>
<blockquote>
<p>继续调用toString()方法得到””, 结果即false+”” = “false”(又去做了隐式转换)</p>
</blockquote>
<p>故我们通过数组下标就可以拿到想要的字符<code>f,a,l,s,e</code></p>
<p>类似的方法我们还能够拿到</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">!<span class="number">1</span>+[] = <span class="string">"false"</span></span><br><span class="line">!!<span class="number">1</span>+[] = <span class="string">"true"</span></span><br><span class="line"><span class="number">1</span>/[]+[] = <span class="string">"Infinity"</span></span><br><span class="line">[]/[]+[] = <span class="string">"NaN"</span></span><br><span class="line">[]+&#123;&#125; = <span class="string">"[object Object]"</span></span><br><span class="line">[]+<span class="regexp">/^/</span>[<span class="number">1</span>] = <span class="string">"undefined"</span> <span class="comment">/* /^/是正则 */</span></span><br><span class="line">[]+<span class="regexp">/\:@$/</span> = <span class="string">"/\:@$/"</span> <span class="comment">/*键盘可见特殊字符放/\ /其中(\用于转义)获取比如拿:就是[1]*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//可拿到的小写字母有=abcdef ijln orst uy</span></span><br></pre></td></tr></table></figure>

<p>然后你会发现，26个字母还是有好多不在上面的，并不能通过每次去上面拿字符然后再做拼接</p>
<!--more-->

<p>但是！！<code>constructor</code> 这个字符串里面的字符都可以通过上面的拿到</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="string">"constructor"</span> = ([]+&#123;&#125;)[<span class="number">11</span><span class="number">-1</span>&gt;&gt;<span class="number">1</span>]+[[],[]+&#123;&#125;+[]][[]+<span class="number">1</span>][<span class="number">1</span>]+(<span class="regexp">/^/</span>[<span class="number">1</span>]+[])[<span class="number">1</span>|<span class="number">1</span>&gt;&gt;<span class="number">1</span>|<span class="number">1</span>]+[&#123;&#125;,<span class="number">11</span>^<span class="number">1</span>,!&#123;&#125;+[]][<span class="number">1</span>+<span class="number">1</span>][<span class="number">1</span>&lt;&lt;<span class="number">1</span>^<span class="number">1</span>]+(<span class="number">11</span>/!&#123;&#125;+&#123;&#125;)[~<span class="number">1</span>+(<span class="number">11</span>^<span class="number">1</span>)+~<span class="number">1</span>]+[!!&#123;&#125;+&#123;&#125;][[]&amp;<span class="number">111</span>][<span class="number">1</span>&amp;<span class="number">1</span>]+(<span class="regexp">/^/</span>[<span class="number">111</span>]+[])[<span class="number">11</span>^<span class="number">11</span>]+[&#123;&#125;,[&#123;&#125;]+&#123;&#125;,<span class="number">1</span>][<span class="number">1</span>+[]][<span class="number">11</span>-~<span class="number">1</span>+<span class="number">11</span>&gt;&gt;<span class="number">1</span>]+(!!<span class="number">1</span>+&#123;&#125;)[<span class="number">1</span>&amp;<span class="number">1</span>&gt;&gt;<span class="number">1</span>]+([]+&#123;<span class="number">1</span>:<span class="number">1</span>&#125;+[])[<span class="number">1</span>|<span class="number">1</span>]+[[]+!!<span class="number">1</span>][<span class="number">111</span>&gt;&gt;&gt;<span class="number">111</span>][<span class="number">1</span>&lt;&lt;<span class="number">1</span>&gt;&gt;<span class="number">1</span>]</span><br></pre></td></tr></table></figure>
<p><code>constructor</code>有什么作用呢，先思考下…</p>
<hr>
<p>好吧其实作用就是<code>&quot;&quot;[&#39;constructor&#39;]+[]</code> 可以拿到<code>&quot;function String() { [native code] }&quot;</code></p>
<p>于是，我拿到了<code>String</code>字符串，再通过其他地方又可拿到<code>to</code> ，于是<code>toString</code>方法就get了</p>
<p>最后实现的原理其实是toString,即:</p>
<p><code>(985072300).toString(36)</code> </p>
<p><code>36=~1-~(11^1)&lt;&lt;1&lt;&lt;1</code></p>
<p>前面的数字串是字符串的36进制(0~9a-z)表示,比如 gahing 的36进制表示是985072300</p>
<h3 id="进制转换："><a href="#进制转换：" class="headerlink" title="进制转换："></a>进制转换：</h3><p>36进制可以预先通过下面的方法获得</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">parseInt</span>(<span class="string">"gahing"</span>,<span class="number">36</span>)</span><br><span class="line">=&gt;<span class="number">985072300</span></span><br><span class="line"></span><br><span class="line">(<span class="number">985072300</span>).toString(<span class="number">36</span>)</span><br><span class="line">=&gt;<span class="string">"gahing"</span></span><br></pre></td></tr></table></figure>

<h3 id="number转换为1和字符组合构成"><a href="#number转换为1和字符组合构成" class="headerlink" title="number转换为1和字符组合构成"></a>number转换为1和字符组合构成</h3><p>举个例子就懂了</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[]+1+2+3 &#x3D; &quot;123&quot;</span><br><span class="line">(+([]+1+2+3)) &#x3D; 123</span><br></pre></td></tr></table></figure>

<p>我们设置0~9的组合串为如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0:(1^1)</span><br><span class="line">1:(1|1)</span><br><span class="line">2:(-~1)</span><br><span class="line">3:(-~1|1)</span><br><span class="line">4:(-~1&lt;&lt;1)</span><br><span class="line">5:(11&gt;&gt;1)</span><br><span class="line">6:((11+1)&gt;&gt;1)</span><br><span class="line">7:(11&gt;&gt;1|-~1)</span><br><span class="line">8:(11^(-~1|1))</span><br><span class="line">9:(11^(1&lt;&lt;1))</span><br></pre></td></tr></table></figure>

<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//$1="constructor"</span></span><br><span class="line"><span class="keyword">let</span> $<span class="number">1</span>  = ([]+&#123;&#125;)[<span class="number">11</span><span class="number">-1</span>&gt;&gt;<span class="number">1</span>]+[[],[]+&#123;&#125;+[]][[]+<span class="number">1</span>][<span class="number">1</span>]+(<span class="regexp">/^/</span>[<span class="number">1</span>]+[])[<span class="number">1</span>|<span class="number">1</span>&gt;&gt;<span class="number">1</span>|<span class="number">1</span>]+[&#123;&#125;,<span class="number">11</span>^<span class="number">1</span>,!&#123;&#125;+[]][<span class="number">1</span>+<span class="number">1</span>][<span class="number">1</span>&lt;&lt;<span class="number">1</span>^<span class="number">1</span>]+(<span class="number">11</span>/!&#123;&#125;+&#123;&#125;)[~<span class="number">1</span>+(<span class="number">11</span>^<span class="number">1</span>)+~<span class="number">1</span>]+[!!&#123;&#125;+&#123;&#125;][[]&amp;<span class="number">111</span>][<span class="number">1</span>&amp;<span class="number">1</span>]+(<span class="regexp">/^/</span>[<span class="number">111</span>]+[])[<span class="number">11</span>^<span class="number">11</span>]+[&#123;&#125;,[&#123;&#125;]+&#123;&#125;,<span class="number">1</span>][<span class="number">1</span>+[]][<span class="number">11</span>-~<span class="number">1</span>+<span class="number">11</span>&gt;&gt;<span class="number">1</span>]+(!!<span class="number">1</span>+&#123;&#125;)[<span class="number">1</span>&amp;<span class="number">1</span>&gt;&gt;<span class="number">1</span>]+([]+&#123;<span class="number">1</span>:<span class="number">1</span>&#125;+[])[<span class="number">1</span>|<span class="number">1</span>]+[[]+!!<span class="number">1</span>][<span class="number">111</span>&gt;&gt;&gt;<span class="number">111</span>][<span class="number">1</span>&lt;&lt;<span class="number">1</span>&gt;&gt;<span class="number">1</span>]</span><br><span class="line"><span class="comment">//$11="function String() &#123; [native code] &#125;"</span></span><br><span class="line"><span class="keyword">let</span> $<span class="number">11</span> = (([]+&#123;&#125;)[$<span class="number">1</span>]+[])</span><br><span class="line"><span class="comment">//$111="substr"</span></span><br><span class="line"><span class="keyword">let</span> $<span class="number">111</span> = ([]+![<span class="number">111</span>])[<span class="number">1</span>|<span class="number">1</span>&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]+[<span class="regexp">/=/</span>,[]+[][<span class="number">11</span>]][<span class="number">1</span>|[]][<span class="number">1</span>&gt;&gt;<span class="number">1</span>]+([&#123;&#125;]+&#123;&#125;)[<span class="number">1</span>+!![<span class="number">1</span>]]+[<span class="number">1</span>,!<span class="number">1</span>+<span class="regexp">/~/</span>][<span class="number">1</span>%<span class="number">11</span>][<span class="number">1</span>^<span class="number">1</span>&lt;&lt;<span class="number">1</span>]+(!!<span class="number">1</span>+[])[<span class="number">1</span>^<span class="number">1</span>]+[!!<span class="regexp">/-/</span>+<span class="regexp">/-/</span>][<span class="number">11</span>%<span class="number">11</span>][+!!<span class="number">1</span>]</span><br><span class="line"><span class="comment">//$$="String"</span></span><br><span class="line"><span class="keyword">let</span> $$ = $<span class="number">11</span>[$<span class="number">111</span>](<span class="number">11</span>^<span class="number">1</span>&lt;&lt;<span class="number">1</span>,-~<span class="number">11</span>&gt;&gt;<span class="number">1</span>) <span class="comment">//substr(9,6)</span></span><br><span class="line"><span class="comment">//$_1="toString"</span></span><br><span class="line"><span class="keyword">let</span> $_1=(!!<span class="number">1</span>+[])[<span class="number">1</span>^<span class="number">1</span>]+([]+&#123;&#125;+[])[<span class="number">1</span>]+$$</span><br><span class="line"><span class="comment">//结果：(985072300)['toString'](36)</span></span><br><span class="line">(+([]+(<span class="number">11</span>^(<span class="number">1</span>&lt;&lt;<span class="number">1</span>))+((<span class="number">1</span>+<span class="number">1</span>)&lt;&lt;(<span class="number">1</span>+<span class="number">1</span>))+(<span class="number">11</span>&gt;&gt;&gt;<span class="number">1</span>)+(<span class="number">1</span>^<span class="number">1</span>)+((<span class="number">11</span>&gt;&gt;<span class="number">1</span>)+(<span class="number">1</span>&lt;&lt;<span class="number">1</span>))+(-~<span class="number">1</span>)+(-~<span class="number">1</span>+<span class="number">1</span>)+(<span class="number">1</span>^<span class="number">1</span>)</span><br><span class="line">+(<span class="number">1</span>^<span class="number">1</span>)))[$_1](~<span class="number">1</span>-~(<span class="number">11</span>^<span class="number">1</span>)&lt;&lt;<span class="number">1</span>&lt;&lt;<span class="number">1</span>)</span><br></pre></td></tr></table></figure>


<h2 id="存在的问题及其改进方法"><a href="#存在的问题及其改进方法" class="headerlink" title="存在的问题及其改进方法"></a>存在的问题及其改进方法</h2><h3 id="长字符串"><a href="#长字符串" class="headerlink" title="长字符串"></a>长字符串</h3><p>当字符串有多种类型时（比如下面会提到的中文）需要考虑分段，多次<code>toString(36)</code>最后拼接起来。</p>
<p>由于<code>toString</code>方法获得不易，让<code>$=&#39;toString&#39;</code>吧</p>
<h3 id="大写字母、中文字符、非常见字符"><a href="#大写字母、中文字符、非常见字符" class="headerlink" title="大写字母、中文字符、非常见字符"></a>大写字母、中文字符、非常见字符</h3><p>个别大写字母可以通过以下式子去拿到</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$1&#x3D;&#39;constructor&#39;</span><br><span class="line">A: [][$1]+[]&#x3D;&quot;function Array() &#123; [native code] &#125;&quot;</span><br><span class="line">B: (!!1)[$1]+[]&#x3D;&quot;function Boolean() &#123; [native code] &#125;&quot;</span><br><span class="line">I: 1&#x2F;[]+[] &#x3D; &quot;Infinity&quot;</span><br><span class="line">E: &#x2F;\\&#x2F;[$1]+[] &#x3D; &quot;function RegExp() &#123; [native code] &#125;&quot;</span><br><span class="line">N: []&#x2F;[]+[] &#x3D; &quot;NaN&quot;</span><br><span class="line">O: []+&#123;&#125;&#x3D;&quot;[object Object]&quot;</span><br><span class="line">S: &#39;&#39;[$1]+[] &#x3D; &quot;function String() &#123; [native code] &#125;&quot;</span><br><span class="line">R: &#x2F;\\&#x2F;[$1]+[] &#x3D; &quot;function RegExp() &#123; [native code] &#125;&quot;</span><br></pre></td></tr></table></figure>

<p><strong>当然，我们可以用黑科技去获取。</strong></p>
<p>String类有个方法<code>fromCodePoint</code>(不用<code>fromCharCode</code>因为其不能识别4字节字符)</p>
<p>通过传入<code>Unicode</code> 值即可得到对应的字符，String类可以通过构造函数<code>&#39;&#39;[&#39;constructor&#39;]</code>拿到。</p>
<p>例：<code>&#39;&#39;[&#39;constructor&#39;][&#39;fromCodePoint&#39;](23433) //输出&#39;安&#39;</code></p>
<p><code>23433</code> 是 <code>安</code> 的unicode码，可以通过 <code>&#39;安&#39;.codePointAt(0)</code> 获得</p>
<p>故我们可以事先得到<code>fromCodePoint</code>的组合串。用一个临时变量保存，会经常用到</p>
<p><del><strong>PS:实在是找不到怎么生成’C’的。。下文可以不用看了</strong></del><br>navigator.userAgent.match(RegExp(‘\u0043’)) 思路<br>eval(<code>${&#39;\\u0043&#39;}</code>) 思路</p>
<p><strong>180306更新</strong>：发现有个<code>http://www.jsfuck.com/</code> ,上面就做了我想做的东西。也找到了C的生成方法<br>同时，由于+[]=0,+!+[]=1。我们可以把1也给省略</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let  fcp &#x3D; 74719523963420330000 &#x2F;&#x2F; &#39;fromCodePoint&#39;的36位编码</span><br><span class="line">let $$ &#x3D;(fcp)[&#39;toString&#39;](36) &#x2F;&#x2F;&#39;fromCodePoint&#39;</span><br><span class="line">$1&#x3D;&#39;constructor&#39;</span><br><span class="line">&#39;&#39;[$1][$$](23433) &#x2F;&#x2F; 输出&#39;安&#39;</span><br></pre></td></tr></table></figure>

<p>这样，所有的字符都可以得到了。</p>
<h2 id="生产"><a href="#生产" class="headerlink" title="生产"></a>生产</h2><p>现在我们的需求是：输入一个字符串，输出一个组合串</p>
<h3 id="规则"><a href="#规则" class="headerlink" title="规则"></a>规则</h3><p><strong>一般来说：</strong></p>
<ol start="0">
<li><p>数字串直接用<code>([]+1+11)</code>实现</p>
</li>
<li><p>让连续的小写字母串用<code>toString(36)</code></p>
</li>
<li><p>可以直接拿到的英文字符，特殊字符，直接去获取</p>
</li>
<li><p>最后再用<code>fromCodePoint</code>方法</p>
</li>
</ol>
<p><strong>算法如下：</strong></p>
<ol>
<li><p>字符串分割：将连续的数字串、连续的小写字母串作为整体，其他的作为单个字符</p>
<p>判断存在的类型，事先用变量替换需要多次用到的方法串，比如 <code>fromCodePoint</code></p>
<p>分割后的数组、元素类别及个数 对应的数据结构为:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  [<span class="built_in">Symbol</span>.for(<span class="string">'numStr'</span>)]:<span class="number">0</span>,</span><br><span class="line">  [<span class="built_in">Symbol</span>.for(<span class="string">'commonLowercaseStr'</span>)]:<span class="number">0</span>,</span><br><span class="line">  [<span class="built_in">Symbol</span>.for(<span class="string">'otherLowercaseStr'</span>)]:<span class="number">0</span>,</span><br><span class="line">  [<span class="built_in">Symbol</span>.for(<span class="string">'commonCapital'</span>)]:<span class="number">0</span>,</span><br><span class="line">  [<span class="built_in">Symbol</span>.for(<span class="string">'commonSign'</span>)]:<span class="number">0</span>,</span><br><span class="line">  [<span class="built_in">Symbol</span>.for(<span class="string">'otherChar'</span>)]:<span class="number">0</span>,</span><br><span class="line">  arr:[&#123;<span class="attr">str</span>:<span class="string">''</span>,<span class="attr">type</span>:<span class="built_in">Symbol</span>.for(<span class="string">'numStr'</span>),<span class="attr">transStr</span>:<span class="string">''</span>&#125;,...]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>字符串替换：利用上文提到的替换公式将字符串替换掉</p>
<p>2.1 数字串采用<code>([]+1+11)</code>实现，每个数字都有对应的组合串</p>
<p>2.2 处理小写字母串，若该串所有字符可直接获取(abcdefijlnorstuy),则直接获取，否则采用<code>toString(36)</code>实现，36进制通过 <code>parseInt方法</code> 获取</p>
<p>2.3 特殊字符、大写字母先看能否直接获取（ABEFINORS），否则走 2.4 流程</p>
<p>2.4 利用<code>codePointAt</code>拿到<code>Unicode</code>码，再生成<code>String.fromCodePoint(unicode)</code> 的组合串</p>
</li>
<li><p>字符串拼接：将分割后替换完的组合串进行拼接</p>
</li>
</ol>
<p><strong>注：</strong> 定义的变量，为保持拓展性，变量第一位都是$ 第二位为_表示后面的是替换方法 第二位为1表示后面将是替换具体字符</p>
<h3 id="举个栗子"><a href="#举个栗子" class="headerlink" title="举个栗子"></a>举个栗子</h3><p>对于原串：<code>hello 送你一台iPhone6，价值$666</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//将常见字符的组合串设置到source上</span></span><br><span class="line"><span class="keyword">let</span> source = init() <span class="comment">//source:&#123;'0':'(1^1)',...&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 对字符串分割分类，生成数据结构</span></span><br><span class="line"><span class="keyword">let</span> data = split(str)</span><br><span class="line"><span class="comment">// arr = ['hello',' ','送','你','一','台','i','P','hone','6','，','价','值','$','666']</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">obj = &#123;</span></span><br><span class="line"><span class="comment">     [Symbol.for('numStr')]:2,</span></span><br><span class="line"><span class="comment">     [Symbol.for('commonLowercaseStr')]:1,</span></span><br><span class="line"><span class="comment">     [Symbol.for('otherLowercaseStr')]:2,</span></span><br><span class="line"><span class="comment">     [Symbol.for('commonCapital')]:0,</span></span><br><span class="line"><span class="comment">     [Symbol.for('commonSign')]:3,</span></span><br><span class="line"><span class="comment">     [Symbol.for('otherChar')]:7,</span></span><br><span class="line"><span class="comment">     arr:[&#123;str:'hello',type:Symbol.for('otherLowercaseStr'),transStr:''&#125;,</span></span><br><span class="line"><span class="comment">     &#123;str:' ',type:Symbol.for('commonSign'),transStr:''&#125;,</span></span><br><span class="line"><span class="comment">     &#123;str:'送',type:Symbol.for('otherChar'),transStr:''&#125;,</span></span><br><span class="line"><span class="comment">     &#123;str:'你',type:Symbol.for('otherChar'),transStr:''&#125;,</span></span><br><span class="line"><span class="comment">     &#123;str:'一',type:Symbol.for('otherChar'),transStr:''&#125;,</span></span><br><span class="line"><span class="comment">     &#123;str:'台',type:Symbol.for('otherChar'),transStr:''&#125;,</span></span><br><span class="line"><span class="comment">     &#123;str:'i',type:Symbol.for('commonLowercaseStr'),transStr:''&#125;,</span></span><br><span class="line"><span class="comment">     &#123;str:'P',type:Symbol.for('otherChar'),transStr:''&#125;,</span></span><br><span class="line"><span class="comment">     &#123;str:'hone',type:Symbol.for('otherLowercaseStr'),transStr:''&#125;,</span></span><br><span class="line"><span class="comment">     &#123;str:'6',type:Symbol.for('numStr'),transStr:''&#125;,</span></span><br><span class="line"><span class="comment">     &#123;str:'，',type:Symbol.for('commonSign'),transStr:''&#125;,</span></span><br><span class="line"><span class="comment">     &#123;str:'价',type:Symbol.for('otherChar'),transStr:''&#125;,</span></span><br><span class="line"><span class="comment">     &#123;str:'值',type:Symbol.for('otherChar'),transStr:''&#125;,</span></span><br><span class="line"><span class="comment">     &#123;str:'$',type:Symbol.for('commonSign'),transStr:''&#125;,</span></span><br><span class="line"><span class="comment">     &#123;str:'666',type:Symbol.for('numStr'),transStr:''&#125;]</span></span><br><span class="line"><span class="comment">   &#125;</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//对数组元素类型，用变量替换会用到的方法串</span></span><br><span class="line"><span class="keyword">let</span> signObj = getSignOf(data.arr) <span class="comment">//signObj=&#123;useConstructor:'$_$=xxx;';useFromCodePoint:'$_1=xxx;'&#125;</span></span><br><span class="line"><span class="comment">//otherLowercaseStr&gt;0 初始化$_$=constructor的组合串</span></span><br><span class="line"><span class="comment">//otherChar&gt;0 初始化$_1=fromCodePoint的组合串</span></span><br><span class="line"><span class="comment">//为保持拓展性。变量第一位都是$ 第二位为_表示后面的是替换方法 第二位为1表示后面将是替换具体字符</span></span><br><span class="line"><span class="keyword">let</span> result = <span class="string">''</span></span><br><span class="line"><span class="keyword">let</span> ua = signObj.useConstructor</span><br><span class="line"><span class="keyword">let</span> ub = signObj.useFromCodePoint</span><br><span class="line">ua&amp;&amp;(result+=ua)</span><br><span class="line">ub&amp;&amp;(result+=ub)</span><br><span class="line"></span><br><span class="line"><span class="comment">//循环元素处理，结果存在transStr</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> obj <span class="keyword">of</span> data.arr)&#123;</span><br><span class="line">  <span class="keyword">switch</span>(obj.type)&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="built_in">Symbol</span>.for(<span class="string">'numStr'</span>):&#123;handleNumStr(obj);<span class="keyword">break</span>;&#125;</span><br><span class="line">    <span class="keyword">case</span> <span class="built_in">Symbol</span>.for(<span class="string">'commonLowercaseStr'</span>):&#123;handleCommonLowercaseStr(obj);<span class="keyword">break</span>;&#125;</span><br><span class="line">    <span class="keyword">case</span> <span class="built_in">Symbol</span>.for(<span class="string">'otherLowercaseStr'</span>):&#123;handleOtherLowercaseStr(obj);<span class="keyword">break</span>;&#125;</span><br><span class="line">    <span class="keyword">case</span> <span class="built_in">Symbol</span>.for(<span class="string">'commonCapital'</span>):&#123;handleCommonCapital(obj);<span class="keyword">break</span>;&#125;</span><br><span class="line">    <span class="keyword">case</span> <span class="built_in">Symbol</span>.for(<span class="string">'commonSign'</span>):&#123;handleCommonSign(obj);<span class="keyword">break</span>;&#125;</span><br><span class="line">    <span class="keyword">case</span> <span class="built_in">Symbol</span>.for(<span class="string">'otherChar'</span>):&#123;handleOtherChar(obj);<span class="keyword">break</span>;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//得到结果</span></span><br><span class="line">result+=data.arr.reduce(<span class="function">(<span class="params">tot,cur</span>)=&gt;</span>tot+cur.transStr)</span><br></pre></td></tr></table></figure>

<h3 id="方法代码"><a href="#方法代码" class="headerlink" title="方法代码"></a>方法代码</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> numStr = <span class="built_in">Symbol</span>.for(<span class="string">'numStr'</span>)</span><br><span class="line"><span class="keyword">const</span> commonLowercaseStr = <span class="built_in">Symbol</span>.for(<span class="string">'commonLowercaseStr'</span>)</span><br><span class="line"><span class="keyword">const</span> otherLowercaseStr = <span class="built_in">Symbol</span>.for(<span class="string">'otherLowercaseStr'</span>)</span><br><span class="line"><span class="keyword">const</span> commonCapital = <span class="built_in">Symbol</span>.for(<span class="string">'commonCapital'</span>)</span><br><span class="line"><span class="keyword">const</span> useConstructorCapital = <span class="built_in">Symbol</span>.for(<span class="string">'useConstructorCapital'</span>)</span><br><span class="line"><span class="keyword">const</span> commonSign = <span class="built_in">Symbol</span>.for(<span class="string">'commonSign'</span>)</span><br><span class="line"><span class="keyword">const</span> otherChar = <span class="built_in">Symbol</span>.for(<span class="string">'otherChar'</span>)</span><br><span class="line"><span class="keyword">const</span> string_null_error = <span class="built_in">Symbol</span>.for(<span class="string">'string_null_error'</span>)</span><br><span class="line"><span class="keyword">const</span> string_multitype_error = <span class="built_in">Symbol</span>.for(<span class="string">'string_multitype_error'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> StringBuilder = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> instance</span><br><span class="line">  <span class="keyword">let</span> builder = &#123;&#125;</span><br><span class="line">  <span class="keyword">let</span> init = <span class="function"><span class="keyword">function</span> (<span class="params">name</span>) </span>&#123;</span><br><span class="line">    builder[<span class="number">0</span>] = <span class="string">'1^1'</span></span><br><span class="line">    builder[<span class="number">1</span>] = <span class="string">'1|1'</span></span><br><span class="line">    builder[<span class="number">2</span>] = <span class="string">'-~1'</span></span><br><span class="line">    builder[<span class="number">3</span>] = <span class="string">'-~1|1'</span></span><br><span class="line">    builder[<span class="number">4</span>] = <span class="string">'-~1&lt;&lt;1'</span></span><br><span class="line">    builder[<span class="number">5</span>] = <span class="string">'11&gt;&gt;1'</span></span><br><span class="line">    builder[<span class="number">6</span>] = <span class="string">'(11+1)&gt;&gt;1'</span></span><br><span class="line">    builder[<span class="number">7</span>] = <span class="string">'11&gt;&gt;1|-~1'</span></span><br><span class="line">    builder[<span class="number">8</span>] = <span class="string">'11^(-~1|1)'</span></span><br><span class="line">    builder[<span class="number">9</span>] = <span class="string">'11^(1&lt;&lt;1)'</span></span><br><span class="line">    builder[<span class="number">12</span>] = <span class="string">'11+1'</span></span><br><span class="line">    builder[<span class="string">'false'</span>] = <span class="string">'!1+[]'</span></span><br><span class="line">    builder[<span class="string">'true'</span>] = <span class="string">'!!1+[]'</span></span><br><span class="line">    builder[<span class="string">'Infinity'</span>] = <span class="string">'1/[]+[]'</span></span><br><span class="line">    builder[<span class="string">'NaN'</span>] = <span class="string">'[]/[]+[]'</span></span><br><span class="line">    builder[<span class="string">'[object Object]'</span>] = <span class="string">'[]+&#123;&#125;'</span></span><br><span class="line">    builder[<span class="string">'undefined'</span>] = <span class="string">'[]+/^/[1]'</span></span><br><span class="line">    builder[<span class="string">'a'</span>] = <span class="string">`(<span class="subst">$&#123;builder[<span class="string">'false'</span>]&#125;</span>)[<span class="subst">$&#123;builder[<span class="number">1</span>]&#125;</span>]`</span></span><br><span class="line">    builder[<span class="string">'b'</span>] = <span class="string">`(<span class="subst">$&#123;builder[<span class="string">'[object Object]'</span>]&#125;</span>)[<span class="subst">$&#123;builder[<span class="number">2</span>]&#125;</span>]`</span></span><br><span class="line">    builder[<span class="string">'c'</span>] = <span class="string">`(<span class="subst">$&#123;builder[<span class="string">'[object Object]'</span>]&#125;</span>)[<span class="subst">$&#123;builder[<span class="number">5</span>]&#125;</span>]`</span></span><br><span class="line">    builder[<span class="string">'d'</span>] = <span class="string">`(<span class="subst">$&#123;builder[<span class="string">'undefined'</span>]&#125;</span>)[<span class="subst">$&#123;builder[<span class="number">2</span>]&#125;</span>]`</span></span><br><span class="line">    builder[<span class="string">'e'</span>] = <span class="string">`(<span class="subst">$&#123;builder[<span class="string">'true'</span>]&#125;</span>)[<span class="subst">$&#123;builder[<span class="number">3</span>]&#125;</span>]`</span></span><br><span class="line">    builder[<span class="string">'f'</span>] = <span class="string">`(<span class="subst">$&#123;builder[<span class="string">'false'</span>]&#125;</span>)[<span class="subst">$&#123;builder[<span class="number">0</span>]&#125;</span>]`</span></span><br><span class="line">    builder[<span class="string">'i'</span>] = <span class="string">`(<span class="subst">$&#123;builder[<span class="string">'undefined'</span>]&#125;</span>)[<span class="subst">$&#123;builder[<span class="number">5</span>]&#125;</span>]`</span></span><br><span class="line">    builder[<span class="string">'j'</span>] = <span class="string">`(<span class="subst">$&#123;builder[<span class="string">'[object Object]'</span>]&#125;</span>)[<span class="subst">$&#123;builder[<span class="number">3</span>]&#125;</span>]`</span></span><br><span class="line">    builder[<span class="string">'l'</span>] = <span class="string">`(<span class="subst">$&#123;builder[<span class="string">'false'</span>]&#125;</span>)[<span class="subst">$&#123;builder[<span class="number">2</span>]&#125;</span>]`</span></span><br><span class="line">    builder[<span class="string">'n'</span>] = <span class="string">`(<span class="subst">$&#123;builder[<span class="string">'Infinity'</span>]&#125;</span>)[<span class="subst">$&#123;builder[<span class="number">1</span>]&#125;</span>]`</span></span><br><span class="line">    builder[<span class="string">'o'</span>] = <span class="string">`(<span class="subst">$&#123;builder[<span class="string">'[object Object]'</span>]&#125;</span>)[<span class="subst">$&#123;builder[<span class="number">1</span>]&#125;</span>]`</span></span><br><span class="line">    builder[<span class="string">'r'</span>] = <span class="string">`(<span class="subst">$&#123;builder[<span class="string">'true'</span>]&#125;</span>)[<span class="subst">$&#123;builder[<span class="number">1</span>]&#125;</span>]`</span></span><br><span class="line">    builder[<span class="string">'s'</span>] = <span class="string">`(<span class="subst">$&#123;builder[<span class="string">'false'</span>]&#125;</span>)[<span class="subst">$&#123;builder[<span class="number">3</span>]&#125;</span>]`</span></span><br><span class="line">    builder[<span class="string">'t'</span>] = <span class="string">`(<span class="subst">$&#123;builder[<span class="string">'true'</span>]&#125;</span>)[<span class="subst">$&#123;builder[<span class="number">0</span>]&#125;</span>]`</span></span><br><span class="line">    builder[<span class="string">'u'</span>] = <span class="string">`(<span class="subst">$&#123;builder[<span class="string">'undefined'</span>]&#125;</span>)[<span class="subst">$&#123;builder[<span class="number">0</span>]&#125;</span>]`</span></span><br><span class="line">    builder[<span class="string">'y'</span>] = <span class="string">`(<span class="subst">$&#123;builder[<span class="string">'Infinity'</span>]&#125;</span>)[<span class="subst">$&#123;builder[<span class="number">7</span>]&#125;</span>]`</span></span><br><span class="line">    builder[<span class="string">'I'</span>] = <span class="string">`(<span class="subst">$&#123;builder[<span class="string">'Infinity'</span>]&#125;</span>)[<span class="subst">$&#123;builder[<span class="number">0</span>]&#125;</span>]`</span></span><br><span class="line">    builder[<span class="string">'N'</span>] = <span class="string">`(<span class="subst">$&#123;builder[<span class="string">'NaN'</span>]&#125;</span>)[<span class="subst">$&#123;builder[<span class="number">0</span>]&#125;</span>]`</span></span><br><span class="line">    builder[<span class="string">'O'</span>] = <span class="string">`(<span class="subst">$&#123;builder[<span class="string">'[object Object]'</span>]&#125;</span>)[<span class="subst">$&#123;builder[<span class="number">8</span>]&#125;</span>]`</span></span><br><span class="line">    builder[<span class="string">'constructor'</span>] = handleStrByType(<span class="string">'constructor'</span>)</span><br><span class="line">    <span class="comment">//let $_$=builder['constructor']</span></span><br><span class="line">    builder[<span class="string">'A'</span>] = <span class="string">`([][$_$&#125;]+[])[<span class="subst">$&#123;builder[<span class="number">9</span>]&#125;</span>]`</span></span><br><span class="line">    builder[<span class="string">'B'</span>] = <span class="string">`((!!1)[$_$]+[])[<span class="subst">$&#123;builder[<span class="number">9</span>]&#125;</span>]`</span></span><br><span class="line">    builder[<span class="string">'E'</span>] = <span class="string">`(/\\/[$_$]+[])[<span class="subst">$&#123;builder[<span class="number">9</span>]&#125;</span>]`</span></span><br><span class="line">    builder[<span class="string">'F'</span>] = <span class="string">`((()=&gt;&#123;&#125;)[$_$]+[])[<span class="subst">$&#123;builder[<span class="number">9</span>]&#125;</span>]`</span></span><br><span class="line">    builder[<span class="string">'R'</span>] = <span class="string">`(/\\/[$_$]+[])[<span class="subst">$&#123;builder[<span class="number">12</span>]&#125;</span>]`</span></span><br><span class="line">    builder[<span class="string">'S'</span>] = <span class="string">`(([]+1)[$_$]+[])[<span class="subst">$&#123;builder[<span class="number">9</span>]&#125;</span>]`</span></span><br><span class="line">    builder[<span class="string">'fromCodePoint'</span>] = handleStrByType(<span class="string">'fromCodePoint'</span>)</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      handleStr: <span class="function"><span class="keyword">function</span> (<span class="params">str</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> arr = split(str)</span><br><span class="line">        <span class="keyword">let</span> source = packArrToSource(arr)</span><br><span class="line">        <span class="keyword">let</span> result = getSign(source)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * </span></span><br><span class="line"><span class="comment">   * 将字符串进行分割</span></span><br><span class="line"><span class="comment">   * </span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param <span class="type">&#123;any&#125;</span> </span>str </span></span><br><span class="line"><span class="comment">   * <span class="doctag">@returns </span>分割后的数组</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">split</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!str || str.length === <span class="number">0</span>) <span class="keyword">throw</span> &#123; <span class="attr">type</span>: string_null_error, <span class="attr">message</span>: <span class="string">'字符串为空'</span> &#125;</span><br><span class="line">    <span class="keyword">let</span> arr = []</span><br><span class="line">    <span class="keyword">let</span> last = <span class="string">""</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> c <span class="keyword">of</span> str) &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> curType = getTypeOf(c)</span><br><span class="line">        <span class="keyword">if</span> (last.length === <span class="number">0</span>) &#123;</span><br><span class="line">          <span class="keyword">if</span> (curType === numStr || curType === commonLowercaseStr || curType === otherLowercaseStr) &#123;</span><br><span class="line">            last = c</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            arr.push(c)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="comment">//last必为数字或小写字母串</span></span><br><span class="line">          <span class="keyword">let</span> lastType = getTypeOf(last)</span><br><span class="line">          <span class="keyword">if</span> (curType === lastType || (lastType !== numStr &amp;&amp; (curType === commonLowercaseStr || curType === otherLowercaseStr))) &#123;</span><br><span class="line">            last += c</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            arr.push(last)</span><br><span class="line">            last = <span class="string">""</span></span><br><span class="line">            <span class="keyword">if</span> (curType === numStr || curType === commonLowercaseStr || curType === otherLowercaseStr) &#123;</span><br><span class="line">              last = c</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              arr.push(c)</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        <span class="built_in">console</span>.error(<span class="string">`字符为<span class="subst">$&#123;c&#125;</span>`</span>)</span><br><span class="line">        <span class="keyword">throw</span> error</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (last !== <span class="string">""</span>) arr.push(last);</span><br><span class="line">    <span class="keyword">return</span> arr</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 将数组每个元素进行包装，生成数据源</span></span><br><span class="line"><span class="comment">   * </span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param <span class="type">&#123;any&#125;</span> </span>arr </span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">packArrToSource</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> obj = &#123;</span><br><span class="line">      [numStr]: <span class="number">0</span>,</span><br><span class="line">      [commonLowercaseStr]: <span class="number">0</span>,</span><br><span class="line">      [otherLowercaseStr]: <span class="number">0</span>,</span><br><span class="line">      [commonCapital]: <span class="number">0</span>,</span><br><span class="line">      [useConstructorCapital]: <span class="number">0</span>,</span><br><span class="line">      [commonSign]: <span class="number">0</span>,</span><br><span class="line">      [otherChar]: <span class="number">0</span>,</span><br><span class="line">      arr: []</span><br><span class="line">    &#125;</span><br><span class="line">    arr.forEach(<span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> curTemp = getTypeOf(e)</span><br><span class="line">      obj[curTemp] += <span class="number">1</span></span><br><span class="line">      obj.arr.push(&#123;</span><br><span class="line">        oriStr: e,</span><br><span class="line">        type: curTemp,</span><br><span class="line">        transStr: <span class="string">''</span></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;, <span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">return</span> obj</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 获取字符串所属类型</span></span><br><span class="line"><span class="comment">   * </span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param <span class="type">&#123;any&#125;</span> </span>str </span></span><br><span class="line"><span class="comment">   * <span class="doctag">@returns </span></span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">getTypeOf</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!str || str.length === <span class="number">0</span>) <span class="keyword">throw</span> &#123; <span class="attr">type</span>: string_null_error, <span class="attr">message</span>: <span class="string">'字符串为空'</span> &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="regexp">/^\d+$/</span>.test(str)) <span class="keyword">return</span> numStr;</span><br><span class="line">    <span class="keyword">if</span> (<span class="regexp">/^[abcdefijlnorstuy]+$/</span>.test(str)) <span class="keyword">return</span> commonLowercaseStr;</span><br><span class="line">    <span class="keyword">if</span> (<span class="regexp">/^[a-z]+$/</span>.test(str)) <span class="keyword">return</span> otherLowercaseStr;</span><br><span class="line">    <span class="keyword">if</span> (<span class="regexp">/^[INO]+$/</span>.test(str)) <span class="keyword">return</span> commonCapital;</span><br><span class="line">    <span class="keyword">if</span> (<span class="regexp">/^[ABEFRS]+$/</span>.test(str)) <span class="keyword">return</span> useConstructorCapital;</span><br><span class="line">    <span class="keyword">if</span> (<span class="regexp">/^((?=[\x21-\x7e])[^A-Za-z0-9])$/</span>.test(str)) <span class="keyword">return</span> commonSign;</span><br><span class="line">    <span class="comment">//存在多个字符，报错：有多种类型，需要重新split</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">Array</span>.from(str).length !== <span class="number">1</span>) <span class="keyword">throw</span> &#123; <span class="attr">type</span>: string_multitype_error, <span class="attr">message</span>: <span class="string">'存在多种类型'</span> &#125;</span><br><span class="line">    <span class="keyword">return</span> otherChar;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 获取初始化字符串，并对source进行2个属性的设置</span></span><br><span class="line"><span class="comment">   * otherLowercaseStr&gt;0 初始化$_$=constructor的组合串</span></span><br><span class="line"><span class="comment">   * otherChar&gt;0 初始化$_1=fromCodePoint的组合串</span></span><br><span class="line"><span class="comment">   * </span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param <span class="type">&#123;any&#125;</span> </span>source </span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">getSign</span>(<span class="params">source</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//otherLowercaseStr&gt;0 初始化$_$=constructor的组合串</span></span><br><span class="line">    <span class="comment">//otherChar&gt;0 初始化$_1=fromCodePoint的组合串</span></span><br><span class="line">    <span class="keyword">let</span> result = <span class="string">""</span></span><br><span class="line">    <span class="keyword">if</span> (source[otherLowercaseStr] &gt; <span class="number">0</span> || source[useConstructorCapital] &gt; <span class="number">0</span> || source[otherChar] &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      source[<span class="string">'useConstructor'</span>] = <span class="string">'$_$='</span> + builder[<span class="string">'constructor'</span>]</span><br><span class="line">      result += source[<span class="string">'useConstructor'</span>] + <span class="string">';'</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (source[otherChar] &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      source[<span class="string">'useFromCodePoint'</span>] = <span class="string">'$_1='</span> + builder[<span class="string">'fromCodePoint'</span>]</span><br><span class="line">      result += source[<span class="string">'useFromCodePoint'</span>] + <span class="string">';'</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 将原串根据类型生成返回组合串</span></span><br><span class="line"><span class="comment">   * </span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param <span class="type">&#123;any&#125;</span> </span>str </span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param <span class="type">&#123;any&#125;</span> </span>type </span></span><br><span class="line"><span class="comment">   * <span class="doctag">@returns </span></span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">handleStrByType</span>(<span class="params">str, type</span>) </span>&#123;</span><br><span class="line">    type = type || getTypeOf(str)</span><br><span class="line">    <span class="keyword">switch</span> (type) &#123;</span><br><span class="line">      <span class="keyword">case</span> numStr: <span class="keyword">return</span> handleNumStr(str);</span><br><span class="line">      <span class="keyword">case</span> commonLowercaseStr: <span class="keyword">return</span> handleCommonLowercaseStr(str);</span><br><span class="line">      <span class="keyword">case</span> otherLowercaseStr: <span class="keyword">return</span> handleOtherLowercaseStr(str);</span><br><span class="line">      <span class="keyword">case</span> commonCapital: <span class="keyword">return</span> handleCommonCapital(str);</span><br><span class="line">      <span class="keyword">case</span> useConstructorCapital: <span class="keyword">return</span> handleUseConstructorCapital(str);</span><br><span class="line">      <span class="keyword">case</span> commonSign: <span class="keyword">return</span> handleCommonSign(str);</span><br><span class="line">      <span class="keyword">case</span> otherChar: <span class="keyword">return</span> handleOtherChar(str);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">handleNumStr</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">handleCommonLowercaseStr</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Array</span>.from(str, c =&gt; obj[c]).reduce(<span class="function">(<span class="params">tot, cur</span>) =&gt;</span> tot + <span class="string">'+'</span> + cur)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">handleOtherLowercaseStr</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">handleCommonCapital</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">handleUseConstructorCapital</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">handleCommonSign</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">handleOtherChar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//修改源的</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">setSourceBuilder</span>(<span class="params">s,str</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    getInstance: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> instance || (instance = init())</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> StringBuilder</span><br></pre></td></tr></table></figure>

<h3 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h3><p>对于生成的字符串，我们要求尽量短一点。考虑是否有做压缩的可能性：</p>
<p>对于重复的字符串，可以用以下方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">'a'</span>[<span class="string">'repeat'</span>](<span class="number">5</span>) === <span class="string">"aaaaa"</span></span><br><span class="line"></span><br><span class="line">[][<span class="string">"constructor"</span>](<span class="number">3</span>)[<span class="string">'fill'</span>](<span class="string">'a'</span>)[<span class="string">'join'</span>](<span class="string">''</span>) === <span class="string">"aaa"</span></span><br></pre></td></tr></table></figure>

<p>但一般字符串很少有这样重复的</p>
<p>对于长英文串，是否可以事先得到所有字母的组合串，用变量表示，后面直接使用变量。</p>
<p>如 <code>$_$$$ = &#39;a&#39;; $_$_1 = &#39;b&#39;</code> </p>
<p>即把 <code>$</code> 看做 <code>0</code> ， 采用类似 <code>ASCII码</code> 的方式实现</p>
<h4 id="zip压缩（LZ77）简单原理"><a href="#zip压缩（LZ77）简单原理" class="headerlink" title="zip压缩（LZ77）简单原理"></a>zip压缩（LZ77）简单原理</h4><ol>
<li>当前待压缩字符串往前一个滑动窗口找最大匹配串</li>
</ol>
<blockquote>
<p>一个滑动窗口表示最多往前找的字符串长度,zip通常是32KB</p>
</blockquote>
<ol start="2">
<li>设置（距离dis,匹配串长度len）作为标识位，解压时会去往前找原串。</li>
</ol>
<blockquote>
<p>标志位本身也会占用空间。故匹配的字符串一般要满足&gt;=三个字节</p>
</blockquote>
<ol start="3">
<li><p>对 (dis,len) 做哈夫曼编码，得到较小的字节串</p>
</li>
<li><p>文件头写字典:(k,v)=&gt;(哈夫曼编码,(dis,len))</p>
</li>
</ol>
<h4 id="zip解压缩对本项目的应用"><a href="#zip解压缩对本项目的应用" class="headerlink" title="zip解压缩对本项目的应用"></a>zip解压缩对本项目的应用</h4><ul>
<li><p>初始化设置：</p>
<blockquote>
<ol>
<li>匹配串需要&gt;=8个字符才做压缩</li>
<li>滑动窗口设为64字符串长度</li>
</ol>
</blockquote>
</li>
<li><p>压缩效果</p>
</li>
</ul>
<hr>
<p>未完待续</p>
<h2 id="github库"><a href="#github库" class="headerlink" title="github库"></a>github库</h2><h2 id="ScriptOJ-出题"><a href="#ScriptOJ-出题" class="headerlink" title="ScriptOJ 出题"></a>ScriptOJ 出题</h2>]]></content>
      <categories>
        <category>大前端</category>
      </categories>
  </entry>
  <entry>
    <title>Android模拟触控解决方案</title>
    <url>/2016/11/18/2016-2017%E7%9B%B4%E6%92%AD%E7%9B%B8%E5%85%B3/Android%E6%A8%A1%E6%8B%9F%E8%A7%A6%E6%8E%A7%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>如何捕获用户触控信息？如何模拟？</p>
<a id="more"></a>

<h1 id="数据采集"><a href="#数据采集" class="headerlink" title="数据采集"></a>数据采集</h1><h2 id="Android端"><a href="#Android端" class="headerlink" title="Android端"></a>Android端</h2><p>重写 onTouchEvent ,收集 event 数据,以一定的编码传输</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouchEvent</span><span class="params">(MotionEvent event)</span></span>&#123;</span><br><span class="line">	String rec=<span class="string">""</span>;</span><br><span class="line">    <span class="keyword">int</span> pointerCount = event.getPointerCount();</span><br><span class="line">    <span class="keyword">if</span> (pointerCount &gt; MAX_TOUCHPOINTS) &#123;</span><br><span class="line">        pointerCount = MAX_TOUCHPOINTS;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> opt=event.getAction();</span><br><span class="line">    <span class="keyword">boolean</span> isFirst=<span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">if</span>(opt==<span class="number">2</span>)&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; pointerCount; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> id = event.getPointerId(i);</span><br><span class="line">            <span class="keyword">int</span> x = (<span class="keyword">int</span>) event.getX(i);</span><br><span class="line">            <span class="keyword">int</span> y = (<span class="keyword">int</span>) event.getY(i);</span><br><span class="line">            <span class="keyword">if</span>(isFirst)&#123;isFirst=<span class="keyword">false</span>;&#125;</span><br><span class="line">            <span class="keyword">else</span> rec+=<span class="string">";"</span>;</span><br><span class="line">            rec+=id+<span class="string">",2,"</span>+x+<span class="string">","</span>+y;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(opt==<span class="number">0</span>||(opt-<span class="number">5</span>)%<span class="number">256</span>==<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="comment">//为了简化，我们假设这过程不会进行MOVE</span></span><br><span class="line">        <span class="keyword">int</span> ind=(event.getAction()-<span class="number">5</span>)/<span class="number">256</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; pointerCount; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(i==ind)&#123;</span><br><span class="line">                <span class="keyword">int</span> id = event.getPointerId(i);</span><br><span class="line">                <span class="keyword">int</span> x = (<span class="keyword">int</span>) event.getX(i);</span><br><span class="line">                <span class="keyword">int</span> y = (<span class="keyword">int</span>) event.getY(i);</span><br><span class="line">                <span class="keyword">if</span>(isFirst)&#123;isFirst=<span class="keyword">false</span>;&#125;</span><br><span class="line">                <span class="keyword">else</span> rec+=<span class="string">";"</span>;</span><br><span class="line">                rec+=id+<span class="string">",0,"</span>+x+<span class="string">","</span>+y;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(opt==<span class="number">1</span>||(opt-<span class="number">6</span>)%<span class="number">256</span>==<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">int</span> ind=(event.getAction()-<span class="number">6</span>)/<span class="number">256</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; pointerCount; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(i==ind)&#123;</span><br><span class="line">                <span class="keyword">int</span> id = event.getPointerId(i);</span><br><span class="line">                <span class="keyword">if</span>(isFirst)&#123;isFirst=<span class="keyword">false</span>;&#125;</span><br><span class="line">                <span class="keyword">else</span> rec+=<span class="string">";"</span>;</span><br><span class="line">                rec+=id+<span class="string">",1"</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><p>见另一篇文章<a href="http://hongweipeng.com/index.php/archives/838/" target="_blank" rel="noopener">video标签下触摸坐标归一化</a></p>
<h2 id="嵌入式设备"><a href="#嵌入式设备" class="headerlink" title="嵌入式设备"></a>嵌入式设备</h2><p>待研究</p>
<h1 id="数据编码"><a href="#数据编码" class="headerlink" title="数据编码"></a>数据编码</h1><p>最后数据以<code>ID,OPTION,X,Y</code>这样的字符串传输,多指操作通过<code>;</code>隔开</p>
<ul>
<li><strong>OPTION:</strong> <code>0:DOWN</code>; <code>1:UP</code>;<code>2:MOVE</code></li>
<li><strong>ID:</strong> 触点ID 通过<code>event.getPointerId</code> 获取， 对应服务器的<code>0x2f</code></li>
<li><strong>X,Y</strong> 按道理范围应该在<code>[0,1]</code>;即本机分辨率的百分比。服务端再以该系数模拟。这边我们先假设两边机器一样，直接传实际int</li>
</ul>
<h1 id="数据传输"><a href="#数据传输" class="headerlink" title="数据传输"></a>数据传输</h1><h2 id="socket"><a href="#socket" class="headerlink" title="socket"></a>socket</h2><h3 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h3><p>1.在子线程中初始化<code>socket</code>和<code>Handler mHandler</code><br>2.UI线程收到编码数据后，执行<code>mHandler.sendMessage(message)</code>操作<br>3.<code>Looper</code>在子线程的<code>mHandler</code>将会回调<code>handleMessage</code>，在这里进行socket传输</p>
<p>代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Socket socket = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> BufferedWriter writer = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> BufferedReader reader = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyHandler</span> <span class="keyword">extends</span> <span class="title">Handler</span> </span>&#123;</span><br><span class="line">       <span class="comment">//这边这个looper参数是否应该软引用？</span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="title">MyHandler</span><span class="params">(Looper looper)</span> </span>&#123;</span><br><span class="line">           <span class="keyword">super</span>(looper);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="meta">@Override</span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</span><br><span class="line">           <span class="comment">//子线程收到数据，进行socket send data</span></span><br><span class="line">           <span class="keyword">super</span>.handleMessage(msg);</span><br><span class="line">           Log.i(<span class="string">"RECEIVE"</span>, <span class="string">"子线程收到:"</span> + msg.obj);</span><br><span class="line">           <span class="keyword">try</span> &#123;</span><br><span class="line">               writer.write(msg.obj + <span class="string">"\n"</span>);<span class="comment">//必须加上换行</span></span><br><span class="line">               writer.flush();</span><br><span class="line">           &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="class"><span class="keyword">class</span> <span class="title">SockRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            Log.i(<span class="string">"THREAD"</span>, <span class="string">"START"</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                socket = <span class="keyword">new</span> Socket(<span class="string">"192.168.191.1"</span>, <span class="number">12345</span>);</span><br><span class="line">                writer = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> OutputStreamWriter(</span><br><span class="line">                        socket.getOutputStream(), <span class="string">"utf-8"</span>));</span><br><span class="line">                reader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(</span><br><span class="line">                        socket.getInputStream(), <span class="string">"utf-8"</span>));</span><br><span class="line">                Log.i(<span class="string">"CONNECT"</span>, <span class="string">"连接成功"</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Looper.prepare();</span><br><span class="line">                <span class="comment">//让MyHandle为子线程服务</span></span><br><span class="line">                mHandler = <span class="keyword">new</span> MyHandler(Looper.myLooper());</span><br><span class="line">                Looper.loop();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                Log.e(<span class="string">"zjx"</span>, <span class="string">"error"</span>);</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onDestroy();</span><br><span class="line">        <span class="keyword">if</span> (mHandler != <span class="keyword">null</span>) &#123;</span><br><span class="line">            mHandler.removeCallbacksAndMessages(<span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (writer != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                writer.close();</span><br><span class="line">                reader.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    onCreate&#123;</span><br><span class="line">    	<span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">       <span class="keyword">new</span> Thread(<span class="keyword">new</span> SockRunnable()).start();</span><br><span class="line">       ReceiveData rd=<span class="keyword">new</span> ReceiveData() &#123;</span><br><span class="line">           <span class="meta">@Override</span></span><br><span class="line">           <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receive</span><span class="params">(String json)</span> </span>&#123;</span><br><span class="line">               Log.i(<span class="string">"SEND"</span>,json);</span><br><span class="line">               <span class="comment">//ADD 时间轴</span></span><br><span class="line">               <span class="comment">//MOVE数据的过滤 平方和&lt;12</span></span><br><span class="line">               <span class="comment">//SOCKET数据发送</span></span><br><span class="line">               Message message=<span class="keyword">new</span> Message();</span><br><span class="line">               message.obj=json;</span><br><span class="line">               <span class="keyword">if</span>(mHandler!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                   mHandler.sendMessage(message);</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;;</span><br><span class="line">    </span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<h3 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServerListener</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;  </span><br><span class="line">   	<span class="meta">@Override</span>  </span><br><span class="line">   	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">       	<span class="keyword">try</span> &#123;  </span><br><span class="line">           	ServerSocket serverSocket = <span class="keyword">new</span> ServerSocket(<span class="number">12345</span>);  </span><br><span class="line">       	    <span class="comment">// 循环的监听  </span></span><br><span class="line">           	<span class="keyword">while</span> (<span class="keyword">true</span>) &#123;  </span><br><span class="line">               	Socket socket = serverSocket.accept();<span class="comment">// 阻塞  </span></span><br><span class="line">               	JOptionPane.showMessageDialog(<span class="keyword">null</span>, <span class="string">"有客户端连接到本机的12345端口！"</span>);  </span><br><span class="line">               	<span class="comment">// 将socket传给新的线程  </span></span><br><span class="line">               	ChatSocket cs = <span class="keyword">new</span> ChatSocket(socket);  </span><br><span class="line">               	cs.start();  </span><br><span class="line">               	<span class="comment">//把socket加入ChatManager  </span></span><br><span class="line">               	ChatManager.getChatManager().add(cs);  </span><br><span class="line">           	&#125;  </span><br><span class="line">       	&#125; <span class="keyword">catch</span> (IOException e) &#123;  </span><br><span class="line">           	e.printStackTrace();  </span><br><span class="line">       	&#125;  </span><br><span class="line">   	&#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="DataChannel"><a href="#DataChannel" class="headerlink" title="DataChannel"></a>DataChannel</h2><p>略</p>
<h1 id="数据解码"><a href="#数据解码" class="headerlink" title="数据解码"></a>数据解码</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">decodeData</span><span class="params">(String json)</span> </span>&#123;</span><br><span class="line">	String ls[] = json.split(<span class="string">";"</span>);</span><br><span class="line">	<span class="keyword">for</span> (String s : ls) &#123;</span><br><span class="line">		String cs[] = s.split(<span class="string">","</span>);</span><br><span class="line">		<span class="keyword">int</span> id = Integer.valueOf(cs[<span class="number">0</span>]);</span><br><span class="line">		<span class="keyword">int</span> opt = Integer.valueOf(cs[<span class="number">1</span>]);</span><br><span class="line">		<span class="keyword">switch</span> (opt) &#123;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">			sendDown(id, cs[<span class="number">2</span>], cs[<span class="number">3</span>]);</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">			sendUp(id);</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">			sendMove(id, cs[<span class="number">2</span>], cs[<span class="number">3</span>]);</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="数据模拟"><a href="#数据模拟" class="headerlink" title="数据模拟"></a>数据模拟</h1><p>以下方式凡是利用sendevent的，都可以通过getevent回去到对应的指令</p>
<p>而传入MotionEvent.obtain的，只能通过开启开发者选择的触点显示</p>
<h2 id="1-adb-shell"><a href="#1-adb-shell" class="headerlink" title="1. adb shell"></a>1. adb shell</h2><p>在 <code>system/core/include/private/android_filesystem_config.h</code> 中定义了Android的用户和组</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#define AID_SHELL 2000 /* adb and debug shell user UID=2000*/</span></span><br><span class="line"><span class="comment">#即</span></span><br><span class="line">root uid 0 gid0 </span><br><span class="line">system uid 1000 gid1000</span><br><span class="line">shell uid 2000 gid2000</span><br><span class="line">app uid &gt;10000 gid &gt;10000</span><br></pre></td></tr></table></figure>
<p>同时我们执行以下命令（<a href="http://www.linuxidc.com/Linux/2012-09/70492.htm" target="_blank" rel="noopener">ls -l命令详解</a></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">shell@android:/dev/input $ ls -l</span><br><span class="line">crw-rw---- root     	input     	13,  64 2016-11-18 08:17 event0</span><br><span class="line">crw-rw---- root     	input     	13,  65 2016-11-18 08:17 event1</span><br><span class="line">crw-rw---- root     	input     	13,  66 2016-11-18 08:17 event2</span><br><span class="line">crw-rw---- root     	input     	13,  67 2016-11-18 08:17 event3</span><br><span class="line">文件属性	   文件拥有者     拥有者所在主组							    文件名</span><br></pre></td></tr></table></figure>

<p>我们发现input组是拥有 <code>rw-</code> 权限的。</p>
<p>通过运行id命令得到如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">shell@android:&#x2F; $ id</span><br><span class="line">uid&#x3D;2000(shell) gid&#x3D;2000(shell) groups&#x3D;1003(graphics),1004(input),1007(log),1009</span><br><span class="line">(mount),1011(adb),1015(sdcard_rw),1028(sdcard_r),3001(net_bt_admin),3002(net_bt)</span><br><span class="line">,3003(inet),3006(net_bw_stats)</span><br></pre></td></tr></table></figure>
<p>shell属于input组，那么shell也就拥有<code>rw-</code>的权限,意思就是说shell用户(or其运行的程序)可以对eventX文件进行读写</p>
<p>那么读写的形式就有以下两种了：</p>
<h3 id="1-1-server端执行shell脚本"><a href="#1-1-server端执行shell脚本" class="headerlink" title="1.1 server端执行shell脚本"></a>1.1 server端执行shell脚本</h3><h4 id="大致流程："><a href="#大致流程：" class="headerlink" title="大致流程："></a><strong>大致流程：</strong></h4><p>Java的话可采用Runtime</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">process = Runtime.getRuntime().exec(<span class="string">"adb shell"</span>);</span><br><span class="line"><span class="comment">// 获取输出流</span></span><br><span class="line">outputStream = process.getOutputStream();</span><br><span class="line">dataOutputStream = <span class="keyword">new</span> DataOutputStream(outputStream);</span><br><span class="line"><span class="comment">// 执行cmd指令，例： cmd="sendevent /dev/input/event3 0 0 0";</span></span><br><span class="line">dataOutputStream.writeBytes(cmd + <span class="string">"\n"</span>);</span><br></pre></td></tr></table></figure>

<h4 id="实现难度：5-5"><a href="#实现难度：5-5" class="headerlink" title="实现难度：5/5"></a><strong>实现难度：5/5</strong></h4><p>实现简单，代码量少。多种语言均支持执行shell命令</p>
<h4 id="维护拓展：-1-5"><a href="#维护拓展：-1-5" class="headerlink" title="维护拓展： 1/5"></a><strong>维护拓展： 1/5</strong></h4><p>Runtime会间接性出问题(原因未明)</p>
<p>dataOutputStream操作会堵塞本地IO通道，不适合多开。</p>
<p>Java执行跨平台，易迁移，给1星。</p>
<h4 id="需要root？-否"><a href="#需要root？-否" class="headerlink" title="需要root？ 否"></a><strong>需要root？</strong> 否</h4><h4 id="效率延迟：1-5"><a href="#效率延迟：1-5" class="headerlink" title="效率延迟：1/5"></a><strong>效率延迟：1/5</strong></h4><p>效率极差，<strong><code>指令组</code></strong>（单指move,down,up等操作称为指令组，包含多条sendevent基础指令）<strong><code>响应时间</code></strong>(指令执行时间间隔)&gt;200ms</p>
<h4 id="推荐指数：-1-5"><a href="#推荐指数：-1-5" class="headerlink" title="推荐指数： 1/5"></a><strong>推荐指数：</strong> 1/5</h4><h3 id="1-2-android端执行adb-shell用户启动的程序"><a href="#1-2-android端执行adb-shell用户启动的程序" class="headerlink" title="1.2 android端执行adb shell用户启动的程序"></a>1.2 android端执行adb shell用户启动的程序</h3><h4 id="大致流程：-1"><a href="#大致流程：-1" class="headerlink" title="大致流程："></a><strong>大致流程：</strong></h4><p>1.编写C socket程序<code>minitouch</code>，并放到<code>/data/local/tmp/</code> 目录(<code>user,group=shell</code>)下</p>
<p>2.chmod 777该文件后，run它</p>
<p>3.执行以下命令：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">adb forward tcp:1111 localabstract:minitouch</span><br></pre></td></tr></table></figure>
<p>表示server本地的1111端口会映射到minitouch上</p>
<p>4.本地利用socket通信发送数据到1111端口，minitouch进一步处理</p>
<p><em>以上只是大致流程，minitouch还涉及到abi和sdk的版本的处理</em></p>
<p><a href="https://github.com/openstf/minitouch" target="_blank" rel="noopener">开源实现minitouch</a></p>
<p><a href="https://testerhome.com/topics/4400" target="_blank" rel="noopener">minitouch使用流程，minitap开源项目类似 也可采用</a></p>
<h4 id="实现难度：4-5"><a href="#实现难度：4-5" class="headerlink" title="实现难度：4/5"></a><strong>实现难度：4/5</strong></h4><p>需要编写两端程序：放于android的socket程序，本地发送数据程序。</p>
<p>相对简单，且有开源实现。</p>
<h4 id="维护拓展：-4-5"><a href="#维护拓展：-4-5" class="headerlink" title="维护拓展： 4/5"></a><strong>维护拓展： 4/5</strong></h4><p>分配本地端口并转发到android socket程序上，端口是足够用的，只要设置规范不会产生冲突</p>
<h4 id="需要root？-否-1"><a href="#需要root？-否-1" class="headerlink" title="需要root？ 否"></a><strong>需要root？</strong> 否</h4><p><code>sdk 10-21</code> 无需root,<code>21+</code>需要root,<code>sdk 20 Android Wear</code> 需要root</p>
<h4 id="效率延迟：5-5"><a href="#效率延迟：5-5" class="headerlink" title="效率延迟：5/5"></a><strong>效率延迟：5/5</strong></h4><p><strong><code>指令组响应时间</code></strong>&lt;10ms</p>
<h4 id="推荐指数：-4-5-5"><a href="#推荐指数：-4-5-5" class="headerlink" title="推荐指数： 4.5/5"></a><strong>推荐指数：</strong> 4.5/5</h4><h2 id="2-Android端-root-sendevent"><a href="#2-Android端-root-sendevent" class="headerlink" title="2. Android端 root sendevent"></a>2. Android端 root sendevent</h2><h3 id="2-1-Runtime-getRuntime-exec-“su”"><a href="#2-1-Runtime-getRuntime-exec-“su”" class="headerlink" title="2.1 Runtime.getRuntime().exec(“su”)"></a>2.1 Runtime.getRuntime().exec(“su”)</h3><h4 id="大致流程：-2"><a href="#大致流程：-2" class="headerlink" title="大致流程："></a>大致流程：</h4><p>Android端获取su权限后，利用Runtime执行sendevent命令</p>
<p>这里的cmds 可以是<code>sendevent</code> 也可以是<code>input swipe</code> </p>
<p>注：input swipe 即提供两点坐标 然后move且只能单指</p>
<p>也就是说要等一个完整的DOWN-MOVE-UP过程 然后发送起始-终点位置。</p>
<p>与其这样 还不如用sendevent 优化move间隔</p>
<p>getevent获取不到触控信息。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">execShellCmd</span><span class="params">(String[] cmds)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    Process process = Runtime.getRuntime().exec(<span class="string">"su"</span>);</span><br><span class="line">    DataOutputStream os = <span class="keyword">new</span> DataOutputStream(process.getOutputStream());</span><br><span class="line">    <span class="keyword">for</span> (String tmpCmd : cmds) &#123;</span><br><span class="line">        os.writeBytes(tmpCmd + <span class="string">"\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    os.writeBytes(<span class="string">"exit\n"</span>);</span><br><span class="line">    os.flush();</span><br><span class="line">    os.close();</span><br><span class="line">    process.waitFor();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="实现难度：5-5-1"><a href="#实现难度：5-5-1" class="headerlink" title="实现难度：5/5"></a><strong>实现难度：5/5</strong></h4><p>实现简单，代码量少。</p>
<h4 id="维护拓展：1-5"><a href="#维护拓展：1-5" class="headerlink" title="维护拓展：1/5"></a><strong>维护拓展：1/5</strong></h4><p>同1.1,区别只是程序运行与Android端。</p>
<h4 id="需要root？-是"><a href="#需要root？-是" class="headerlink" title="需要root？ 是"></a><strong>需要root？</strong> 是</h4><h4 id="效率延迟：1-5-1"><a href="#效率延迟：1-5-1" class="headerlink" title="效率延迟：1/5"></a><strong>效率延迟：1/5</strong></h4><p><strong><code>指令组响应时间</code></strong>&gt;200ms</p>
<h4 id="推荐指数：-1-5-1"><a href="#推荐指数：-1-5-1" class="headerlink" title="推荐指数： 1/5"></a><strong>推荐指数：</strong> 1/5</h4><h3 id="2-2-linux-c"><a href="#2-2-linux-c" class="headerlink" title="2.2 linux c"></a>2.2 linux c</h3><p>由于我们是自己编译Android系统，所以我们可以写个linux C socket程序放在Android里</p>
<p>linux C socket编程这边不提及，我们假设取得解码的值了</p>
<p>编写如下文件</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;jni.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;android/log.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/input.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LOG_TAG <span class="meta-string">"ZJX"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ABS_MT_SLOT 0x2f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ABS_MT_TOUCH_MAJOR 0x30</span></span><br><span class="line"><span class="comment">/* WARNING: DO NOT EDIT, AUTO-GENERATED CODE - SEE TOP FOR INSTRUCTIONS */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ABS_MT_TOUCH_MINOR 0x31</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ABS_MT_WIDTH_MAJOR 0x32</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ABS_MT_WIDTH_MINOR 0x33</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ABS_MT_ORIENTATION 0x34</span></span><br><span class="line"><span class="comment">/* WARNING: DO NOT EDIT, AUTO-GENERATED CODE - SEE TOP FOR INSTRUCTIONS */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ABS_MT_POSITION_X 0x35</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ABS_MT_POSITION_Y 0x36</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ABS_MT_TOOL_TYPE 0x37</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ABS_MT_BLOB_ID 0x38</span></span><br><span class="line"><span class="comment">/* WARNING: DO NOT EDIT, AUTO-GENERATED CODE - SEE TOP FOR INSTRUCTIONS */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ABS_MT_TRACKING_ID 0x39</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> finger_count=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> fd_touch=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> finger_id=<span class="number">520</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sendEvent</span><span class="params">(__u16 type,__u16 code,<span class="keyword">int</span> value)</span></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">input_event</span> <span class="title">event</span>;</span></span><br><span class="line">    event.type = type;</span><br><span class="line">    event.code = code;</span><br><span class="line">    event.value = value;</span><br><span class="line">	<span class="comment">//    gettimeofday(&amp;event.time,0);</span></span><br><span class="line">	<span class="built_in">write</span>(fd_touch, &amp;event, <span class="keyword">sizeof</span>(event));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">touchMove</span><span class="params">(<span class="keyword">int</span> finger_index,<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    sendEvent( EV_ABS,ABS_MT_SLOT,finger_index);</span><br><span class="line">    sendEvent( EV_ABS, ABS_MT_POSITION_X, x);</span><br><span class="line">    sendEvent( EV_ABS, ABS_MT_POSITION_Y, y);</span><br><span class="line">    sendEvent( EV_SYN, SYN_REPORT, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">touchDown</span><span class="params">(<span class="keyword">int</span> finger_index,<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    finger_count++;</span><br><span class="line">    sendEvent( EV_ABS, ABS_MT_SLOT, finger_index);</span><br><span class="line">   	<span class="comment">//需要指定ABS_MT_TRACKING_ID，否则sendevent( EV_ABS, ABS_MT_TRACKING_ID, -1);不会生效</span></span><br><span class="line">   	sendEvent( EV_ABS, ABS_MT_TRACKING_ID, finger_id++);</span><br><span class="line">   	sendEvent( EV_ABS, ABS_MT_POSITION_X, x);</span><br><span class="line">   	sendEvent( EV_ABS, ABS_MT_POSITION_Y, y);</span><br><span class="line">   	<span class="keyword">if</span>(finger_count==<span class="number">1</span>)&#123;</span><br><span class="line">   	    sendEvent( EV_KEY, BTN_TOUCH, <span class="number">1</span>);</span><br><span class="line">   	&#125;</span><br><span class="line">   	sendEvent( EV_SYN, SYN_REPORT, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">touchUp</span><span class="params">(<span class="keyword">int</span> finger_index)</span> </span>&#123;</span><br><span class="line">   	finger_count--;</span><br><span class="line">   	sendEvent( EV_ABS, ABS_MT_SLOT, finger_index);</span><br><span class="line">   	sendEvent( EV_ABS, ABS_MT_TRACKING_ID, <span class="number">-1</span>);</span><br><span class="line">   	<span class="keyword">if</span>(finger_count==<span class="number">0</span>)&#123;</span><br><span class="line">   	    sendEvent( EV_KEY, BTN_TOUCH, <span class="number">0</span>);</span><br><span class="line">   	&#125;</span><br><span class="line">   	sendEvent( EV_SYN, SYN_REPORT, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在main写个测试</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	fd_touch = <span class="built_in">open</span>(<span class="string">"/dev/input/event3"</span>, O_RDWR);</span><br><span class="line">   	<span class="keyword">if</span>(fd_touch&lt;=<span class="number">0</span>) &#123;</span><br><span class="line">       	<span class="keyword">return</span> env-&gt;NewStringUTF(strerror(errno));</span><br><span class="line">   	&#125;</span><br><span class="line">    	touchDown(<span class="number">0</span>,<span class="number">380</span>,<span class="number">400</span>);</span><br><span class="line"><span class="comment">//     touchDown(1,250,250);</span></span><br><span class="line"></span><br><span class="line">     touchMove(<span class="number">0</span>,<span class="number">300</span>,<span class="number">300</span>);</span><br><span class="line"><span class="comment">//     touchMove(1,350,350);</span></span><br><span class="line">     touchMove(<span class="number">0</span>,<span class="number">200</span>,<span class="number">400</span>);</span><br><span class="line"><span class="comment">//     touchMove(1,300,500);</span></span><br><span class="line">     touchMove(<span class="number">0</span>,<span class="number">350</span>,<span class="number">250</span>);</span><br><span class="line"><span class="comment">//     touchMove(1,250,250);</span></span><br><span class="line">     touchMove(<span class="number">0</span>,<span class="number">200</span>,<span class="number">600</span>);</span><br><span class="line"></span><br><span class="line">     touchUp(<span class="number">0</span>);</span><br><span class="line"><span class="comment">//     touchUp(1);</span></span><br><span class="line">   	<span class="built_in">close</span>(fd_touch);</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<blockquote>
<p>这边我们是一接受到socket传来的值后，就进行处理，那么需要给inpue_event赋值time属性吗？</p>
</blockquote>
<p>不用赋值。做了下测试，感觉没赋值的话写入时默认就是当前时间，具体event文件读写原理有空再看。或者懂的大牛告诉我下。</p>
<blockquote>
<p>如果是自己写的程序想模拟长按，是通过赋值time还是Thread.sleep?</p>
</blockquote>
<p>如果想做延迟，要在上一层去做，而不是赋值time或者在本层堵塞线程,上一层做更安全。</p>
<blockquote>
<p>测试的时候，打印了onTouch(MotionEvent ev)中ev的值，发现部分move事件没找到，是被丢弃了吗？</p>
</blockquote>
<p>并不是，打印getevent就找到是都会响应的。</p>
<p>只是由于指令太快 Move会进行合并，onTouch中打印getHistorySize就明白了</p>
<p>所以不要因为测试的时候画板画出来的不是我们想要的路线就以为是数据被丢掉了- -</p>
<h4 id="实现难度：4-5-5"><a href="#实现难度：4-5-5" class="headerlink" title="实现难度：4.5/5"></a><strong>实现难度：4.5/5</strong></h4><p>实现简单，代码量少。只要懂C Socket编程就可以了。</p>
<h4 id="维护拓展：3-5-5"><a href="#维护拓展：3-5-5" class="headerlink" title="维护拓展：3.5/5"></a><strong>维护拓展：3.5/5</strong></h4><p>需要在自编译的android系统上，以input组用户运行</p>
<p>或者在非自编译系统采用1.2的做法</p>
<h4 id="需要root？-不确定"><a href="#需要root？-不确定" class="headerlink" title="需要root？ 不确定"></a><strong>需要root？</strong> 不确定</h4><p>自编译的系统，可以以shell用户写eventX文件</p>
<p>当然最方便还是直接用root啦</p>
<h4 id="效率延迟：5-5-1"><a href="#效率延迟：5-5-1" class="headerlink" title="效率延迟：5/5"></a><strong>效率延迟：5/5</strong></h4><p><strong><code>指令组响应时间</code></strong>&lt;10ms</p>
<h4 id="推荐指数：-4-7-5"><a href="#推荐指数：-4-7-5" class="headerlink" title="推荐指数： 4.7/5"></a><strong>推荐指数：</strong> 4.7/5</h4><h3 id="2-3-jni"><a href="#2-3-jni" class="headerlink" title="2.3  jni"></a>2.3  jni</h3><p>数据处理与<strong>2.2</strong>一致，只是socket是Android Service去做的，通过jni调用</p>
<p>做法：</p>
<p>1.先修改文件权限</p>
<pre><code>shell@android:/ $ su            
root@android:/ # chmod 777 /dev/input/event3  注 Android 5.x 由于SELinux?还是权限受限</code></pre><p>2.然后往<code>/dev/input/eventX</code>写数据就好了</p>
<pre><code>extern &quot;C&quot;
jstring Java_com_example_zhengjx_myapplication_MainActivity_sendEvent2(
    JNIEnv* env,
    jobject obj,jint type,jint a,jint b,jint c) {
    char *hello = &quot;Hello from C++&quot;;
    fd_touch = open(&quot;/dev/input/event3&quot;, O_RDWR);
    if(fd_touch&lt;=0) {
        return env-&gt;NewStringUTF(strerror(errno));
    }
    //将系统当前时间以结构体形式返回给cur,初始时间戳
    struct timeval cur;
    gettimeofday(&amp;cur, NULL);
    switch (type){
        case 0:touchDown(a,b,c);break;
        case 1:touchUp(a);break;
        case 2:touchMove(a,b,c);break;
    }
    close(fd_touch);
    return env-&gt;NewStringUTF(hello);
}</code></pre><p>TEST:</p>
<pre><code>sendEvent2(0,0,380,400);
sendEvent2(2,0,300,300);
sendEvent2(2,0,200,400);
sendEvent2(2,0,350,250);
sendEvent2(2,0,400,600);
sendEvent2(1,0,0,0);</code></pre><blockquote>
<p>与2.2相比就是多了一个jni调用的耗时(该部分耗时&lt;10ms)</p>
</blockquote>
<p>为了不让eventX 做move优化，该部分耗时反而是好的,测试的时候每条move指令都会响应，基本不会进行move合并。</p>
<p>另外记得把event3文件开成全局的，防止每次都要创建 关闭流的耗时- -，而且不知道会不会有什么影响</p>
<blockquote>
<p>5.x chmod 777 后权限受限问题</p>
</blockquote>
<p>按解决问题的想法，不用root的方法我们用adb shell不会出现这问题，需要root的我们直接linux C，这方法没有什么价值。</p>
<h4 id="实现难度：5-5-2"><a href="#实现难度：5-5-2" class="headerlink" title="实现难度：5/5"></a><strong>实现难度：5/5</strong></h4><p>实现简单，代码量少。</p>
<h4 id="维护拓展：4-5"><a href="#维护拓展：4-5" class="headerlink" title="维护拓展：4/5"></a><strong>维护拓展：4/5</strong></h4><p>5.X 的 权限受限问题，正在研究解决方案。。</p>
<h4 id="需要root？-需要"><a href="#需要root？-需要" class="headerlink" title="需要root？ 需要"></a><strong>需要root？</strong> 需要</h4><p>需要root用户先将eventX文件属性改为777</p>
<h4 id="效率延迟：5-5-2"><a href="#效率延迟：5-5-2" class="headerlink" title="效率延迟：5/5"></a><strong>效率延迟：5/5</strong></h4><p><strong><code>指令组响应时间</code></strong>≈10ms</p>
<h4 id="推荐指数：-4-7-5-1"><a href="#推荐指数：-4-7-5-1" class="headerlink" title="推荐指数： 4.7/5"></a><strong>推荐指数：</strong> 4.7/5</h4><h3 id="2-4-RootTools"><a href="#2-4-RootTools" class="headerlink" title="2.4  RootTools"></a>2.4  RootTools</h3><p>RootTools是一个用于执行linux指令的<a href="https://github.com/Stericson/RootTools" target="_blank" rel="noopener">开源工具</a></p>
<p>用法：</p>
<pre><code>CommandCapture cmd = new CommandCapture(0, &quot;sendevent /dev/input/event3 0 0 &quot;);
RootTools.getShell(true).add(cmd);</code></pre><p>大致研究了下，是通过线程池顺序执行指令，效率又比Rumtime高那么一点点</p>
<h4 id="实现难度：5-5-3"><a href="#实现难度：5-5-3" class="headerlink" title="实现难度：5/5"></a><strong>实现难度：5/5</strong></h4><p>实现简单，代码量少。</p>
<h4 id="维护拓展：5-5"><a href="#维护拓展：5-5" class="headerlink" title="维护拓展：5/5"></a><strong>维护拓展：5/5</strong></h4><h4 id="需要root？-是-1"><a href="#需要root？-是-1" class="headerlink" title="需要root？ 是"></a><strong>需要root？</strong> 是</h4><h4 id="效率延迟：2-5"><a href="#效率延迟：2-5" class="headerlink" title="效率延迟：2/5"></a><strong>效率延迟：2/5</strong></h4><p><strong><code>指令组响应时间</code></strong> :指令组中指令数量：1条100ms 2条120-200ms 3+:200+ms</p>
<h4 id="推荐指数：-2-5"><a href="#推荐指数：-2-5" class="headerlink" title="推荐指数： 2/5"></a><strong>推荐指数：</strong> 2/5</h4><h2 id="3-MotionEvent-obtain"><a href="#3-MotionEvent-obtain" class="headerlink" title="3. MotionEvent.obtain"></a>3. MotionEvent.obtain</h2><h3 id="3-1-Instrumentation"><a href="#3-1-Instrumentation" class="headerlink" title="3.1 Instrumentation"></a>3.1 Instrumentation</h3><h4 id="大致流程"><a href="#大致流程" class="headerlink" title="大致流程"></a>大致流程</h4><pre><code>Instrumentation m_Instrumentation = new Instrumentation();
long downTime = SystemClock.uptimeMillis();
long eventTime = SystemClock.uptimeMillis() + 100;
long eventTime2 = SystemClock.uptimeMillis() + 200;
float x=200.0f;
float y=280.0f;
m_Instrumentation.sendPointerSync(MotionEvent.obtain(downTime,
downTime,MotionEvent.ACTION_DOWN,x, y, 0));
for(int i=1;i&lt;=50;i++){
    m_Instrumentation.sendPointerSync(MotionEvent.obtain(downTime,
        SystemClock.uptimeMillis(),MotionEvent.ACTION_MOVE,x+i, y, 0));
}
for(int i=1;i&lt;=50;i++){
    m_Instrumentation.sendPointerSync(MotionEvent.obtain(downTime,
        SystemClock.uptimeMillis(),MotionEvent.ACTION_MOVE,x+50, y+i, 0));
}
for(int i=50;i&gt;=1;i--){
    m_Instrumentation.sendPointerSync(MotionEvent.obtain(downTime,
        SystemClock.uptimeMillis(),MotionEvent.ACTION_MOVE,x+i, y+50, 0));
}
for(int i=50;i&gt;=1;i--){
    m_Instrumentation.sendPointerSync(MotionEvent.obtain(downTime,
        SystemClock.uptimeMillis(),MotionEvent.ACTION_MOVE,x, y+i, 0));
}
m_Instrumentation.sendPointerSync(MotionEvent.obtain(downTime,
    eventTime2,MotionEvent.ACTION_UP,550, 550, 0));</code></pre><p>API是开放的</p>
<p>在其他应用上使用会出现这样的提示：</p>
<p><code>java.lang.SecurityException: Injecting to another application requires INJECT_EVENTS permission</code></p>
<p><code>http://stackoverflow.com/questions/22163424/android-java-lang-securityexception-injecting-to-another-application-requires</code> 无解</p>
<p>添加权限无效，必须将该应用置为system应用.</p>
<p>底层还是基于IwindowManager 去做的，这边我们不再分析直接讨论3.2</p>
<h3 id="3-2-IWindowManager"><a href="#3-2-IWindowManager" class="headerlink" title="3.2 IWindowManager"></a>3.2 IWindowManager</h3><p>monkey，Robotium就是基于它做的</p>
<pre><code>IWindowManager.Stub.asInterface(ServiceManager
               .getService(&quot;window&quot;))).injectPointerEvent(event, true);</code></pre><p>从API 8开始IWindowManager接口就被屏蔽掉了，没有这个API直接调用。</p>
<p>可以源码编译生成jar包 root权限下降jar导入    <code>/system/framework/</code>下，或者直接用反射(效率差点) </p>
<p>如何跳出进程间限制？<a href="http://blog.csdn.net/zhubaitian/article/details/40430053" target="_blank" rel="noopener">该篇译文给出了链接</a></p>
<h4 id="实现难度：4-5-1"><a href="#实现难度：4-5-1" class="headerlink" title="实现难度：4/5"></a><strong>实现难度：4/5</strong></h4><p>主要是多指的代码会比较多和复杂，不易封装。</p>
<p>没有提供内部接口的问题解决方案也给出了，或者直接用<code>Instrumentation</code>。</p>
<h4 id="维护拓展：4-5-1"><a href="#维护拓展：4-5-1" class="headerlink" title="维护拓展：4/5"></a><strong>维护拓展：4/5</strong></h4><p>研究的不深，可能有些坑存在</p>
<h4 id="需要root？-否-2"><a href="#需要root？-否-2" class="headerlink" title="需要root？ 否"></a><strong>需要root？</strong> 否</h4><p>但是应用需要拥有system权限</p>
<h4 id="效率延迟：3-5-5"><a href="#效率延迟：3-5-5" class="headerlink" title="效率延迟：3.5/5"></a><strong>效率延迟：3.5/5</strong></h4><p><strong><code>指令组响应时间</code></strong>20~50ms</p>
<h4 id="推荐指数：-4-5"><a href="#推荐指数：-4-5" class="headerlink" title="推荐指数： 4/5"></a><strong>推荐指数：</strong> 4/5</h4><h2 id="Accessibilityservice"><a href="#Accessibilityservice" class="headerlink" title="Accessibilityservice"></a>Accessibilityservice</h2><p>借助Android提供的无障碍服务<br>在<code>res/xml</code>目录下新建一个<code>accessibility_service_config.xml</code>文件</p>
<pre><code>&lt;intent-filter&gt;
    &lt;action android:name=&quot;android.accessibilityservice.AccessibilityService&quot; /&gt;
&lt;/intent-filter&gt;</code></pre><p><code>http://blog.csdn.net/sinyu890807/article/details/47803149</code></p>
<p>实现要各种判断:</p>
<pre><code>窗口名太多 手动生成accessibility_service_config再service手动Intent注入action不太合适
然后操作节点等又是很麻烦的一件事：适合对已知节点操作，不适合模拟</code></pre><p><strong>(弃</strong></p>
<p>其他：非root方法</p>
<p>通过hook方法绕过权限验证</p>
<pre><code>//http://blog.sina.com.cn/s/blog_151b043850102wiv9.html</code></pre><p>以后有空再研究</p>
<h1 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h1><p>sendevent.c<br><a href="http://www.netmite.com/android/mydroid/system/core/toolbox/sendevent.c" target="_blank" rel="noopener">http://www.netmite.com/android/mydroid/system/core/toolbox/sendevent.c</a><br><a href="http://androidxref.com/4.4.4_r1/xref/system/core/toolbox/getevent.c" target="_blank" rel="noopener">http://androidxref.com/4.4.4_r1/xref/system/core/toolbox/getevent.c</a></p>
<h1 id="防退出全屏"><a href="#防退出全屏" class="headerlink" title="防退出全屏"></a>防退出全屏</h1><p>1.状态栏</p>
<h2 id="纯客户端去做"><a href="#纯客户端去做" class="headerlink" title="纯客户端去做"></a>纯客户端去做</h2><p>目前比较简单的定义是：<br>当TOUCH_DOWN处于 纵坐标0.9-1.0区域时，将此时的事件放入buffer,<br>接下来的操作，如果为TOUCH_MOVE,且其坐标在TOUCH_DOWN的坐标上方，都将放入buffer。</p>
<p><strong>客户端去做不太可行 一些奇怪的手势不能过滤掉</strong> </p>
<h2 id="做一个系统应用，需要有系统签名"><a href="#做一个系统应用，需要有系统签名" class="headerlink" title="做一个系统应用，需要有系统签名"></a>做一个系统应用，需要有系统签名</h2><pre><code> 1   public static final void collapseStatusBar(Context ctx) {
 2   Object sbservice = ctx.getSystemService(&quot;statusbar&quot;);
 3   try {
 4   Class&lt;?&gt; statusBarManager = Class.forName(&quot;android.app.StatusBarManager&quot;);
 5   Method collapse;
 6   if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.JELLY_BEAN_MR1) {
 7   collapse = statusBarManager.getMethod(&quot;collapsePanels&quot;);
 8   } else {
 9   collapse = statusBarManager.getMethod(&quot;collapse&quot;);
10   }
11   collapse.invoke(sbservice);
12   } catch (Exception e) {
13   e.printStackTrace();
14   }
15   }</code></pre><p>collapse只是折叠状态栏，还是能强行拖动下拉，不能根本的屏蔽</p>
<p>需要调用disable方法</p>
<pre><code>@Override
protected void onResume() {
    Toast.makeText(this,&quot;onResume&quot;,Toast.LENGTH_LONG).show();
    Object service = getSystemService(&quot;statusbar&quot;);
    try {
        Class &lt;?&gt; statusBarManager = Class.forName(&quot;android.app.StatusBarManager&quot;);
        Method expand = statusBarManager.getMethod(&quot;disable&quot;,int.class);
        expand.invoke (service,0x00010000);
        Toast.makeText(this,&quot;success&quot;,Toast.LENGTH_LONG).show();
    } catch (Exception e) {
        Toast.makeText(this,e.toString(),Toast.LENGTH_LONG).show();
        e.printStackTrace();
    }
    super.onResume();
}
@Override
protected void onDestroy() {
    //解除禁止，反射 mStatusBarManager.disable(StatusBarManager.DISABLE_NONE);0x00000000
    super.onDestroy();
}


package=&quot;com.ws.tryplayservice&quot; android:sharedUserId=&quot;android.uid.system&quot;&gt;
&lt;uses-permission android:name=&quot;android.permission.STATUS_BAR&quot; /&gt;
&lt;uses-permission android:name=&quot;android.permission.EXPAND_STATUS_BAR&quot; /&gt;</code></pre><p>2.底部导航栏</p>
<p>需求是不让导航栏显示，也就是我们的虚拟按键按键不显示，那么在模拟器配置HardWare Profiel中开启硬件按钮（Has HardWare Button）</p>
<h1 id="捕获基本知识"><a href="#捕获基本知识" class="headerlink" title="捕获基本知识"></a>捕获基本知识</h1><pre><code>//ACTION_POINTER_i_DOWN:5 261 517 773 存在触点的情况下 DOWN
//ACTION_POINTER_i_UP:6 262 518 774   存在触点的情况下 UP
//每次UP时返回index后，再次UP时系统会重做填充，
//即按顺序1 2 3 4 DOWN后， UP了1 返回6 此时UP 2 返回的还是6 说明再次UP时会把触点INDEX往前填充
//多个触点时，UP第一个返回的是6，但是只有一个触点时返回的是2
//按顺序1 2 3 4 DOWN后，UP 1返回6，此时再DOWN 5返回的是5，说明再次DOWN会从头找开始填充
//UP时，通过event.getPointerCount()得到的数量不会变，只有再次才会更新，因为我们需要得到UP点的x,y等信息
// DOWN 0 1 2 后 UP 了 1 此时剩 0 2 getPointerId(1)可以返回index=1的点id为2
//需要理清的是pointerIndex与pointerID非等同
//非MOVE事件，触点坐标也可能改变。例：1 2指按，1指抬，ACTION=6 此时获取2指的x,y可能会与1指未抬时的位置不一致
//因为触摸屏是按一定时间间隔的，在这很小的时间间隔内，同时出现了MOVE和UP,优先UP,所以ACTION=UP 但是位置还是会移动
//压力 等传感器 暂时不考虑，触摸点直径也暂时不考虑
//出现哪些事件需要发数据，发什么数据？与sendEvent对应
//0.(重)进游戏界面时，发送清空所有触点的指令
//1.DOWN  or UP 发其位置 SENDEVENT 1 or 0 具体数据 同时更新 删除数组数据
//2.MOVE  按ID得到新的位置 与之前进行比较</code></pre><h1 id="捕获时异常"><a href="#捕获时异常" class="headerlink" title="捕获时异常"></a>捕获时异常</h1><p>单指下：<br>在GameView中滑动时(DOWN在GameView中) 能够捕获到touch信息，滑动到GameView外也能捕获到MOVE,UP信息。<br>而从GameView外滑进GameView(down在GameView外)捕获不到touch信息</p>
<p>多指：<br>若已有一个触点在GameView内（可以捕获到touch信息），另一个触点从GameView外滑入。也是可以捕获得到另一个触点的touch信息。<br>因为第二个触点的down不是TOUCH_DOWN 而是 TOUCH_POINTER_DOWN</p>
<p>总的来说，只要有touchdown事件，直接对屏幕的操作都能被捕获到</p>
<p>如果从画面外开始的touch都过滤的话 操作如下：</p>
<p>onTouch放在GameView上监听</p>
<p>if(opt=touch_down){<br>    正常发送<br>}<br>else if(opt=touch_up){<br>    正常发送<br>}<br>else if(opt=touch_move){<br>    for(){<br>        if(ID处于黑名单)该id的move不发送<br>        else 正常发送<br>    }<br>}else if(opt=touch_pointer_down){<br>    if(down坐标处于GameView之外)将该id放入黑名单<br>    else 正常发送<br>}else if(opt=touch_pointer_up){<br>    if(id处于黑名单)则该id的up不发送<br>    else 正常发送<br>}</p>
<p>如果要保留从画面外开始的touch,直到画面内才开始捕获：</p>
<p>onTouch放在GameView的外层GameViewLayout上去监听</p>
<pre><code>int opt = event.getAction();
Log.d(TAG, &quot;onTouch: &quot; + opt);
if (opt == 2) {
    List&lt;TouchEvent&gt; whiteList = new ArrayList();
    for (int i = 0; i &lt; pointerCount; i++) {
        int id = event.getPointerId(i);
        float x = event.getX(i);
        float y = event.getY(i);
        //if id位于灰名单，如果move进GameView则需要补上down事件,并从灰名单中删除
        //else 放入白名单，最后list发送
        if (graySet.contains(id)) {
            //不位于GameView则不处理
            if (locateGameView(x, y)) {
                //之前未发过down则发送down事件
                receiveData(new TouchEvent(id, 0, x, y));
                graySet.remove(id);
                receiveData(new SyncEvent(pointerCount-graySet.size()));
            }
        } else {
            whiteList.add(new TouchEvent(id, 2, x, y));
        }
    }
    if (whiteList != null &amp;&amp; whiteList.size() &gt; 0) {
        receiveData(whiteList);
    }
} else if (opt == 0 || (opt - 5) % 256 == 0) {
    //为了简化，我们假设这过程不会进行MOVE
    //ind 指当前触摸序列的索引值，不一定连续
    //获取id还得通过getPointerId
    int ind = (event.getAction() - 5) / 256;
    int id = event.getPointerId(ind);
    float x = event.getX(ind);
    float y = event.getY(ind);
    if (!locateGameView(x, y)) {
        //将该id放入灰名单
        Log.d(TAG, &quot;receiveData:graySet.add&quot;);
        graySet.add(id);
    } else {
        receiveData(new TouchEvent(id, 0, x, y));
        receiveData(new SyncEvent(pointerCount-graySet.size()));
    }
} else if (opt == 1 || (opt - 6) % 256 == 0) {
    int ind = (event.getAction() - 6) / 256;
    int id = event.getPointerId(ind);
    //if 处于灰名单 移除
    //else 发送up事件
    if (!graySet.contains(id)) {
        receiveData(new TouchEvent(id, 1, 0, 0));
        receiveData(new SyncEvent(pointerCount -graySet.size() - 1));
    }else{
        graySet.remove(id);
    }
}</code></pre><h1 id="模拟器不支持Muiti-Touch"><a href="#模拟器不支持Muiti-Touch" class="headerlink" title="模拟器不支持Muiti-Touch"></a>模拟器不支持Muiti-Touch</h1><p>一开始以为要升级模拟器版本，好像是不同模拟器默认的触控协议不一样，我们的方式的话要用B协议，A协议的话代码需要修改。</p>
<p>SYN_EVENT里面有</p>
<pre><code>#define SYN_REPORT 0
#define SYN_CONFIG 1
/* SYN_MT_REPORT 与多点触控也有关系 不知道低版本是否兼容 */
#define SYN_MT_REPORT 2</code></pre>]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>多点触控</tag>
      </tags>
  </entry>
  <entry>
    <title>Android监听屏幕旋转</title>
    <url>/2016/10/18/2016-2017%E7%9B%B4%E6%92%AD%E7%9B%B8%E5%85%B3/Android%E7%9B%91%E5%90%AC%E5%B1%8F%E5%B9%95%E6%97%8B%E8%BD%AC/</url>
    <content><![CDATA[<h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>监听屏幕旋转，不重建Activity</p>
<p>大前提：Activity 已经限定屏幕竖屏</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">android:screenOrientation="portrait"</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h2><h3 id="方法一【结论不可行】"><a href="#方法一【结论不可行】" class="headerlink" title="方法一【结论不可行】"></a>方法一【结论不可行】</h3><p>要想监听屏幕旋转，需要：</p>
<p>1.权限声明</p>
<pre><code>&lt;uses-permission android:name=&quot;android.permission.CHANGE_CONFIGURATION&quot;&gt;&lt;/uses-permission&gt;</code></pre><p>2.声明activity要捕获的事件类型</p>
<pre><code>android:configChanges=&quot;orientation&quot;</code></pre><p>keyboardHidden表示键盘辅助功能隐藏，如果你的开发API等级等于或高于13，还需要设置screenSize，因为screenSize会在屏幕旋转时改变；</p>
<p>一般这样设</p>
<pre><code>android:configChanges=&quot;keyboardHidden|orientation|screenSize&quot;</code></pre><p>优点：我们可以随时监听屏幕旋转变化，并对应做出相应的操作；</p>
<p>缺点：它只能一次旋转90度，如果一下子旋转180度，onConfigurationChanged函数不会被调用。</p>
<p>3.重写Activity中的onConfigurationChanged方法</p>
<pre><code>@Override
public void onConfigurationChanged(Configuration newConfig) {
// 当新设置中，屏幕布局模式为横排时
    if(newConfig.orientation == ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE)
    {
    //TODO 某些操作 
    }
    super.onConfigurationChanged(newConfig);
}</code></pre><p>前提：未开启方向锁定 or 未设置 android:screenOrientation 方向固定or忽视传感器</p>
<p>与大前提不符</p>
<h3 id="方案二-利用重力传感器"><a href="#方案二-利用重力传感器" class="headerlink" title="方案二 利用重力传感器"></a>方案二 利用重力传感器</h3><p>可拓展性好</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ws.tryplay.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.content.Context;</span><br><span class="line"><span class="keyword">import</span> android.content.pm.ActivityInfo;</span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"><span class="keyword">import</span> android.view.OrientationEventListener;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by zhengjx on 2016/12/14.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ScreenOrientationUtil</span> </span>&#123;</span><br><span class="line">   <span class="keyword">private</span> OrientationEventListener mOrientationListener;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">boolean</span> mScreenPortrait = <span class="keyword">true</span>;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">boolean</span> mCurrentOrient = <span class="keyword">false</span>;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"ScreenOrientationUtil"</span>;</span><br><span class="line">   <span class="keyword">private</span> OrientationEvent event;</span><br><span class="line">   <span class="keyword">private</span> Context mContext;</span><br><span class="line">   <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OrientationEvent</span></span>&#123;</span><br><span class="line">       <span class="function"><span class="keyword">void</span> <span class="title">orientationChanged</span><span class="params">(<span class="keyword">int</span> orientation)</span></span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">ScreenOrientationUtil</span><span class="params">(OrientationEvent event, Context mContext)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">this</span>.event = event;</span><br><span class="line">       <span class="keyword">this</span>.mContext = mContext;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startOrientationChangeListener</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       mOrientationListener = <span class="keyword">new</span> OrientationEventListener(<span class="keyword">this</span>.mContext) &#123;</span><br><span class="line">           <span class="meta">@Override</span></span><br><span class="line">           <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onOrientationChanged</span><span class="params">(<span class="keyword">int</span> rotation)</span> </span>&#123;</span><br><span class="line">               <span class="keyword">if</span> (((rotation &gt;= <span class="number">0</span>) &amp;&amp; (rotation &lt;= <span class="number">45</span>)) || (rotation &gt;= <span class="number">315</span>)||(rotation&gt;=<span class="number">135</span>)&amp;&amp;(rotation&lt;=<span class="number">225</span>))) &#123;<span class="comment">//portrait</span></span><br><span class="line">                   mCurrentOrient = <span class="keyword">true</span>;</span><br><span class="line">                   <span class="keyword">if</span>(mCurrentOrient!=mScreenPortrait)</span><br><span class="line">                   &#123;</span><br><span class="line">                       mScreenPortrait = mCurrentOrient;</span><br><span class="line">                       event.orientationChanged(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);</span><br><span class="line">                       Log.d(TAG, <span class="string">"Screen orientation changed from Landscape to Portrait!"</span>);</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">else</span> <span class="keyword">if</span> (((rotation &gt; <span class="number">45</span>) &amp;&amp; (rotation &lt; <span class="number">135</span>))||((rotation&gt;<span class="number">225</span>)&amp;&amp;(rotation&lt;<span class="number">315</span>))) &#123;<span class="comment">//landscape</span></span><br><span class="line">                   mCurrentOrient = <span class="keyword">false</span>;</span><br><span class="line">                   <span class="keyword">if</span>(mCurrentOrient!=mScreenPortrait)</span><br><span class="line">                   &#123;</span><br><span class="line">                       mScreenPortrait = mCurrentOrient;</span><br><span class="line">                       event.orientationChanged(ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);</span><br><span class="line">                       Log.d(TAG, <span class="string">"Screen orientation changed from Portrait to Landscape!"</span>);</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;;</span><br><span class="line">       mOrientationListener.enable();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>Activity中去注册监听</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> ScreenOrientationUtil.OrientationEvent orientationEvent=<span class="keyword">new</span> ScreenOrientationUtil.OrientationEvent() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">orientationChanged</span><span class="params">(<span class="keyword">int</span> orientation)</span> </span>&#123;</span><br><span class="line">        Log.d(TAG, <span class="string">"orientationChanged() called with: orientation = ["</span> + orientation + <span class="string">"]"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> ScreenOrientationUtil(orientationEvent,GameActivity.<span class="keyword">this</span>).startOrientationChangeListener();</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>Android</category>
      </categories>
  </entry>
  <entry>
    <title>流媒体直播—WebRTC native 2 browser</title>
    <url>/2016/08/24/2016-2017%E7%9B%B4%E6%92%AD%E7%9B%B8%E5%85%B3/%E6%B5%81%E5%AA%92%E4%BD%93%E7%9B%B4%E6%92%AD%E2%80%94WebRTC%20native%202%20browser%20/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>关于browser 2 browser的网上文章很多，我就不介绍了。</p>
<p>可以参考我的这篇文章<a href="https://www.hongweipeng.com/index.php/archives/835/" target="_blank" rel="noopener">流媒体直播——资料整理、你想要了解的都在这</a></p>
<p>里面给的链接可以去看看</p>
<p>这边我要讲的是<strong>WebRTC编译后的执行文件</strong>和<strong>Web端</strong>进行交互。</p>
<p><strong>首先要明确的是</strong>，browser 2 browser的应用场景太狭小了：视频通话…</p>
<p>而编译WebRTC我们就可以做更多的事：屏幕共享.. 录播.. 远程教育【切换通话和屏幕】..</p>
<p>因为视频源我们是可控的，不像 Web. 【其实b2b也可以做屏幕共享，不过c2b会比较可控】</p>
<p>编译WebRTC是一件麻烦的事，可以参考上面那篇文章。<br>这里我直接给出两个可运行程序</p>
<blockquote>
<p>下载地址：<a href="http://pan.baidu.com/s/1bVpx9O" target="_blank" rel="noopener">http://pan.baidu.com/s/1bVpx9O</a></p>
</blockquote>
<p>如果网盘挂了请提醒我</p>
<a id="more"></a>


<h1 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h1><p>先用起来吧，虽然js有注释，不过我后面还是会详细解析的。</p>
<h2 id="构架Web端"><a href="#构架Web端" class="headerlink" title="构架Web端"></a>构架Web端</h2><ol>
<li>新建一个文件夹作为该web项目的根目录，就叫WebrtcTEST吧</li>
<li>在根目录下新建js文件夹</li>
<li>下载<a href="https://www.hongweipeng.com/usr/uploads/2016/08/2467397271.rar" target="_blank" rel="noopener">所需js文件.rar</a>并解压，把得到的文件放入js文件夹中。</li>
<li>根目录下新建test.html文件，代码如下</li>
</ol>
<pre><code>&lt;!DOCTYPE html&gt;
&lt;html&gt;

    &lt;head&gt;
        &lt;meta charset=&quot;utf-8&quot; /&gt;
        &lt;title&gt;游戏&lt;/title&gt;
        &lt;script type=&quot;text/javascript&quot; src=&quot;./jquery-1.11.1.min.js&quot;&gt;&lt;/script&gt;
        &lt;script type=&quot;text/javascript&quot; src=&quot;./adapter.js&quot;&gt;&lt;/script&gt;
        &lt;!--&lt;script type=&quot;text/javascript&quot; src=&quot;./adapter_no_global.js&quot;&gt;&lt;/script&gt;--&gt;
        &lt;script&gt;
            var request = null;
            var hangingGet = null;
            var localName;
            var server;
            var my_id = -1;
            //记录其他peer
            var other_peers = {};
            var message_counter = 0;

            // added stuff start 
            var pc;
            //constraints for desktop browser 
            var desktopConstraints = {

                video: {
                    mandatory: {
                        maxWidth: 800,
                        maxHeight: 600
                    }
                },

                audio: true
            };

            //constraints for mobile browser 
            var mobileConstraints = {

                video: {
                    mandatory: {
                        maxWidth: 480,
                        maxHeight: 320,
                    }
                },

                audio: true
            }

            //if a user is using a mobile browser 
            if(/Android|iPhone|iPad/i.test(navigator.userAgent)) {
                var constraints = mobileConstraints;
            } else {
                var constraints = desktopConstraints;
            }
            var remoteStream;

            function trace(txt) {
                var elem = document.getElementById(&quot;debug&quot;);
                elem.innerHTML += txt + &quot;&lt;br&gt;&quot;;
            }

            function sendToPeer(peer_id, data) {
                if(my_id == -1) {
                    alert(&quot;Not connected&quot;);
                    return;
                }
                if(peer_id == my_id) {
                    alert(&quot;Can&apos;t send a message to oneself :)&quot;);
                    return;
                }
                var r = new XMLHttpRequest();
                r.open(&quot;POST&quot;, server + &quot;/message?peer_id=&quot; + my_id + &quot;&amp;to=&quot; + peer_id,
                    false);
                r.setRequestHeader(&quot;Content-Type&quot;, &quot;text/plain&quot;);
                r.send(data);
                console.log(peer_id, &quot; Send &quot;, data);
                trace(peer_id + &quot; Send :&quot; + data);
                var dataJson = JSON.parse(data);
                console.log(peer_id, &quot; send &quot;, data);
                r = null;
            }
            var onSessionConnecting = function(message) {

                console.log(&quot;Session connecting.&quot;);
                trace(&quot;Session connecting.&quot;);
            }

            var onSessionOpened = function(message) {
                console.log(&quot;Session opened.&quot;);
                trace(&quot;Session opened.&quot;);
            }

            var onRemoteStreamRemoved = function(event) {
                    console.log(&quot;Remote stream removed.&quot;);
                    trace(&quot;Remote stream removed.&quot;);
                }
                //This function 
            var createPeerConnection = function(connectionId) {
                var pc_config = {
                    &quot;iceServers&quot;: [{
                        &quot;url&quot;: &quot;stun:stun.l.google.com:19302&quot;
                    }]
                };
                try {
                    console.log(pc_config);
                    trace(pc_config);
                    // 创建PeerConnection实例 (参数为null则没有iceserver，即使没有stunserver和turnserver，仍可在局域网下通讯)
                    pc = new RTCPeerConnection(pc_config);
                    // 发送ICE候选到其他客户端
                    pc.onicecandidate = function(event) {
                        if(event.candidate) {
                            var msgCANDIDATE = {};
                            msgCANDIDATE.sdpMLineIndex = event.candidate.sdpMLineIndex;
                            msgCANDIDATE.sdpMid = event.candidate.sdpMid;
                            msgCANDIDATE.candidate = event.candidate.candidate;
                            sendToPeer(connectionId, JSON.stringify(msgCANDIDATE));
                        } else {
                            console.log(&quot;End of candidates.&quot;);
                            trace(&quot;End of candidates.&quot;);
                        }
                    };
                    pc.onconnecting = onSessionConnecting;
                    pc.onopen = onSessionOpened;
                    // 如果检测到媒体流连接到本地，将其绑定到一个video标签上输出
                    pc.onaddstream = function(event) {
                        console.log(&quot;Remote stream added.&quot;);
                        trace(&quot;Remote stream added.&quot;);
                        document.getElementById(&apos;remoteVideo&apos;).src = URL.createObjectURL(event.stream);
                    }
                    pc.onremovestream = onRemoteStreamRemoved;
                    console.log(&quot;Created RTCPeerConnnection with config \&quot;&quot; + JSON.stringify(pc_config) + &quot;\&quot;. for &quot;);
                    trace(&quot;Created RTCPeerConnnection with config \&quot;&quot; + JSON.stringify(pc_config) + &quot;\&quot;. for &quot;);
                    //setLocalStream(connectionId);//解除注释将可以双端通信 不过延迟就高了
                } catch(e) {
                    console.log(&quot;Failed to create PeerConnection with &quot; + connectionId + &quot;, exception: &quot; + e.message);
                    trace(&quot;Failed to create PeerConnection with &quot; + connectionId + &quot;, exception: &quot; + e.message);
                }

            }

            function setLocalStream(connectionId) {
                // 获取本地音频和视频流
                navigator.getUserMedia(constraints, function(stream) {
                    //绑定本地媒体流到video标签用于输出
                    document.getElementById(&apos;localVideo&apos;).src = URL.createObjectURL(stream);
                    //向PeerConnection中加入需要发送的流
                    pc.addStream(stream);
                    //如果是发起方则发送一个offer信令
                    pc.createOffer(function sendOfferFn(desc) {
                        pc.setLocalDescription(desc);
                        var data = JSON.stringify(desc);
                        sendToPeer(connectionId, data);
                    }, function(error) {
                        console.log(&apos;Failure callback: &apos; + error);
                        trace(&apos;Failure callback: &apos; + error);
                    });
                }, function(error) {
                    //处理媒体流创建失败错误
                    console.log(&apos;getUserMedia error: &apos; + error);
                    trace(&apos;getUserMedia error: &apos; + error);
                });

            }
            //添加新加入的peer到本地
            function handleServerNotification(data) {
                console.log(&quot;Server notification: &quot; + data);
                trace(&quot;Server notification: &quot; + data);
                var parsed = data.split(&apos;,&apos;);
                if(parseInt(parsed[2]) != 0)
                    other_peers[parseInt(parsed[1])] = parsed[0];
            }
            //如果是一个ICE的候选，则将其加入到PeerConnection中，否则设定对方的session描述为传递过来的描述
            function handlePeerMessage(peer_id, data) {
                var dataJson = JSON.parse(data);
                if(data.search(&quot;offer&quot;) != -1) {
                    //json:{&quot;sdp&quot;:xxx,type:&quot;offer&quot;}
                    createPeerConnection(peer_id);
                    pc.setRemoteDescription(new RTCSessionDescription(dataJson));
                    pc.createAnswer(function(sessionDescription) {
                        var answerData = JSON.stringify(sessionDescription);
                        console.log(&quot;answer:&quot; + answerData);
                        trace(&quot;answer:&quot; + answerData);
                        pc.setLocalDescription(sessionDescription);
                        sendToPeer(peer_id, answerData);
                    }, function(error) {
                        console.log(&apos;Failure callback: &apos; + error);
                        trace(&apos;Failure callback: &apos; + error);
                    });
                } else {
                    //It is a candidate
                    var candidate = new RTCIceCandidate({
                        sdpMLineIndex: dataJson.sdpMLineIndex,
                        candidate: dataJson.candidate
                    });
                    pc.addIceCandidate(candidate);
                }
            }

            function GetIntHeader(r, name) {
                var val = r.getResponseHeader(name);
                return val != null &amp;&amp; val.length ? parseInt(val) : -1;
            }
            //等待服务器返回，当出现以下情况或超时才会返回 
            //1.其他peer连接上server会返回peer的数据{peerName,peerID,xx};用于本地添加
            //本地响应handleServerNotification
            //2.其他peer点击my_name(即发送 发送-接收视频 请求)，返回 一个ice的候选或者offer
            //    {
            // &quot;candidate&quot; : &quot;candidate:1918330882 1 udp 2122260223 192.168.253.1 55710 typ host generation 0 ufrag YUtt network-id 4 network-cost 50&quot;,
            // &quot;sdpMLineIndex&quot; : 0,
            // &quot;sdpMid&quot; : &quot;audio&quot;
            //} this is ice
            //本地响应handlePeerMessage
            function hangingGetCallback() {
                try {
                    if(hangingGet.readyState != 4)
                        return; //why?
                    if(hangingGet.status != 200) {
                        console.log(&quot;server error: &quot; + hangingGet.statusText);
                        trace(&quot;server error: &quot; + hangingGet.statusText);
                        disconnect();
                    } else {
                        var peer_id = GetIntHeader(hangingGet, &quot;Pragma&quot;);

                        if(peer_id == my_id) {
                            console.log(&quot;handleServerNotification:&quot; + hangingGet.responseText);
                            trace(&quot;handleServerNotification:&quot; + hangingGet.responseText);
                            handleServerNotification(hangingGet.responseText);
                        } else {
                            console.log(&quot;handlePeerMessage:&quot; + hangingGet.responseText);
                            trace(&quot;handlePeerMessage:&quot; + hangingGet.responseText);
                            handlePeerMessage(peer_id, hangingGet.responseText);
                        }
                    }

                    if(hangingGet) {
                        hangingGet.abort();
                        hangingGet = null;
                    }

                    if(my_id != -1)
                        window.setTimeout(startHangingGet, 0);
                } catch(e) {
                    console.log(&quot;Hanging get error: &quot; + e.description);
                    trace(&quot;Hanging get error: &quot; + e.description);
                }
            }
            //继续把my_id发给server 当其他peer连接服务器的时候其他peer就可以获取my_id
            function startHangingGet() {
                try {
                    hangingGet = new XMLHttpRequest();
                    hangingGet.onreadystatechange = hangingGetCallback;
                    hangingGet.ontimeout = onHangingGetTimeout;
                    hangingGet.open(&quot;GET&quot;, server + &quot;/wait?peer_id=&quot; + my_id, true);
                    hangingGet.send();
                } catch(e) {
                    console.log(&quot;error&quot; + e.description);
                    trace(&quot;error&quot; + e.description);
                }
            }
            //如果超时则继续发送startHangingGet请求
            function onHangingGetTimeout() {
                console.log(&quot;hanging get timeout. issuing again.&quot;);
                trace(&quot;hanging get timeout. issuing again.&quot;);
                hangingGet.abort();
                hangingGet = null;
                if(my_id != -1)
                    window.setTimeout(startHangingGet, 0);
            }
            //server返回my_id(服务器已递增的方式生成id)和远端peer的id
            //那如果browser先连接，没有其他peer，该方法返回时没有远端peer的id 后面是哪里获取的呢？
            //所以它又做了一个startHangingGet();
            //通过handleServerNotification 得到,log:Server notification: zhengjx@X-CDN-zhengjx,2,1
            function signInCallback() {
                try {
                    console.log(&quot;request.readyState:&quot; + request.readyState);
                    trace(&quot;request.readyState:&quot; + request.readyState);
                    if(request.readyState == 4) {
                        if(request.status == 200) {
                            var peers = request.responseText.split(&quot;\n&quot;);
                            my_id = parseInt(peers[0].split(&apos;,&apos;)[1]);
                            console.log(&quot;My id: &quot; + my_id); //My id 1
                            trace(&quot;My id: &quot; + my_id); //My id 1
                            //Peer 1: zhengjx@X-CDN-zhengjx,2,parsed[2]没用到 
                            for(var i = 1; i &lt; peers.length; ++i) {
                                if(peers[i].length &gt; 0) {
                                    console.log(&quot;Peer &quot; + i + &quot;: &quot; + peers[i]);
                                    trace(&quot;Peer &quot; + i + &quot;: &quot; + peers[i]);
                                    var parsed = peers[i].split(&apos;,&apos;);
                                    other_peers[parseInt(parsed[1])] = parsed[0];
                                }
                            }
                            startHangingGet();
                            request = null;
                        }
                    }
                } catch(e) {
                    console.log(&quot;error: &quot; + e.description);
                    trace(&quot;error: &quot; + e.description);
                }
            }
            //注册，把自己的localName发给server
            function signIn() {
                try {
                    request = new XMLHttpRequest();
                    request.onreadystatechange = signInCallback;
                    request.open(&quot;GET&quot;, server + &quot;/sign_in?&quot; + localName, true);
                    request.send();
                } catch(e) {
                    console.log(&quot;error: &quot; + e.description);
                    trace(&quot;error: &quot; + e.description);
                }
            }

            function connect() {
                localName = document.getElementById(&quot;local&quot;).value.toLowerCase();
                server = document.getElementById(&quot;server&quot;).value.toLowerCase();
                if(localName.length == 0) {
                    alert(&quot;I need a name please.&quot;);
                    document.getElementById(&quot;local&quot;).focus();
                } else {
                    document.getElementById(&quot;connect&quot;).disabled = true;
                    document.getElementById(&quot;disconnect&quot;).disabled = false;
                    //document.getElementById(&quot;send&quot;).disabled = false;
                    signIn();
                }
            }

            function disconnect() {
                if(request) {
                    request.abort();
                    request = null;
                }

                if(hangingGet) {
                    hangingGet.abort();
                    hangingGet = null;
                }

                if(my_id != -1) {
                    request = new XMLHttpRequest();
                    request.open(&quot;GET&quot;, server + &quot;/sign_out?peer_id=&quot; + my_id, false);
                    request.send();
                    request = null;
                    my_id = -1;
                }

                document.getElementById(&quot;connect&quot;).disabled = false;
                document.getElementById(&quot;disconnect&quot;).disabled = true;
                //document.getElementById(&quot;send&quot;).disabled = true;
            }
        &lt;/script&gt;
    &lt;/head&gt;

    &lt;body&gt;
        Local: &lt;br&gt;
        &lt;video id=&quot;localVideo&quot; autoplay&gt;&lt;/video&gt;&lt;br&gt; Remote: &lt;br&gt;
        &lt;video id=&quot;remoteVideo&quot; autoplay style=&quot;width:400px;height:300px;&quot;&gt;&lt;/video&gt;

        Server: &lt;input type=&quot;text&quot; id=&quot;server&quot; value=&quot;http://172.27.35.1:8888&quot; /&gt;&lt;br&gt; Your name: &lt;input type=&quot;text&quot; id=&quot;local&quot; value=&quot;my_name&quot; /&gt;
        &lt;button id=&quot;connect&quot; onclick=&quot;connect();&quot;&gt;Connect&lt;/button&gt;
        &lt;button disabled=&quot;true&quot; id=&quot;disconnect&quot; onclick=&quot;disconnect();&quot;&gt;Disconnect&lt;/button&gt;
        &lt;pre id=&quot;debug&quot;&gt;
        &lt;/pre&gt;
    &lt;/body&gt;

&lt;/html&gt;</code></pre><p>将WebrtcTEST项目放入HTTP服务器<br>访问 <a href="http://localhost/WebrtcTEST/test.html" target="_blank" rel="noopener">http://localhost/WebrtcTEST/test.html</a></p>
<h1 id="服务器端"><a href="#服务器端" class="headerlink" title="服务器端"></a>服务器端</h1><p>下载百度云的那个rar并解压得到<br><code>peerconnection_client.exe</code> 和 <code>peerconnection_server.exe</code><br><code>peerconnection_client.exe</code>的网络运行环境任意，可局域网可公网。<br>但<code>peerconnection_server.exe</code>网络运行环境必须保证能让<code>peerconnection_client</code>和<code>Web端localhost</code>所在网络运行环境访问到。<br>也就是说，<strong>要么<code>peerconnection_server</code>处于公网，要么三者均处于局域网。</strong></p>
<blockquote>
<p>PS:测试时为了方便选择局域网，并让peerconnection_client和peerconnection_server处于同一台PC</p>
</blockquote>
<h2 id="测试流程如下："><a href="#测试流程如下：" class="headerlink" title="测试流程如下："></a>测试流程如下：</h2><ol>
<li>服务器端运行<code>peerconnection_server</code></li>
<li>服务器端运行<code>peerconnection_client</code>，并直接点击<code>connect</code></li>
<li>另一Client的Web端设置<code>Server IP</code>地址和<code>Your name</code>【name随意】,点击<code>connect</code></li>
<li>服务器端peerconnection_client显示Web端连接上了，列表上出现name，对其进行点击;</li>
<li>现在就可以在Web端看到服务器端摄像头的画面了，延迟小于200ms.</li>
<li>如果想让服务器端看到Web端用户摄像头画面，将test.html的第132行注释去掉</li>
</ol>
<pre><code>//setLocalStream(connectionId);//解除注释将可以双端通信 不过延迟就高了</code></pre><h1 id="JS具体流程分析"><a href="#JS具体流程分析" class="headerlink" title="JS具体流程分析"></a>JS具体流程分析</h1><h2 id="从function-connect-开始分析"><a href="#从function-connect-开始分析" class="headerlink" title="从function connect() 开始分析"></a>从<code>function connect()</code> 开始分析</h2><h2 id="调用signIn-函数"><a href="#调用signIn-函数" class="headerlink" title="调用signIn()函数"></a>调用signIn()函数</h2><p>将自己的localName【填写的Your name】发给server,响应结束将调用signInCallback</p>
<h2 id="分析signInCallback"><a href="#分析signInCallback" class="headerlink" title="分析signInCallback()"></a>分析signInCallback()</h2><p>server返回my_id(服务器已递增的方式生成id)和远端peer的id<br><strong>那如果browser先连接，没有其他peer，该方法返回时没有远端peer的id 后面是哪里获取的呢？</strong><br>所以它又做了一个startHangingGet();<br>返回的peer数据格式：peer_name,peer_id,第三个参数没有用到我也不知道是什么。</p>
<h2 id="执行startHangingGet"><a href="#执行startHangingGet" class="headerlink" title="执行startHangingGet();"></a>执行startHangingGet();</h2><p>不管上一步有没有获取到peer该步骤都会进行的。</p>
<h4 id="该步骤是把my-id发送给server"><a href="#该步骤是把my-id发送给server" class="headerlink" title="该步骤是把my_id发送给server."></a>该步骤是把my_id发送给server.</h4><p>当其他peer进行操作<strong>[1.连接服务器的时候其他peer就可以获取my_id;2.发送播流指令]</strong>XHR请求将成功响应,并且自己将执行hangingGetCallback。<br>如果请求超时的话将回调onHangingGetTimeout，其结果是重新执行startHangingGet</p>
<h2 id="执行hangingGetCallback"><a href="#执行hangingGetCallback" class="headerlink" title="执行hangingGetCallback"></a>执行hangingGetCallback</h2><p>正如刚刚说的，有两种情况，服务器将响应返回</p>
<h3 id="1-其他peer连接上server会返回peer的数据-peerName-peerID-xx-用于本地添加"><a href="#1-其他peer连接上server会返回peer的数据-peerName-peerID-xx-用于本地添加" class="headerlink" title="1.其他peer连接上server会返回peer的数据{peerName,peerID,xx};用于本地添加"></a>1.其他peer连接上server会返回peer的数据{peerName,peerID,xx};用于本地添加</h3><p>本地响应<code>handleServerNotification</code><br>log打印：</p>
<pre><code>handleServerNotification:zhengjx@X-CDN-zhengjx,4,1
Server notification: zhengjx@X-CDN-zhengjx,4,1</code></pre><h3 id="2-其他peer点击my-name-即发送-播流-请求-，返回-一个ice的候选或者offer"><a href="#2-其他peer点击my-name-即发送-播流-请求-，返回-一个ice的候选或者offer" class="headerlink" title="2.其他peer点击my_name(即发送 播流 请求)，返回 一个ice的候选或者offer"></a>2.其他peer点击my_name(即发送 播流 请求)，返回 一个ice的候选或者offer</h3><p>本地响应<code>handlePeerMessage</code></p>
<h2 id="这里我们直接分析peer发送播流请求"><a href="#这里我们直接分析peer发送播流请求" class="headerlink" title="这里我们直接分析peer发送播流请求"></a>这里我们直接分析peer发送播流请求</h2><h3 id="远端peer先发送了一个携带音视频信息sdp的offer"><a href="#远端peer先发送了一个携带音视频信息sdp的offer" class="headerlink" title="远端peer先发送了一个携带音视频信息sdp的offer"></a>远端peer先发送了一个携带音视频信息sdp的offer</h3><pre><code>handlePeerMessage:{
   &quot;sdp&quot; : &quot;v=0\r\no=- 1915807044938492152 2 IN IP4 127.0.0.1\r\ns=-\r\nt=0 0\r\na=group:BUNDLE audio video\r\na=msid-semantic: WMS stream_label\r\nm=audio 9 UDP/TLS/RTP/SAVPF 111 103 104 9 102 0 8 106 105 13 127 126\r\nc=IN IP4 0.0.0.0\r\na=rtcp:9 IN IP4 0.0.0.0\r\na=ice-ufrag:s+rj\r\na=ice-pwd:JZspr0P/+RWnF3WFF7H2njf+\r\na=fingerprint:sha-256 DC:1B:45:26:86:B0:51:E1:2C:84:F6:04:83:1F:13:87:5F:54:9D:9F:4C:8D:04:33:E3:2F:69:BC:69:23:51:D5\r\na=setup:actpass\r\na=mid:audio\r\na=extmap:1 urn:ietf:params:rtp-hdrext:ssrc-audio-level\r\na=extmap:3 http://www.webrtc.org/experiments/rtp-hdrext/abs-send-time\r\na=sendrecv\r\na=rtcp-mux\r\na=rtpmap:111 opus/48000/2\r\na=rtcp-fb:111 transport-cc\r\na=fmtp:111 minptime=10;useinbandfec=1\r\na=rtpmap:103 ISAC/16000\r\na=rtpmap:104 ISAC/32000\r\na=rtpmap:9 G722/8000\r\na=rtpmap:102 ILBC/8000\r\na=rtpmap:0 PCMU/8000\r\na=rtpmap:8 PCMA/8000\r\na=rtpmap:106 CN/32000\r\na=rtpmap:105 CN/16000\r\na=rtpmap:13 CN/8000\r\na=rtpmap:127 red/8000\r\na=rtpmap:126 telephone-event/8000\r\na=ssrc:1946889360 cname:oeS68Tdb4Ls6Qz2u\r\na=ssrc:1946889360 msid:stream_label audio_label\r\na=ssrc:1946889360 mslabel:stream_label\r\na=ssrc:1946889360 label:audio_label\r\nm=video 9 UDP/TLS/RTP/SAVPF 100 101 116 117 96 97 98\r\nc=IN IP4 0.0.0.0\r\na=rtcp:9 IN IP4 0.0.0.0\r\na=ice-ufrag:s+rj\r\na=ice-pwd:JZspr0P/+RWnF3WFF7H2njf+\r\na=fingerprint:sha-256 DC:1B:45:26:86:B0:51:E1:2C:84:F6:04:83:1F:13:87:5F:54:9D:9F:4C:8D:04:33:E3:2F:69:BC:69:23:51:D5\r\na=setup:actpass\r\na=mid:video\r\na=extmap:2 urn:ietf:params:rtp-hdrext:toffset\r\na=extmap:3 http://www.webrtc.org/experiments/rtp-hdrext/abs-send-time\r\na=extmap:4 urn:3gpp:video-orientation\r\na=sendrecv\r\na=rtcp-mux\r\na=rtcp-rsize\r\na=rtpmap:100 VP8/90000\r\na=rtcp-fb:100 ccm fir\r\na=rtcp-fb:100 nack\r\na=rtcp-fb:100 nack pli\r\na=rtcp-fb:100 goog-remb\r\na=rtcp-fb:100 transport-cc\r\na=rtpmap:101 VP9/90000\r\na=rtcp-fb:101 ccm fir\r\na=rtcp-fb:101 nack\r\na=rtcp-fb:101 nack pli\r\na=rtcp-fb:101 goog-remb\r\na=rtcp-fb:101 transport-cc\r\na=rtpmap:116 red/90000\r\na=rtpmap:117 ulpfec/90000\r\na=rtpmap:96 rtx/90000\r\na=fmtp:96 apt=100\r\na=rtpmap:97 rtx/90000\r\na=fmtp:97 apt=101\r\na=rtpmap:98 rtx/90000\r\na=fmtp:98 apt=116\r\na=ssrc-group:FID 1010645505 1298682012\r\na=ssrc:1010645505 cname:oeS68Tdb4Ls6Qz2u\r\na=ssrc:1010645505 msid:stream_label video_label\r\na=ssrc:1010645505 mslabel:stream_label\r\na=ssrc:1010645505 label:video_label\r\na=ssrc:1298682012 cname:oeS68Tdb4Ls6Qz2u\r\na=ssrc:1298682012 msid:stream_label video_label\r\na=ssrc:1298682012 mslabel:stream_label\r\na=ssrc:1298682012 label:video_label\r\n&quot;,
   &quot;type&quot; : &quot;offer&quot;
}</code></pre><h3 id="createPeerConnection，设定对方的sdp为传递过来的描述"><a href="#createPeerConnection，设定对方的sdp为传递过来的描述" class="headerlink" title="createPeerConnection，设定对方的sdp为传递过来的描述"></a>createPeerConnection，设定对方的sdp为传递过来的描述</h3><p>执行</p>
<pre><code>createPeerConnection(peer_id);
pc.setRemoteDescription(new RTCSessionDescription(dataJson));                                    pc.createAnswer(function(sessionDescription)  {
        var answerData = JSON.stringify(sessionDescription);
        console.log(&quot;answer:&quot; + answerData);
        trace(&quot;answer:&quot; + answerData);
        pc.setLocalDescription(sessionDescription);
        sendToPeer(peer_id, answerData);
                    }, function(error) {
                        console.log(&apos;Failure callback: &apos; + error);
                        trace(&apos;Failure callback: &apos; + error);
                    });</code></pre><p>创建PeerConnection实例 (参数为null则没有iceserver，即使没有stunserver和turnserver，仍可在局域网下通讯)<br>这里我们设置了<code>onicecandidate</code>：</p>
<pre><code>{&quot;iceServers&quot;:[{&quot;url&quot;:&quot;stun:stun.l.google.com:19302&quot;}]}</code></pre><p>通过执行sendToPeer函数发送ICE候选到其他客户端，该过程会慢于RTCPeerConnection.onaddstream。</p>
<p>当上面做的pc.setRemoteDescription成功执行时，pc.onaddstream将调用。<br>官网原话:</p>
<pre><code>RTCPeerConnection.onaddstream：
The event is sent immediately after the call RTCPeerConnection.setRemoteDescription() </code></pre><p>回复的answer sdp 如下：</p>
<pre><code>answer:{&quot;type&quot;:&quot;answer&quot;,&quot;sdp&quot;:&quot;v=0\r\no=- 681837714082552550 2 IN IP4 127.0.0.1\r\ns=-\r\nt=0 0\r\na=group:BUNDLE audio video\r\na=msid-semantic: WMS\r\nm=audio 9 UDP/TLS/RTP/SAVPF 111 103 104 9 0 8 106 105 13 126\r\nc=IN IP4 0.0.0.0\r\na=rtcp:9 IN IP4 0.0.0.0\r\na=ice-ufrag:XNSrC9DEJco2wMEV\r\na=ice-pwd:PhP5CUsS6P8wxnCZZa5aZ5nD\r\na=fingerprint:sha-256 F8:93:41:5C:50:E9:EF:11:66:0F:2F:64:F7:CE:C4:BB:C5:57:D8:3C:C3:04:19:27:33:B7:93:DE:58:9F:DF:74\r\na=setup:active\r\na=mid:audio\r\na=extmap:1 urn:ietf:params:rtp-hdrext:ssrc-audio-level\r\na=extmap:3 http://www.webrtc.org/experiments/rtp-hdrext/abs-send-time\r\na=recvonly\r\na=rtcp-mux\r\na=rtpmap:111 opus/48000/2\r\na=rtcp-fb:111 transport-cc\r\na=fmtp:111 minptime=10;useinbandfec=1\r\na=rtpmap:103 ISAC/16000\r\na=rtpmap:104 ISAC/32000\r\na=rtpmap:9 G722/8000\r\na=rtpmap:0 PCMU/8000\r\na=rtpmap:8 PCMA/8000\r\na=rtpmap:106 CN/32000\r\na=rtpmap:105 CN/16000\r\na=rtpmap:13 CN/8000\r\na=rtpmap:126 telephone-event/8000\r\na=maxptime:60\r\nm=video 9 UDP/TLS/RTP/SAVPF 100 101 116 117 96 97 98\r\nc=IN IP4 0.0.0.0\r\na=rtcp:9 IN IP4 0.0.0.0\r\na=ice-ufrag:XNSrC9DEJco2wMEV\r\na=ice-pwd:PhP5CUsS6P8wxnCZZa5aZ5nD\r\na=fingerprint:sha-256 F8:93:41:5C:50:E9:EF:11:66:0F:2F:64:F7:CE:C4:BB:C5:57:D8:3C:C3:04:19:27:33:B7:93:DE:58:9F:DF:74\r\na=setup:active\r\na=mid:video\r\na=extmap:2 urn:ietf:params:rtp-hdrext:toffset\r\na=extmap:3 http://www.webrtc.org/experiments/rtp-hdrext/abs-send-time\r\na=extmap:4 urn:3gpp:video-orientation\r\na=recvonly\r\na=rtcp-mux\r\na=rtcp-rsize\r\na=rtpmap:100 VP8/90000\r\na=rtcp-fb:100 ccm fir\r\na=rtcp-fb:100 nack\r\na=rtcp-fb:100 nack pli\r\na=rtcp-fb:100 goog-remb\r\na=rtcp-fb:100 transport-cc\r\na=rtpmap:101 VP9/90000\r\na=rtcp-fb:101 ccm fir\r\na=rtcp-fb:101 nack\r\na=rtcp-fb:101 nack pli\r\na=rtcp-fb:101 goog-remb\r\na=rtcp-fb:101 transport-cc\r\na=rtpmap:116 red/90000\r\na=rtpmap:117 ulpfec/90000\r\na=rtpmap:96 rtx/90000\r\na=fmtp:96 apt=100\r\na=rtpmap:97 rtx/90000\r\na=fmtp:97 apt=101\r\na=rtpmap:98 rtx/90000\r\na=fmtp:98 apt=116\r\n&quot;}</code></pre><h3 id="接下来的过程"><a href="#接下来的过程" class="headerlink" title="接下来的过程"></a>接下来的过程</h3><p>上一步提到的，本地发送ICE候选到其他客户端</p>
<pre><code>&quot; Send &quot; &quot;{&quot;sdpMLineIndex&quot;:0,&quot;sdpMid&quot;:&quot;audio&quot;,&quot;candidate&quot;:&quot;candidate:3604340130 1 udp 2122260223 192.168.216.1 50938 typ host generation 0 ufrag XNSrC9DEJco2wMEV network-id 4&quot;}&quot;</code></pre><p>该过程会执行多次，每次携带的candidate都不一致，直到打印<code>console.log(&quot;End of candidates.&quot;);</code><br>与此同时，本地通过handlePeerMessage获取到ICE的候选，并将其加入到PeerConnection中。<br>这样两端就都有各自的ICE候选了，那么就可以进行通信。</p>
<p>pc.onaddstream在前一步调用，那么接下来peer就应该开始传流。<br>本地通过handlePeerMessage获取的音视频数据部分如下</p>
<pre><code>handlePeerMessage:{
   &quot;candidate&quot; : &quot;candidate:2013099291 2 udp 2122194686 10.8.146.177 54148 typ host generation 0 ufrag s+rj network-id 3 network-cost 50&quot;,
   &quot;sdpMLineIndex&quot; : 0,
   &quot;sdpMid&quot; : &quot;audio&quot;
}

VM122 phone_frame.html:450 handlePeerMessage:{
   &quot;candidate&quot; : &quot;candidate:2719042630 1 udp 2122260223 172.27.35.1 54149 typ host generation 0 ufrag s+rj network-id 4 network-cost 50&quot;,
   &quot;sdpMLineIndex&quot; : 1,
   &quot;sdpMid&quot; : &quot;video&quot;
}</code></pre><p><strong>[注意之间建立了的candidate会在传输时用到，所以可以理解candidate是一种管道，我们创建了多个candidate就是多个管道，视音频数据就是通过这些管道来传输]</strong><br>当然，再具体的原理就不探讨了，涉及穿透等高深的知识= =。</p>
<p>由于研究未深，如有错误，烦请指正，谢谢。</p>
]]></content>
      <categories>
        <category>流媒体</category>
      </categories>
      <tags>
        <tag>WebRTC</tag>
        <tag>ffmpeg</tag>
      </tags>
  </entry>
  <entry>
    <title>WebSocket 与 WebRTC 直播方案对比分析</title>
    <url>/2016/08/24/2016-2017%E7%9B%B4%E6%92%AD%E7%9B%B8%E5%85%B3/WebSocket%E4%B8%8EWebRTC%E6%96%B9%E6%A1%88%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<h1 id="WebSocket"><a href="#WebSocket" class="headerlink" title="WebSocket"></a>WebSocket</h1><h2 id="同步"><a href="#同步" class="headerlink" title="同步"></a>同步</h2><p>首先说同步策略</p>
<a id="more"></a>

<h3 id="采用RTMP协议"><a href="#采用RTMP协议" class="headerlink" title="采用RTMP协议"></a>采用RTMP协议</h3><p>需要了解RTMP的协议，将音视频流(H264/SPEEX)构造成RTMP包，通过WebSocket发送到客户端<br>这样的话，开发成本大，需要搭建一台用于发送RTMP包的WebSocket服务器而不是普通的RTMP服务器<br>这东西网上基本没人做，搜到了一个别人做的demo，但是没有文档，实在难以研究,且不知性能如何</p>
<p>参考：<a href="http://my.oschina.net/langhuihui/blog" target="_blank" rel="noopener">http://my.oschina.net/langhuihui/blog</a></p>
<h3 id="开两个WebSocket"><a href="#开两个WebSocket" class="headerlink" title="开两个WebSocket"></a>开两个WebSocket</h3><p>我自己写的，从服务器端同时发送音视频流，由于音频方面我没做编解码直接推的PCM可能数据量较大，<br>视频的话采用jsmpeg解码然后通过canvas绘制</p>
<p>这样的话没有做同步。</p>
<p>可以参考我上次发的fiiser技术研究：</p>
<p>同步：每5s发送一个同步指令给客户端进行同步(具体细节我就不懂了)</p>
<p>编解码:BroadwayJS+SpeexJS 大概做法和我差不多 就是编解码的效率问题了</p>
<h2 id="解码-软解码"><a href="#解码-软解码" class="headerlink" title="解码-软解码"></a>解码-软解码</h2><p>如果是采用RTMP同步，客户端还要去写JS解协议包(这方面不懂，资料也比较少)</p>
<p>然后一般都是利用BroadwayJS+SpeexJS来解码，这两个是利用Emscripten把原生代码编译成JS，比普通JS效率高</p>
<h2 id="渲染"><a href="#渲染" class="headerlink" title="渲染"></a>渲染</h2><p>Canvas+AudioContext </p>
<h2 id="支持情况"><a href="#支持情况" class="headerlink" title="支持情况"></a>支持情况</h2><p>除IE外，其他大部分PC/Mobile浏览器(有的可能需要较新版本)都支持上述技术</p>
<h2 id="延迟及卡顿情况"><a href="#延迟及卡顿情况" class="headerlink" title="延迟及卡顿情况"></a>延迟及卡顿情况</h2><p>局域网内，我的方案基本没有延迟(200ms以内)和卡顿</p>
<h2 id="开发成本"><a href="#开发成本" class="headerlink" title="开发成本"></a>开发成本</h2><p>首先同步本身不好做，还有编解码这块，需要编译上述两个解码库然后找下文档看怎么用，然后服务端还得构造相应编码的流来测试。</p>
<p>想做好一套解决方案一个人基本搞不定</p>
<h1 id="WebRTC"><a href="#WebRTC" class="headerlink" title="WebRTC"></a>WebRTC</h1><h2 id="同步及渲染"><a href="#同步及渲染" class="headerlink" title="同步及渲染"></a>同步及渲染</h2><p>浏览器端已经做好同步策略，绑定<code>&lt;video&gt;</code>标签进行渲染</p>
<h2 id="解码-硬解码"><a href="#解码-硬解码" class="headerlink" title="解码-硬解码"></a>解码-硬解码</h2><h2 id="支持情况-1"><a href="#支持情况-1" class="headerlink" title="支持情况"></a>支持情况</h2><ul>
<li>PC:Chrome29和火狐47以上支持，Opera 39以上支持，IE内核的浏览器、Edge、Safari不支持</li>
<li>Mobile：Chrome for Android ，firefox for Android支持<br>Android WebView(5.0以上支持，4.4部分手机(samsung htc等)支持)，手机自带浏览器(4.4以上部分厂商支持)<br>QQ/UC/百度浏览器 正在测试，<br>WP手机不支持(可以考虑后面兼容ORTC)</li>
</ul>
<p>参考 <a href="http://www.tutorialspoint.com/webrtc/webrtc_mobile_support.htm" target="_blank" rel="noopener">http://www.tutorialspoint.com/webrtc/webrtc_mobile_support.htm</a> 并做了下验证</p>
<h3 id="Question-苹果用户怎么使用"><a href="#Question-苹果用户怎么使用" class="headerlink" title="Question:苹果用户怎么使用"></a>Question:苹果用户怎么使用</h3><p>苹果官方15年底声称Safari接下来会支持，有望在近两年得到使用</p>
<p>如果苹果用户想使用，可以下载 Bowser(<a href="http://www.openwebrtc.org/bowser/" target="_blank" rel="noopener">http://www.openwebrtc.org/bowser/</a>) 或者Chrome</p>
]]></content>
      <categories>
        <category>流媒体</category>
      </categories>
      <tags>
        <tag>WebRTC</tag>
        <tag>ffmpeg</tag>
      </tags>
  </entry>
  <entry>
    <title>video标签下触摸坐标归一化</title>
    <url>/2016/08/24/2016-2017%E7%9B%B4%E6%92%AD%E7%9B%B8%E5%85%B3/Web_video%E6%A0%87%E7%AD%BE%E4%B8%8B%E8%A7%A6%E6%91%B8%E5%9D%90%E6%A0%87%E5%BD%92%E4%B8%80%E5%8C%96/</url>
    <content><![CDATA[<h1 id="基本知识"><a href="#基本知识" class="headerlink" title="基本知识"></a>基本知识</h1><h2 id="触摸点位置"><a href="#触摸点位置" class="headerlink" title="触摸点位置"></a>触摸点位置</h2><ul>
<li>clientX / clientY：// 触摸点相对于浏览器窗口viewport的位置  参照点会随着浏览器的滚动而变化</li>
<li>pageX / pageY：// 触摸点相对于页面的位置  参照点不会随着浏览器的滚动而变化</li>
<li>screenX /screenY：// 触摸点相对于屏幕的位置 </li>
</ul>
<p>所以如果要算鼠标在当前div的相对位置 </p>
<p>通过获取<code>var offset = $(&quot;#mainScreen&quot;).offset();</code>后</p>
<p>当前鼠标的绝对位置要用 <strong><code>pageX/Y</code></strong> 去拿 否则浏览器页面滚动后会少算一段</p>
<h2 id="触摸事件"><a href="#触摸事件" class="headerlink" title="触摸事件"></a>触摸事件</h2><h3 id="PC"><a href="#PC" class="headerlink" title="PC"></a>PC</h3><pre><code>onmousemove    script    当鼠标指针移动到元素上时触发。
onmouseout    script    当鼠标指针移出元素时触发。
onmouseup 属性在松开鼠标按钮时触发。
提示：相对于 onmouseup 事件的事件次序（限于鼠标左/中键）：
onmousedown
onmouseup
onclick
onmouseup 事件的事件次序（限于鼠标右键）：
onmousedown
onmouseup
oncontextmenu
onMouseover和onMousemove有什么区别?
区别是进入后onmousemove鼠标每动一下都会执行事件，onmouseover只在鼠标进入时执行一次</code></pre><h3 id="Mobile"><a href="#Mobile" class="headerlink" title="Mobile"></a>Mobile</h3><p>基本事件如下，其他的都是对这些事件的组合封装</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">mainScreen.addEventListener(<span class="string">"touchmove"</span>, touchMove, <span class="literal">false</span>);<span class="comment">//手指在屏幕上移动时触发[不动但停留太久也会触发]</span></span><br><span class="line">mainScreen.addEventListener(<span class="string">"touchstart"</span>, touchStart, <span class="literal">false</span>);<span class="comment">//手指一触摸屏幕就触发</span></span><br><span class="line">mainScreen.addEventListener(<span class="string">"touchend"</span>, touchEnd, <span class="literal">false</span>);<span class="comment">//手指离开屏幕触发</span></span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h2 id="全屏"><a href="#全屏" class="headerlink" title="全屏"></a>全屏</h2><h3 id="进入全屏"><a href="#进入全屏" class="headerlink" title="进入全屏"></a>进入全屏</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">launchFullScreen</span> (<span class="params">element</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (element.requestFullscreen) &#123;</span><br><span class="line">    element.requestFullscreen();</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (element.mozRequestFullScreen) &#123;</span><br><span class="line">    element.mozRequestFullScreen();</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (element.webkitRequestFullscreen) &#123;</span><br><span class="line">    element.webkitRequestFullscreen();</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (element.msRequestFullscreen) &#123;</span><br><span class="line">    element.msRequestFullscreen();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="退出全屏"><a href="#退出全屏" class="headerlink" title="退出全屏"></a>退出全屏</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">cancelFullScreen</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">document</span>.cancelFullScreen) &#123;</span><br><span class="line">    <span class="built_in">document</span>.cancelFullScreen();</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">document</span>.mozCancelFullScreen) &#123;</span><br><span class="line">    <span class="built_in">document</span>.mozCancelFullScreen();</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">document</span>.webkitCancelFullScreen) &#123;</span><br><span class="line">    <span class="built_in">document</span>.webkitCancelFullScreen();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="判断是否全屏"><a href="#判断是否全屏" class="headerlink" title="判断是否全屏"></a>判断是否全屏</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//反射調用</span></span><br><span class="line"><span class="keyword">var</span> invokeFieldOrMethod = <span class="function"><span class="keyword">function</span> (<span class="params">element, method</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> usablePrefixMethod;</span><br><span class="line">  [<span class="string">"webkit"</span>, <span class="string">"moz"</span>, <span class="string">"ms"</span>, <span class="string">"o"</span>, <span class="string">""</span>].forEach(<span class="function"><span class="keyword">function</span> (<span class="params">prefix</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (usablePrefixMethod) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span> (prefix === <span class="string">""</span>) &#123;</span><br><span class="line">      <span class="comment">// 无前缀，方法首字母小写</span></span><br><span class="line">      method = method.slice(<span class="number">0</span>, <span class="number">1</span>).toLowerCase() + method.slice(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> typePrefixMethod = <span class="keyword">typeof</span> element[prefix + method];</span><br><span class="line">    <span class="keyword">if</span> (typePrefixMethod + <span class="string">""</span> !== <span class="string">"undefined"</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (typePrefixMethod === <span class="string">"function"</span>) &#123;</span><br><span class="line">        usablePrefixMethod = element[prefix + method]();</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        usablePrefixMethod = element[prefix + method];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> usablePrefixMethod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判断是否是全屏</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isFullScreen</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> invokeFieldOrMethod(<span class="built_in">document</span>, <span class="string">'FullScreen'</span>) || invokeFieldOrMethod(<span class="built_in">document</span>, <span class="string">'IsFullScreen'</span>) || <span class="built_in">document</span>.IsFullScreen;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="监听手机横竖屏状态"><a href="#监听手机横竖屏状态" class="headerlink" title="监听手机横竖屏状态"></a>监听手机横竖屏状态</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> mOrientation = <span class="number">0</span>;</span><br><span class="line">$(<span class="built_in">window</span>).on(<span class="string">"orientationchange"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  mOrientation = <span class="built_in">window</span>.orientation;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">window</span>.orientation == <span class="number">0</span>) <span class="comment">// Portrait</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"竖屏状态"</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="comment">// Landscape</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"横屏状态"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="竖屏0-横屏-90（正常横放）-90-（手机顶部在右侧）"><a href="#竖屏0-横屏-90（正常横放）-90-（手机顶部在右侧）" class="headerlink" title="竖屏0 横屏 90（正常横放） -90 （手机顶部在右侧）"></a>竖屏0 横屏 90（正常横放） -90 （手机顶部在右侧）</h3><h2 id="CSS3旋转元素"><a href="#CSS3旋转元素" class="headerlink" title="CSS3旋转元素"></a>CSS3旋转元素</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.trans90</span> &#123;</span><br><span class="line">  <span class="comment">/* Rotate div */</span></span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">9deg</span>);</span><br><span class="line">  <span class="attribute">-ms-transform</span>: <span class="built_in">rotate</span>(<span class="number">90deg</span>);</span><br><span class="line">  <span class="comment">/* Internet Explorer */</span></span><br><span class="line">  <span class="attribute">-moz-transform</span>: <span class="built_in">rotate</span>(<span class="number">90deg</span>);</span><br><span class="line">  <span class="comment">/* Firefox */</span></span><br><span class="line">  <span class="attribute">-webkit-transform</span>: <span class="built_in">rotate</span>(<span class="number">90deg</span>);</span><br><span class="line">  <span class="comment">/* Safari 和 Chrome */</span></span><br><span class="line">  <span class="attribute">-o-transform</span>: <span class="built_in">rotate</span>(<span class="number">90deg</span>);</span><br><span class="line">  <span class="comment">/* Opera */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">transfVideo</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  $(<span class="string">"#remoteVideo"</span>).addClass(<span class="string">"trans90"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="注意：全屏状态下元素的旋转效果无效"><a href="#注意：全屏状态下元素的旋转效果无效" class="headerlink" title="注意：全屏状态下元素的旋转效果无效"></a>注意：全屏状态下元素的旋转效果无效</h3><h2 id="video元素"><a href="#video元素" class="headerlink" title="video元素"></a>video元素</h2><pre><code>&lt;video id=&quot;remoteVideo&quot; autoplay width=&quot;100%&quot; height=&quot;100%&quot;&gt;
    &lt;p&gt;您的浏览器不支持该标签&lt;/p&gt;
&lt;/video&gt;</code></pre><h3 id="属性详解"><a href="#属性详解" class="headerlink" title="属性详解"></a>属性详解</h3><ul>
<li><strong>autoplay</strong> ：自动播放</li>
<li><strong>width=”100%” height=”100%”</strong> ：设置元素的宽高，<strong><code>非源数据的宽高</code></strong></li>
</ul>
<p>不指定controls 属性，则不会显示默认的播放，进度条等样式,但是全屏时又会显示，怎么去掉？</p>
<p>参考<a href="https://segmentfault.com/a/1190000000380064" target="_blank" rel="noopener">https://segmentfault.com/a/1190000000380064</a></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*伪元素，设置全屏时不显示控件*/</span></span><br><span class="line"><span class="selector-tag">video</span><span class="selector-pseudo">::-webkit-media-controls-enclosure</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">video</span><span class="selector-pseudo">::-moz-media-controls-enclosure</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">video</span><span class="selector-pseudo">::media-controls-enclosure</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><strong><code>videoWidth,videoHeight属性</code></strong>:指的是视频源数据，不会改变，也不能修改。</li>
<li><strong><code>width,height属性</code></strong>：video容器大小，当其值设置的与视频源数据不同时，会将视频源数据进行一定比例(videoWidth,videoHeight的比例)的缩放，<strong>使得视频数据尽量充满video容器</strong></li>
</ul>
<h2 id="body在移动端显示时左侧会留出一定宽度的竖条，设置100-页没有用"><a href="#body在移动端显示时左侧会留出一定宽度的竖条，设置100-页没有用" class="headerlink" title="body在移动端显示时左侧会留出一定宽度的竖条，设置100%页没有用"></a>body在移动端显示时左侧会留出一定宽度的竖条，设置100%页没有用</h2><p>移动端会留与滚动条有关，改margin就行</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: white;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="Touch事件捕获"><a href="#Touch事件捕获" class="headerlink" title="Touch事件捕获"></a>Touch事件捕获</h1><h2 id="基本方法"><a href="#基本方法" class="headerlink" title="基本方法"></a>基本方法</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">touchMove</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">  event.preventDefault();</span><br><span class="line">  <span class="keyword">if</span>(!event.touches.length) <span class="keyword">return</span>;</span><br><span class="line">  <span class="keyword">var</span> touch = event.touches[<span class="number">0</span>];</span><br><span class="line">  sendTouchEvent(touch, <span class="string">"TOUCH_MOVE"</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">touchStart</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">  event.preventDefault();</span><br><span class="line">  <span class="keyword">if</span>(!event.touches.length) <span class="keyword">return</span>;</span><br><span class="line">  <span class="keyword">var</span> touch = event.touches[<span class="number">0</span>];</span><br><span class="line">  sendTouchEvent(touch, <span class="string">"TOUCH_START"</span>);</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">touchEnd</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"type:end"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">mainScreen.addEventListener(<span class="string">"touchmove"</span>, touchMove, <span class="literal">false</span>);</span><br><span class="line">mainScreen.addEventListener(<span class="string">"touchstart"</span>, touchStart, <span class="literal">false</span>);</span><br><span class="line">mainScreen.addEventListener(<span class="string">"touchend"</span>, touchEnd, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure>
<h2 id="屏幕分辨率"><a href="#屏幕分辨率" class="headerlink" title="屏幕分辨率"></a>屏幕分辨率</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">" 屏幕分辨率的高："</span> + <span class="built_in">window</span>.screen.height + <span class="string">"\n"</span> + <span class="string">" 屏幕分辨率的宽："</span> + <span class="built_in">window</span>.screen.width + <span class="string">"\n"</span>)</span><br></pre></td></tr></table></figure>

<h3 id="横屏下-window-screen-width-得到的-手机的高度的那个分辨率而不是宽度"><a href="#横屏下-window-screen-width-得到的-手机的高度的那个分辨率而不是宽度" class="headerlink" title="横屏下 window.screen.width 得到的 手机的高度的那个分辨率而不是宽度"></a>横屏下 <code>window.screen.width</code> 得到的 手机的高度的那个分辨率而不是宽度</h3><h2 id="发送touch事件方法——sendTouchEvent"><a href="#发送touch事件方法——sendTouchEvent" class="headerlink" title="发送touch事件方法——sendTouchEvent"></a>发送touch事件方法——sendTouchEvent</h2><p>如果要考虑完全的话，需要考虑12种情况</p>
<p>3种屏幕方向*是否全屏2种情况*源数据横竖屏情况(宽高比)2种情况=12</p>
<h3 id="为什么考虑源数据横竖屏情况？"><a href="#为什么考虑源数据横竖屏情况？" class="headerlink" title="为什么考虑源数据横竖屏情况？"></a>为什么考虑源数据横竖屏情况？</h3><p>进行坐标映射、归一化的时候你就知道了</p>
<p>是否全屏下，video都要自动充满屏幕(videoWidth:videoHeight不变)</p>
<p>其video容器的宽度要保持和window.screen.width一致</p>
<p>代码如下 目前只考虑<code>以下6种情况</code>，其他情况为非法操作</p>
<ol>
<li><p>竖屏*是否全屏(2种)*源数据横竖屏(2种)</p>
</li>
<li><p>横屏(90和-90两种情况)*全屏*源数据横屏</p>
</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sendTouchEvent</span> (<span class="params">touch, eventType</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//videoWidth、videoHeight、width和height的大小切屏不会改变大小</span></span><br><span class="line">  <span class="comment">//暂不考虑非全屏时横屏坐标 0 90（正常横放） -90 （机顶在右侧）</span></span><br><span class="line">  <span class="comment">//全屏模式下 touch.pageX/Y 不用参考offset</span></span><br><span class="line">  trace(mOrientation);</span><br><span class="line">  <span class="keyword">var</span> remoteVideo = <span class="built_in">document</span>.getElementById(<span class="string">"remoteVideo"</span>);</span><br><span class="line">  <span class="comment">//暂不考虑videoWidth&gt;videoHeight时mOrientation == 0的全屏情况</span></span><br><span class="line">  <span class="keyword">if</span> (mOrientation == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> currentWidth = remoteVideo.width;</span><br><span class="line">    <span class="keyword">var</span> currentHeight = (remoteVideo.width / remoteVideo.videoWidth * remoteVideo.videoHeight);</span><br><span class="line">    <span class="comment">//						trace("当前总宽度" + currentWidth + "当前总高度:" + currentHeight);</span></span><br><span class="line">    <span class="keyword">var</span> relativeX = (touch.pageX - offset.left);</span><br><span class="line">    <span class="keyword">var</span> relativeY = (touch.pageY - offset.top);</span><br><span class="line">    <span class="comment">//判断是否为全屏 全屏下位置为 touch.pageY-(window.screen.height-currentWidth)/2</span></span><br><span class="line">    <span class="keyword">var</span> posX = relativeX;</span><br><span class="line">    <span class="keyword">if</span> (isFullScreen()) &#123;</span><br><span class="line">      <span class="comment">//全屏情况下要考虑videoWidth&gt;videoHeigh</span></span><br><span class="line">      <span class="keyword">if</span> (remoteVideo.videoWidth &lt;= remoteVideo.videoHeight) &#123;</span><br><span class="line">        <span class="comment">//console.log("touch.pageY:"+touch.pageY+" window.screen.height:"+window.screen.height+" remoteVideo.videoHeight:"+remoteVideo.videoHeight+" relativeY:"+relativeY);</span></span><br><span class="line">        <span class="keyword">var</span> posY = (touch.pageY - (<span class="built_in">window</span>.screen.height - currentHeight) / <span class="number">2</span>);</span><br><span class="line">        <span class="comment">//console.log("x:" + relativeX + " y:" + posY+ " type:"+eventType+" full");</span></span><br><span class="line">        <span class="keyword">var</span> floatX = posX &lt; <span class="number">0</span> ? <span class="number">0</span> : (posX &gt; currentWidth ? <span class="number">1</span> : posX / currentWidth);</span><br><span class="line">        <span class="keyword">var</span> floatY = posY &lt; <span class="number">0</span> ? <span class="number">0</span> : (posY &gt; currentHeight ? <span class="number">1</span> : posY / currentHeight);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"发送结果：横坐标："</span> + floatX + <span class="string">" 纵坐标"</span> + floatY + <span class="string">"类型:"</span> + eventType);</span><br><span class="line">        trace(<span class="string">"发送结果：横坐标："</span> + floatX + <span class="string">" 纵坐标"</span> + floatY + <span class="string">"类型:"</span> + eventType);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> posY = relativeX;</span><br><span class="line">        <span class="keyword">var</span> posX = currentHeight - (touch.pageY - (<span class="built_in">window</span>.screen.height - currentHeight) / <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">var</span> floatX = posX &lt; <span class="number">0</span> ? <span class="number">0</span> : (posX &gt; currentHeight ? <span class="number">1</span> : posX / currentHeight);</span><br><span class="line">        <span class="keyword">var</span> floatY = posY &lt; <span class="number">0</span> ? <span class="number">0</span> : (posY &gt; currentWidth ? <span class="number">1</span> : posY / currentWidth);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"发送结果：横坐标："</span> + floatX + <span class="string">" 纵坐标"</span> + floatY + <span class="string">"类型:"</span> + eventType);</span><br><span class="line">        trace(<span class="string">"发送结果：横坐标："</span> + floatX + <span class="string">" 纵坐标"</span> + floatY + <span class="string">"类型:"</span> + eventType);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">//console.log("x:" + relativeX + " y:" + relativeY + " type:"+eventType+" nofull");</span></span><br><span class="line">      <span class="keyword">if</span> (remoteVideo.videoWidth &lt;= remoteVideo.videoHeight) &#123;</span><br><span class="line">        <span class="keyword">var</span> posY = relativeY;</span><br><span class="line">        <span class="keyword">var</span> floatX = posX &lt; <span class="number">0</span> ? <span class="number">0</span> : (posX &gt; currentWidth ? <span class="number">1</span> : posX / currentWidth);</span><br><span class="line">        <span class="keyword">var</span> floatY = posY &lt; <span class="number">0</span> ? <span class="number">0</span> : (posY &gt; currentHeight ? <span class="number">1</span> : posY / currentHeight);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"发送结果：横坐标："</span> + floatX + <span class="string">" 纵坐标"</span> + floatY + <span class="string">"类型:"</span> + eventType);</span><br><span class="line">        trace(<span class="string">"发送结果：横坐标："</span> + floatX + <span class="string">" 纵坐标"</span> + floatY + <span class="string">"类型:"</span> + eventType);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> posY = relativeX;</span><br><span class="line">        <span class="keyword">var</span> posX = currentHeight - relativeY;</span><br><span class="line">        <span class="keyword">var</span> floatX = posX &lt; <span class="number">0</span> ? <span class="number">0</span> : (posX &gt; currentHeight ? <span class="number">1</span> : posX / currentHeight);</span><br><span class="line">        <span class="keyword">var</span> floatY = posY &lt; <span class="number">0</span> ? <span class="number">0</span> : (posY &gt; currentWidth ? <span class="number">1</span> : posY / currentWidth);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"发送结果：横坐标："</span> + floatX + <span class="string">" 纵坐标"</span> + floatY + <span class="string">"类型:"</span> + eventType);</span><br><span class="line">        trace(<span class="string">"发送结果：横坐标："</span> + floatX + <span class="string">" 纵坐标"</span> + floatY + <span class="string">"类型:"</span> + eventType);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (mOrientation == <span class="number">90</span>) &#123;</span><br><span class="line">    <span class="comment">//目前只考虑全屏的情况</span></span><br><span class="line">    <span class="comment">//width和height说法还是和手机保持一致 不受影响</span></span><br><span class="line">    <span class="comment">//videoWidth、videoHeight、width和height的大小与横屏时保持一致 640 480</span></span><br><span class="line">    <span class="keyword">var</span> currentWidth = remoteVideo.width;</span><br><span class="line">    <span class="keyword">var</span> currentHeight = (remoteVideo.videoWidth / remoteVideo.videoHeight) * remoteVideo.width;</span><br><span class="line">    <span class="comment">//						trace("当前总宽度" + currentWidth + "当前总高度:" + currentHeight);//360 480</span></span><br><span class="line">    <span class="comment">//						trace("touch.pageX:"+touch.pageX+" touch.pageY:"+touch.pageY);</span></span><br><span class="line">    <span class="keyword">var</span> posX = currentWidth - touch.pageY;</span><br><span class="line">    <span class="comment">//横屏下 window.screen.width得到的 手机的高度的那个分辨率而不是宽度</span></span><br><span class="line">    <span class="keyword">var</span> posY = touch.pageX - (<span class="built_in">window</span>.screen.width - currentHeight) / <span class="number">2</span>;</span><br><span class="line">    <span class="comment">//还得考虑videoHeight&gt;videoWidth，非全屏的情况 这边不写了</span></span><br><span class="line">    <span class="keyword">if</span> (isFullScreen()) &#123;</span><br><span class="line">      <span class="comment">//							trace("posX:"+posX+" posY"+posY);</span></span><br><span class="line">      <span class="comment">//							trace("touch.pageX:"+touch.pageX+" window.screen.width:"+window.screen.width+" currentHeight:"+currentHeight);</span></span><br><span class="line">      <span class="keyword">var</span> floatX = posX &lt; <span class="number">0</span> ? <span class="number">0</span> : (posX &gt; currentWidth ? <span class="number">1</span> : posX / currentWidth);</span><br><span class="line">      <span class="keyword">var</span> floatY = posY &lt; <span class="number">0</span> ? <span class="number">0</span> : (posY &gt; currentHeight ? <span class="number">1</span> : posY / currentHeight);</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"发送结果：横坐标："</span> + floatX + <span class="string">" 纵坐标"</span> + floatY + <span class="string">"类型:"</span> + eventType);</span><br><span class="line">      trace(<span class="string">"发送结果：横坐标："</span> + floatX + <span class="string">" 纵坐标"</span> + floatY + <span class="string">"类型:"</span> + eventType);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (mOrientation == <span class="number">-90</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> currentWidth = remoteVideo.width;</span><br><span class="line">    <span class="keyword">var</span> currentHeight = (remoteVideo.videoWidth / remoteVideo.videoHeight) * remoteVideo.width;</span><br><span class="line">    <span class="keyword">var</span> posX = currentWidth - touch.pageY;</span><br><span class="line">    <span class="comment">//需要window.screen.width去减</span></span><br><span class="line">    <span class="keyword">var</span> posY = touch.pageX - (<span class="built_in">window</span>.screen.width - currentHeight) / <span class="number">2</span>;</span><br><span class="line">    <span class="comment">//还得考虑videoHeight&gt;videoWidth的情况 这边不写了</span></span><br><span class="line">    <span class="keyword">if</span> (isFullScreen()) &#123;</span><br><span class="line">      <span class="comment">//							trace("posX:"+posX+" posY"+posY);</span></span><br><span class="line">      <span class="comment">//							trace("touch.pageX:"+touch.pageX+" window.screen.width:"+window.screen.width+" currentHeight:"+currentHeight);</span></span><br><span class="line">      <span class="keyword">var</span> floatX = posX &lt; <span class="number">0</span> ? <span class="number">0</span> : (posX &gt; currentWidth ? <span class="number">1</span> : posX / currentWidth);</span><br><span class="line">      <span class="keyword">var</span> floatY = posY &lt; <span class="number">0</span> ? <span class="number">0</span> : (posY &gt; currentHeight ? <span class="number">1</span> : posY / currentHeight);</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"发送结果：横坐标："</span> + floatX + <span class="string">" 纵坐标"</span> + floatY + <span class="string">"类型:"</span> + eventType);</span><br><span class="line">      trace(<span class="string">"发送结果：横坐标："</span> + floatX + <span class="string">" 纵坐标"</span> + floatY + <span class="string">"类型:"</span> + eventType);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>大前端</category>
      </categories>
      <tags>
        <tag>HTML</tag>
        <tag>多点触控</tag>
      </tags>
  </entry>
  <entry>
    <title>流媒体直播——资料整理、你想要了解的都在这</title>
    <url>/2016/08/24/2016-2017%E7%9B%B4%E6%92%AD%E7%9B%B8%E5%85%B3/%E6%B5%81%E5%AA%92%E4%BD%93%E7%9B%B4%E6%92%AD%E2%80%94%E2%80%94%E8%B5%84%E6%96%99%E6%95%B4%E7%90%86/</url>
    <content><![CDATA[<p>并没有按照某种标准进行分类。</p>
<p>感兴趣的可以将其作为chrome书签=。=</p>
<p>【文末附上Bookmarks Json】</p>
<a id="more"></a>

<h1 id="WebRTC"><a href="#WebRTC" class="headerlink" title="WebRTC"></a>WebRTC</h1><ol>
<li><a href="https://imququ.com/post/html5-live-player-3.html" target="_blank" rel="noopener">HTML5 视频直播（三） | JerryQu 的小站</a><br>从这边开始了解的WebRTC,里面推荐的文章都可以去读读，后面书签可能不会提到。</li>
<li><a href="https://github.com/LingyuCoder/SkyRTC-demo" target="_blank" rel="noopener">LingyuCoder/SkyRTC-demo: A simple demo used SkyRTC</a><br>别人做的一套WebRTC系统，支持音视频，房间，文件传输，在线聊天，了解WebRTC后其实发现也没有什么技术难点</li>
<li><a href="http://webrtc.org.cn/" target="_blank" rel="noopener">WebRTC中文网-最权威的RTC实时通信平台</a><br>说是权威的中文网，其实里面讲的算是比较简单的东西，而且基本没有native的文章。一般文章都是老外的翻译，有时间可以上去看看，虽然一般是简单的 但是说不定有收获呢。</li>
<li><a href="http://www.html5rocks.com/en/tutorials/webrtc/basics/" target="_blank" rel="noopener">Getting Started with WebRTC - HTML5 Rocks</a><br>看标题就知道了，入门必备，不过是英文的！1.中提到的推荐文章里面有这个</li>
<li><a href="https://webrtc.org/" target="_blank" rel="noopener">WebRTC Home | WebRTC</a><br>官网</li>
<li><a href="https://bloggeek.me/" target="_blank" rel="noopener">BlogGeek.me • The leading authority on WebRTC【老外博客】</a><br>有关WebRTC的，资料会比较新。</li>
<li><a href="https://w3c.github.io/mediacapture-main/getusermedia.html" target="_blank" rel="noopener">Media Capture and Streams</a><br>讲解一些更具体的API参数以及用法，收益不大，API使用其他文章都可以学到</li>
<li><a href="http://www.blogjava.net/linli/archive/2014/10/21/418910.html" target="_blank" rel="noopener">最简单的WebRTC示例 - 不急不徐，持之以恒。 - BlogJava</a><br>demo,作为快速测试</li>
<li><a href="http://www.cnblogs.com/fangkm/category/670346.html" target="_blank" rel="noopener">WebRTC模块分析博客</a><br>native版，写的不错，做native开发的值得看</li>
<li><a href="https://github.com/muaz-khan/WebRTC-Experiment" target="_blank" rel="noopener">WebRTC源码及项目</a></li>
<li><a href="https://tools.ietf.org/html/draft-alvestrand-constraints-resolution-00#page-6" target="_blank" rel="noopener">接收音视频流的参数设置</a></li>
<li><a href="http://res.imtt.qq.com/qqbrowser_x5/h5/v8.0/h5_support.htm" target="_blank" rel="noopener">qq浏览器对h5的支持程度How well does x5 browser support HTML5?</a></li>
<li><a href="https://github.com/webrtc/samples" target="_blank" rel="noopener">WebRTC 浏览器端demo包括样式 流记录之类的</a><br>备着，以后应该会用到。</li>
<li><a href="http://www.tutorialspoint.com/webrtc/webrtc_mobile_support.htm" target="_blank" rel="noopener">WebRTC Mobile 支持程度</a><br>可以看下</li>
<li><a href="https://github.com/GoogleChrome/chromium-webview-samples" target="_blank" rel="noopener">WebRTC 在WebView的使用，全屏，触摸事件</a></li>
<li><a href="http://blog.csdn.net/nonmarking/article/details/46785197" target="_blank" rel="noopener">windows下webrtc的编译 2016 - 张晖 - 博客频道 - CSDN.NET</a></li>
</ol>
<h2 id="native-2-browser"><a href="#native-2-browser" class="headerlink" title="native 2 browser"></a><strong>native 2 browser</strong></h2><ol>
<li><a href="http://stackoverflow.com/questions/17552333/is-it-possible-to-use-webrtc-to-streaming-video-from-server-to-client" target="_blank" rel="noopener">Is it possible to use WebRTC to streaming video from Server to Client? - Stack Overflow</a><br>可以看下讨论</li>
<li><a href="https://groups.google.com/forum/#!msg/discuss-webrtc/Pdas21qohck/CCRZTxPx5esJ" target="_blank" rel="noopener">WebRTC Native c++ to web demo </a><br>看讨论成功借鉴</li>
<li><a href="http://sourcey.com/webrtc-native-to-browser-video-streaming-example/" target="_blank" rel="noopener">WebRTC Native C++ to Browser</a><br>还未看代码，因为自己实现了</li>
</ol>
<!--more-->


<h1 id="RTMP"><a href="#RTMP" class="headerlink" title="RTMP"></a>RTMP</h1><ol>
<li><a href="http://blog.csdn.net/leixiaohua1020/article/details/15814587" target="_blank" rel="noopener">[总结]RTMP流媒体技术零基础学习方法 [写的不错！]</a><br>雷神出品。这里说下题外话，感谢雷神对流媒体做出的贡献，愿天堂没有代码..</li>
<li><a href="http://www.wowza.com/resources/3.5.0/examples/LiveVideoStreaming/FlashRTMPPlayer/player.html" target="_blank" rel="noopener">rtmp在线测试播放wowza</a><br>RTMP流测试播放，随时可用。</li>
</ol>
<h1 id="ijkplayer-bilibili开源项目"><a href="#ijkplayer-bilibili开源项目" class="headerlink" title="ijkplayer[bilibili开源项目]"></a>ijkplayer[bilibili开源项目]</h1><ol>
<li>issue讨论，基本是关于延迟问题<br><a href="https://github.com/Bilibili/ijkplayer/issues/1233" target="_blank" rel="noopener">Help with Buffering Settings · Issue #1233 · Bilibili/ijkplayer</a><br><a href="https://github.com/Bilibili/ijkplayer/blob/master/ijkmedia/ijkplayer/ff_ffplay_options.h#L114" target="_blank" rel="noopener">ijkplayer/ff_ffplay_options.h at master · Bilibili/ijkplayer</a><br><a href="https://github.com/Bilibili/ijkplayer/issues/1106" target="_blank" rel="noopener">Too big delay on start playing · Issue #1106 · Bilibili/ijkplayer</a><br><a href="https://github.com/Bilibili/ijkplayer/issues/210" target="_blank" rel="noopener">ijkplayer播放rtmp直播流，延迟明显 · Issue #210 · Bilibili/ijkplayer</a><br>那么如何缩小延迟呢，<br>修改 <code>\ijkplayer-android-demo\ijkplayer-java\src\main\java\tv\danmaku\ijk\media\player\IjkMediaPlayer.java</code><br>中<br><code>public void setDataSource(String path, Map&lt;String, String&gt; headers)</code>函数<br>后面添加：</li>
</ol>
<pre><code>Log.i(&quot;zjx&quot;,&quot;set packet-buffering&quot;);
setDataSource(path);
setOption(IjkMediaPlayer.OPT_CATEGORY_PLAYER, &quot;packet-buffering&quot;, 0);
setOption(IjkMediaPlayer.OPT_CATEGORY_FORMAT, &quot;fflags&quot;, &quot;nobuffer&quot;);
setOption(IjkMediaPlayer.OPT_CATEGORY_FORMAT, &quot;max-buffer-size&quot;, 512*1024);
setOption(IjkMediaPlayer.OPT_CATEGORY_PLAYER, &quot;min-frames&quot;, 5);
setOption(IjkMediaPlayer.OPT_CATEGORY_PLAYER, &quot;start-on-prepared&quot;, 1);
setOption(IjkMediaPlayer.OPT_CATEGORY_FORMAT, &quot;probsize&quot;, &quot;4096&quot;);
setOption(IjkMediaPlayer.OPT_CATEGORY_FORMAT, &quot;analyzeduration&quot;, &quot;2000000&quot;);</code></pre><p>因为ijkmediaplayer默认是作为点播播放器的，所以buffer之类的会开的比较大，直播就要进行相应的调整。测试结果，延迟&lt;200ms</p>
<ol start="2">
<li><p><a href="http://www.jianshu.com/p/8436c7353296" target="_blank" rel="noopener">ijkplayer在windows下编译并导入Android Studio【我就是直接用的他编译好的项目]</a></p>
</li>
<li><p><a href="http://www.jianshu.com/p/8436c7353296" target="_blank" rel="noopener">ijkplayer的引入&amp;介绍&amp;使用/android音视频点/直播模块开发 - 简书</a><br>可以看下</p>
</li>
</ol>
<h1 id="ffmpeg"><a href="#ffmpeg" class="headerlink" title="ffmpeg"></a>ffmpeg</h1><ol>
<li><a href="http://blog.csdn.net/leixiaohua1020/article/details/15811977" target="_blank" rel="noopener">[总结]FFMPEG视音频编解码零基础学习方法 - 雷霄骅(leixiaohua1020)的专栏 - 博客频道 - CSDN.NET</a><br>必看</li>
<li><strong>命令</strong><br><a href="https://ffmpeg.org/ffmpeg-devices.html#dshow" target="_blank" rel="noopener">FFmpeg Devices Documentation#dshow win采集命令</a><br><a href="https://ffmpeg.org/ffmpeg-all.html#rtsp" target="_blank" rel="noopener">ffmpeg 发送流媒体到rtsp/udp/rtmp等 命令</a><br><a href="http://www.cnblogs.com/wainiwann/p/4128154.html" target="_blank" rel="noopener">gdigrab抓屏采集，视频采集编码rtmp协议发送 命令</a><br><a href="http://blog.csdn.net/leixiaohua1020/article/details/38284961" target="_blank" rel="noopener">FFmpeg获取DirectShow设备数据（摄像头，录屏）</a><br>【audio设备乱码的真实名可以看这篇，其他的命令和上面书签都有重复】</li>
<li><a href="http://blog.csdn.net/leixiaohua1020/article/details/47008825" target="_blank" rel="noopener">最简单的基于FFmpeg的移动端例子：Android HelloWorld -</a><br>【成功运行显示数据，可以自己编so也可以直接用他的】</li>
<li><a href="https://github.com/dxjia/ffmpeg-compile-shared-library-for-android" target="_blank" rel="noopener">移植ffmpeg到android，编译可用于jni调用的so库.</a><br>【有参考，自己又写了一篇blog】</li>
<li><a href="https://trac.ffmpeg.org/wiki/CompilationGuide/Ubuntu" target="_blank" rel="noopener">CompilationGuide/Ubuntu – FFmpeg</a><br>【可以参考】</li>
<li><a href="https://trac.ffmpeg.org/wiki/audio%20types" target="_blank" rel="noopener">audio类型 (PCM AAC)，ffmpeg命令里指定pcm数据时缩写的含义</a></li>
<li><a href="http://blog.csdn.net/leixiaohua1020/article/details/43870599" target="_blank" rel="noopener">最简单的视频网站（JavaEE+FFmpeg）</a><br>【新手入门第一个应用，不过看看效果就好了，没什么学习的帮助】</li>
</ol>
<h1 id="vlc"><a href="#vlc" class="headerlink" title="vlc"></a>vlc</h1><ol>
<li><a href="http://blog.chinaunix.net/uid-20671208-id-3755470.html" target="_blank" rel="noopener">VLC播放RTSP视频延迟问题-garfield_trump-ChinaUnix博客</a></li>
<li><a href="http://blog.csdn.net/banketree/article/details/39575973" target="_blank" rel="noopener">Vlc for Android 全面阐述 - banketree - 博客频道 - CSDN.NET</a><br>用vlc for android 的可以看下这篇。<h1 id="竞品分析"><a href="#竞品分析" class="headerlink" title="竞品分析"></a>竞品分析</h1>略<h1 id="音视频基础"><a href="#音视频基础" class="headerlink" title="音视频基础"></a>音视频基础</h1></li>
<li><a href="http://www.code06.com/other/aoshilang2249/92451.html" target="_blank" rel="noopener">音频 属性详解(涉及采样率、通道数、位数、比特率、帧等) - code06网</a></li>
<li><a href="http://blog.csdn.net/leixiaohua1020/article/details/18893769" target="_blank" rel="noopener">[总结]视音频编解码技术零基础学习方法 - 雷霄骅(leixiaohua1020)的专栏 - 博客频道 - CSDN.NET</a><br>必看。</li>
<li><a href="http://blog.jobbole.com/95862/" target="_blank" rel="noopener">视频编码原理简介 - 博客 - 伯乐在线</a><br>和下面雷那这篇有点重了，不过这篇也可以看下。</li>
<li><a href="http://blog.csdn.net/flowingflying/article/month/2010/07" target="_blank" rel="noopener">编解码技术介绍 愷风（Wei）的专栏 - 博客频道 - CSDN.NET</a><br>对所有编码算法和容器的介绍吧，不介绍原理，也不介绍编码格式，只介绍历史之类的，不过有些信息百度不是那么容易找到。可看可不看。</li>
<li><a href="http://blog.csdn.net/leixiaohua1020/article/details/28114081" target="_blank" rel="noopener">视频压缩编码和音频压缩编码的基本原理 - 雷霄骅(leixiaohua1020)的专栏 - 博客频道 - CSDN.NET</a><br>必看</li>
<li><a href="http://blog.csdn.net/leixiaohua1020/article/details/17934487" target="_blank" rel="noopener">FLV封装格式分析器 - 雷霄骅(leixiaohua1020)的专栏 - 博客频道 - CSDN.NET</a></li>
<li><a href="http://wenku.baidu.com/view/0de48034f111f18583d05a65.html" target="_blank" rel="noopener">aac编码介绍_百度文库</a></li>
</ol>
<h1 id="RED5"><a href="#RED5" class="headerlink" title="RED5"></a>RED5</h1><p>一开始接触直播时服务器都是用的RED5【当然现在做rtmp开发一般也还是用的red5】</p>
<ol>
<li><a href="http://www.ibm.com/developerworks/cn/opensource/os-cn-Red5/" target="_blank" rel="noopener">基于 Red5 的流媒体服务器的搭建和应用</a><br>其实这篇我没什么看</li>
<li><a href="http://blog.csdn.net/kinglong68/article/details/50848785" target="_blank" rel="noopener">Red5 Pro配置及测试</a><br>【Red5 Pro会比Red5更容易使用】</li>
<li><a href="http://blog.csdn.net/wk313753744/article/details/50458360" target="_blank" rel="noopener">使用red5和OBS搞出自己的直播平台来挑战bilibili(B站) - 一名清官 - 博客频道 - CSDN.NET</a><br>听名字就知道是入门系列，作为入门来说是最好的。</li>
<li><a href="https://www.red5pro.com/docs/server/red5prolive/" target="_blank" rel="noopener">Creating Your First Red5 Application - Red5 Pro</a><br>官网教程，可看可不看。</li>
</ol>
<h1 id="EasyDarwin"><a href="#EasyDarwin" class="headerlink" title="EasyDarwin"></a>EasyDarwin</h1><p>其实这套产品看上去不错，但是我没有用过。因为不符合我们的业务</p>
<ol>
<li><a href="http://doc.easydarwin.org/EasyDarwin/README/" target="_blank" rel="noopener">EasyDarwin - EasyDarwin文档中心</a></li>
<li><a href="https://github.com/EasyDarwin/EasyDarwin" target="_blank" rel="noopener">EasyDarwin/EasyDarwin: OPEN：高性能开源流媒体服务器，支持RTSP、HLS、HTTP直播</a></li>
</ol>
<h1 id="SRS"><a href="#SRS" class="headerlink" title="SRS"></a>SRS</h1><p><a href="https://github.com/ossrs/srs/wiki/v2_CN_Home" target="_blank" rel="noopener">v2_CN_Home · ossrs/srs Wiki</a><br>这套服务器看上去是不错的，特别是里面有我想用的HTTP-FLV模块。<br>但是客户端这边他是依赖于flash来做解码的。<br>所以后面我就觉得那还是去WebSocket的方式吧，效果也比较可控，比较代码会比较了解。</p>
<h1 id="WebSocket"><a href="#WebSocket" class="headerlink" title="WebSocket"></a>WebSocket</h1><ol>
<li><a href="https://github.com/langhuihui/H5RtmpClient" target="_blank" rel="noopener">langhuihui/H5RtmpClient</a><br>国人做的一套H5解决方案，由于源码毫无文档，基本不能借鉴，也没有运行成功。目前我正往这方面前进。</li>
<li><a href="https://github.com/illuspas/Node-Media-Server" target="_blank" rel="noopener">illuspas/Node-Media-Server: A Node.js implementation of RTMP Server</a><br>NodeJS的rtmp服务器，后面音视频封装协议的时候可以参考。</li>
<li><a href="http://bbs.csdn.net/topics/391819855" target="_blank" rel="noopener">通过websocket接收的音频流，如何使用audio标签播放-</a><br>测试MP3不能播放 文件格式大小什么的需要考虑</li>
<li><a href="http://my.oschina.net/langhuihui/blog" target="_blank" rel="noopener">使用JS实现RTMP协议直播</a><br>刚刚说的那个做H5直播的国人的博客。</li>
<li><a href="https://github.com/audiocogs/aurora.js/issues/48" target="_blank" rel="noopener">参考issue 成功实现AAC播放 . · Issue #48 · audiocogs/aurora.js</a></li>
<li><a href="https://github.com/audiocogs/aurora.js/wiki" target="_blank" rel="noopener">audiocogs/aurora.js Wiki 一套完整的音频解码JS</a></li>
<li><a href="https://github.com/fabienbrooke/aurora-websocket" target="_blank" rel="noopener">aurora-websocket插件 WebSocket audio streaming plugin for aurora.js</a><h2 id="jsmpeg"><a href="#jsmpeg" class="headerlink" title="jsmpeg"></a>jsmpeg</h2>利用jsmpeg进行视频直播</li>
<li><a href="https://github.com/phoboslab/jsmpeg" target="_blank" rel="noopener">phoboslab/jsmpeg: MPEG1 Video Decoder in JavaScript</a><br>这是其github，用法什么的可以在这边看。</li>
<li><a href="https://imququ.com/post/html5-live-player-2.html" target="_blank" rel="noopener">HTML5 视频直播（二） | JerryQu 的小站</a><br>从这边知道有这么个JS. 这篇文章也有讲怎么用，通俗易懂。</li>
<li><a href="https://github.com/kevinschaul/jsmpeg/tree/feature/audio" target="_blank" rel="noopener">kevinschaul/jsmpeg at feature/audio</a><br>其他人fork后做了一个feature版本用于支持音频然而【用的http请求没什么参考价值，后面自己实现ws播放PCM成功】</li>
</ol>
<h1 id="其他文章"><a href="#其他文章" class="headerlink" title="其他文章"></a>其他文章</h1><ol>
<li><a href="http://blog.csdn.net/charleslei?viewmode=contents" target="_blank" rel="noopener">观止云直播 - 博客频道 - CSDN.NET</a><br>里面会介绍观止云直播的一些解决方案</li>
<li><a href="http://www.infoq.com/cn/articles/alibaba-broadcast-platform-technology-challenges" target="_blank" rel="noopener">鏖战双十一-阿里直播平台面临的技术挑战</a><br>比较考虑业务，如安全、弹幕这类的。</li>
<li><a href="https://developer.android.com/guide/appendix/media-formats.html#network" target="_blank" rel="noopener">Android Media and Camera</a><br>原生API对流媒体的支持程度</li>
<li><a href="http://tech.lmtw.com/technews/201504/115637.html" target="_blank" rel="noopener">深入浅出看流媒体前世今生，分分钟二逼变牛逼 - 技术平台 - 流媒体网</a><br>讲的还可以，能够现有的流媒体技术有个大体的了解。</li>
</ol>
<h1 id="下面是我做流媒体技术选型时的一个简单整理。"><a href="#下面是我做流媒体技术选型时的一个简单整理。" class="headerlink" title="下面是我做流媒体技术选型时的一个简单整理。"></a>下面是我做流媒体技术选型时的一个简单整理。</h1><p>技术和水平有限，我会不断更新的=。=<br>以下解决方案都是不会考虑flash和浏览器插件的。</p>
<p>原生开发的话可以考虑ijkplayer，基于ffmpeg,编译可拔插，基本上支持RTMP、H264/AAC的so包不会超过4M</p>
<table>
<thead>
<tr>
<th>技术选型</th>
<th>描述</th>
<th>兼容性</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>H5 WebSocket</td>
<td>利用JS进行编解码(jsmpeg,aurora)，目前没有完整的商业解决方案</td>
<td>IE不支持，其他大部分浏览器都支持</td>
<td>有前景</td>
</tr>
<tr>
<td>Web无插件播放RTSP</td>
<td>目前只有firefox支持live rtsp,其他浏览器不支持；Android VideoView支持rtsp文件,不支持rtsp实时流,可采用ijkplayer</td>
<td>仅firefox,并且我没有测试过</td>
<td>听说还要出一个RTSP2标准了</td>
</tr>
<tr>
<td>Web无插件播放RTMP</td>
<td>Html5<video>标签不支持RTMP，需要flash player 。Android VideoView 不支持rtmp，可采用ijkplayer</td>
<td>无适用</td>
<td>video.js仍然需要flash</td>
</tr>
<tr>
<td>HLS</td>
<td>延迟较大，降低延迟将加大服务器压力</td>
<td>大部分浏览器支持，苹果完全支持，Android 3.0+支持[直接用VideoView播放]</td>
<td>无</td>
</tr>
<tr>
<td>WebRTC</td>
<td>延迟小，跨平台，有前景，但目前支持的浏览器不多</td>
<td>Chrome29+、火狐47+、Opera 39+支持IE内核的浏览器、Edge、Safari不支持；Chrome for Android ，firefox for Android支持，Android WebView(5.0以上支持，4.4.3部分手机(samsung htc等)支持)，手机自带浏览器(4.4.3以上部分厂商支持)，QQ/UC/百度浏览器目前不支持，WP手机不支持(可以考虑后面兼容ORTC)；苹果用户考虑安装chrome。</td>
<td>有前景</td>
</tr>
<tr>
<td>HTTP+FLV</td>
<td>目前直播最主要的解决方案，延迟&lt;2S,其实有点类似WebSocket,HTTP+FLV是可以依赖于flash的，所以PC正常播放，移动Web的话，有人对其进行修改，估计也是进行js解码了</td>
<td>基本所有浏览器</td>
<td>有前景</td>
</tr>
</tbody></table>
<h1 id="书签JSON："><a href="#书签JSON：" class="headerlink" title="书签JSON："></a>书签JSON：</h1><pre><code>{
    &quot;children&quot;: [
        {
            &quot;children&quot;: [
                {
                    &quot;date_added&quot;: &quot;13113462703329928&quot;,
                    &quot;id&quot;: &quot;491&quot;,
                    &quot;name&quot;: &quot;HTML5 视频直播（三） | JerryQu 的小站&quot;,
                    &quot;sync_transaction_version&quot;: &quot;597&quot;,
                    &quot;type&quot;: &quot;url&quot;,
                    &quot;url&quot;: &quot;https://imququ.com/post/html5-live-player-3.html&quot;
                }, {
                    &quot;date_added&quot;: &quot;13113452866183134&quot;,
                    &quot;id&quot;: &quot;487&quot;,
                    &quot;name&quot;: &quot;LingyuCoder/SkyRTC-demo: A simple demo used SkyRTC&quot;,
                    &quot;sync_transaction_version&quot;: &quot;598&quot;,
                    &quot;type&quot;: &quot;url&quot;,
                    &quot;url&quot;: &quot;https://github.com/LingyuCoder/SkyRTC-demo&quot;
                }, {
                    &quot;date_added&quot;: &quot;13113454481787310&quot;,
                    &quot;id&quot;: &quot;488&quot;,
                    &quot;name&quot;: &quot;WebRTC中文网-最权威的RTC实时通信平台&quot;,
                    &quot;sync_transaction_version&quot;: &quot;599&quot;,
                    &quot;type&quot;: &quot;url&quot;,
                    &quot;url&quot;: &quot;http://webrtc.org.cn/&quot;
                }, {
                    &quot;date_added&quot;: &quot;13113455763479783&quot;,
                    &quot;id&quot;: &quot;489&quot;,
                    &quot;name&quot;: &quot;Getting Started with WebRTC - HTML5 Rocks&quot;,
                    &quot;sync_transaction_version&quot;: &quot;600&quot;,
                    &quot;type&quot;: &quot;url&quot;,
                    &quot;url&quot;: &quot;http://www.html5rocks.com/en/tutorials/webrtc/basics/&quot;
                }, {
                    &quot;date_added&quot;: &quot;13113476654399248&quot;,
                    &quot;id&quot;: &quot;492&quot;,
                    &quot;name&quot;: &quot;WebRTC Home | WebRTC&quot;,
                    &quot;sync_transaction_version&quot;: &quot;603&quot;,
                    &quot;type&quot;: &quot;url&quot;,
                    &quot;url&quot;: &quot;https://webrtc.org/&quot;
                }, {
                    &quot;date_added&quot;: &quot;13113478543413919&quot;,
                    &quot;id&quot;: &quot;493&quot;,
                    &quot;name&quot;: &quot;WebRTC API - Web API 接口 | MDN&quot;,
                    &quot;sync_transaction_version&quot;: &quot;606&quot;,
                    &quot;type&quot;: &quot;url&quot;,
                    &quot;url&quot;: &quot;https://developer.mozilla.org/zh-CN/docs/Web/API/WebRTC_API&quot;
                }, {
                    &quot;date_added&quot;: &quot;13113478554114551&quot;,
                    &quot;id&quot;: &quot;494&quot;,
                    &quot;name&quot;: &quot;WebRTC - Web 開發者指引 | MDN&quot;,
                    &quot;sync_transaction_version&quot;: &quot;609&quot;,
                    &quot;type&quot;: &quot;url&quot;,
                    &quot;url&quot;: &quot;https://developer.mozilla.org/zh-TW/docs/Web/Guide/API/WebRTC&quot;
                }, {
                    &quot;date_added&quot;: &quot;13113478966534107&quot;,
                    &quot;id&quot;: &quot;495&quot;,
                    &quot;name&quot;: &quot;Media Capture and Streams&quot;,
                    &quot;sync_transaction_version&quot;: &quot;612&quot;,
                    &quot;type&quot;: &quot;url&quot;,
                    &quot;url&quot;: &quot;https://w3c.github.io/mediacapture-main/getusermedia.html&quot;
                }, {
                    &quot;date_added&quot;: &quot;13113479111074785&quot;,
                    &quot;id&quot;: &quot;496&quot;,
                    &quot;name&quot;: &quot;最简单的WebRTC示例 - 不急不徐，持之以恒。 - BlogJava&quot;,
                    &quot;sync_transaction_version&quot;: &quot;614&quot;,
                    &quot;type&quot;: &quot;url&quot;,
                    &quot;url&quot;: &quot;http://www.blogjava.net/linli/archive/2014/10/21/418910.html&quot;
                }, {
                    &quot;date_added&quot;: &quot;13113480530031815&quot;,
                    &quot;id&quot;: &quot;497&quot;,
                    &quot;name&quot;: &quot;WebRTC模块分析博客 写的不错&quot;,
                    &quot;sync_transaction_version&quot;: &quot;830&quot;,
                    &quot;type&quot;: &quot;url&quot;,
                    &quot;url&quot;: &quot;http://www.cnblogs.com/fangkm/category/670346.html&quot;
                }, {
                    &quot;date_added&quot;: &quot;13114593439338259&quot;,
                    &quot;id&quot;: &quot;561&quot;,
                    &quot;name&quot;: &quot;WebRTC源码及项目&quot;,
                    &quot;sync_transaction_version&quot;: &quot;760&quot;,
                    &quot;type&quot;: &quot;url&quot;,
                    &quot;url&quot;: &quot;https://github.com/muaz-khan/WebRTC-Experiment&quot;
                }, {
                    &quot;date_added&quot;: &quot;13114661947006949&quot;,
                    &quot;id&quot;: &quot;568&quot;,
                    &quot;name&quot;: &quot;接收音视频流的参数设置&quot;,
                    &quot;sync_transaction_version&quot;: &quot;774&quot;,
                    &quot;type&quot;: &quot;url&quot;,
                    &quot;url&quot;: &quot;https://tools.ietf.org/html/draft-alvestrand-constraints-resolution-00#page-6&quot;
                }, {
                    &quot;date_added&quot;: &quot;13114666836368586&quot;,
                    &quot;id&quot;: &quot;570&quot;,
                    &quot;name&quot;: &quot;qq浏览器对h5的支持程度How well does x5 browser support HTML5?&quot;,
                    &quot;sync_transaction_version&quot;: &quot;782&quot;,
                    &quot;type&quot;: &quot;url&quot;,
                    &quot;url&quot;: &quot;http://res.imtt.qq.com/qqbrowser_x5/h5/v8.0/h5_support.htm&quot;
                }, {
                    &quot;date_added&quot;: &quot;13114678478862750&quot;,
                    &quot;id&quot;: &quot;571&quot;,
                    &quot;name&quot;: &quot;WebRTC 浏览器端demo包括样式 流记录之类的&quot;,
                    &quot;sync_transaction_version&quot;: &quot;786&quot;,
                    &quot;type&quot;: &quot;url&quot;,
                    &quot;url&quot;: &quot;https://github.com/webrtc/samples&quot;
                }, {
                    &quot;date_added&quot;: &quot;13113889282475314&quot;,
                    &quot;id&quot;: &quot;525&quot;,
                    &quot;name&quot;: &quot;Is it possible to use WebRTC to streaming video from Server to Client? - Stack Overflow&quot;,
                    &quot;sync_transaction_version&quot;: &quot;795&quot;,
                    &quot;type&quot;: &quot;url&quot;,
                    &quot;url&quot;: &quot;http://stackoverflow.com/questions/17552333/is-it-possible-to-use-webrtc-to-streaming-video-from-server-to-client&quot;
                }, {
                    &quot;date_added&quot;: &quot;13114517904945265&quot;,
                    &quot;id&quot;: &quot;558&quot;,
                    &quot;name&quot;: &quot;WebRTC Native c++ to web demo [看讨论成功借鉴,&quot;,
                    &quot;sync_transaction_version&quot;: &quot;994&quot;,
                    &quot;type&quot;: &quot;url&quot;,
                    &quot;url&quot;: &quot;https://groups.google.com/forum/#!msg/discuss-webrtc/Pdas21qohck/CCRZTxPx5esJ&quot;
                }, {
                    &quot;date_added&quot;: &quot;13113650005578365&quot;,
                    &quot;id&quot;: &quot;509&quot;,
                    &quot;name&quot;: &quot;WebRTC Native C++ to Browser[还未看代码，因为自己实现了&quot;,
                    &quot;sync_transaction_version&quot;: &quot;841&quot;,
                    &quot;type&quot;: &quot;url&quot;,
                    &quot;url&quot;: &quot;http://sourcey.com/webrtc-native-to-browser-video-streaming-example/&quot;
                }, {
                    &quot;date_added&quot;: &quot;13114690596278212&quot;,
                    &quot;id&quot;: &quot;574&quot;,
                    &quot;name&quot;: &quot;WebRTC Mobile 支持程度&quot;,
                    &quot;sync_transaction_version&quot;: &quot;820&quot;,
                    &quot;type&quot;: &quot;url&quot;,
                    &quot;url&quot;: &quot;http://www.tutorialspoint.com/webrtc/webrtc_mobile_support.htm&quot;
                }, {
                    &quot;date_added&quot;: &quot;13114767584864111&quot;,
                    &quot;id&quot;: &quot;580&quot;,
                    &quot;name&quot;: &quot;WebRTC 在WebView的使用，全屏，触摸事件&quot;,
                    &quot;sync_transaction_version&quot;: &quot;839&quot;,
                    &quot;type&quot;: &quot;url&quot;,
                    &quot;url&quot;: &quot;https://github.com/GoogleChrome/chromium-webview-samples&quot;
                }, {
                    &quot;date_added&quot;: &quot;13113643637152077&quot;,
                    &quot;id&quot;: &quot;506&quot;,
                    &quot;name&quot;: &quot;windows下webrtc的编译 2016 - 张晖 - 博客频道 - CSDN.NET&quot;,
                    &quot;sync_transaction_version&quot;: &quot;995&quot;,
                    &quot;type&quot;: &quot;url&quot;,
                    &quot;url&quot;: &quot;http://blog.csdn.net/nonmarking/article/details/46785197&quot;
                }, {
                    &quot;date_added&quot;: &quot;13114855122833789&quot;,
                    &quot;id&quot;: &quot;594&quot;,
                    &quot;name&quot;: &quot;BlogGeek.me • The leading authority on WebRTC【老外博客】&quot;,
                    &quot;sync_transaction_version&quot;: &quot;1059&quot;,
                    &quot;type&quot;: &quot;url&quot;,
                    &quot;url&quot;: &quot;https://bloggeek.me/&quot;
                }
            ],
            &quot;date_added&quot;: &quot;13113462686245057&quot;,
            &quot;date_modified&quot;: &quot;13115444886462470&quot;,
            &quot;id&quot;: &quot;490&quot;,
            &quot;name&quot;: &quot;WebRTC&quot;,
            &quot;sync_transaction_version&quot;: &quot;593&quot;,
            &quot;type&quot;: &quot;folder&quot;
        }, {
            &quot;children&quot;: [
                {
                    &quot;date_added&quot;: &quot;13112272435590549&quot;,
                    &quot;id&quot;: &quot;407&quot;,
                    &quot;name&quot;: &quot;[总结]RTMP流媒体技术零基础学习方法 [写的不错！]&quot;,
                    &quot;sync_transaction_version&quot;: &quot;888&quot;,
                    &quot;type&quot;: &quot;url&quot;,
                    &quot;url&quot;: &quot;http://blog.csdn.net/leixiaohua1020/article/details/15814587&quot;
                }, {
                    &quot;date_added&quot;: &quot;13113653020038405&quot;,
                    &quot;id&quot;: &quot;510&quot;,
                    &quot;name&quot;: &quot;rtmp在线测试播放wowza&quot;,
                    &quot;sync_transaction_version&quot;: &quot;904&quot;,
                    &quot;type&quot;: &quot;url&quot;,
                    &quot;url&quot;: &quot;http://www.wowza.com/resources/3.5.0/examples/LiveVideoStreaming/FlashRTMPPlayer/player.html&quot;
                }
            ],
            &quot;date_added&quot;: &quot;13111577706985142&quot;,
            &quot;date_modified&quot;: &quot;13114771844206771&quot;,
            &quot;id&quot;: &quot;16&quot;,
            &quot;name&quot;: &quot;RTMP[纯讲这个的，否则就归入其他组]&quot;,
            &quot;sync_transaction_version&quot;: &quot;881&quot;,
            &quot;type&quot;: &quot;folder&quot;
        }, {
            &quot;children&quot;: [
                {
                    &quot;date_added&quot;: &quot;13112782051707527&quot;,
                    &quot;id&quot;: &quot;439&quot;,
                    &quot;name&quot;: &quot;Help with Buffering Settings · Issue #1233 · Bilibili/ijkplayer&quot;,
                    &quot;sync_transaction_version&quot;: &quot;419&quot;,
                    &quot;type&quot;: &quot;url&quot;,
                    &quot;url&quot;: &quot;https://github.com/Bilibili/ijkplayer/issues/1233&quot;
                }, {
                    &quot;date_added&quot;: &quot;13112782057660261&quot;,
                    &quot;id&quot;: &quot;440&quot;,
                    &quot;name&quot;: &quot;ijkplayer/ff_ffplay_options.h at master · Bilibili/ijkplayer&quot;,
                    &quot;sync_transaction_version&quot;: &quot;422&quot;,
                    &quot;type&quot;: &quot;url&quot;,
                    &quot;url&quot;: &quot;https://github.com/Bilibili/ijkplayer/blob/master/ijkmedia/ijkplayer/ff_ffplay_options.h#L114&quot;
                }, {
                    &quot;date_added&quot;: &quot;13112782060979256&quot;,
                    &quot;id&quot;: &quot;441&quot;,
                    &quot;name&quot;: &quot;Too big delay on start playing · Issue #1106 · Bilibili/ijkplayer&quot;,
                    &quot;sync_transaction_version&quot;: &quot;425&quot;,
                    &quot;type&quot;: &quot;url&quot;,
                    &quot;url&quot;: &quot;https://github.com/Bilibili/ijkplayer/issues/1106&quot;
                }, {
                    &quot;date_added&quot;: &quot;13112782063899411&quot;,
                    &quot;id&quot;: &quot;442&quot;,
                    &quot;name&quot;: &quot;ijkplayer播放rtmp直播流，延迟明显 · Issue #210 · Bilibili/ijkplayer&quot;,
                    &quot;sync_transaction_version&quot;: &quot;428&quot;,
                    &quot;type&quot;: &quot;url&quot;,
                    &quot;url&quot;: &quot;https://github.com/Bilibili/ijkplayer/issues/210&quot;
                }, {
                    &quot;date_added&quot;: &quot;13112762225311574&quot;,
                    &quot;id&quot;: &quot;435&quot;,
                    &quot;name&quot;: &quot;ijkplayer在windows下编译并导入Android Studio【我就是直接用的他编译好的项目]&quot;,
                    &quot;sync_transaction_version&quot;: &quot;885&quot;,
                    &quot;type&quot;: &quot;url&quot;,
                    &quot;url&quot;: &quot;http://blog.csdn.net/u010072711/article/details/51354834&quot;
                }, {
                    &quot;date_added&quot;: &quot;13112703447816808&quot;,
                    &quot;id&quot;: &quot;432&quot;,
                    &quot;name&quot;: &quot;ijkplayer的引入&amp;介绍&amp;使用/android音视频点/直播模块开发 - 简书&quot;,
                    &quot;sync_transaction_version&quot;: &quot;879&quot;,
                    &quot;type&quot;: &quot;url&quot;,
                    &quot;url&quot;: &quot;http://www.jianshu.com/p/8436c7353296&quot;
                }
            ],
            &quot;date_added&quot;: &quot;13112782021507841&quot;,
            &quot;date_modified&quot;: &quot;13114770163783196&quot;,
            &quot;id&quot;: &quot;438&quot;,
            &quot;name&quot;: &quot;ijkplayer[bilibili开源项目]&quot;,
            &quot;sync_transaction_version&quot;: &quot;883&quot;,
            &quot;type&quot;: &quot;folder&quot;
        }, {
            &quot;children&quot;: [
                {
                    &quot;date_added&quot;: &quot;13112446245896420&quot;,
                    &quot;id&quot;: &quot;418&quot;,
                    &quot;name&quot;: &quot;[总结]FFMPEG视音频编解码零基础学习方法 - 雷霄骅(leixiaohua1020)的专栏 - 博客频道 - CSDN.NET&quot;,
                    &quot;sync_transaction_version&quot;: &quot;894&quot;,
                    &quot;type&quot;: &quot;url&quot;,
                    &quot;url&quot;: &quot;http://blog.csdn.net/leixiaohua1020/article/details/15811977&quot;
                }, {
                    &quot;date_added&quot;: &quot;13112033881317009&quot;,
                    &quot;id&quot;: &quot;385&quot;,
                    &quot;name&quot;: &quot;FFmpeg Devices Documentation#dshow win采集命令&quot;,
                    &quot;sync_transaction_version&quot;: &quot;886&quot;,
                    &quot;type&quot;: &quot;url&quot;,
                    &quot;url&quot;: &quot;https://ffmpeg.org/ffmpeg-devices.html#dshow&quot;
                }, {
                    &quot;date_added&quot;: &quot;13112098376989131&quot;,
                    &quot;id&quot;: &quot;390&quot;,
                    &quot;name&quot;: &quot;ffmpeg 发送流媒体到rtsp/udp/rtmp等 命令&quot;,
                    &quot;sync_transaction_version&quot;: &quot;892&quot;,
                    &quot;type&quot;: &quot;url&quot;,
                    &quot;url&quot;: &quot;https://ffmpeg.org/ffmpeg-all.html#rtsp&quot;
                }, {
                    &quot;date_added&quot;: &quot;13112355490224569&quot;,
                    &quot;id&quot;: &quot;411&quot;,
                    &quot;name&quot;: &quot;gdigrab抓屏采集，视频采集编码rtmp协议发送 命令&quot;,
                    &quot;sync_transaction_version&quot;: &quot;893&quot;,
                    &quot;type&quot;: &quot;url&quot;,
                    &quot;url&quot;: &quot;http://www.cnblogs.com/wainiwann/p/4128154.html&quot;
                }, {
                    &quot;date_added&quot;: &quot;13112531655347495&quot;,
                    &quot;id&quot;: &quot;421&quot;,
                    &quot;name&quot;: &quot;最简单的基于FFmpeg的移动端例子：Android HelloWorld - 【成功运行显示数据，可以自己编so也可以直接用他的】&quot;,
                    &quot;sync_transaction_version&quot;: &quot;896&quot;,
                    &quot;type&quot;: &quot;url&quot;,
                    &quot;url&quot;: &quot;http://blog.csdn.net/leixiaohua1020/article/details/47008825&quot;
                }, {
                    &quot;date_added&quot;: &quot;13112625045047452&quot;,
                    &quot;id&quot;: &quot;425&quot;,
                    &quot;name&quot;: &quot;移植ffmpeg到android，编译可用于jni调用的so库.【有参考，自己又写了一篇blog】&quot;,
                    &quot;sync_transaction_version&quot;: &quot;897&quot;,
                    &quot;type&quot;: &quot;url&quot;,
                    &quot;url&quot;: &quot;https://github.com/dxjia/ffmpeg-compile-shared-library-for-android&quot;
                }, {
                    &quot;date_added&quot;: &quot;13112642530759864&quot;,
                    &quot;id&quot;: &quot;427&quot;,
                    &quot;name&quot;: &quot;CompilationGuide/Ubuntu – FFmpeg【可以参考】&quot;,
                    &quot;sync_transaction_version&quot;: &quot;899&quot;,
                    &quot;type&quot;: &quot;url&quot;,
                    &quot;url&quot;: &quot;https://trac.ffmpeg.org/wiki/CompilationGuide/Ubuntu&quot;
                }, {
                    &quot;date_added&quot;: &quot;13112876675250710&quot;,
                    &quot;id&quot;: &quot;451&quot;,
                    &quot;name&quot;: &quot;FFmpeg获取DirectShow设备数据（摄像头，录屏）【audio设备乱码的真实名可以看这篇，其他的命令和其他书签都有重复】&quot;,
                    &quot;sync_transaction_version&quot;: &quot;895&quot;,
                    &quot;type&quot;: &quot;url&quot;,
                    &quot;url&quot;: &quot;http://blog.csdn.net/leixiaohua1020/article/details/38284961&quot;
                }, {
                    &quot;date_added&quot;: &quot;13113886157396632&quot;,
                    &quot;id&quot;: &quot;524&quot;,
                    &quot;name&quot;: &quot;audio类型 (PCM AAC)，ffmpeg命令里指定pcm数据时缩写的含义&quot;,
                    &quot;sync_transaction_version&quot;: &quot;902&quot;,
                    &quot;type&quot;: &quot;url&quot;,
                    &quot;url&quot;: &quot;https://trac.ffmpeg.org/wiki/audio%20types&quot;
                }, {
                    &quot;date_added&quot;: &quot;13109230127960109&quot;,
                    &quot;id&quot;: &quot;355&quot;,
                    &quot;name&quot;: &quot;最简单的视频网站（JavaEE+FFmpeg）【新手入门第一个应用，不过看看效果就好了，没什么学习的帮助】&quot;,
                    &quot;sync_transaction_version&quot;: &quot;901&quot;,
                    &quot;type&quot;: &quot;url&quot;,
                    &quot;url&quot;: &quot;http://blog.csdn.net/leixiaohua1020/article/details/43870599&quot;
                }
            ],
            &quot;date_added&quot;: &quot;13113041308166155&quot;,
            &quot;date_modified&quot;: &quot;13116415773337933&quot;,
            &quot;id&quot;: &quot;462&quot;,
            &quot;name&quot;: &quot;ffmpeg&quot;,
            &quot;sync_transaction_version&quot;: &quot;491&quot;,
            &quot;type&quot;: &quot;folder&quot;
        }, {
            &quot;children&quot;: [
                {
                    &quot;date_added&quot;: &quot;13112030857137550&quot;,
                    &quot;id&quot;: &quot;382&quot;,
                    &quot;name&quot;: &quot;phoboslab/jsmpeg: MPEG1 Video Decoder in JavaScript&quot;,
                    &quot;sync_transaction_version&quot;: &quot;497&quot;,
                    &quot;type&quot;: &quot;url&quot;,
                    &quot;url&quot;: &quot;https://github.com/phoboslab/jsmpeg&quot;
                }, {
                    &quot;date_added&quot;: &quot;13112007882031863&quot;,
                    &quot;id&quot;: &quot;381&quot;,
                    &quot;name&quot;: &quot;HTML5 视频直播（二） | JerryQu 的小站&quot;,
                    &quot;sync_transaction_version&quot;: &quot;498&quot;,
                    &quot;type&quot;: &quot;url&quot;,
                    &quot;url&quot;: &quot;https://imququ.com/post/html5-live-player-2.html&quot;
                }, {
                    &quot;date_added&quot;: &quot;13113044479616838&quot;,
                    &quot;id&quot;: &quot;467&quot;,
                    &quot;name&quot;: &quot;kevinschaul/jsmpeg at feature/audio【用的http请求没什么参考价值，后面自己实现ws播放PCM成功】&quot;,
                    &quot;sync_transaction_version&quot;: &quot;906&quot;,
                    &quot;type&quot;: &quot;url&quot;,
                    &quot;url&quot;: &quot;https://github.com/kevinschaul/jsmpeg/tree/feature/audio&quot;
                }, {
                    &quot;date_added&quot;: &quot;13113043079921347&quot;,
                    &quot;id&quot;: &quot;466&quot;,
                    &quot;name&quot;: &quot;audiocogs/mp3.js: A JavaScript MP3 decoder for Aurora.js[还没使用]&quot;,
                    &quot;sync_transaction_version&quot;: &quot;907&quot;,
                    &quot;type&quot;: &quot;url&quot;,
                    &quot;url&quot;: &quot;https://github.com/audiocogs/mp3.js&quot;
                }
            ],
            &quot;date_added&quot;: &quot;13113041334403824&quot;,
            &quot;date_modified&quot;: &quot;13114691190080078&quot;,
            &quot;id&quot;: &quot;463&quot;,
            &quot;name&quot;: &quot;jsmpeg[mpeg编解码实现画面直播]&quot;,
            &quot;sync_transaction_version&quot;: &quot;903&quot;,
            &quot;type&quot;: &quot;folder&quot;
        }, {
            &quot;children&quot;: [
                {
                    &quot;date_added&quot;: &quot;13111662621346305&quot;,
                    &quot;id&quot;: &quot;370&quot;,
                    &quot;name&quot;: &quot;Integrating mNectar using a Native Android SDK — mNectar Support documentation&quot;,
                    &quot;sync_transaction_version&quot;: &quot;504&quot;,
                    &quot;type&quot;: &quot;url&quot;,
                    &quot;url&quot;: &quot;http://support.mnectar.com/publishers/android/mnectarsdk/native.html&quot;
                }, {
                    &quot;date_added&quot;: &quot;13111668169618559&quot;,
                    &quot;id&quot;: &quot;373&quot;,
                    &quot;name&quot;: &quot;mNectar | Applications&quot;,
                    &quot;sync_transaction_version&quot;: &quot;505&quot;,
                    &quot;type&quot;: &quot;url&quot;,
                    &quot;url&quot;: &quot;https://pub.mnectar.com/v2/pm/apps&quot;
                }, {
                    &quot;date_added&quot;: &quot;13111665650703175&quot;,
                    &quot;id&quot;: &quot;372&quot;,
                    &quot;name&quot;: &quot;MRAID扩展协议 - missyou 专栏 - 博客频道 - CSDN.NET&quot;,
                    &quot;sync_transaction_version&quot;: &quot;506&quot;,
                    &quot;type&quot;: &quot;url&quot;,
                    &quot;url&quot;: &quot;http://blog.csdn.net/gaoqiv0447/article/details/46618365&quot;
                }, {
                    &quot;date_added&quot;: &quot;13111834536618303&quot;,
                    &quot;id&quot;: &quot;376&quot;,
                    &quot;name&quot;: &quot;GitHub - VMFive/adplay-web-sdk-demo&quot;,
                    &quot;sync_transaction_version&quot;: &quot;507&quot;,
                    &quot;type&quot;: &quot;url&quot;,
                    &quot;url&quot;: &quot;https://github.com/VMFive/adplay-web-sdk-demo&quot;
                }, {
                    &quot;date_added&quot;: &quot;13111834565183148&quot;,
                    &quot;id&quot;: &quot;377&quot;,
                    &quot;name&quot;: &quot;mnectarinc · GitHub&quot;,
                    &quot;sync_transaction_version&quot;: &quot;508&quot;,
                    &quot;type&quot;: &quot;url&quot;,
                    &quot;url&quot;: &quot;https://github.com/mnectarinc&quot;
                }, {
                    &quot;date_added&quot;: &quot;13112357464675332&quot;,
                    &quot;id&quot;: &quot;412&quot;,
                    &quot;name&quot;: &quot;SDK小，商业RTMP Client &quot;,
                    &quot;sync_transaction_version&quot;: &quot;522&quot;,
                    &quot;type&quot;: &quot;url&quot;,
                    &quot;url&quot;: &quot;http://www.nodemedia.cn/doc/%E7%AE%80%E4%BB%8B&quot;
                }, {
                    &quot;date_added&quot;: &quot;13113020499274967&quot;,
                    &quot;id&quot;: &quot;459&quot;,
                    &quot;name&quot;: &quot;帮助文档_开放平台_夜神安卓模拟器&quot;,
                    &quot;sync_transaction_version&quot;: &quot;908&quot;,
                    &quot;type&quot;: &quot;url&quot;,
                    &quot;url&quot;: &quot;http://dev.noxphone.com/application/doc?type=client&quot;
                }, {
                    &quot;date_added&quot;: &quot;13113021878734088&quot;,
                    &quot;id&quot;: &quot;460&quot;,
                    &quot;name&quot;: &quot;夜神公司的js 可参看&quot;,
                    &quot;sync_transaction_version&quot;: &quot;530&quot;,
                    &quot;type&quot;: &quot;url&quot;,
                    &quot;url&quot;: &quot;http://access.noxphone.com/js/NoxCloudPhone.min.js&quot;
                }
            ],
            &quot;date_added&quot;: &quot;13113041369785043&quot;,
            &quot;date_modified&quot;: &quot;13113043079921347&quot;,
            &quot;id&quot;: &quot;464&quot;,
            &quot;name&quot;: &quot;竞品&quot;,
            &quot;sync_transaction_version&quot;: &quot;503&quot;,
            &quot;type&quot;: &quot;folder&quot;
        }, {
            &quot;children&quot;: [
                {
                    &quot;date_added&quot;: &quot;13112076652281998&quot;,
                    &quot;id&quot;: &quot;388&quot;,
                    &quot;name&quot;: &quot;VLC播放RTSP视频延迟问题-garfield_trump-ChinaUnix博客&quot;,
                    &quot;sync_transaction_version&quot;: &quot;514&quot;,
                    &quot;type&quot;: &quot;url&quot;,
                    &quot;url&quot;: &quot;http://blog.chinaunix.net/uid-20671208-id-3755470.html&quot;
                }, {
                    &quot;date_added&quot;: &quot;13109183062278069&quot;,
                    &quot;id&quot;: &quot;354&quot;,
                    &quot;name&quot;: &quot;Vlc for Android 全面阐述 - banketree - 博客频道 - CSDN.NET&quot;,
                    &quot;sync_transaction_version&quot;: &quot;860&quot;,
                    &quot;type&quot;: &quot;url&quot;,
                    &quot;url&quot;: &quot;http://blog.csdn.net/banketree/article/details/39575973&quot;
                }
            ],
            &quot;date_added&quot;: &quot;13113041405405258&quot;,
            &quot;date_modified&quot;: &quot;13114769084905304&quot;,
            &quot;id&quot;: &quot;465&quot;,
            &quot;name&quot;: &quot;vlc&quot;,
            &quot;sync_transaction_version&quot;: &quot;513&quot;,
            &quot;type&quot;: &quot;folder&quot;
        }, {
            &quot;children&quot;: [
                {
                    &quot;date_added&quot;: &quot;13113884215111729&quot;,
                    &quot;id&quot;: &quot;523&quot;,
                    &quot;name&quot;: &quot;音频 属性详解(涉及采样率、通道数、位数、比特率、帧等) - code06网&quot;,
                    &quot;sync_transaction_version&quot;: &quot;664&quot;,
                    &quot;type&quot;: &quot;url&quot;,
                    &quot;url&quot;: &quot;http://www.code06.com/other/aoshilang2249/92451.html&quot;
                }, {
                    &quot;date_added&quot;: &quot;13112444209807667&quot;,
                    &quot;id&quot;: &quot;417&quot;,
                    &quot;name&quot;: &quot;[总结]视音频编解码技术零基础学习方法 - 雷霄骅(leixiaohua1020)的专栏 - 博客频道 - CSDN.NET&quot;,
                    &quot;sync_transaction_version&quot;: &quot;880&quot;,
                    &quot;type&quot;: &quot;url&quot;,
                    &quot;url&quot;: &quot;http://blog.csdn.net/leixiaohua1020/article/details/18893769&quot;
                }, {
                    &quot;date_added&quot;: &quot;13101623361247230&quot;,
                    &quot;id&quot;: &quot;313&quot;,
                    &quot;name&quot;: &quot;视频编码原理简介 - 博客 - 伯乐在线&quot;,
                    &quot;sync_transaction_version&quot;: &quot;1002&quot;,
                    &quot;type&quot;: &quot;url&quot;,
                    &quot;url&quot;: &quot;http://blog.jobbole.com/95862/&quot;
                }, {
                    &quot;date_added&quot;: &quot;13115902958125694&quot;,
                    &quot;id&quot;: &quot;677&quot;,
                    &quot;name&quot;: &quot;编解码技术介绍 愷风（Wei）的专栏 - 博客频道 - CSDN.NET&quot;,
                    &quot;sync_transaction_version&quot;: &quot;1260&quot;,
                    &quot;type&quot;: &quot;url&quot;,
                    &quot;url&quot;: &quot;http://blog.csdn.net/flowingflying/article/month/2010/07&quot;
                }, {
                    &quot;date_added&quot;: &quot;13115962607276122&quot;,
                    &quot;id&quot;: &quot;680&quot;,
                    &quot;name&quot;: &quot;视频压缩编码和音频压缩编码的基本原理 - 雷霄骅(leixiaohua1020)的专栏 - 博客频道 - CSDN.NET&quot;,
                    &quot;sync_transaction_version&quot;: &quot;1263&quot;,
                    &quot;type&quot;: &quot;url&quot;,
                    &quot;url&quot;: &quot;http://blog.csdn.net/leixiaohua1020/article/details/28114081&quot;
                }, {
                    &quot;date_added&quot;: &quot;13115978781923325&quot;,
                    &quot;id&quot;: &quot;681&quot;,
                    &quot;name&quot;: &quot;FLV封装格式分析器 - 雷霄骅(leixiaohua1020)的专栏 - 博客频道 - CSDN.NET&quot;,
                    &quot;sync_transaction_version&quot;: &quot;1267&quot;,
                    &quot;type&quot;: &quot;url&quot;,
                    &quot;url&quot;: &quot;http://blog.csdn.net/leixiaohua1020/article/details/17934487&quot;
                }, {
                    &quot;date_added&quot;: &quot;13116483060559062&quot;,
                    &quot;id&quot;: &quot;711&quot;,
                    &quot;name&quot;: &quot;aac编码介绍_百度文库&quot;,
                    &quot;sync_transaction_version&quot;: &quot;1354&quot;,
                    &quot;type&quot;: &quot;url&quot;,
                    &quot;url&quot;: &quot;http://wenku.baidu.com/view/0de48034f111f18583d05a65.html&quot;
                }
            ],
            &quot;date_added&quot;: &quot;13113884201796385&quot;,
            &quot;date_modified&quot;: &quot;13116483065958840&quot;,
            &quot;id&quot;: &quot;521&quot;,
            &quot;name&quot;: &quot;音视频基础&quot;,
            &quot;sync_transaction_version&quot;: &quot;662&quot;,
            &quot;type&quot;: &quot;folder&quot;
        }, {
            &quot;children&quot;: [
                {
                    &quot;date_added&quot;: &quot;13113218690999115&quot;,
                    &quot;id&quot;: &quot;473&quot;,
                    &quot;name&quot;: &quot;langhuihui/H5RtmpClient&quot;,
                    &quot;sync_transaction_version&quot;: &quot;791&quot;,
                    &quot;type&quot;: &quot;url&quot;,
                    &quot;url&quot;: &quot;https://github.com/langhuihui/H5RtmpClient&quot;
                }, {
                    &quot;date_added&quot;: &quot;13113219351831260&quot;,
                    &quot;id&quot;: &quot;474&quot;,
                    &quot;name&quot;: &quot;illuspas/Node-Media-Server: A Node.js implementation of RTMP Server&quot;,
                    &quot;sync_transaction_version&quot;: &quot;792&quot;,
                    &quot;type&quot;: &quot;url&quot;,
                    &quot;url&quot;: &quot;https://github.com/illuspas/Node-Media-Server&quot;
                }, {
                    &quot;date_added&quot;: &quot;13112963192356543&quot;,
                    &quot;id&quot;: &quot;454&quot;,
                    &quot;name&quot;: &quot;通过websocket接收的音频流，如何使用audio标签播放-测试MP3不能播放 文件格式大小什么的需要考虑&quot;,
                    &quot;sync_transaction_version&quot;: &quot;1341&quot;,
                    &quot;type&quot;: &quot;url&quot;,
                    &quot;url&quot;: &quot;http://bbs.csdn.net/topics/391819855&quot;
                }, {
                    &quot;date_added&quot;: &quot;13113217892050897&quot;,
                    &quot;id&quot;: &quot;472&quot;,
                    &quot;name&quot;: &quot;使用JS实现RTMP协议直播&quot;,
                    &quot;sync_transaction_version&quot;: &quot;806&quot;,
                    &quot;type&quot;: &quot;url&quot;,
                    &quot;url&quot;: &quot;http://my.oschina.net/langhuihui/blog&quot;
                }, {
                    &quot;date_added&quot;: &quot;13116414665452336&quot;,
                    &quot;id&quot;: &quot;706&quot;,
                    &quot;name&quot;: &quot;参考issue 成功实现AAC播放 . · Issue #48 · audiocogs/aurora.js&quot;,
                    &quot;sync_transaction_version&quot;: &quot;1337&quot;,
                    &quot;type&quot;: &quot;url&quot;,
                    &quot;url&quot;: &quot;https://github.com/audiocogs/aurora.js/issues/48&quot;
                }, {
                    &quot;date_added&quot;: &quot;13116394153581764&quot;,
                    &quot;id&quot;: &quot;702&quot;,
                    &quot;name&quot;: &quot;audiocogs/aurora.js Wiki 一套完整的音频解码JS&quot;,
                    &quot;sync_transaction_version&quot;: &quot;1340&quot;,
                    &quot;type&quot;: &quot;url&quot;,
                    &quot;url&quot;: &quot;https://github.com/audiocogs/aurora.js/wiki&quot;
                }, {
                    &quot;date_added&quot;: &quot;13116480353611833&quot;,
                    &quot;id&quot;: &quot;710&quot;,
                    &quot;name&quot;: &quot;aurora-websocket插件 WebSocket audio streaming plugin for aurora.js&quot;,
                    &quot;sync_transaction_version&quot;: &quot;1350&quot;,
                    &quot;type&quot;: &quot;url&quot;,
                    &quot;url&quot;: &quot;https://github.com/fabienbrooke/aurora-websocket&quot;
                }
            ],
            &quot;date_added&quot;: &quot;13114683602955114&quot;,
            &quot;date_modified&quot;: &quot;13116483060559062&quot;,
            &quot;id&quot;: &quot;572&quot;,
            &quot;name&quot;: &quot;WebSocket&quot;,
            &quot;sync_transaction_version&quot;: &quot;797&quot;,
            &quot;type&quot;: &quot;folder&quot;
        }, {
            &quot;children&quot;: [],
            &quot;date_added&quot;: &quot;13114768048613751&quot;,
            &quot;date_modified&quot;: &quot;13114768196400213&quot;,
            &quot;id&quot;: &quot;581&quot;,
            &quot;name&quot;: &quot;HLS&quot;,
            &quot;sync_transaction_version&quot;: &quot;844&quot;,
            &quot;type&quot;: &quot;folder&quot;
        }, {
            &quot;children&quot;: [
                {
                    &quot;date_added&quot;: &quot;13109021383226132&quot;,
                    &quot;id&quot;: &quot;351&quot;,
                    &quot;name&quot;: &quot;基于 Red5 的流媒体服务器的搭建和应用&quot;,
                    &quot;sync_transaction_version&quot;: &quot;851&quot;,
                    &quot;type&quot;: &quot;url&quot;,
                    &quot;url&quot;: &quot;http://www.ibm.com/developerworks/cn/opensource/os-cn-Red5/&quot;
                }, {
                    &quot;date_added&quot;: &quot;13110289117401478&quot;,
                    &quot;id&quot;: &quot;362&quot;,
                    &quot;name&quot;: &quot;Red5 Pro配置及测试【Red5 Pro会比Red5更容易使用】&quot;,
                    &quot;sync_transaction_version&quot;: &quot;864&quot;,
                    &quot;type&quot;: &quot;url&quot;,
                    &quot;url&quot;: &quot;http://blog.csdn.net/kinglong68/article/details/50848785&quot;
                }, {
                    &quot;date_added&quot;: &quot;13114770064241261&quot;,
                    &quot;id&quot;: &quot;585&quot;,
                    &quot;name&quot;: &quot;使用red5和OBS搞出自己的直播平台来挑战bilibili(B站) - 一名清官 - 博客频道 - CSDN.NET&quot;,
                    &quot;sync_transaction_version&quot;: &quot;869&quot;,
                    &quot;type&quot;: &quot;url&quot;,
                    &quot;url&quot;: &quot;http://blog.csdn.net/wk313753744/article/details/50458360&quot;
                }, {
                    &quot;date_added&quot;: &quot;13110221725552373&quot;,
                    &quot;id&quot;: &quot;361&quot;,
                    &quot;name&quot;: &quot;Creating Your First Red5 Application - Red5 Pro&quot;,
                    &quot;sync_transaction_version&quot;: &quot;876&quot;,
                    &quot;type&quot;: &quot;url&quot;,
                    &quot;url&quot;: &quot;https://www.red5pro.com/docs/server/red5prolive/&quot;
                }
            ],
            &quot;date_added&quot;: &quot;13114768638797469&quot;,
            &quot;date_modified&quot;: &quot;13114770140782156&quot;,
            &quot;id&quot;: &quot;582&quot;,
            &quot;name&quot;: &quot;Red5&quot;,
            &quot;sync_transaction_version&quot;: &quot;850&quot;,
            &quot;type&quot;: &quot;folder&quot;
        }, {
            &quot;children&quot;: [
                {
                    &quot;date_added&quot;: &quot;13109022139149196&quot;,
                    &quot;id&quot;: &quot;353&quot;,
                    &quot;name&quot;: &quot;EasyDarwin - EasyDarwin文档中心&quot;,
                    &quot;sync_transaction_version&quot;: &quot;856&quot;,
                    &quot;type&quot;: &quot;url&quot;,
                    &quot;url&quot;: &quot;http://doc.easydarwin.org/EasyDarwin/README/&quot;
                }, {
                    &quot;date_added&quot;: &quot;13114768877093516&quot;,
                    &quot;id&quot;: &quot;584&quot;,
                    &quot;name&quot;: &quot;EasyDarwin/EasyDarwin: OPEN：高性能开源流媒体服务器，支持RTSP、HLS、HTTP直播&quot;,
                    &quot;sync_transaction_version&quot;: &quot;859&quot;,
                    &quot;type&quot;: &quot;url&quot;,
                    &quot;url&quot;: &quot;https://github.com/EasyDarwin/EasyDarwin&quot;
                }
            ],
            &quot;date_added&quot;: &quot;13114768850751352&quot;,
            &quot;date_modified&quot;: &quot;13114768877093516&quot;,
            &quot;id&quot;: &quot;583&quot;,
            &quot;name&quot;: &quot;EasyDarwin&quot;,
            &quot;sync_transaction_version&quot;: &quot;855&quot;,
            &quot;type&quot;: &quot;folder&quot;
        }, {
            &quot;children&quot;: [
                {
                    &quot;date_added&quot;: &quot;13116065354065376&quot;,
                    &quot;id&quot;: &quot;687&quot;,
                    &quot;name&quot;: &quot;v2_CN_Home · ossrs/srs Wiki&quot;,
                    &quot;sync_transaction_version&quot;: &quot;1320&quot;,
                    &quot;type&quot;: &quot;url&quot;,
                    &quot;url&quot;: &quot;https://github.com/ossrs/srs/wiki/v2_CN_Home&quot;
                }
            ],
            &quot;date_added&quot;: &quot;13116400435306683&quot;,
            &quot;date_modified&quot;: &quot;13116400435306897&quot;,
            &quot;id&quot;: &quot;704&quot;,
            &quot;name&quot;: &quot;SRS&quot;,
            &quot;sync_transaction_version&quot;: &quot;1322&quot;,
            &quot;type&quot;: &quot;folder&quot;
        }, {
            &quot;date_added&quot;: &quot;13115727320729413&quot;,
            &quot;id&quot;: &quot;657&quot;,
            &quot;name&quot;: &quot;观止云直播 - 博客频道 - CSDN.NET&quot;,
            &quot;sync_transaction_version&quot;: &quot;1171&quot;,
            &quot;type&quot;: &quot;url&quot;,
            &quot;url&quot;: &quot;http://blog.csdn.net/charleslei?viewmode=contents&quot;
        }, {
            &quot;date_added&quot;: &quot;13112163617867209&quot;,
            &quot;id&quot;: &quot;398&quot;,
            &quot;name&quot;: &quot;鏖战双十一-阿里直播平台面临的技术挑战&quot;,
            &quot;sync_transaction_version&quot;: &quot;1172&quot;,
            &quot;type&quot;: &quot;url&quot;,
            &quot;url&quot;: &quot;http://www.infoq.com/cn/articles/alibaba-broadcast-platform-technology-challenges&quot;
        }, {
            &quot;date_added&quot;: &quot;13112096770353514&quot;,
            &quot;id&quot;: &quot;389&quot;,
            &quot;name&quot;: &quot;Android Media and Camera 原生API对流媒体的支持程度&quot;,
            &quot;sync_transaction_version&quot;: &quot;1173&quot;,
            &quot;type&quot;: &quot;url&quot;,
            &quot;url&quot;: &quot;https://developer.android.com/guide/appendix/media-formats.html#network&quot;
        }, {
            &quot;date_added&quot;: &quot;13116067904989673&quot;,
            &quot;id&quot;: &quot;688&quot;,
            &quot;name&quot;: &quot;深入浅出看流媒体前世今生，分分钟二逼变牛逼 - 技术平台 - 流媒体网&quot;,
            &quot;sync_transaction_version&quot;: &quot;1286&quot;,
            &quot;type&quot;: &quot;url&quot;,
            &quot;url&quot;: &quot;http://tech.lmtw.com/technews/201504/115637.html&quot;
        }
    ],
    &quot;date_added&quot;: &quot;13111659536756641&quot;,
    &quot;date_modified&quot;: &quot;13116414650884522&quot;,
    &quot;id&quot;: &quot;369&quot;,
    &quot;name&quot;: &quot;直播&quot;,
    &quot;sync_transaction_version&quot;: &quot;588&quot;,
    &quot;type&quot;: &quot;folder&quot;
}</code></pre>]]></content>
      <categories>
        <category>流媒体</category>
      </categories>
      <tags>
        <tag>WebRTC</tag>
        <tag>ffmpeg</tag>
      </tags>
  </entry>
  <entry>
    <title>H5音频直播—探索历程、aurora.js源码解析、音频编码基本原理</title>
    <url>/2016/08/23/2016-2017%E7%9B%B4%E6%92%AD%E7%9B%B8%E5%85%B3/H5%E9%9F%B3%E9%A2%91%E7%9B%B4%E6%92%AD%E2%80%94%E6%8E%A2%E7%B4%A2%E5%8E%86%E7%A8%8B%E3%80%81aurora.js%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%E3%80%81%E9%9F%B3%E9%A2%91%E7%BC%96%E7%A0%81%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86%20/</url>
    <content><![CDATA[<p>上次讲解了H5的视频直播，这次我们要讲的就是H5的音频直播啦.有没有很期待= =</p>
<p>下面是我的探索历程，不感兴趣的可以直接看最后一个方案。</p>
<h1 id="探索历程"><a href="#探索历程" class="headerlink" title="探索历程"></a>探索历程</h1><p>注：本文使用的Server都是nodejs,如果不了解的请先看下基础教程</p>
<p>另外ffmpeg是必须的，不仅是用来测试，做流媒体开发的基本都要会用这个</p>
<a id="more"></a>


<h2 id="PCM音频直播"><a href="#PCM音频直播" class="headerlink" title="PCM音频直播"></a>PCM音频直播</h2><p>流程：</p>
<h3 id="1-Server端接收ffmpeg推送的PCM流-这里我们把MP3文件推成PCM流，当然输入源任意"><a href="#1-Server端接收ffmpeg推送的PCM流-这里我们把MP3文件推成PCM流，当然输入源任意" class="headerlink" title="1.Server端接收ffmpeg推送的PCM流(这里我们把MP3文件推成PCM流，当然输入源任意"></a>1.Server端接收ffmpeg推送的PCM流(这里我们把MP3文件推成PCM流，当然输入源任意</h3><p><strong>做法(1)</strong>:Server开启一个端口如8088，ffmpeg执行该命令</p>
<pre><code>ffmpeg -re -i D://A.mp3 -ac 1 -f f32le http://localhost:8088</code></pre><p>参数解析：</p>
<blockquote>
<p><strong>-re</strong> 以MP3的实际帧率去转码输出 否则很快就传输完了<br><strong>-ac channels</strong>   音频通道数 这边指定为1，对应的web端解码时也应该指定(因为pcm是裸数据，没有传输音频头来初始化<br><strong>-f f32le</strong>  输出格式，pcm的 PCM 32-bit floating-point little-endian，对应的web端也要指定，后面会讲.更多格式请参考<a href="https://trac.ffmpeg.org/wiki/audio%20types" target="_blank" rel="noopener">这里</a></p>
</blockquote>
<p><strong>做法(2)</strong>:nodejs直接利用命名把输出流通过管道输出，stdout监听数据传输事件<br>代码如下：</p>
<pre><code>var child_process = require(&quot;child_process&quot;);
var ffmpeg = child_process.spawn(&quot;ffmpeg&quot;,[
    &quot;-re&quot;,&quot;-i&quot;,
    &quot;A.mp3&quot;,
    &quot;-ac&quot;,&quot;1&quot;,&quot;-f&quot;,
    &quot;f32le&quot;,
    &quot;pipe:1&quot;                     // Output to STDOUT
    ]);

 ffmpeg.stdout.on(&apos;data&apos;, function(data)
 {
    //处理数据.. 如输出到socket_client
 });</code></pre><p>WebSocket获取到音频数据message</p>
<h3 id="2-server将数据输出给socket-client"><a href="#2-server将数据输出给socket-client" class="headerlink" title="2.server将数据输出给socket_client."></a>2.server将数据输出给socket_client.</h3><p>当然，事先要先开启端口让web端连接</p>
<pre><code>var ws = require(&apos;websocket.io&apos;), 
//WebSocket 连接3000端口
server = ws.listen(3000);
server.on(&apos;connection&apos;, function (socket) 
{
    //定义全局变量保存socket,在另开启的监听流媒体端口函数中将数据传给socket
    //或者这里一连上就用上面的做法(2)直接推流给他
    //两种方案按照自己选择
    console.log(&apos;New client connected&apos;);
}</code></pre><h3 id="方案-2-完整代码"><a href="#方案-2-完整代码" class="headerlink" title="方案(2)完整代码"></a>方案(2)完整代码</h3><pre><code>var ws = require(&apos;websocket.io&apos;), 
server = ws.listen(3000);
var child_process = require(&quot;child_process&quot;);
var i = 0;
server.on(&apos;connection&apos;, function (socket) 
{

console.log(&apos;New client connected&apos;);

var ffmpeg = child_process.spawn(&quot;ffmpeg&quot;,[
    &quot;-re&quot;,&quot;-i&quot;,
    &quot;A.mp3&quot;,
    &quot;-ac&quot;,&quot;1&quot;,&quot;-f&quot;,
    &quot;f32le&quot;,
    &quot;pipe:1&quot;                     // Output to STDOUT
    ]);

 ffmpeg.stdout.on(&apos;data&apos;, function(data)
 {
    var buff = new Buffer(data);
    //做了base64编码，非必要
    socket.send(buff.toString(&apos;base64&apos;));
 });
});</code></pre><h3 id="3-客户端WebSocket连接接收数据并处理"><a href="#3-客户端WebSocket连接接收数据并处理" class="headerlink" title="3.客户端WebSocket连接接收数据并处理"></a>3.客户端WebSocket连接接收数据并处理</h3><p>base64解码函数：</p>
<pre><code>var base64EncodeChars = &quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;;
            var base64DecodeChars = new Array(-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 62, -1, -1, -1, 63, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, -1, -1, -1, -1, -1, -1, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, -1, -1, -1, -1, -1, -1, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, -1, -1, -1, -1, -1);

            //base64解码 
            function base64decode(str) {
                var c1, c2, c3, c4;
                var i, len, out;
                len = str.length;
                i = 0;
                out = &quot;&quot;;
                while(i &lt; len) {
                    /* c1 */
                    do {
                        c1 = base64DecodeChars[str.charCodeAt(i++) &amp; 0xff];
                    }
                    while (i &lt; len &amp;&amp; c1 == -1);
                    if(c1 == -1)
                        break;
                    /* c2 */
                    do {
                        c2 = base64DecodeChars[str.charCodeAt(i++) &amp; 0xff];
                    }
                    while (i &lt; len &amp;&amp; c2 == -1);
                    if(c2 == -1)
                        break;
                    out += String.fromCharCode((c1 &lt;&lt; 2) | ((c2 &amp; 0x30) &gt;&gt; 4));
                    /* c3 */
                    do {
                        c3 = str.charCodeAt(i++) &amp; 0xff;
                        if(c3 == 61)
                            return out;
                        c3 = base64DecodeChars[c3];
                    }
                    while (i &lt; len &amp;&amp; c3 == -1);
                    if(c3 == -1)
                        break;
                    out += String.fromCharCode(((c2 &amp; 0XF) &lt;&lt; 4) | ((c3 &amp; 0x3C) &gt;&gt; 2));
                    /* c4 */
                    do {
                        c4 = str.charCodeAt(i++) &amp; 0xff;
                        if(c4 == 61)
                            return out;
                        c4 = base64DecodeChars[c4];
                    }
                    while (i &lt; len &amp;&amp; c4 == -1);
                    if(c4 == -1)
                        break;
                    out += String.fromCharCode(((c3 &amp; 0x03) &lt;&lt; 6) | c4);
                }
                return out;
            }</code></pre><p>初始化AudioContext</p>
<pre><code>var audio = document.querySelector(&apos;audio&apos;);
            window.AudioContext = window.AudioContext || window.webkitAudioContext;
            var context = new AudioContext();
            var audioBuffer = null;
            //var context = null;
            window.addEventListener(&apos;load&apos;, init, false);

            function init() {
                try {
                    context = new AudioContext();
                } catch(e) {
                    alert(&apos;Web Audio API is not supported in this browser&apos;);
                }
            }</code></pre><p>将base64解码后的string转为ArrayBuffer</p>
<pre><code>function str2ab(str) {
                var buf = new ArrayBuffer(str.length); // 2 bytes for each char
                var bufView = new Uint8Array(buf);
                for(var i = 0, strLen = str.length; i &lt; strLen; i++) {
                    bufView[i] = str.charCodeAt(i);
                }
                return buf;
            }</code></pre><p>继续封装，作为context的数据源</p>
<pre><code>var d1 = str2ab(decs)
                var d2 = new DataView(d1);
                //PCM流为f32格式
                var data = new Float32Array(d2.byteLength / Float32Array.BYTES_PER_ELEMENT);
                for(var jj = 0; jj &lt; data.length; ++jj) {
                    data[jj] = d2.getFloat32(jj * Float32Array.BYTES_PER_ELEMENT, true);
                }

                var audioBuffer = context.createBuffer(2, data.length, 44100);
                audioBuffer.getChannelData(0).set(data);

                var source = context.createBufferSource(); // creates a sound source
                source.buffer = audioBuffer;
                source.connect(context.destination); // connect the source to the context&apos;s destination (the speakers)
                source.start(0);</code></pre><p>客户端完整代码</p>
<pre><code>&lt;!DOCTYPE html&gt;
&lt;html&gt;

    &lt;head&gt;
        &lt;meta name=&quot;viewport&quot; content=&quot;width=320, initial-scale=1&quot; /&gt;
        &lt;title&gt;jsmpeg streaming&lt;/title&gt;
        &lt;style type=&quot;text/css&quot;&gt;
            body {
                background: #333;
                text-align: center;
                margin-top: 10%;
            }

            #videoCanvas {
                /* Always stretch the canvas to 640x480, regardless of its
            internal size. */
                width: 640px;
                height: 480px;
            }
        &lt;/style&gt;
        &lt;script src=&apos;http://code.jquery.com/jquery-1.9.1.min.js&apos;&gt;&lt;/script&gt;
    &lt;/head&gt;

    &lt;body&gt;
        &lt;!-- The Canvas size specified here is the &quot;initial&quot; internal resolution. jsmpeg will
        change this internal resolution to whatever the source provides. The size the
        canvas is displayed on the website is dictated by the CSS style.
    --&gt;

        &lt;audio controls autoplay&gt;
            &lt;p&gt;
                Please use a browser that supports the Canvas Element, like
                &lt;a href=&quot;http://www.google.com/chrome&quot;&gt;Chrome&lt;/a&gt;,
                &lt;a href=&quot;http://www.mozilla.com/firefox/&quot;&gt;Firefox&lt;/a&gt;,
                &lt;a href=&quot;http://www.apple.com/safari/&quot;&gt;Safari&lt;/a&gt; or Internet Explorer 10
            &lt;/p&gt;
        &lt;/audio&gt;
        &lt;script type=&quot;text/javascript&quot;&gt;
            var base64EncodeChars = &quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;;
            var base64DecodeChars = new Array(-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 62, -1, -1, -1, 63, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, -1, -1, -1, -1, -1, -1, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, -1, -1, -1, -1, -1, -1, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, -1, -1, -1, -1, -1);

            function base64decode(str) {
                var c1, c2, c3, c4;
                var i, len, out;
                len = str.length;
                i = 0;
                out = &quot;&quot;;
                while(i &lt; len) {
                    /* c1 */
                    do {
                        c1 = base64DecodeChars[str.charCodeAt(i++) &amp; 0xff];
                    }
                    while (i &lt; len &amp;&amp; c1 == -1);
                    if(c1 == -1)
                        break;
                    /* c2 */
                    do {
                        c2 = base64DecodeChars[str.charCodeAt(i++) &amp; 0xff];
                    }
                    while (i &lt; len &amp;&amp; c2 == -1);
                    if(c2 == -1)
                        break;
                    out += String.fromCharCode((c1 &lt;&lt; 2) | ((c2 &amp; 0x30) &gt;&gt; 4));
                    /* c3 */
                    do {
                        c3 = str.charCodeAt(i++) &amp; 0xff;
                        if(c3 == 61)
                            return out;
                        c3 = base64DecodeChars[c3];
                    }
                    while (i &lt; len &amp;&amp; c3 == -1);
                    if(c3 == -1)
                        break;
                    out += String.fromCharCode(((c2 &amp; 0XF) &lt;&lt; 4) | ((c3 &amp; 0x3C) &gt;&gt; 2));
                    /* c4 */
                    do {
                        c4 = str.charCodeAt(i++) &amp; 0xff;
                        if(c4 == 61)
                            return out;
                        c4 = base64DecodeChars[c4];
                    }
                    while (i &lt; len &amp;&amp; c4 == -1);
                    if(c4 == -1)
                        break;
                    out += String.fromCharCode(((c3 &amp; 0x03) &lt;&lt; 6) | c4);
                }
                return out;
            }

            var audio = document.querySelector(&apos;audio&apos;);
            window.AudioContext = window.AudioContext || window.webkitAudioContext;
            var context = new AudioContext();
            var audioBuffer = null;
            //var context = null;
            window.addEventListener(&apos;load&apos;, init, false);

            function init() {
                try {
                    context = new AudioContext();
                } catch(e) {
                    alert(&apos;Web Audio API is not supported in this browser&apos;);
                }
            }

            function str2ab(str) {
                var buf = new ArrayBuffer(str.length); // 2 bytes for each char
                var bufView = new Uint8Array(buf);
                for(var i = 0, strLen = str.length; i &lt; strLen; i++) {
                    bufView[i] = str.charCodeAt(i);
                }
                return buf;
            }
            var ws = new WebSocket(&quot;ws://localhost:3000/&quot;);
            //ws.binaryType = &quot;arraybuffer&quot;;
            ws.onmessage = function(message) {
                //console.log(message);
                var decs = base64decode(message.data);
                //var obj = new Uint8Array();
                //obj= decs.split(&quot;&quot;);
                console.log(decs);
                var d1 = str2ab(decs)
                var d2 = new DataView(d1);
                //PCM流为f32格式
                var data = new Float32Array(d2.byteLength / Float32Array.BYTES_PER_ELEMENT);
                for(var jj = 0; jj &lt; data.length; ++jj) {
                    data[jj] = d2.getFloat32(jj * Float32Array.BYTES_PER_ELEMENT, true);
                }

                var audioBuffer = context.createBuffer(2, data.length, 44100);
                audioBuffer.getChannelData(0).set(data);

                var source = context.createBufferSource(); // creates a sound source
                source.buffer = audioBuffer;
                source.connect(context.destination); // connect the source to the context&apos;s destination (the speakers)
                source.start(0);
            };
        &lt;/script&gt;
    &lt;/body&gt;

&lt;/html&gt;</code></pre><h3 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h3><p>数据量太大，不利于网络传输。<br>实现简单，当然并没有什么卵用，权当学习。<br>可能唯一有用的就是由于未压缩，音频无损。</p>
<h2 id="AAC-MP3-FLAC-ALAC-直播"><a href="#AAC-MP3-FLAC-ALAC-直播" class="headerlink" title="AAC/MP3/FLAC/ALAC 直播"></a>AAC/MP3/FLAC/ALAC 直播</h2><p>上述编码格式压缩率高，适合网络传输。<br>自己做解码肯定是不靠谱的，当然我们后面可以对其进行定制，后话了。<br>网上找到了一个js音频解码框架aurora.js<br><strong>github wiki:</strong><a href="https://github.com/audiocogs/aurora.js/wiki" target="_blank" rel="noopener">https://github.com/audiocogs/aurora.js/wiki</a><br>严格意义上来说，他只是用来初始化解码器和音频播放的。<br>传输过来的音频数据，第一包会带有这些音频编码信息的数据，交由aurora.js处理后，识别是哪一种音频编码格式后，再调用具体的JS解码器去做解码，解码后的数据交由aurora去渲染。</p>
<p>注：JS解码器需要另外添加文件，aurora中并没有，需要解什么数据就引入相应的JS文件</p>
<blockquote>
<p>这里是作者的<a href="https://github.com/audiocogs" target="_blank" rel="noopener">所有工程</a>，里面都可以找到src文件。<br>当然，如果想直接用aac.js/mp3.js等，可以看这个<a href="http://audiocogs.org/codecs/flac/" target="_blank" rel="noopener">demo</a>,复制里面的js文件即可</p>
</blockquote>
<h3 id="先来个用XHR访问服务器文件，进行解码播放的。"><a href="#先来个用XHR访问服务器文件，进行解码播放的。" class="headerlink" title="先来个用XHR访问服务器文件，进行解码播放的。"></a>先来个用XHR访问服务器文件，进行解码播放的。</h3><p>很简单，把test.aac文件放到HTTP服务器下<br>客户端这样写就可以了</p>
<pre><code>&lt;!DOCTYPE html&gt;
&lt;html&gt;

    &lt;head&gt;
        &lt;meta charset=&quot;UTF-8&quot;&gt;
        &lt;title&gt;&lt;/title&gt;
        &lt;script src=&quot;aurora.js&quot;&gt;&lt;/script&gt;
        &lt;script src=&quot;aac.js&quot;&gt;&lt;/script&gt;
    &lt;/head&gt;

    &lt;body&gt;
        &lt;script&gt;
            var player = AV.Player.fromURL(&apos;http://localhost/testAAC/test.aac&apos;);
            player.play();
        &lt;/script&gt;

    &lt;/body&gt;

&lt;/html&gt;</code></pre><h3 id="用XHR的怎么能算是直播呢！"><a href="#用XHR的怎么能算是直播呢！" class="headerlink" title="用XHR的怎么能算是直播呢！"></a>用XHR的怎么能算是直播呢！</h3><p>有人对aurora的数据获取过程做了一个修改，改用websocket<br>见：<a href="https://github.com/fabienbrooke/aurora-websocket" target="_blank" rel="noopener">aurora-websocket</a></p>
<p>流程相对上面那个复杂一点点。<br>1.server:D:\nodejs\projects\aurora_ws_aac\server.js<br>代码应该很好懂，是live_pcm的第一种做法<br>如下：</p>
<pre><code>var http = require(&apos;http&apos;);
var connect = require(&apos;connect&apos;);
var ws = require(&apos;ws&apos;);

// Consume the ffmpeg audio stream
var audio_consumer = http.createServer( function(req, res) {
    console.log(&apos;Audio Stream Connected: &apos; + req.socket.remoteAddress);
    req.on(&apos;data&apos;, function(data){
        //When video data arrives, send to all the producer&apos;s clients
        for (var i in audio_producer.clients){
            audio_producer.clients[i].send(data, {binary:true});
        };
    });

    req.on(&apos;end&apos;, function () {
        res.end(&quot;Thanks&quot;);
    }); 

    req.on(&apos;error&apos;, function(e) {
        console.log(&quot;ERROR ERROR: &quot; + e.message);
    });
}).listen(8081, &quot;127.0.0.1&quot;);


var audio_producer = new ws.Server({port: 8071});
audio_producer.on(&apos;connection&apos;, function(socket) {

    console.log(&apos;Audio Client Connected&apos;); 

    socket.on(&apos;close&apos;, function(code, message){
        console.log( &apos;Disconnected Audio WebSocket (&apos;+audio_producer.clients.length+&apos; total)&apos; );
    });
});

console.log(&apos;Awaiting ws Audio Connections on http://127.0.0.1:8071/&apos;);</code></pre><p>8071端口用于获取ffmpeg的推流<strong><code>[audio_producer]</code></strong><br>8081端口用于通过websocket推送数据给Web端<strong><code>[audio_consumer]</code></strong><br>Web端也是很简单的代码：</p>
<pre><code>&lt;!DOCTYPE html&gt;
&lt;html&gt;

    &lt;head&gt;
        &lt;meta charset=&quot;UTF-8&quot;&gt;
        &lt;title&gt;&lt;/title&gt;
        &lt;script src=&quot;jquery-1.11.1.min.js&quot;&gt;&lt;/script&gt;
        &lt;script src=&quot;aurora.js&quot;&gt;&lt;/script&gt;
        &lt;script src=&quot;aac.js&quot;&gt;&lt;/script&gt;
        &lt;script src=&quot;aurora-websocket.min.js&quot;&gt;&lt;/script&gt;
        &lt;script type=&quot;text/javascript&quot;&gt;
            //&lt;![CDATA[
            $(document).ready(function() {
                var player=AV.Player.fromWebSocket(&apos;ws://localhost:8071&apos;);
                player.play();
            });
            //]]&gt;
        &lt;/script&gt;
    &lt;/head&gt;

    &lt;body&gt;
        &lt;!--&lt;script&gt;
            var player = AV.Player.fromURL(&apos;http://localhost/testAAC/test.aac&apos;);
            player.play();
        &lt;/script&gt;--&gt;

    &lt;/body&gt;

&lt;/html&gt;</code></pre><p>好了，现在我们开启server，HTTP服务器，访问<br><a href="http://localhost/testAAC/test.html" target="_blank" rel="noopener">http://localhost/testAAC/test.html</a> 。<br>然后再进行ffmpeg推流</p>
<pre><code>ffmpeg -re -i d://test.aac http://127.0.0.1:8081/a.aac</code></pre><p><strong>a.aac解释：</strong><br>反正要送到8081端口，后面可以指定一个a.aac，可以理解为文件容器吧。<br>否则由于前面不指定-f，直接送到<a href="http://127.0.0.1:8081/会报*`Invalid" target="_blank" rel="noopener">http://127.0.0.1:8081/会报*`Invalid</a> argument错误`*</p>
<h3 id="测试结果："><a href="#测试结果：" class="headerlink" title="测试结果："></a><strong>测试结果：</strong></h3><p>ffmpeg一进行推送，web端马上就可以播放。</p>
<h3 id="优点："><a href="#优点：" class="headerlink" title="优点："></a><strong>优点：</strong></h3><p>音频压缩率高，跨平台。这样应该算是绝对大的优势了吧。</p>
<h3 id="存在的问题及解决方案："><a href="#存在的问题及解决方案：" class="headerlink" title="存在的问题及解决方案："></a><strong>存在的问题及解决方案：</strong></h3><p><strong>问题1:不支持IE11。</strong><br>描述：IE11虽然支持WebSocket,但是不支持Web Audio API。所以也就不能通过AudioContext播放解码后的pcm数据。<br><strong>解决方案：</strong> IE只存在于PC端，那么我们就没必要一定用H5的方案了，可以直接用flash的解决方案：rtmp</p>
<p><del>~ <strong>问题2：client必须先连接server再进行推流，不是先推流client随时连上都可以播放。</strong> ~</del><br><del>~ 描述：先连上再推流，是为了获取前几包里面的数据用来初始化解码器。如果没有获取到的话，会自动报错。目前我们的应用场景是后推流的，所以这个问题对我来说不是问题。当然考虑以后的拓展，有以下解决方案。</del><br><del>~ <strong>解决方案：</strong> ~</del><br><del>(1)server获取ffmpeg推流的时候，保存前几包数据【当然这边需要了解编码格式】到内存。client connect连接后，server判断是否ffmpeg已经推流到server过了，推流过则补发编码信息包。</del><br><del>(2)js这边做一个限定，和live_pcm一样，编码信息都固定好，这样就比较没有可拓展性。</del><br>【20160825更新】</p>
<blockquote>
<p> aac等编码有分带内传输还是带外传输。<br><strong>带内传输</strong>就是每一帧都会带有编码信息，适应编码不断编码的情况，相应携带的数据就会比较多；<br><strong>带外传输</strong>第一包就指定了编码信息，后面的帧都按这个编码信息来。不能适应编码修改情况，未处理情况下不能从流中间播放，相应的携带数据会比较少。<br>实验测试aurora都是支持的。</p>
</blockquote>
<h1 id="aurora-js源码解析"><a href="#aurora-js源码解析" class="headerlink" title="aurora.js源码解析"></a>aurora.js源码解析</h1>]]></content>
      <categories>
        <category>流媒体</category>
      </categories>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>H5视频直播—JSMPEG源码解析、视频压缩编码、MPEG-1标准</title>
    <url>/2016/08/17/2016-2017%E7%9B%B4%E6%92%AD%E7%9B%B8%E5%85%B3/H5%E8%A7%86%E9%A2%91%E7%9B%B4%E6%92%AD%E2%80%94JSMPEG%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%E3%80%81%E8%A7%86%E9%A2%91%E5%8E%8B%E7%BC%A9%E7%BC%96%E7%A0%81%E3%80%81MPEG-1%E6%A0%87%E5%87%86/</url>
    <content><![CDATA[<h1 id="jsmpeg是什么？"><a href="#jsmpeg是什么？" class="headerlink" title="jsmpeg是什么？"></a>jsmpeg是什么？</h1><pre><code>https://github.com/phoboslab/jsmpeg</code></pre><p>一个<a href="http://baike.baidu.com/link?url=IdDNfUYYiss4iUee-J5RKHujDyCinU3pO07wdRGuMfEHw9Ih3OaoOHbCRwTuMT_ktsTwTgvniHVHVrmBZu3G8K" target="_blank" rel="noopener">mpeg-1</a> video的js解码库</p>
<a id="more"></a>

<h1 id="jsmpeg可以用来干什么？"><a href="#jsmpeg可以用来干什么？" class="headerlink" title="jsmpeg可以用来干什么？"></a>jsmpeg可以用来干什么？</h1><p>利用ffmpeg采集视频源并推送到node.js服务器<br>nodejs利用ws模块*[基于tcp]*将数据包转发到网页，利用该js进行解码，提供canvas渲染<br>最后的效果就是浏览器能够实时看到视频源的数据</p>
<blockquote>
<p>使用方法请参考github<br>本电脑使用记录</p>
</blockquote>
<pre><code>1. cd到对应目录D:\nodejs\projects\live_audio 
2. node stream-server.js ququ 9091 9092
3. ffmpeg -f dshow -i video=&quot;Integrated Webcam&quot;  -f mpeg1video -b 500k -r 20 -vf scale=640:360  http://localhost:9091/ququ/640/360</code></pre><h1 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h1><p>基本直播场景都可以用到<strong>[注意是基于tcp的]</strong><br>但是注意！！这个是只有视频 没有音频<br>PS:关于音频以及利用流媒体协议或封装格式做同步的下篇文章会写到</p>
<!--more-->

<h1 id="mpeg-1-video-简介"><a href="#mpeg-1-video-简介" class="headerlink" title="mpeg-1 video 简介"></a>mpeg-1 video 简介</h1><blockquote>
<p>随机访问<br>灵活的帧率<code>（最大25帧/s）</code><br>可变的图像尺寸<code>(最大720*576)</code><br>定义了<code>I-帧</code>、<code>P-帧（参考之前的I或P）</code>和<code>B-帧（参考前后的I或P 实时流不用这个）</code><br>运动补偿可跨越多个帧<br>半像素精度的运动向量 、量化矩阵、GOF结构 、slice结构<br>版权：free</p>
</blockquote>
<p><strong>满足多达16路以上25帧/秒的压缩速度，在500kbit/s的压缩码流和352像素×288行的清晰度下，每帧大小仅为2k</strong></p>
<h1 id="mpeg-1-video-编码简介"><a href="#mpeg-1-video-编码简介" class="headerlink" title="mpeg-1 video 编码简介"></a>mpeg-1 video 编码简介</h1><p>这边只是说一下简单的做法，或者说是视频编码的基本做法 忽略了很多细节..<br>h164和mpeg1都是在此基础上进行改进的</p>
<p>参考</p>
<blockquote>
<p><a href="http://blog.jobbole.com/95862/" target="_blank" rel="noopener">http://blog.jobbole.com/95862/</a><br><a href="http://blog.csdn.net/leixiaohua1020/article/details/28114081" target="_blank" rel="noopener">http://blog.csdn.net/leixiaohua1020/article/details/28114081</a></p>
</blockquote>
<h2 id="（1）I帧-I-frames"><a href="#（1）I帧-I-frames" class="headerlink" title="（1）I帧(I-frames)"></a>（1）I帧(I-frames)</h2><p>不依赖于其他视频帧<br>帧内压缩，jpeg编码技术,采用离散余弦变换DCT的压缩技术，GOP(帧组)的第一帧且一组只有一个I帧，不考虑运动矢量</p>
<h3 id="变换编码-二维DCT"><a href="#变换编码-二维DCT" class="headerlink" title="变换编码-二维DCT"></a>变换编码-二维DCT</h3><ol>
<li>假设一帧图像的大小为1280 * 720，首先将其以网格状的形式分成160 * 90个尺寸为8 * 8的彼此没有重叠的图像块</li>
<li>每个8 * 8点的图像块被送入DCT编码器，将8 * 8的图像块从空间域变换为频率域</li>
<li>一个实际8*8图像块[亮度值] 相邻像素亮度值差距不大<br><img src="http://img.blog.csdn.net/20140602173641875?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbGVpeGlhb2h1YTEwMjA=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="请输入图片描述">  </li>
<li>图像块经过DCT变换后的系数<br><img src="http://img.blog.csdn.net/20140602173658734?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbGVpeGlhb2h1YTEwMjA=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="图像块经过DCT变换后的系数"></li>
</ol>
<p>从图中可以看出，左上角(低频系数)集中大量能量，右下角(高频系数)能量小</p>
<ol start="5">
<li>量化-有损压缩。人眼对低频敏感对高频不敏感，故对低频区的系数进行细量化，高频区的系数进行粗量化。<br><strong>量化公式</strong>：<img src="http://img.blog.csdn.net/20140602173713140?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbGVpeGlhb2h1YTEwMjA=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="请输入图片描述"></li>
</ol>
<p>其中<code>FQ（u,v）</code>表示经过量化后的DCT系数；<br><code>F（u,v）</code>表示量化前的DCT系数；<br><code>Q（u,v）</code>表示量化加权矩阵；<br><code>q</code>表示量化步长；<br><code>round</code>表示归整，即将输出的值取为与之最接近的整数值。<br>合理选择量化系数，对变换后的图像块进行量化后的结果如图所示。<br><img src="http://img.blog.csdn.net/20140602173723046?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbGVpeGlhb2h1YTEwMjA=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="请输入图片描述"></p>
<p>DCT系数量化后大部分为变为0，将少部分非0值进行压缩编码即可。</p>
<h3 id="熵编码"><a href="#熵编码" class="headerlink" title="熵编码"></a>熵编码</h3><p> 多用可变字长编码(VLC) 实现<br>基本原理是对信源中<strong>出现概率大的符号赋予短码</strong>，对于<strong>出现概率小的符号赋予长码</strong>，从而在统计上获得较短的平均码长。<br>游程编码<code>[常用，压缩效率不高，但编解码快]</code><br>参考：<a href="http://blog.jobbole.com/79758/" target="_blank" rel="noopener">计算机算法：数据压缩之游程编码</a><br>实现：</p>
<ol>
<li>在上图量化DCT时对结果进行<code>Z-型扫描</code>化为一维序列(按图箭头方向)</li>
<li>将该一维序列进行游程编码</li>
<li>对编码后的数据再次进行VLC ( 比如 <code>Huffman</code>编码<h2 id="（2）P帧"><a href="#（2）P帧" class="headerlink" title="（2）P帧"></a>（2）P帧</h2>播放解码时需要依赖于前面已解码的参考帧<br>需要帧存储器 <blockquote>
<p>PS:解码时如果都依赖I帧就比较简单，保存一份I帧数据到帧存储器即可，否则由于不知道参考的哪一帧 需要保存GOP里的所有I P到帧存储器</p>
</blockquote>
</li>
</ol>
<p>编码时直接拿前面参考帧的未编码数据</p>
<h3 id="运动预测"><a href="#运动预测" class="headerlink" title="运动预测"></a>运动预测</h3><p>将参考帧(P1,可以是I帧也可以是P帧)，预测帧(P2,待编码的P帧) 分块(例如将图像分割成n个16*16图像块)<br>定义两个颜色的误差为：</p>
<pre><code>PixelDiff(c1, c2) = (c1- c2) ^ 2</code></pre><p>两个图像块之间的误差即16*16个PixelDiff的sum</p>
<pre><code>int block_diff(const unsigned char b1[16][16], const unsigned char b2[16][16]) { 
    int sum = 0; 
    for (int i = 0; i &lt; 16; i++) { 
         for (int j = 0; j &lt; 16; j++) { 
              int c1 = b1[i][j]; 
              int c2 = b2[i][j]; 
              sum += (c1 – c2) * (c1 – c2); 
         } 
    } 
    return sum; 
}</code></pre><p>P2中每一个block找出上一帧中相似度最高的block坐标，并记录下来<br>做法可以直接2个for循环(暴力)<br>当然实际中不可能这么暴力搜索，而是围绕P2中该block对应坐标在P1中位置作为中心，慢慢四周扩散，搜索<strong><em>一定步长,在一定误差范围内的宏块坐标</em></strong>。<br>所以结果是，P2进行运动预测编码的结果就是一大堆(x,y)的坐标，代表P2上每个block在上一帧P1里面最相似的 block的位置</p>
<h3 id="P帧编码"><a href="#P帧编码" class="headerlink" title="P帧编码"></a>P帧编码</h3><p>刚才的运动预测矢量（一堆block的坐标），我们先用P1按照这些数据拼凑出一张类似P2的新图片叫做P2’，然后同P2上<strong>每个像素</strong>做减法，得到一张保存differ的图片：</p>
<pre><code>D = (P2 – P2′) / 2 </code></pre><p>用一个 <code>8位的整数(只够表示256个数字)</code> 可以表示 [-255, 255] 之间的误差范围，步长精度是2。</p>
<blockquote>
<p>即-2 -3映射到-1 (1000001) 解码时*2即可</p>
</blockquote>
<p>由于是 <strong>图片细节的修改</strong>，比起I帧这种一整张图的图片 <strong>熵要低很多</strong>，占的空间也比较小<br>然后将D用类似于jpeg的算法进行编码 <strong><code>[DCT+熵编码]</code></strong><br>故P帧的完整编码为：</p>
<pre><code>Encode(P2)=记录P1 block位置(x,y)的矩阵+类jpeg有损图像编码(D)</code></pre><h2 id="（3）GOP"><a href="#（3）GOP" class="headerlink" title="（3）GOP"></a>（3）GOP</h2><p>实时传输收到B帧无法播放，这里就不介绍B帧了，一般 I P 就足够了<br>一个GOP是这样的 I P1 P2 P3 P4…<br>一般 P1 - Pn 都参考I 就好了， 虽然参考P可以得到更高的压缩空间</p>
<h2 id="（4）视频容器"><a href="#（4）视频容器" class="headerlink" title="（4）视频容器"></a>（4）视频容器</h2><p>mpg 记录视频信息，比如分辨率，帧率，时间索引</p>
<h2 id="（5）优化"><a href="#（5）优化" class="headerlink" title="（5）优化"></a>（5）优化</h2><p>编码效率优化：追求同质量（同信噪比）下更低的码率<br>编码性能优化：追求同样质量和码率的情况下，更快的编码速度。</p>
<h1 id="混合编码模型"><a href="#混合编码模型" class="headerlink" title="混合编码模型"></a>混合编码模型</h1><p><img src="http://img.blog.csdn.net/20140602173439593?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbGVpeGlhb2h1YTEwMjA=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="请输入图片描述"></p>
<p>应用于MPEG1，MPEG2，H.264等标准中</p>
<h1 id="MPEG1-标准"><a href="#MPEG1-标准" class="headerlink" title="MPEG1 标准"></a>MPEG1 标准</h1><p>与刚刚所说的简单编码所谓的优化。<br>MPEG1是保存的是YCbCr的4:2:2<br>关于YCbCr可以参考<a href="http://blog.sina.com.cn/s/blog_a85e142101010h8n.html" target="_blank" rel="noopener">RGB、YUV和YCbCr</a></p>
<p>待更新。。</p>
]]></content>
      <categories>
        <category>流媒体</category>
      </categories>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>adb控制avd</title>
    <url>/2016/07/13/2016-2017%E7%9B%B4%E6%92%AD%E7%9B%B8%E5%85%B3/adb%E6%8E%A7%E5%88%B6avd/</url>
    <content><![CDATA[<h2 id="1-显示所有avd"><a href="#1-显示所有avd" class="headerlink" title="1.显示所有avd"></a>1.显示所有avd</h2><a id="more"></a>

<pre><code>android list avd
示例输出
Available Android Virtual Devices:
    Name: Nexus_5_API_23
  Device: Nexus 5 (Google)
    Path: C:\Users\zhengjx\.android\avd\Nexus_5_API_23.avd
  Target: Android 6.0 (API level 23)
 Tag/ABI: google_apis/x86_64
    Skin: nexus_5
  Sdcard: 100M
---------
    Name: Nexus_6
  Device: Nexus 6 (Google)
    Path: C:\Users\zhengjx\.android\avd\Nexus_6.avd
  Target: Android 6.0 (API level 23)
 Tag/ABI: google_apis/x86
    Skin: nexus_6
  Sdcard: 100M</code></pre><!--more-->


<h2 id="2-启动模拟器："><a href="#2-启动模拟器：" class="headerlink" title="2.启动模拟器："></a>2.启动模拟器：</h2><pre><code>emulator -avd 模拟器名称   
示例
emulator -avd Nexus_6
开始该模拟器后cmd窗口堵塞
此时可另开启一个窗口操作命令(手动情况下)
ps:Ctrl+C 可关闭该模拟器</code></pre><h2 id="3-查看活动的avd"><a href="#3-查看活动的avd" class="headerlink" title="3.查看活动的avd"></a>3.查看活动的avd</h2><pre><code>adb devices

示例输出
List of devices attached
emulator-5554   device
HT49NYC00215    device  (该设备是真机)</code></pre><h2 id="4-对该avd进行操作"><a href="#4-对该avd进行操作" class="headerlink" title="4.对该avd进行操作"></a>4.对该avd进行操作</h2><pre><code>avd -s &lt;avd编号&gt; 命令
例：
adb -s emulator-5554 shell input keyevent 3  //模拟按home键

adb -s emulator-5554 shell input tap 250 250 //模拟单击&lt;x,y&gt;位置

adb -s emulator-5554 shell input swipe 250 250 400 400 500//模拟滑动&lt;p1,p2,滑动的时间ms&gt;</code></pre><h3 id="题外话"><a href="#题外话" class="headerlink" title="题外话"></a>题外话</h3><p>ffmpeg 通过 gdigrab 无法直接录制avd</p>
<pre><code>ffmpeg -f gdigrab -i desktop out.mpg</code></pre><p>画面是黑屏的 且带有手机外观 </p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>adb</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu 14下ffmpeg2.6编译和剪裁(librtmp,h264,aac) 及Android开发</title>
    <url>/2016/07/10/2016-2017%E7%9B%B4%E6%92%AD%E7%9B%B8%E5%85%B3/Ubuntu%2014%E4%B8%8Bffmpeg2.6%E7%BC%96%E8%AF%91%E5%92%8C%E5%89%AA%E8%A3%81(librtmp,h264,aac)%20%E5%8F%8AAndroid%E5%BC%80%E5%8F%91/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本来写的是最新版3.0的 但是遇到太多坑，编译老错 换老版本的2.6</p>
<h2 id="配置Java环境"><a href="#配置Java环境" class="headerlink" title="配置Java环境"></a>配置Java环境</h2><p><strong>如果只是编译ffmpeg 该步骤非必要，仅是做个记录</strong><br>从<a href="http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html" target="_blank" rel="noopener">http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html</a>下载jdk8</p>
<p>下载完文件默认在 <code>~/Downloads</code></p>
<a id="more"></a>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">~# cd Downloads</span><br><span class="line">~&#x2F;Downloads# sudo mkdir &#x2F;usr&#x2F;java       &#x2F;&#x2F;创建目录用于存放</span><br><span class="line">~&#x2F;Downloads# sudo tar zxvf jdk-8u91-linux-x64.tar.gz -C &#x2F;usr&#x2F;java &#x2F;&#x2F;解压</span><br><span class="line">~&#x2F;Downloads# cd &#x2F;usr&#x2F;java&#x2F;</span><br><span class="line">&#x2F;usr&#x2F;java# sudo mv jdk-8u91-linux-x64  jdk8  &#x2F;&#x2F;改名,后面配置就比较方便</span><br><span class="line">&#x2F;usr&#x2F;java# sudo gedit &#x2F;etc&#x2F;environment</span><br><span class="line">&#x2F;&#x2F;如果发现错误，可能是gedit的命令(usr&#x2F;bin)没添加到系统环境下</span><br><span class="line">&#x2F;&#x2F;如果不能访问 就chmod 777 &#x2F;etc&#x2F;environment  </span><br><span class="line">&#x2F;&#x2F;并且在environment中配置的只有root用户有效 且关闭终端后无效因此配置在&#x2F;etc&#x2F;profile最好</span><br><span class="line">&#x2F;&#x2F;再这里我们可以用gedit的全路径 也可以用vim</span><br><span class="line">&#x2F;&#x2F; 先按照</span><br><span class="line">sudo apt-get install vim</span><br><span class="line">&#x2F;usr&#x2F;java# sudo vim &#x2F;etc&#x2F;profile</span><br><span class="line">&#x2F;&#x2F;vim命令：dd删除一样 yy复制一行 p粘贴 在environment中加入</span><br><span class="line"> export JAVA_HOME&#x3D;&#x2F;usr&#x2F;java&#x2F;jdk8</span><br><span class="line"> export JRE_HOME&#x3D;&#x2F;usr&#x2F;java&#x2F;jdk8&#x2F;jre</span><br><span class="line"> export CLASSPATH&#x3D;.:$JAVA_HOME&#x2F;lib:$JRE_HOME&#x2F;lib:$CLASSPATH</span><br><span class="line"> export PATH&#x3D;$JAVA_HOME&#x2F;bin:$JRE_HOME&#x2F;bin:$PATH</span><br><span class="line"> &gt; ubuntu启动后 先加载environment再加载profile</span><br><span class="line"> &#x2F;&#x2F;注意 要按顺序写 比如JAVA_HOME写在后面 PATH的$JAVA_HOME就是空了</span><br><span class="line"> &#x2F;&#x2F;:wq 保存退出</span><br><span class="line"> 注意 要重启。且注意这边配置要小心 否则会开不了机</span><br><span class="line"> java -version 查看jdk版本 输出信息则成功</span><br></pre></td></tr></table></figure>

<h2 id="配置android-linux-NDK以及SDK"><a href="#配置android-linux-NDK以及SDK" class="headerlink" title="配置android linux NDK以及SDK"></a>配置android linux NDK以及SDK</h2><p>如果只是编译ffmpeg 只要下载sdk ndk并配置环境就可以</p>
<h3 id="Android-studio-2-1-download"><a href="#Android-studio-2-1-download" class="headerlink" title="Android studio 2.1 download"></a>Android studio 2.1 download</h3><p>参考：<a href="https://developer.android.com/studio/install.html" target="_blank" rel="noopener">https://developer.android.com/studio/install.html</a><br>下载<code>android studio 2.1</code><br><a href="https://developer.android.com/studio/index.html" target="_blank" rel="noopener">https://developer.android.com/studio/index.html</a> (拖到下面有各种版本)</p>
<pre><code>/usr# sudo mkdir android
~/Downloads# unzip xxx.zip -d /usr/android 将xxx文件解压到android目录下</code></pre><p><code>Note</code>: If you are running <code>a 64-bit version of Ubuntu</code>, you need to install some 32-bit libraries with the following command:</p>
<pre><code>sudo apt-get install lib32z1 lib32ncurses5 lib32bz2-1.0 lib32stdc++6</code></pre><p>利用<code>/bin/studio.sh</code>可以启动<code>android-studio</code></p>
<pre><code>Tip: Add android-studio/bin/ to your PATH environment variable so you can start Android Studio from any directory.</code></pre><p>运行<code>studio.sh</code></p>
<pre><code>`error:`unable to detect graphics environment
xdg_runtime_dir not set in the environment

参考 http://www.cnblogs.com/gaodong/p/3463152.html
加上 `export DISPLAY=:0.0`</code></pre><p>切换到界面窗口<br> 按步骤安装 可以选择之前下好的sdk</p>
<p>然后创建 helloworld项目 运行..（话说，真是卡。。）</p>
<p>还是用命令吧..</p>
<h3 id="配置-sdk-ndk-环境变量"><a href="#配置-sdk-ndk-环境变量" class="headerlink" title="配置 sdk ndk 环境变量"></a>配置 sdk ndk 环境变量</h3><p>sdk下载<a href="https://developer.android.com/studio/index.html" target="_blank" rel="noopener">https://developer.android.com/studio/index.html</a> 下方<br>ndk下载<a href="https://developer.android.com/ndk/downloads/index.html" target="_blank" rel="noopener">https://developer.android.com/ndk/downloads/index.html</a></p>
<p>类似配置：<code>PATH=$PATH:/home/android_sdk/tools:/home/android_sdk/ndk</code></p>
<h2 id="从ffmpeg官网下载ffmpeg源码包"><a href="#从ffmpeg官网下载ffmpeg源码包" class="headerlink" title="从ffmpeg官网下载ffmpeg源码包"></a>从ffmpeg官网下载ffmpeg源码包</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://git.ffmpeg.org/ffmpeg.git ffmpeg</span><br><span class="line"><span class="comment"># 没安装git的先安装</span></span><br><span class="line">sudo apt-get install git</span><br></pre></td></tr></table></figure>

<h2 id="修改-ffmpeg-configure-文件"><a href="#修改-ffmpeg-configure-文件" class="headerlink" title="修改 ffmpeg/configure 文件"></a>修改 ffmpeg/configure 文件</h2><p>将该文件</p>
<pre><code>SLIBNAME_WITH_MAJOR=&apos;$(SLIBNAME).$(LIBMAJOR)&apos;
LIB_INSTALL_EXTRA_CMD=&apos;$$(RANLIB)&quot;$(LIBDIR)/$(LIBNAME)&quot;&apos;
SLIB_INSTALL_NAME=&apos;$(SLIBNAME_WITH_VERSION)&apos;
SLIB_INSTALL_LINKS=&apos;$(SLIBNAME_WITH_MAJOR)$(SLIBNAME)&apos;</code></pre><p>修改为：</p>
<pre><code>SLIBNAME_WITH_MAJOR=&apos;$(SLIBPREF)$(FULLNAME)-$(LIBMAJOR)$(SLIBSUF)&apos;
LIB_INSTALL_EXTRA_CMD=&apos;$$(RANLIB)&quot;$(LIBDIR)/$(LIBNAME)&quot;&apos;
SLIB_INSTALL_NAME=&apos;$(SLIBNAME_WITH_MAJOR)&apos;
SLIB_INSTALL_LINKS=&apos;$(SLIBNAME)&apos;</code></pre><p>这样编译出来的so命名才符合android的使用</p>
<p>接下来这些参考：<a href="https://trac.ffmpeg.org/wiki/CompilationGuide/Ubuntu" target="_blank" rel="noopener">https://trac.ffmpeg.org/wiki/CompilationGuide/Ubuntu</a></p>
<h2 id="安装类库"><a href="#安装类库" class="headerlink" title="安装类库"></a>安装类库</h2><h3 id="安装基本的工具类库"><a href="#安装基本的工具类库" class="headerlink" title="安装基本的工具类库"></a>安装基本的工具类库</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install build-essential checkinstall git libfaac-dev libjack-jackd2-dev   libmp3lame-dev libopencore-amrnb-dev libopencore-amrwb-dev libsdl1.2-dev libtheora-dev    libva-dev libvdpau-dev libvorbis-dev libx11-dev libxfixes-dev texi2html zlib1g-dev       libssl1.0.0 libssl-dev libxvidcore-dev libxvidcore4 libass-dev</span><br></pre></td></tr></table></figure>

<h3 id="Yasm"><a href="#Yasm" class="headerlink" title="Yasm"></a>Yasm</h3><p>一个汇编程序被推荐用于x264 和 ffmpeg (只要解码不知道这样要不要装 蛮装了<br>如果 库中 yasm package ≥ 1.2.0 可以这样</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo apt-get install yasm</span><br></pre></td></tr></table></figure>

<p>否则只能</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/ffmpeg_sources</span><br><span class="line">wget http://www.tortall.net/projects/yasm/releases/yasm-1.3.0.tar.gz</span><br><span class="line">tar xzvf yasm-1.3.0.tar.gz</span><br><span class="line"><span class="built_in">cd</span> yasm-1.3.0</span><br><span class="line">./configure --prefix=<span class="string">"<span class="variable">$HOME</span>/ffmpeg_build"</span> --bindir=<span class="string">"<span class="variable">$HOME</span>/bin"</span></span><br><span class="line">make</span><br><span class="line">make install</span><br><span class="line">make distclean</span><br></pre></td></tr></table></figure>
<h3 id="libx264"><a href="#libx264" class="headerlink" title="libx264"></a>libx264</h3><p>更多的详见<a href="https://trac.ffmpeg.org/wiki/CompilationGuide/Ubuntu" target="_blank" rel="noopener">https://trac.ffmpeg.org/wiki/CompilationGuide/Ubuntu</a><br>我只需要解码的 这边我就不需要安装了</p>
<h3 id="librtmp的支持"><a href="#librtmp的支持" class="headerlink" title="librtmp的支持"></a>librtmp的支持</h3><p>自带的rtmp只能支持播放非直播的 <code>rtmp(live !=1)</code>，而添加 librtmp 之后是可以播放直播的视频 并支持多种格式(rtmp://, rtmpt://, rtmpe://, rtmpte://,以及 rtmps://协议)</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/src</span><br><span class="line">git <span class="built_in">clone</span> git://git.ffmpeg.org/rtmpdump</span><br><span class="line"><span class="built_in">cd</span> rtmpdump</span><br><span class="line">make SYS=posix</span><br><span class="line">sudo checkinstall --pkgname=rtmpdump --pkgversion=<span class="string">"2:<span class="variable">$(date +%Y%m%d%H%M)</span>-git"</span> --backup=no  --deldoc=yes --fstrans=no --default</span><br></pre></td></tr></table></figure>

<h3 id="编译脚本和配置选项"><a href="#编译脚本和配置选项" class="headerlink" title="编译脚本和配置选项"></a>编译脚本和配置选项</h3><p>参考<a href="https://github.com/dxjia/ffmpeg-compile-shared-library-for-android" target="_blank" rel="noopener">https://github.com/dxjia/ffmpeg-compile-shared-library-for-android</a></p>
<ol>
<li><p>指定临时目录</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> TMPDIR=/home/gahing/tmpdir</span><br></pre></td></tr></table></figure>
</li>
<li><p>指定NDK路径</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">NDK&#x3D;&#x2F;home&#x2F;Downloads&#x2F;android-linux-sdk&#x2F;android-ndk-r12b</span><br></pre></td></tr></table></figure>
</li>
<li><p>指定使用NDK Platform版本</p>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SYSROOT&#x3D;$NDK&#x2F;platforms&#x2F;android-16&#x2F;arch-arm&#x2F;</span><br></pre></td></tr></table></figure>

<p>一定要选择比你的目标机器使用的版本低的</p>
<ol start="4">
<li>指定编译工具链</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">TOOLCHAIN&#x3D;$ND</span><br><span class="line">K&#x2F;toolchains&#x2F;arm-linux-androideabi-4.9&#x2F;prebuilt&#x2F;linux-x86_64</span><br></pre></td></tr></table></figure>
<ol start="5">
<li>指定编译后的安装目录</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PREFIX&#x3D;&#x2F;home&#x2F;gahing&#x2F;ffmpeg_shared_compile&#x2F;arm</span><br></pre></td></tr></table></figure>

<p>示例脚本1 支持所有的编解码器 arm版本</p>
<p>#!/bin/bash<br>export TMPDIR=/home/gahing/tmpdir<br>PREFIX=$HOME/ffmpeg_shared_compile/<br>NDK=/home/gahing/Downloads/android-sdk-linux/android-ndk-r12b<br>SYSROOT=$NDK/platforms/android-16/arch-arm/<br>TOOLCHAIN=$NDK/toolchains/arm-linux-androideabi-4.9/prebuilt/linux-x86_64<br>CPU=arm<br>ADDI_CFLAGS=”-marm”<br>function build_one<br>{<br>./configure <br>–prefix=$PREFIX <br>–enable-shared <br>–disable-static <br>–disable-doc <br>–disable-ffmpeg <br>–disable-ffplay <br>–disable-ffprobe <br>–disable-ffserver <br>–disable-doc <br>–disable-symver <br>–enable-small <br>–cross-prefix=$TOOLCHAIN/bin/arm-linux-androideabi- <br>–target-os=linux <br>–arch=arm <br>–enable-cross-compile <br>–sysroot=$SYSROOT <br>–extra-cflags=”-Os -fpic $ADDI_CFLAGS” <br>–extra-ldflags=”$ADDI_LDFLAGS” <br>$ADDITIONAL_CONFIGURE_FLAG<br>make clean<br>make<br>make install<br>}<br>build_one</p>
<p>so的全部文件大概8~9M</p>
<p>示例脚本2 本章题目的要求（该脚本有问题 待解救）</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">make clean</span><br><span class="line"><span class="built_in">export</span> TMPDIR=/home/gahing/tmpdir</span><br><span class="line">PREFIX=<span class="variable">$HOME</span>/ffmpeg_shared_compile/</span><br><span class="line">NDK=/home/gahing/Downloads/android-sdk-linux/android-ndk-r12b</span><br><span class="line">SYSROOT=<span class="variable">$NDK</span>/platforms/android-16/arch-arm/</span><br><span class="line">TOOLCHAIN=<span class="variable">$NDK</span>/toolchains/arm-linux-androideabi-4.9/prebuilt/linux-x86_64</span><br><span class="line">CPU=arm</span><br><span class="line">ADDI_CFLAGS=<span class="string">"-marm"</span></span><br><span class="line"><span class="keyword">function</span> build_one</span><br><span class="line">&#123;</span><br><span class="line">./configure \</span><br><span class="line">--prefix=<span class="variable">$PREFIX</span> \</span><br><span class="line">--<span class="built_in">enable</span>-shared \</span><br><span class="line">--<span class="built_in">disable</span>-static \</span><br><span class="line">--<span class="built_in">disable</span>-avdevice \</span><br><span class="line">--<span class="built_in">disable</span>-avfilter \</span><br><span class="line">--<span class="built_in">disable</span>-network \</span><br><span class="line">--<span class="built_in">disable</span>-encoders \</span><br><span class="line">--<span class="built_in">disable</span>-doc \</span><br><span class="line">--<span class="built_in">disable</span>-ffmpeg \</span><br><span class="line">--<span class="built_in">disable</span>-ffplay \</span><br><span class="line">--<span class="built_in">disable</span>-ffprobe \</span><br><span class="line">--<span class="built_in">disable</span>-ffserver \</span><br><span class="line">--<span class="built_in">disable</span>-doc \</span><br><span class="line">--<span class="built_in">disable</span>-symver \</span><br><span class="line">--<span class="built_in">disable</span>-muxers \</span><br><span class="line">--<span class="built_in">disable</span>-demuxers \</span><br><span class="line">--<span class="built_in">disable</span>-debug  \</span><br><span class="line">--<span class="built_in">disable</span>-yasm \</span><br><span class="line">--<span class="built_in">disable</span>-parsers \</span><br><span class="line">--<span class="built_in">disable</span>-decoders \</span><br><span class="line">--<span class="built_in">disable</span>-everything \</span><br><span class="line">--<span class="built_in">enable</span>-nonfree \</span><br><span class="line">--<span class="built_in">enable</span>-gpl  \</span><br><span class="line">--<span class="built_in">enable</span>-postproc  \</span><br><span class="line">--<span class="built_in">enable</span>-vdpau \</span><br><span class="line">--<span class="built_in">enable</span>-librtmp \</span><br><span class="line">--<span class="built_in">enable</span>-decoder=h264 \</span><br><span class="line">--<span class="built_in">enable</span>-decoder=aac  \</span><br><span class="line">--<span class="built_in">enable</span>-decoder=h264_vdpau\</span><br><span class="line">--<span class="built_in">enable</span>-parser=aac \</span><br><span class="line">--<span class="built_in">enable</span>-parser=h264 \</span><br><span class="line">--<span class="built_in">enable</span>-protocol=rtmp \</span><br><span class="line">--<span class="built_in">enable</span>-small \</span><br><span class="line">--cross-prefix=<span class="variable">$TOOLCHAIN</span>/bin/arm-linux-androideabi- \</span><br><span class="line">--target-os=linux \</span><br><span class="line">--arch=arm \</span><br><span class="line">--<span class="built_in">enable</span>-cross-compile \</span><br><span class="line">--sysroot=<span class="variable">$SYSROOT</span> \</span><br><span class="line">--extra-cflags=<span class="string">"-Os -fpic <span class="variable">$ADDI_CFLAGS</span>"</span> \</span><br><span class="line">--extra-ldflags=<span class="string">"<span class="variable">$ADDI_LDFLAGS</span>"</span> \</span><br><span class="line"><span class="variable">$ADDITIONAL_CONFIGURE_FLAG</span>  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line">build_one  </span><br><span class="line">  </span><br><span class="line">make  </span><br><span class="line">make install</span><br></pre></td></tr></table></figure>



<ol start="6">
<li>生成so</li>
</ol>
<p>运行脚本后 <code>$PREFIX</code> 目录下生成 include和lib两个文件夹，将lib文件夹中的 pkgconfig 目录和so的链接文件删除，只保留so文件，然后将include 和lib两个目录一起copy到你的apk jni下去编译</p>
<p>之后可以参考<br><a href="http://blog.csdn.net/leixiaohua1020/article/details/47008825" target="_blank" rel="noopener">http://blog.csdn.net/leixiaohua1020/article/details/47008825</a></p>
<p>eclipse下编写jni参考<a href="http://www.cnblogs.com/skyseraph/p/3979238.html" target="_blank" rel="noopener">http://www.cnblogs.com/skyseraph/p/3979238.html</a></p>
]]></content>
      <categories>
        <category>流媒体</category>
      </categories>
      <tags>
        <tag>ffmpeg</tag>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>Android开发技巧</title>
    <url>/2016/04/13/2016-2017%E7%9B%B4%E6%92%AD%E7%9B%B8%E5%85%B3/Android%E5%BC%80%E5%8F%91%E6%8A%80%E5%B7%A7/</url>
    <content><![CDATA[<h2 id="单步调试"><a href="#单步调试" class="headerlink" title="单步调试"></a>单步调试</h2><p><code>F6</code> <code>Step Over</code> 程序向下执行一行（如果当前行有方法调用，不进入方法体，直接到下一行）</p>
<p><code>F5</code> <code>Step Into</code> 程序向下执行一行（如果该行有自定义方法，则运行进入自定义方法（不会进入官方类库的方法）会进入Log方法，算是bug吗？</p>
<p><code>Alt+Shift+F7</code>  <code>Force Step Into</code> 任何方法都会进入</p>
<p><code>F7</code> <code>Step Out</code>  跳出当前方法，返回到该方法被调用处的下一行语句。tips:循环代码段，执行Step Out将跳过一次循环.</p>
<p><code>Ctrl + R</code> <code>Run to Cursor</code> 直接到光标处</p>
<p><code>Drop Frame</code> 返回当前方法的调用处重新执行，上下文变量也恢复如初。未测试过..</p>
<a id="more"></a>

<h2 id="高级调试"><a href="#高级调试" class="headerlink" title="高级调试"></a>高级调试</h2><h3 id="跨断点"><a href="#跨断点" class="headerlink" title="跨断点"></a>跨断点</h3><p>点击右三角按钮(Resume Program) <code>F8</code> ,进入下一断点。（两断点间代码已执行完毕</p>
<p>注：断点打在循环上的话，下一断点还是循环体</p>
<h3 id="设置变量值"><a href="#设置变量值" class="headerlink" title="设置变量值"></a>设置变量值</h3><p>变量右键 set value</p>
<h3 id="查看断点View-BreakPoints-Ctrl-Shift-F8"><a href="#查看断点View-BreakPoints-Ctrl-Shift-F8" class="headerlink" title="查看断点View BreakPoints Ctrl+Shift_F8"></a>查看断点<code>View BreakPoints</code> <code>Ctrl+Shift_F8</code></h3><p>两个重叠圈的按钮，弹出一个界面.</p>
<p>可以设置条件断点 满足条件时暂停程序运行.</p>
<p>该做法更灵活，定位快。</p>
<h2 id="Log"><a href="#Log" class="headerlink" title="Log"></a>Log</h2><p>logt : TAG<br>logm : 带方法、参数的Log.d<br>logd : 带方法的Log.d</p>
<p>##AS 项目结构</p>
<p><code>*.iml</code>文件 as项目结构的配置文件</p>
<p>project :demo 与此同时它也是一个跟module 所以在根路径下点make module 会有demo和子module</p>
<p>module : 默认app 可添加多个，一般一个主工程 其他的为sdk</p>
<h2 id="SVN-使用"><a href="#SVN-使用" class="headerlink" title="SVN 使用"></a>SVN 使用</h2><p>取消与SVN的关联/找不到Share Project(Subversion)</p>
<p>在Project模式下有个.idea文件夹,找到vcs.xml文件,把里面的vcs=”svn”改为vcs=””即可。</p>
<h2 id="SVN-设置过滤"><a href="#SVN-设置过滤" class="headerlink" title="SVN 设置过滤"></a>SVN 设置过滤</h2><p>方法一、在项目的.idea/workspace.xml的文件里设置</p>
<?xml version="1.0" encoding="UTF-8"?><p><br>    <project><br>        <component name="ChangeListManager"><br>            …<br>        <ignored path=".gradle/" /><br>        <ignored path=".idea/" /><br>        <ignored path="gradle/" /><br>        <ignored path="项目名/build/" /><br>        <ignored path="gradlew" /><br>        <ignored path="gradlew.bat" /><br>        <ignored mask="*.iml" /><br>        <ignored path="local.properties" /><br>        <ignored path="build/" /><br>        <ignored mask="*.apk" /><br>        </component><br>        …<br>    </project>  </p>
<p>白色主题的：黄色表示被过滤 绿色为未过滤</p>
<h2 id="Mark-Resolved"><a href="#Mark-Resolved" class="headerlink" title="Mark Resolved"></a>Mark Resolved</h2><p>出现冲突后，我方不能提交，此时只要将冲突文件标记解决冲突后，即可提交</p>
<h2 id="版本控制自动add-可以再setting里设置"><a href="#版本控制自动add-可以再setting里设置" class="headerlink" title="版本控制自动add 可以再setting里设置"></a>版本控制自动add 可以再setting里设置</h2><p>目前发现commit就直接push到远端svn了 而不是 等希望push commits的时候再push</p>
<p>待解决</p>
<h2 id="获取当前应用的方向"><a href="#获取当前应用的方向" class="headerlink" title="获取当前应用的方向"></a>获取当前应用的方向</h2><p>开个service,定时去获取或按需获取</p>
<pre><code>int screenWidth = getWindowManager().getDefaultDisplay().getWidth();
                    int screenHeight = getWindowManager().getDefaultDisplay().getHeight();
                    Log.d(&quot;ori&quot;, &quot;now the screen width is :&quot; + screenWidth + &quot;screen height is:&quot; + screenHeight);
                    if(screenWidth&gt;screenHeight){
                        Log.d(&quot;ori&quot;, &quot;横屏 &quot;);
                    }else{
                        Log.d(&quot;ori&quot;, &quot;竖屏 &quot;);
                    }</code></pre><h2 id="禁止状态栏下拉和导航栏上拉"><a href="#禁止状态栏下拉和导航栏上拉" class="headerlink" title="禁止状态栏下拉和导航栏上拉"></a>禁止状态栏下拉和导航栏上拉</h2><p>见 <code>Android模拟触控解决方案.md</code></p>
<h2 id="so包和Android系统"><a href="#so包和Android系统" class="headerlink" title="so包和Android系统"></a>so包和Android系统</h2><p><a href="http://www.jianshu.com/p/cb05698a1968" target="_blank" rel="noopener">http://www.jianshu.com/p/cb05698a1968</a></p>
<h2 id="Inflate使用"><a href="#Inflate使用" class="headerlink" title="Inflate使用"></a>Inflate使用</h2><p><a href="http://www.sxt.cn/info-9373-u-14124.html" target="_blank" rel="noopener">http://www.sxt.cn/info-9373-u-14124.html</a></p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
  </entry>
</search>
